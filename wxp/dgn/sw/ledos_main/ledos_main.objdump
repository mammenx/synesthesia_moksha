
ledos_main.elf:     file format elf32-littlenios2
ledos_main.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00180238

Program Header:
    LOAD off    0x00001000 vaddr 0x00180000 paddr 0x00180000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00180020 paddr 0x00180020 align 2**12
         filesz 0x0001f600 memsz 0x0001f600 flags r-x
    LOAD off    0x00020620 vaddr 0x0019f620 paddr 0x001a11d8 align 2**12
         filesz 0x00001bb8 memsz 0x00001bb8 flags rw-
    LOAD off    0x00022d90 vaddr 0x001a2d90 paddr 0x001a2d90 align 2**12
         filesz 0x00000000 memsz 0x00000540 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00180000  00180000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00180020  00180020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b1d8  00180238  00180238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004210  0019b410  0019b410  0001c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb8  0019f620  001a11d8  00020620  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000540  001a2d90  001a2d90  00022d90  2**2
                  ALLOC, SMALL_DATA
  6 .sram         00000000  001a32d0  001a32d0  000221d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000221d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000013d0  00000000  00000000  00022200  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034bdf  00000000  00000000  000235d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d093  00000000  00000000  000581af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001086b  00000000  00000000  00065242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000039e4  00000000  00000000  00075ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00006876  00000000  00000000  00079494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001bb3a  00000000  00000000  0007fd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0009b844  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d00  00000000  00000000  0009b858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 0000000c  00000000  00000000  000a212f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000a213b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a213e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a213f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000a2140  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000a214b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000a2156  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000a2161  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  000a2167  2**0
                  CONTENTS, READONLY
 26 .jdi          00003727  00000000  00000000  000a2194  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050fd3  00000000  00000000  000a58bb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00180000 l    d  .entry	00000000 .entry
00180020 l    d  .exceptions	00000000 .exceptions
00180238 l    d  .text	00000000 .text
0019b410 l    d  .rodata	00000000 .rodata
0019f620 l    d  .rwdata	00000000 .rwdata
001a2d90 l    d  .bss	00000000 .bss
001a32d0 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/WorK/github/synesthesia_moksha/wxp/dgn/sw/limbus_bsp//obj/HAL/src/crt0.o
00180270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 adv7513.c
001802ec l     F .text	000000c0 adv7513_video_out_format.constprop.4
0019bc88 l     O .rodata	000000f0 vic_table.3924
00000000 l    df *ABS*	00000000 edid.c
00181470 l     F .text	0000003c eb_establish_timing
0019e75c l     O .rodata	00000040 sad_format.4208
0019e66c l     O .rodata	000000f0 vic_table.4223
001a1190 l     O .rwdata	00000008 header.4319
00000000 l    df *ABS*	00000000 encoder.c
00000000 l    df *ABS*	00000000 aud_codec.c
00000000 l    df *ABS*	00000000 acortex.c
0019ee84 l     O .rodata	00000018 fs2bosr_lookup
0019ee9c l     O .rodata	00000018 fs2sr_lookup
0019eeb4 l     O .rodata	00000018 fs2fs_div_lookup
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 pcm_bffr.c
00000000 l    df *ABS*	00000000 ssm2603_drvr.c
00000000 l    df *ABS*	00000000 cortex.c
00000000 l    df *ABS*	00000000 fgyrus.c
00000000 l    df *ABS*	00000000 sys_mem_intf.c
00000000 l    df *ABS*	00000000 ledos.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00187cac l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0019f443 l     O .rodata	00000010 zeroes.4255
0018b334 l     F .text	000000bc __sbprintf
0019f453 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0018b544 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0018d128 l     F .text	00000008 __fp_lock
0018d130 l     F .text	00000008 __fp_unlock
0018d144 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0019f620 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0019fa64 l     O .rwdata	00000020 lc_ctype_charset
0019fa44 l     O .rwdata	00000020 lc_message_charset
0019fa84 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0019f47c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0019059c l     F .text	000000fc __sprint_r.part.0
0019f5a0 l     O .rodata	00000010 zeroes.4200
0019f5b0 l     O .rodata	00000010 blanks.4199
001919c4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 chthreads.c
00195780 l     F .text	00000040 list_insert
001957c0 l     F .text	00000040 list_remove
00000000 l    df *ABS*	00000000 chvt.c
00000000 l    df *ABS*	00000000 chcoreasm.o
001961a8 l       .text	00000000 _port_thread_start_loop
00000000 l    df *ABS*	00000000 alt_close.c
00196224 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0019634c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00196378 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00196750 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0019684c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00196930 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00196ddc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
001a11cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00197060 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
001971b0 l     F .text	00000038 alt_dev_reg
001a006c l     O .rwdata	00001060 jtag_uart_0
001a10cc l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
001974c0 l     F .text	00000204 altera_avalon_jtag_uart_irq
001976c4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00197ce4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00197f98 l     F .text	00000098 altera_avalon_uart_irq
00198030 l     F .text	000000e0 altera_avalon_uart_rxirq
00198110 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
001982a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
001984d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 chdynamic.c
00000000 l    df *ABS*	00000000 chheap.c
001a2dfc l     O .bss	0000001c default_heap
00000000 l    df *ABS*	00000000 chmemcore.c
001a2dc0 l     O .bss	00000004 nextmem
001a2dc4 l     O .bss	00000004 endmem
00000000 l    df *ABS*	00000000 chmempools.c
00000000 l    df *ABS*	00000000 chmtx.c
00199294 l     F .text	00000094 prio_insert
00199328 l     F .text	00000050 fifo_remove
00199378 l     F .text	0000004c dequeue
00000000 l    df *ABS*	00000000 chschd.c
00199a00 l     F .text	00000050 fifo_remove
00199a50 l     F .text	0000004c dequeue
00199c74 l     F .text	000000a0 wakeup
00000000 l    df *ABS*	00000000 chsys.c
001a2e18 l     O .bss	00000050 mainthread.2333
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0019a440 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0019a6a4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0019a7fc l     F .text	00000050 alt_get_errno
0019a84c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 chregistry.c
00000000 l    df *ABS*	00000000 chcore.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
001a2dc8 g     O .bss	00000004 alt_instruction_exception_handler
0019901c g     F .text	00000060 chPoolInit
0018914c g     F .text	00000018 putchar
0018faa8 g     F .text	00000074 _mprec_log10
00186798 g     F .text	00000078 aud_codec_read_reg
0018fb94 g     F .text	0000008c __any_on
00192098 g     F .text	00000054 _isatty_r
0019f488 g     O .rodata	00000028 __mprec_tinytens
00196a5c g     F .text	00000090 alt_main
001878c8 g     F .text	00000024 configure_drvr_bps
0019a1bc g     F .text	00000128 chSysTimerHandlerI
00195df0 g     F .text	00000048 chThdExit
00189164 g     F .text	000000a8 _puts_r
00199d14 g     F .text	000000a0 chSchGoSleepTimeoutS
001a2fec g     O .bss	00000100 alt_irq
001920ec g     F .text	0000005c _lseek_r
001a11d8 g       *ABS*	00000000 __flash_rwdata_start
00194204 g     F .text	00000084 .hidden __eqdf2
001875ec g     F .text	0000000c get_i2c_addr
00199460 g     F .text	0000015c chMtxLockS
00180b08 g     F .text	00000244 adv7513_int_handler
00198914 g     F .text	000000c8 chThdCreateFromMemoryPool
00187870 g     F .text	00000018 disable_dac_drvr
001a32d0 g       *ABS*	00000000 __alt_heap_start
00189108 g     F .text	0000003c printf
0019961c g     F .text	00000078 chMtxTryLockS
001921a4 g     F .text	0000009c _wcrtomb_r
001806cc g     F .text	000000c0 adv7513_edid_read
00198c74 g     F .text	000001a0 chHeapFree
00180000 g       *ABS*	00000000 __alt_mem_sram
00190494 g     F .text	0000005c __sseek
0018d488 g     F .text	00000010 __sinit
00191a80 g     F .text	00000138 __swbuf_r
0018df40 g     F .text	0000007c _setlocale_r
001a2d90 g     O .bss	00000002 aud_codec_i2c_bffr
0018d2e0 g     F .text	00000078 __sfmoreglue
00196b0c g     F .text	00000020 __malloc_unlock
001882e0 g     F .text	00000450 .hidden __divsf3
001873b8 g     F .text	000000ec disable_audio_path
0018ea68 g     F .text	0000015c memmove
001874a4 g     F .text	000000f4 pcm_cap
0018d470 g     F .text	00000018 _cleanup
0018ebc4 g     F .text	000000a8 _Balloc
00180420 g     F .text	000000b0 adv7513_hpd_probe
00196d98 g     F .text	00000044 alt_putstr
00199bd8 g     F .text	0000009c chSchGoSleepS
00194288 g     F .text	000000e0 .hidden __gtdf2
0019ac3c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
001803ac g     F .text	00000074 adv7513_chip_identify
00180000 g     F .entry	0000000c __reset
00187904 g     F .text	00000060 dump_drvr_regs
00180020 g       *ABS*	00000000 __flash_exceptions_start
00192040 g     F .text	00000058 _fstat_r
001a2dac g     O .bss	00000004 errno
00190410 g     F .text	00000008 __seofread
001871ec g     F .text	00000034 init_acortex
00195908 g     F .text	00000180 chThdCreateI
001a2db8 g     O .bss	00000004 alt_argv
001a9190 g       *ABS*	00000000 _gp
00187a1c g     F .text	00000038 dump_fgyrus_win_ram
00199db4 g     F .text	000000a0 chSchWakeupS
00199a9c g     F .text	00000080 _scheduler_init
00199e54 g     F .text	0000004c chSchRescheduleS
00195a88 g     F .text	0000008c chThdCreateStatic
001a2e68 g     O .bss	00000100 adv7513_edid
0019feec g     O .rwdata	00000180 alt_fd_list
00189144 g     F .text	00000008 _putchar_r
001876e0 g     F .text	000000fc i2c_xtn_read
0019adb4 g     F .text	00000090 alt_find_dev
00188e80 g     F .text	00000138 memcpy
00187964 g     F .text	00000014 init_cortex
00180610 g     F .text	00000048 adv7513_power_state
0018d138 g     F .text	0000000c _cleanup_r
001875dc g     F .text	00000010 configure_i2c_addr
0019560c g     F .text	000000d0 .hidden __floatsidf
0019a784 g     F .text	00000078 alt_io_redirect
00194368 g     F .text	000000e0 .hidden __ltdf2
00187818 g     F .text	00000010 update_acache_mode
0019b410 g       *ABS*	00000000 __DTOR_END__
00187888 g     F .text	00000014 enable_dac_drvr
0018920c g     F .text	00000014 puts
0019a608 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00199b1c g     F .text	000000bc chSchReadyI
0019ad64  w    F .text	00000028 port_halt
001902f4 g     F .text	00000074 __fpclassifyd
00195f94 g     F .text	00000064 _vt_init
0018fa04 g     F .text	000000a4 __ratio
00198f7c g     F .text	00000074 chCoreAllocI
001919a0 g     F .text	00000024 __vfiprintf_internal
001978c0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
001890dc g     F .text	0000002c _printf_r
00186810 g     F .text	00000038 aud_codec_reset
00187dc8 g     F .text	00000008 .hidden __udivsi3
001967a0 g     F .text	000000ac isatty
001989dc g     F .text	0000005c _heap_init
0019f4d8 g     O .rodata	000000c8 __mprec_tens
00186848 g     F .text	000007b0 aud_codec_dump_regs
0018dfbc g     F .text	0000000c __locale_charset
00187828 g     F .text	00000048 dump_acache_cap_data
00199f18 g     F .text	00000090 chSchDoRescheduleBehind
001879c0 g     F .text	00000010 get_fgyrus_mode
001a2da8 g     O .bss	00000004 __malloc_top_pad
00187598 g     F .text	00000028 get_i2c_status
0019885c g     F .text	000000b8 chThdCreateFromHeap
001a11a0 g     O .rwdata	00000004 __mb_cur_max
0018dfec g     F .text	0000000c _localeconv_r
0018eff8 g     F .text	0000003c __i2b
0018d8ec g     F .text	000004cc __sfvwrite_r
00190368 g     F .text	00000054 _sbrk_r
00192148 g     F .text	0000005c _read_r
00198e14 g     F .text	000000c0 chHeapStatus
001a11c0 g     O .rwdata	00000004 alt_max_fd
00191d5c g     F .text	000000f0 _fclose_r
0018d0f8 g     F .text	00000030 fflush
001a2da4 g     O .bss	00000004 __malloc_max_sbrked_mem
00188c90 g     F .text	00000110 .hidden __extendsfdf2
001805e4 g     F .text	0000002c adv7513_do_hpd_powerdown
00192fe8 g     F .text	0000089c .hidden __adddf3
001870b4 g     F .text	00000014 aud_codec_update_iwl
0018f7ac g     F .text	0000011c __b2d
00195e38 g     F .text	000000b8 chThdExitS
001929cc g     F .text	0000061c .hidden __umoddi3
00196980 g     F .text	000000dc lseek
001a1198 g     O .rwdata	00000004 _global_impure_ptr
0018fd8c g     F .text	00000568 _realloc_r
001a32d0 g       *ABS*	00000000 __bss_end
001879a4 g     F .text	0000001c update_fgyrus_mode
00196660 g     F .text	000000f0 alt_iic_isr_register
0019ab38 g     F .text	00000104 alt_tick
001804d0 g     F .text	000000e8 adv7513_do_hpd_powerup
00183694 g     F .text	00000084 edid_decode_extensions
0019238c g     F .text	00000640 .hidden __udivdi3
00191e60 g     F .text	00000184 _fputwc_r
0019f4b0 g     O .rodata	00000028 __mprec_bigtens
0018eddc g     F .text	00000104 __s2b
001956dc g     F .text	000000a4 .hidden __floatunsidf
0018f554 g     F .text	00000060 __mcmp
00197ef0 g     F .text	000000a8 altera_avalon_uart_init
0018d4a8 g     F .text	00000018 __fp_lock_all
00196614 g     F .text	0000004c alt_ic_irq_enabled
0019aaa0 g     F .text	00000098 alt_alarm_stop
001870c8 g     F .text	00000124 aud_codec_init
001a2db0 g     O .bss	00000004 alt_irq_active
00195ff8 g     F .text	00000118 chVTSetI
001800fc g     F .exceptions	000000dc alt_irq_handler
0019fec4 g     O .rwdata	00000028 alt_dev_null
0019a424 g     F .text	0000001c alt_dcache_flush_all
0018eee0 g     F .text	00000068 __hi0bits
00187ac0 g     F .text	00000074 dump_fgyrus_fft_cache
00195584 g     F .text	00000088 .hidden __fixdfsi
001a11d8 g       *ABS*	00000000 __ram_rwdata_end
001a11b8 g     O .rwdata	00000008 alt_dev_list
001970b0 g     F .text	00000100 write
0018fc20 g     F .text	000000a0 _putc_r
001878f8 g     F .text	0000000c configure_drvr_bclk_div
0019f620 g       *ABS*	00000000 __ram_rodata_end
001963c8 g     F .text	000000b8 fstat
0018789c g     F .text	00000018 disable_adc_drvr
00194368 g     F .text	000000e0 .hidden __ledf2
00199408 g     F .text	00000058 chMtxLock
0018f2c4 g     F .text	00000140 __pow5mult
00198ff0 g     F .text	0000002c chCoreStatus
001906b0 g     F .text	000012f0 ___vfiprintf_internal_r
001a2d9c g     O .bss	00000004 __nlocale_changed
00187dd0 g     F .text	00000008 .hidden __umodsi3
0019a094 g     F .text	00000048 chSchDoReschedule
0019a10c g     F .text	000000b0 chSysInit
00195ca4 g     F .text	0000005c chThdSleep
001a32d0 g       *ABS*	00000000 end
001875f8 g     F .text	000000e8 i2c_xtn_write
00198524 g     F .text	000001ac altera_avalon_uart_write
001973fc g     F .text	000000c4 altera_avalon_jtag_uart_init
00187c08 g     F .text	00000078 configure_sys_mem_intf_part
001801d8 g     F .exceptions	00000060 alt_instruction_exception_entry
0019b410 g       *ABS*	00000000 __CTOR_LIST__
00200000 g       *ABS*	00000000 __alt_stack_pointer
00197d58 g     F .text	00000088 alt_avalon_timer_sc_init
00197e40 g     F .text	00000060 altera_avalon_uart_write_fd
00188da0 g     F .text	00000064 .hidden __clzsi2
00197ea0 g     F .text	00000050 altera_avalon_uart_close_fd
00197acc g     F .text	00000218 altera_avalon_jtag_uart_write
0018d498 g     F .text	00000004 __sfp_lock_acquire
0018e980 g     F .text	000000e8 memchr
001892b8 g     F .text	00002058 ___vfprintf_internal_r
0018d5fc g     F .text	000002f0 _free_r
00196b2c g     F .text	00000228 alt_printf
001990f8 g     F .text	00000080 chPoolAllocI
0018078c g     F .text	000000ac adv7513_regmap_dump
0018dfc8 g     F .text	00000010 __locale_mb_cur_max
0019b244 g     F .text	00000194 __call_exitprocs
001878ec g     F .text	0000000c configure_drvr_fs_div
001a2d98 g     O .bss	00000004 __mlocale_changed
001a11a4 g     O .rwdata	00000004 __malloc_sbrk_base
00180238 g     F .text	0000003c _start
00198ed4 g     F .text	00000048 _core_init
001997e0 g     F .text	00000120 chMtxUnlockS
001a2dcc g     O .bss	00000004 _alt_tick_rate
0019907c g     F .text	0000007c chPoolLoadArray
001879d0 g     F .text	0000004c get_fgyrus_status
0019ad8c g     F .text	00000028 port_time_tick
00195be4 g     F .text	00000060 chThdResume
001995bc g     F .text	00000060 chMtxTryLock
0018135c g     F .text	00000114 adv7513_init
0018f404 g     F .text	00000150 __lshift
001a2dd0 g     O .bss	00000004 _alt_nticks
00196e2c g     F .text	00000104 read
0019721c g     F .text	0000007c alt_sys_init
0019b130 g     F .text	00000114 __register_exitproc
00199900 g     F .text	00000100 chMtxUnlockAll
00199178 g     F .text	00000060 chPoolAlloc
00182414 g     F .text	00001280 edid_print_cea
001864f0 g     F .text	00000088 reg_read
0018f034 g     F .text	00000290 __multiply
0019776c g     F .text	00000068 altera_avalon_jtag_uart_close
00187dd8 g     F .text	00000028 .hidden __mulsi3
0019f620 g       *ABS*	00000000 __ram_rwdata_start
0019b410 g       *ABS*	00000000 __ram_rodata_start
00187a54 g     F .text	00000038 dump_fgyrus_twdl_ram
001a2dd4 g     O .bss	00000028 __malloc_current_mallinfo
0018f8c8 g     F .text	0000013c __d2b
001a2fdc g     O .bss	00000010 vtlist
00197298 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0019af58 g     F .text	000000d4 alt_get_fd
00198f1c g     F .text	00000060 chCoreAlloc
00191c30 g     F .text	00000054 _close_r
00198ad0 g     F .text	000001a4 chHeapAlloc
001986d0 g     F .text	00000064 chThdAddRef
00188e04 g     F .text	0000007c memcmp
00197358 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
001a32d0 g       *ABS*	00000000 __alt_stack_base
001973a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
001961ac g       .text	00000000 port_switch
0018b3f0 g     F .text	00000154 __swsetup_r
00193884 g     F .text	00000980 .hidden __divdf3
0018d358 g     F .text	00000118 __sfp
0018fb1c g     F .text	00000078 __copybits
0019fabc g     O .rwdata	00000408 __malloc_av_
0018d4a4 g     F .text	00000004 __sinit_lock_release
00194448 g     F .text	0000086c .hidden __muldf3
001903bc g     F .text	00000054 __sread
00180658 g     F .text	00000074 adv7513_mode_state
0019ae44 g     F .text	00000114 alt_find_file
0019a490 g     F .text	000000a4 alt_dev_llist_insert
00196aec g     F .text	00000020 __malloc_lock
00196fb0 g     F .text	000000b0 sbrk
0018d09c g     F .text	0000005c _fflush_r
00191c84 g     F .text	000000d8 _calloc_r
001a2d90 g       *ABS*	00000000 __bss_start
00186734 g     F .text	00000064 aud_codec_write_reg
00195d00 g     F .text	0000007c chThdSleepUntil
001a2d92 g     O .bss	00000002 adv7513_i2c_bffr
00188fb8 g     F .text	00000124 memset
001802c0 g     F .text	0000002c main
001a2dbc g     O .bss	00000004 alt_envp
001a2da0 g     O .bss	00000004 __malloc_max_total_mem
001972f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00186ff8 g     F .text	000000bc aud_codec_update_field
001a30ec g     O .bss	0000001c rlist
0019ac5c g     F .text	00000070 chRegFirstThread
00191bb8 g     F .text	0000001c __swbuf
001904f0 g     F .text	00000008 __sclose
00200000 g       *ABS*	00000000 __alt_heap_limit
001875c0 g     F .text	00000010 configure_i2c_clk
00191e4c g     F .text	00000014 fclose
0018b76c g     F .text	00001728 _dtoa_r
0018e1d8 g     F .text	000007a8 _malloc_r
00192300 g     F .text	00000030 __ascii_wctomb
00187c80 g     F .text	0000002c init_ledos
001a11c4 g     O .rwdata	00000004 alt_errno
001865bc g     F .text	0000008c reg_update_bits
0018ddb8 g     F .text	000000c4 _fwalk
001877dc g     F .text	0000003c byte_rev_i2c_arry
001993c4 g     F .text	00000044 chMtxInit
0019a0dc g     F .text	00000030 _idle_thread
0018fcc0 g     F .text	000000cc putc
00187d18 g     F .text	00000054 .hidden __divsi3
0018d4d8 g     F .text	00000124 _malloc_trim_r
0019f608 g     O .rodata	00000016 ch_debug
0019b410 g       *ABS*	00000000 __CTOR_END__
00188730 g     F .text	00000450 .hidden __mulsf3
001866bc g     F .text	00000078 reg_clear_bits
001904f8 g     F .text	000000a4 strcmp
0019b410 g       *ABS*	00000000 __flash_rodata_start
0019b410 g       *ABS*	00000000 __DTOR_LIST__
00196198 g       .text	00000000 _port_thread_start
001991d8 g     F .text	0000005c chPoolFreeI
00194204 g     F .text	00000084 .hidden __nedf2
00199fa8 g     F .text	000000ec chSchDoRescheduleAhead
001971e8 g     F .text	00000034 alt_irq_init
00196f30 g     F .text	00000080 alt_release_fd
0019f304 g     O .rodata	00000100 .hidden __clz_tab
001a2d94 g     O .bss	00000004 _PathLocale
00187220 g     F .text	00000198 enable_audio_path
0019b02c g     F .text	00000014 atexit
00191bd4 g     F .text	0000005c _write_r
0018dff8 g     F .text	0000001c setlocale
001a119c g     O .rwdata	00000004 _impure_ptr
001a2db4 g     O .bss	00000004 alt_argc
0018ce94 g     F .text	00000208 __sflush_r
0019a590 g     F .text	0000005c _do_dtors
00180d4c g     F .text	00000494 adv7513_chip_init_3d
0018dfe4 g     F .text	00000008 __locale_cjk_lang
00198734 g     F .text	00000128 chThdRelease
00187978 g     F .text	00000018 disable_fgyrus
00180020 g       .exceptions	00000000 alt_irq_entry
001875d0 g     F .text	0000000c get_i2c_clk
001a3108 g     O .bss	000001c8 _idle_thread_wa
0018f74c g     F .text	00000060 __ulp
0018d4c0 g     F .text	00000018 __fp_unlock_all
00199234 g     F .text	00000060 chPoolFree
00180274 g     F .text	0000004c test_audio_fft
001a11b0 g     O .rwdata	00000008 alt_fs_list
00187990 g     F .text	00000014 enable_fgyrus
00180020 g       *ABS*	00000000 __ram_exceptions_start
0018e014 g     F .text	0000000c localeconv
00199694 g     F .text	0000014c chMtxUnlock
00196480 g     F .text	00000050 alt_ic_isr_register
001a2f68 g     O .bss	00000074 adv7513_encoder
00183718 g     F .text	0000202c edid_decode_v14
001a11d8 g       *ABS*	00000000 _edata
00197de0 g     F .text	00000060 altera_avalon_uart_read_fd
001a32d0 g       *ABS*	00000000 _end
001811e0 g     F .text	0000017c adv7513_int_setup
00180238 g       *ABS*	00000000 __ram_exceptions_end
00196110 g     F .text	00000088 chVTResetI
001977d4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0019b078 g     F .text	0000009c _fputs_r
00196570 g     F .text	000000a4 alt_ic_irq_disable
00186648 g     F .text	00000074 reg_or_bits
00190418 g     F .text	0000007c __swrite
001a11a8 g     O .rwdata	00000004 __malloc_trim_threshold
0018dfd8 g     F .text	0000000c __locale_msgcharset
0019b040 g     F .text	00000038 exit
0018de7c g     F .text	000000c4 _fwalk_reent
00188b80 g     F .text	00000110 .hidden __floatunsisf
0018f5b4 g     F .text	00000198 __mdiff
00186578 g     F .text	00000044 reg_write
00187d6c g     F .text	0000005c .hidden __modsi3
00200000 g       *ABS*	00000000 __alt_data_end
001805b8 g     F .text	0000002c adv7513_kick_up
00180020 g     F .exceptions	00000000 alt_exception
0018d49c g     F .text	00000004 __sfp_lock_release
001878b4 g     F .text	00000014 enable_adc_drvr
00195b14 g     F .text	000000d0 chThdSetPriority
00187b34 g     F .text	000000d4 check_sys_mem_intf_errors
00195ef0 g     F .text	000000a4 chThdWait
00198254 g     F .text	00000054 altera_avalon_uart_close
00199ea0 g     F .text	00000078 chSchIsPreemptionRequired
0019b3d8 g     F .text	00000038 _exit
0019a2e4 g     F .text	00000140 alt_alarm_start
00195800 g     F .text	00000108 _thread_init
0018e020 g     F .text	000001b8 __smakebuf_r
00189220 g     F .text	00000098 strlen
0019a940 g     F .text	00000160 open
00194288 g     F .text	000000e0 .hidden __gedf2
00196d54 g     F .text	00000044 alt_putchar
00195d7c g     F .text	00000074 chThdYield
0019accc g     F .text	00000098 chRegNextThread
001814ac g     F .text	00000f68 edid_decode_cea
00180838 g     F .text	000002d0 adv7513_chip_init
001a11ac g     O .rwdata	00000004 __wctomb
00185744 g     F .text	00000dac edid_print_v14
00190698 g     F .text	00000018 __sprint_r
0019a5ec g     F .text	0000001c alt_icache_flush_all
0019b114 g     F .text	0000001c fputs
001a11c8 g     O .rwdata	00000004 alt_priority_mask
00198a38 g     F .text	00000098 chHeapInit
001964d0 g     F .text	000000a0 alt_ic_irq_enable
0018b310 g     F .text	00000024 __vfprintf_internal
001982f8 g     F .text	000001dc altera_avalon_uart_read
00192330 g     F .text	0000005c _wctomb_r
00194cb4 g     F .text	000008d0 .hidden __subdf3
00187a8c g     F .text	00000034 dump_fgyrus_cordic_ram
0018ef48 g     F .text	000000b0 __lo0bits
001a11d0 g     O .rwdata	00000008 alt_alarm_list
0019a534 g     F .text	0000005c _do_ctors
00192240 g     F .text	000000c0 wcrtomb
00196274 g     F .text	000000d8 close
00195c44 g     F .text	00000060 chThdTerminate
00187e00 g     F .text	000004e0 .hidden __addsf3
001968b0 g     F .text	00000080 alt_load
00191fe4 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
0018d4a0 g     F .text	00000004 __sinit_lock_acquire
0018ec94 g     F .text	00000148 __multadd
0018ec6c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00180000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  180000:	00400634 	movhi	at,24
    ori r1, r1, %lo(_start)
  180004:	08408e14 	ori	at,at,568
    jmp r1
  180008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00180020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  180020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  180024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  180028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  18002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  180030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  180034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  180038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  18003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  180040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  180044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  180048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  18004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  180050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  180054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  180058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  18005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  180060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  180064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  180068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  18006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  180070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  180074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  180078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  18007c:	10000326 	beq	r2,zero,18008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  180080:	20000226 	beq	r4,zero,18008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  180084:	01800fc0 	call	1800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  180088:	00000706 	br	1800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  18008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  180090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  180094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  180098:	01801d80 	call	1801d8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  18009c:	1000021e 	bne	r2,zero,1800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  1800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  1800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  1800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  1800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1800f8:	ef80083a 	eret

001800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1800fc:	defff904 	addi	sp,sp,-28
  180100:	dfc00615 	stw	ra,24(sp)
  180104:	df000515 	stw	fp,20(sp)
  180108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  18010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  180110:	0005313a 	rdctl	r2,ipending
  180114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  180118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  18011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  180120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  180124:	00800044 	movi	r2,1
  180128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  18012c:	e0fffb17 	ldw	r3,-20(fp)
  180130:	e0bffc17 	ldw	r2,-16(fp)
  180134:	1884703a 	and	r2,r3,r2
  180138:	10001426 	beq	r2,zero,18018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  18013c:	008006b4 	movhi	r2,26
  180140:	108bfb04 	addi	r2,r2,12268
  180144:	e0fffd17 	ldw	r3,-12(fp)
  180148:	180690fa 	slli	r3,r3,3
  18014c:	10c5883a 	add	r2,r2,r3
  180150:	10c00017 	ldw	r3,0(r2)
  180154:	008006b4 	movhi	r2,26
  180158:	108bfb04 	addi	r2,r2,12268
  18015c:	e13ffd17 	ldw	r4,-12(fp)
  180160:	200890fa 	slli	r4,r4,3
  180164:	21000104 	addi	r4,r4,4
  180168:	1105883a 	add	r2,r2,r4
  18016c:	10800017 	ldw	r2,0(r2)
  180170:	1009883a 	mov	r4,r2
  180174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  180178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  18017c:	0005313a 	rdctl	r2,ipending
  180180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  180184:	e0bfff17 	ldw	r2,-4(fp)
  180188:	00000706 	br	1801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  18018c:	e0bffc17 	ldw	r2,-16(fp)
  180190:	1085883a 	add	r2,r2,r2
  180194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  180198:	e0bffd17 	ldw	r2,-12(fp)
  18019c:	10800044 	addi	r2,r2,1
  1801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1801a4:	003fe106 	br	18012c <__alt_data_end+0xfff8012c>

    active = alt_irq_pending ();
  1801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  1801ac:	e0bffb17 	ldw	r2,-20(fp)
  1801b0:	103fdb1e 	bne	r2,zero,180120 <__alt_data_end+0xfff80120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1801b4:	0199ea00 	call	199ea0 <chSchIsPreemptionRequired>
  1801b8:	10803fcc 	andi	r2,r2,255
  1801bc:	10000126 	beq	r2,zero,1801c4 <alt_irq_handler+0xc8>
  1801c0:	019a0940 	call	19a094 <chSchDoReschedule>
}
  1801c4:	e037883a 	mov	sp,fp
  1801c8:	dfc00117 	ldw	ra,4(sp)
  1801cc:	df000017 	ldw	fp,0(sp)
  1801d0:	dec00204 	addi	sp,sp,8
  1801d4:	f800283a 	ret

001801d8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  1801d8:	defffb04 	addi	sp,sp,-20
  1801dc:	dfc00415 	stw	ra,16(sp)
  1801e0:	df000315 	stw	fp,12(sp)
  1801e4:	df000304 	addi	fp,sp,12
  1801e8:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  1801ec:	00bfffc4 	movi	r2,-1
  1801f0:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  1801f4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  1801f8:	d0a70e17 	ldw	r2,-25544(gp)
  1801fc:	10000726 	beq	r2,zero,18021c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  180200:	d0a70e17 	ldw	r2,-25544(gp)
  180204:	e0fffd17 	ldw	r3,-12(fp)
  180208:	1809883a 	mov	r4,r3
  18020c:	e17fff17 	ldw	r5,-4(fp)
  180210:	e1bffe17 	ldw	r6,-8(fp)
  180214:	103ee83a 	callr	r2
  180218:	00000206 	br	180224 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  18021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  180220:	0005883a 	mov	r2,zero
}
  180224:	e037883a 	mov	sp,fp
  180228:	dfc00117 	ldw	ra,4(sp)
  18022c:	df000017 	ldw	fp,0(sp)
  180230:	dec00204 	addi	sp,sp,8
  180234:	f800283a 	ret

Disassembly of section .text:

00180238 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  180238:	06c00834 	movhi	sp,32
    ori sp, sp, %lo(__alt_stack_pointer)
  18023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  180240:	068006b4 	movhi	gp,26
    ori gp, gp, %lo(_gp)
  180244:	d6a46414 	ori	gp,gp,37264
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  180248:	008006b4 	movhi	r2,26
    ori r2, r2, %lo(__bss_start)
  18024c:	108b6414 	ori	r2,r2,11664

    movhi r3, %hi(__bss_end)
  180250:	00c006b4 	movhi	r3,26
    ori r3, r3, %lo(__bss_end)
  180254:	18ccb414 	ori	r3,r3,13008

    beq r2, r3, 1f
  180258:	10c00326 	beq	r2,r3,180268 <_start+0x30>

0:
    stw zero, (r2)
  18025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  180260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  180264:	10fffd36 	bltu	r2,r3,18025c <__alt_data_end+0xfff8025c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  180268:	01968b00 	call	1968b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  18026c:	0196a5c0 	call	196a5c <alt_main>

00180270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  180270:	003fff06 	br	180270 <__alt_data_end+0xfff80270>

00180274 <test_audio_fft>:
	alt_u16 b16[256];
	alt_u32 i;
	alt_u32 lbffr[128];
	alt_u32 rbffr[128];

  alt_putstr("Hello from Nios II!\n");
  180274:	010006b4 	movhi	r4,26
#include "sys/alt_stdio.h"
#include "ledos/ledos.h"
#include "ch.h"

int test_audio_fft()
{ 
  180278:	deffff04 	addi	sp,sp,-4
	alt_u16 b16[256];
	alt_u32 i;
	alt_u32 lbffr[128];
	alt_u32 rbffr[128];

  alt_putstr("Hello from Nios II!\n");
  18027c:	212d0404 	addi	r4,r4,-19440
#include "sys/alt_stdio.h"
#include "ledos/ledos.h"
#include "ch.h"

int test_audio_fft()
{ 
  180280:	dfc00015 	stw	ra,0(sp)
	alt_u16 b16[256];
	alt_u32 i;
	alt_u32 lbffr[128];
	alt_u32 rbffr[128];

  alt_putstr("Hello from Nios II!\n");
  180284:	0196d980 	call	196d98 <alt_putstr>

  enable_fgyrus();
  180288:	01879900 	call	187990 <enable_fgyrus>


  //pcm_cap(FS_32KHZ,BPS_24);

	disable_adc_drvr();
  18028c:	018789c0 	call	18789c <disable_adc_drvr>
	disable_dac_drvr();
  180290:	01878700 	call	187870 <disable_dac_drvr>
	disable_audio_path();
  180294:	01873b80 	call	1873b8 <disable_audio_path>

	update_acache_mode(PCM_BFFR_MODE_NORMAL);
  180298:	0009883a 	mov	r4,zero
  18029c:	01878180 	call	187818 <update_acache_mode>

	enable_audio_path(FS_44KHZ,BPS_24);
  1802a0:	01000084 	movi	r4,2
  1802a4:	200b883a 	mov	r5,r4
  1802a8:	01872200 	call	187220 <enable_audio_path>
	enable_adc_drvr();
  1802ac:	01878b40 	call	1878b4 <enable_adc_drvr>
	enable_dac_drvr();
  1802b0:	01878880 	call	187888 <enable_dac_drvr>
	 for(i=0;i<128;i++) {
		  printf("FFT R[0x%x] - %d\r\n",i,rbffr[i]);
	  }
	  */

  dump_drvr_regs();
  1802b4:	01879040 	call	187904 <dump_drvr_regs>
  aud_codec_dump_regs();
  1802b8:	01868480 	call	186848 <aud_codec_dump_regs>
	  alt_printf("Cordic Ram[0x%x] - 0x%x\r\n",i,b16[i]);
  }
  */

  /* Event loop never exits. */
  while (1);
  1802bc:	003fff06 	br	1802bc <__alt_data_end+0xfff802bc>

001802c0 <main>:
  return 0;
}

int main ()
{
	  alt_putstr("Hello from Nios II!\n");
  1802c0:	010006b4 	movhi	r4,26

  return 0;
}

int main ()
{
  1802c4:	deffff04 	addi	sp,sp,-4
	  alt_putstr("Hello from Nios II!\n");
  1802c8:	212d0404 	addi	r4,r4,-19440

  return 0;
}

int main ()
{
  1802cc:	dfc00015 	stw	ra,0(sp)
	  alt_putstr("Hello from Nios II!\n");
  1802d0:	0196d980 	call	196d98 <alt_putstr>

	  init_ledos(BPS_24);
  1802d4:	01000084 	movi	r4,2
  1802d8:	0187c800 	call	187c80 <init_ledos>

	  //test_audio_fft();

	  return	0;
}
  1802dc:	0005883a 	mov	r2,zero
  1802e0:	dfc00017 	ldw	ra,0(sp)
  1802e4:	dec00104 	addi	sp,sp,4
  1802e8:	f800283a 	ret

001802ec <adv7513_video_out_format.constprop.4>:

// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
  1802ec:	defffd04 	addi	sp,sp,-12
  1802f0:	dc400115 	stw	r17,4(sp)

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
  1802f4:	01802004 	movi	r6,128

// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
  1802f8:	2823883a 	mov	r17,r5

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
  1802fc:	000f883a 	mov	r7,zero
  180300:	01400584 	movi	r5,22

// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
  180304:	dc000015 	stw	r16,0(sp)
  180308:	dfc00215 	stw	ra,8(sp)
  18030c:	2021883a 	mov	r16,r4

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
  180310:	01865bc0 	call	1865bc <reg_update_bits>
  180314:	10000226 	beq	r2,zero,180320 <adv7513_video_out_format.constprop.4+0x34>
		return -1;
  180318:	00bfffc4 	movi	r2,-1
  18031c:	00001e06 	br	180398 <adv7513_video_out_format.constprop.4+0xac>

	// 0x18[7] <- enable
	// 0x18[6:5] <- scaling
	// 0x18[4:0] <- csc_a1[4:0]
	int regv = (enable ? 1 : 0) << 7;
	if (reg_update_bits(ec, 0x18, 0x80, regv) != 0)
  180320:	8009883a 	mov	r4,r16
  180324:	01400604 	movi	r5,24
  180328:	01802004 	movi	r6,128
  18032c:	000f883a 	mov	r7,zero
  180330:	01865bc0 	call	1865bc <reg_update_bits>
  180334:	103ff81e 	bne	r2,zero,180318 <__alt_data_end+0xfff80318>
		return -1;
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- dvi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (dvi & 0x01) << 1) != 0)
  180338:	89c0004c 	andi	r7,r17,1
  18033c:	8009883a 	mov	r4,r16
  180340:	01402bc4 	movi	r5,175
  180344:	01802084 	movi	r6,130
  180348:	39cf883a 	add	r7,r7,r7
  18034c:	01865bc0 	call	1865bc <reg_update_bits>
  180350:	103ff11e 	bne	r2,zero,180318 <__alt_data_end+0xfff80318>
		return -1;

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (dvi == ADV7513_MODE_HDMI) {
  180354:	00800044 	movi	r2,1
		if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
  180358:	8009883a 	mov	r4,r16
  18035c:	01401004 	movi	r5,64
  180360:	01802004 	movi	r6,128
	if (reg_update_bits(ec, 0xaf, 0x82, (dvi & 0x01) << 1) != 0)
		return -1;

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (dvi == ADV7513_MODE_HDMI) {
  180364:	8880031e 	bne	r17,r2,180374 <adv7513_video_out_format.constprop.4+0x88>
		if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
  180368:	300f883a 	mov	r7,r6
  18036c:	01865bc0 	call	1865bc <reg_update_bits>
  180370:	00000106 	br	180378 <adv7513_video_out_format.constprop.4+0x8c>
			return -1;
	} else {
		if (reg_clear_bits(ec, 0x40, 0x80) != 0)
  180374:	01866bc0 	call	1866bc <reg_clear_bits>
  180378:	103fe71e 	bne	r2,zero,180318 <__alt_data_end+0xfff80318>
			return -1;
	}

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
  18037c:	8009883a 	mov	r4,r16
  180380:	01401304 	movi	r5,76
  180384:	018003c4 	movi	r6,15
  180388:	01c00104 	movi	r7,4
  18038c:	01865bc0 	call	1865bc <reg_update_bits>
  180390:	1004c03a 	cmpne	r2,r2,zero
  180394:	0085c83a 	sub	r2,zero,r2
	// 0x3c[5:0] <- 0x01 & 0x3f
	//if (reg_update_bits(ec, 0x3c, 0x3f, 0x01) != 0)
	//	return -1;

	return 0;
}
  180398:	dfc00217 	ldw	ra,8(sp)
  18039c:	dc400117 	ldw	r17,4(sp)
  1803a0:	dc000017 	ldw	r16,0(sp)
  1803a4:	dec00304 	addi	sp,sp,12
  1803a8:	f800283a 	ret

001803ac <adv7513_chip_identify>:
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
  1803ac:	defffe04 	addi	sp,sp,-8

	if(reg_read(ec,ADV7513_REG_CHIP_REVISION,&ec->chip_rev[0]) < 0)
  1803b0:	000b883a 	mov	r5,zero
  1803b4:	21800804 	addi	r6,r4,32
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
  1803b8:	dc000015 	stw	r16,0(sp)
  1803bc:	dfc00115 	stw	ra,4(sp)
  1803c0:	2021883a 	mov	r16,r4

	if(reg_read(ec,ADV7513_REG_CHIP_REVISION,&ec->chip_rev[0]) < 0)
  1803c4:	01864f00 	call	1864f0 <reg_read>
  1803c8:	10000c16 	blt	r2,zero,1803fc <adv7513_chip_identify+0x50>
		return -1;

	if(reg_read(ec,ADV7513_REG_CHIP_ID_LOW,&ec->chip_id[0]) < 0)
  1803cc:	8009883a 	mov	r4,r16
  1803d0:	01403d84 	movi	r5,246
  1803d4:	81800704 	addi	r6,r16,28
  1803d8:	01864f00 	call	1864f0 <reg_read>
  1803dc:	10000916 	blt	r2,zero,180404 <adv7513_chip_identify+0x58>
		return -2;

	if(reg_read(ec,ADV7513_REG_CHIP_ID_HIGH,&ec->chip_id[1]) < 0)
  1803e0:	8009883a 	mov	r4,r16
  1803e4:	01403d44 	movi	r5,245
  1803e8:	81800744 	addi	r6,r16,29
  1803ec:	01864f00 	call	1864f0 <reg_read>
  1803f0:	10000616 	blt	r2,zero,18040c <adv7513_chip_identify+0x60>
		return -3;

	return 0;
  1803f4:	0005883a 	mov	r2,zero
  1803f8:	00000506 	br	180410 <adv7513_chip_identify+0x64>

int adv7513_chip_identify(struct hdmi_encoder *ec)
{

	if(reg_read(ec,ADV7513_REG_CHIP_REVISION,&ec->chip_rev[0]) < 0)
		return -1;
  1803fc:	00bfffc4 	movi	r2,-1
  180400:	00000306 	br	180410 <adv7513_chip_identify+0x64>

	if(reg_read(ec,ADV7513_REG_CHIP_ID_LOW,&ec->chip_id[0]) < 0)
		return -2;
  180404:	00bfff84 	movi	r2,-2
  180408:	00000106 	br	180410 <adv7513_chip_identify+0x64>

	if(reg_read(ec,ADV7513_REG_CHIP_ID_HIGH,&ec->chip_id[1]) < 0)
		return -3;
  18040c:	00bfff44 	movi	r2,-3

	return 0;
}
  180410:	dfc00117 	ldw	ra,4(sp)
  180414:	dc000017 	ldw	r16,0(sp)
  180418:	dec00204 	addi	sp,sp,8
  18041c:	f800283a 	ret

00180420 <adv7513_hpd_probe>:
int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
	bool r = 0;
	alt_u8 regv = 0;

	ec->hpd_prev = ec->hpd_latest;
  180420:	20800317 	ldw	r2,12(r4)

	return 0;
}

int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
  180424:	defffd04 	addi	sp,sp,-12
  180428:	dc000115 	stw	r16,4(sp)
  18042c:	dfc00215 	stw	ra,8(sp)
	bool r = 0;
	alt_u8 regv = 0;

	ec->hpd_prev = ec->hpd_latest;
  180430:	20800215 	stw	r2,8(r4)

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
  180434:	01401084 	movi	r5,66
  180438:	d80d883a 	mov	r6,sp

	return 0;
}

int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
  18043c:	2021883a 	mov	r16,r4
	bool r = 0;
	alt_u8 regv = 0;
  180440:	d8000005 	stb	zero,0(sp)

	ec->hpd_prev = ec->hpd_latest;

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
  180444:	01864f00 	call	1864f0 <reg_read>
	if (r != 0)
  180448:	10001a1e 	bne	r2,zero,1804b4 <adv7513_hpd_probe+0x94>
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
  18044c:	d8c00003 	ldbu	r3,0(sp)
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
  180450:	80800217 	ldw	r2,8(r16)

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
	if (r != 0)
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
  180454:	1900180c 	andi	r4,r3,96
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
  180458:	2084f03a 	xor	r2,r4,r2

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
	if (r != 0)
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
  18045c:	81000315 	stw	r4,12(r16)
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
  180460:	80800415 	stw	r2,16(r16)

	ec->hpd = 0;

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
  180464:	10000426 	beq	r2,zero,180478 <adv7513_hpd_probe+0x58>
  180468:	01401804 	movi	r5,96
  18046c:	2140021e 	bne	r4,r5,180478 <adv7513_hpd_probe+0x58>
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
  180470:	00800044 	movi	r2,1
  180474:	00000d06 	br	1804ac <adv7513_hpd_probe+0x8c>
	} else {
		if ((ec->hpd_event & (ADV7513_STATUS_HPD)) && ((ec->hpd_latest & (ADV7513_STATUS_HPD)) == 0)) {
  180478:	1100100c 	andi	r4,r2,64
  18047c:	2000021e 	bne	r4,zero,180488 <adv7513_hpd_probe+0x68>
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;

	ec->hpd = 0;
  180480:	80000515 	stw	zero,20(r16)
  180484:	00000406 	br	180498 <adv7513_hpd_probe+0x78>

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
	} else {
		if ((ec->hpd_event & (ADV7513_STATUS_HPD)) && ((ec->hpd_latest & (ADV7513_STATUS_HPD)) == 0)) {
  180488:	1900100c 	andi	r4,r3,64
  18048c:	203ffc1e 	bne	r4,zero,180480 <__alt_data_end+0xfff80480>
			// if HPD state changed and HPD was de-asserted
			ec->hpd = -1;
  180490:	013fffc4 	movi	r4,-1
  180494:	81000515 	stw	r4,20(r16)
		}

		if ((ec->hpd_event & (ADV7513_STATUS_MONITOR_SENSE)) && ((ec->hpd_latest & (ADV7513_STATUS_MONITOR_SENSE)) == 0)) {
  180498:	1080080c 	andi	r2,r2,32
  18049c:	10000826 	beq	r2,zero,1804c0 <adv7513_hpd_probe+0xa0>
  1804a0:	18c0080c 	andi	r3,r3,32
  1804a4:	1800051e 	bne	r3,zero,1804bc <adv7513_hpd_probe+0x9c>
			// if monitor-sense state changed and monitor-sense was de-asserted
			ec->hpd = -1;
  1804a8:	00bfffc4 	movi	r2,-1
  1804ac:	80800515 	stw	r2,20(r16)
  1804b0:	00000206 	br	1804bc <adv7513_hpd_probe+0x9c>

	ec->hpd_prev = ec->hpd_latest;

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
	if (r != 0)
		return -1;
  1804b4:	00bfffc4 	movi	r2,-1
  1804b8:	00000106 	br	1804c0 <adv7513_hpd_probe+0xa0>
	// 0xd6[7:6] <- (2 << 6) (HPD from HPD only) & 0xc0
	//r = reg_update_bits(ec, 0xd6, 0xc0 ,0x02 << 6);
	//if (r != 0)
	//	return -1;

	return 0;
  1804bc:	0005883a 	mov	r2,zero
}
  1804c0:	dfc00217 	ldw	ra,8(sp)
  1804c4:	dc000117 	ldw	r16,4(sp)
  1804c8:	dec00304 	addi	sp,sp,12
  1804cc:	f800283a 	ret

001804d0 <adv7513_do_hpd_powerup>:

int adv7513_do_hpd_powerup(struct hdmi_encoder *ec)
{
  1804d0:	defffe04 	addi	sp,sp,-8
	//printf("adv7513_do_hpd_powerup()\n");

	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
  1804d4:	01401044 	movi	r5,65
  1804d8:	01801004 	movi	r6,64
  1804dc:	000f883a 	mov	r7,zero

	return 0;
}

int adv7513_do_hpd_powerup(struct hdmi_encoder *ec)
{
  1804e0:	dc000015 	stw	r16,0(sp)
  1804e4:	dfc00115 	stw	ra,4(sp)
  1804e8:	2021883a 	mov	r16,r4
	//printf("adv7513_do_hpd_powerup()\n");

	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
  1804ec:	01865bc0 	call	1865bc <reg_update_bits>
  1804f0:	10000226 	beq	r2,zero,1804fc <adv7513_do_hpd_powerup+0x2c>
		return -1;
  1804f4:	00bfffc4 	movi	r2,-1
  1804f8:	00002b06 	br	1805a8 <adv7513_do_hpd_powerup+0xd8>

	//usleep(150000);

	// table 14 -- fixed registers must be set after power up
	if (reg_write(ec, 0x98, 0x03) != 0)
  1804fc:	8009883a 	mov	r4,r16
  180500:	01402604 	movi	r5,152
  180504:	018000c4 	movi	r6,3
  180508:	01865780 	call	186578 <reg_write>
  18050c:	103ff91e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
		return -1;
	if (reg_update_bits(ec, 0x9a, 0xe0, 0x7 << 5) != 0)
  180510:	01803804 	movi	r6,224
  180514:	8009883a 	mov	r4,r16
  180518:	01402684 	movi	r5,154
  18051c:	300f883a 	mov	r7,r6
  180520:	01865bc0 	call	1865bc <reg_update_bits>
  180524:	103ff31e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
		return -1;
	if (reg_write(ec, 0x9c, 0x30) != 0)
  180528:	8009883a 	mov	r4,r16
  18052c:	01402704 	movi	r5,156
  180530:	01800c04 	movi	r6,48
  180534:	01865780 	call	186578 <reg_write>
  180538:	103fee1e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
		return -1;
	if (reg_update_bits(ec, 0x9d, 0x03, 0x01) != 0)
  18053c:	8009883a 	mov	r4,r16
  180540:	01402744 	movi	r5,157
  180544:	018000c4 	movi	r6,3
  180548:	01c00044 	movi	r7,1
  18054c:	01865bc0 	call	1865bc <reg_update_bits>
  180550:	103fe81e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
		return -1;
	if (reg_write(ec, 0xa2, 0xa4) != 0)
  180554:	8009883a 	mov	r4,r16
  180558:	01402884 	movi	r5,162
  18055c:	01802904 	movi	r6,164
  180560:	01865780 	call	186578 <reg_write>
  180564:	103fe31e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
		return -1;
	if (reg_write(ec, 0xa3, 0xa4) != 0)
  180568:	8009883a 	mov	r4,r16
  18056c:	014028c4 	movi	r5,163
  180570:	01802904 	movi	r6,164
  180574:	01865780 	call	186578 <reg_write>
  180578:	103fde1e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
		return -1;
	if (reg_write(ec, 0xe0, 0xd0) != 0)
  18057c:	8009883a 	mov	r4,r16
  180580:	01403804 	movi	r5,224
  180584:	01803404 	movi	r6,208
  180588:	01865780 	call	186578 <reg_write>
  18058c:	103fd91e 	bne	r2,zero,1804f4 <__alt_data_end+0xfff804f4>
	//if (reg_write(ec, 0xf9, 0x00) != 0)  // set to a non-conflicting i2c address (suggested addr: 0x00)
	//	return -1;

	// clear hpd interrupts
	// 0x96[7:6] <- 0xc0 & 0xc0
	if (reg_write(ec, 0x96, 0xff) != 0)
  180590:	8009883a 	mov	r4,r16
  180594:	01402584 	movi	r5,150
  180598:	01803fc4 	movi	r6,255
  18059c:	01865780 	call	186578 <reg_write>
  1805a0:	1004c03a 	cmpne	r2,r2,zero
  1805a4:	0085c83a 	sub	r2,zero,r2
		return -1;

	return 0;
}
  1805a8:	dfc00117 	ldw	ra,4(sp)
  1805ac:	dc000017 	ldw	r16,0(sp)
  1805b0:	dec00204 	addi	sp,sp,8
  1805b4:	f800283a 	ret

001805b8 <adv7513_kick_up>:
// interrupt if the monitor is in sleep mode and the cable is connected before downloading
// the program to the fpga board. It is verified that kick-off the encoder chip facilitates
// the encoder to detect monitor-sense signal at the program initialization process
//
extern int adv7513_kick_up(struct hdmi_encoder *ec)
{
  1805b8:	deffff04 	addi	sp,sp,-4
	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
  1805bc:	01401044 	movi	r5,65
  1805c0:	01801004 	movi	r6,64
  1805c4:	000f883a 	mov	r7,zero
// interrupt if the monitor is in sleep mode and the cable is connected before downloading
// the program to the fpga board. It is verified that kick-off the encoder chip facilitates
// the encoder to detect monitor-sense signal at the program initialization process
//
extern int adv7513_kick_up(struct hdmi_encoder *ec)
{
  1805c8:	dfc00015 	stw	ra,0(sp)
	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
  1805cc:	01865bc0 	call	1865bc <reg_update_bits>
  1805d0:	1004c03a 	cmpne	r2,r2,zero
		return -1;
	return 0;
}
  1805d4:	0085c83a 	sub	r2,zero,r2
  1805d8:	dfc00017 	ldw	ra,0(sp)
  1805dc:	dec00104 	addi	sp,sp,4
  1805e0:	f800283a 	ret

001805e4 <adv7513_do_hpd_powerdown>:

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
  1805e4:	01801004 	movi	r6,64
		return -1;
	return 0;
}

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
  1805e8:	deffff04 	addi	sp,sp,-4
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
  1805ec:	01401044 	movi	r5,65
  1805f0:	300f883a 	mov	r7,r6
		return -1;
	return 0;
}

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
  1805f4:	dfc00015 	stw	ra,0(sp)
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
  1805f8:	01865bc0 	call	1865bc <reg_update_bits>
  1805fc:	1004c03a 	cmpne	r2,r2,zero
		return -1;

	return 0;
}
  180600:	0085c83a 	sub	r2,zero,r2
  180604:	dfc00017 	ldw	ra,0(sp)
  180608:	dec00104 	addi	sp,sp,4
  18060c:	f800283a 	ret

00180610 <adv7513_power_state>:

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
  180610:	defffd04 	addi	sp,sp,-12
  180614:	dc000115 	stw	r16,4(sp)
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x41, &regv);
  180618:	d80d883a 	mov	r6,sp

	return 0;
}

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
  18061c:	2821883a 	mov	r16,r5
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x41, &regv);
  180620:	01401044 	movi	r5,65

	return 0;
}

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
  180624:	dfc00215 	stw	ra,8(sp)
	bool r = 0;
	alt_u8 regv = 0;
  180628:	d8000005 	stb	zero,0(sp)

	r = reg_read(ec, 0x41, &regv);
  18062c:	01864f00 	call	1864f0 <reg_read>
	if (r != 0)
  180630:	1000041e 	bne	r2,zero,180644 <adv7513_power_state+0x34>
		return -1;

	if ((regv & 0x40) == 1)
		*state = 0;
	else
		*state = 1;
  180634:	00800044 	movi	r2,1
  180638:	80800015 	stw	r2,0(r16)

	return 0;
  18063c:	0005883a 	mov	r2,zero
  180640:	00000106 	br	180648 <adv7513_power_state+0x38>
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x41, &regv);
	if (r != 0)
		return -1;
  180644:	00bfffc4 	movi	r2,-1
		*state = 0;
	else
		*state = 1;

	return 0;
}
  180648:	dfc00217 	ldw	ra,8(sp)
  18064c:	dc000117 	ldw	r16,4(sp)
  180650:	dec00304 	addi	sp,sp,12
  180654:	f800283a 	ret

00180658 <adv7513_mode_state>:

int adv7513_mode_state(struct hdmi_encoder *ec, int *vic, const char **mode)
{
  180658:	defffc04 	addi	sp,sp,-16
  18065c:	dc400215 	stw	r17,8(sp)
  180660:	dc000115 	stw	r16,4(sp)
  180664:	2823883a 	mov	r17,r5
  180668:	3021883a 	mov	r16,r6
	};

	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x3d, &regv);
  18066c:	01400f44 	movi	r5,61
  180670:	d80d883a 	mov	r6,sp

	return 0;
}

int adv7513_mode_state(struct hdmi_encoder *ec, int *vic, const char **mode)
{
  180674:	dfc00315 	stw	ra,12(sp)
		"720(1440)x480i @239.76/240 Hz (4:3)",
		"720(1440)x480i @239.76/240 Hz (16:9)",
	};

	bool r = 0;
	alt_u8 regv = 0;
  180678:	d8000005 	stb	zero,0(sp)

	r = reg_read(ec, 0x3d, &regv);
  18067c:	01864f00 	call	1864f0 <reg_read>
	if (r != 0)
  180680:	10000c1e 	bne	r2,zero,1806b4 <adv7513_mode_state+0x5c>
		return -1;

	*vic = regv & 0x1f;
  180684:	d8800003 	ldbu	r2,0(sp)

	if (*vic < 60) {
		*mode = vic_table[*vic];
  180688:	00c006b4 	movhi	r3,26
  18068c:	18ef2204 	addi	r3,r3,-17272

	r = reg_read(ec, 0x3d, &regv);
	if (r != 0)
		return -1;

	*vic = regv & 0x1f;
  180690:	108007cc 	andi	r2,r2,31
  180694:	88800015 	stw	r2,0(r17)

	if (*vic < 60) {
		*mode = vic_table[*vic];
  180698:	1085883a 	add	r2,r2,r2
  18069c:	1085883a 	add	r2,r2,r2
  1806a0:	1885883a 	add	r2,r3,r2
  1806a4:	10800017 	ldw	r2,0(r2)
  1806a8:	80800015 	stw	r2,0(r16)
	} else {
		*mode = vic_table[0];
	}

	return 0;
  1806ac:	0005883a 	mov	r2,zero
  1806b0:	00000106 	br	1806b8 <adv7513_mode_state+0x60>
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x3d, &regv);
	if (r != 0)
		return -1;
  1806b4:	00bfffc4 	movi	r2,-1
	} else {
		*mode = vic_table[0];
	}

	return 0;
}
  1806b8:	dfc00317 	ldw	ra,12(sp)
  1806bc:	dc400217 	ldw	r17,8(sp)
  1806c0:	dc000117 	ldw	r16,4(sp)
  1806c4:	dec00404 	addi	sp,sp,16
  1806c8:	f800283a 	ret

001806cc <adv7513_edid_read>:

int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
  1806cc:	defff804 	addi	sp,sp,-32
  1806d0:	dc400215 	stw	r17,8(sp)
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
  1806d4:	3022923a 	slli	r17,r6,8

	return 0;
}

int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
  1806d8:	dd400615 	stw	r21,24(sp)
  1806dc:	dd000515 	stw	r20,20(sp)
  1806e0:	dcc00415 	stw	r19,16(sp)
  1806e4:	dc800315 	stw	r18,12(sp)
  1806e8:	dc000115 	stw	r16,4(sp)
  1806ec:	dfc00715 	stw	ra,28(sp)
  1806f0:	2025883a 	mov	r18,r4
  1806f4:	2829883a 	mov	r20,r5
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
  1806f8:	8cc04004 	addi	r19,r17,256
  1806fc:	8821883a 	mov	r16,r17
		adv7513_i2c_bffr.byte_arry[0] = i & 0xff;

		if(i2c_xtn_write(ec->edid_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  180700:	05400044 	movi	r21,1
int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
  180704:	84c0170e 	bge	r16,r19,180764 <adv7513_edid_read+0x98>
		adv7513_i2c_bffr.byte_arry[0] = i & 0xff;

		if(i2c_xtn_write(ec->edid_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  180708:	91000103 	ldbu	r4,4(r18)
  18070c:	01800044 	movi	r6,1
  180710:	d8000015 	stw	zero,0(sp)
  180714:	d1670084 	addi	r5,gp,-25598
  180718:	300f883a 	mov	r7,r6
{
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
		adv7513_i2c_bffr.byte_arry[0] = i & 0xff;
  18071c:	d4270085 	stb	r16,-25598(gp)

		if(i2c_xtn_write(ec->edid_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  180720:	01875f80 	call	1875f8 <i2c_xtn_write>
  180724:	10000226 	beq	r2,zero,180730 <adv7513_edid_read+0x64>
			return -1;
  180728:	00bfffc4 	movi	r2,-1
  18072c:	00000e06 	br	180768 <adv7513_edid_read+0x9c>
		}

		if(i2c_xtn_read(ec->edid_addr,adv7513_i2c_bffr.byte_arry,1,1,1))	{
  180730:	91000103 	ldbu	r4,4(r18)
  180734:	01800044 	movi	r6,1
  180738:	dd400015 	stw	r21,0(sp)
  18073c:	d1670084 	addi	r5,gp,-25598
  180740:	300f883a 	mov	r7,r6
  180744:	01876e00 	call	1876e0 <i2c_xtn_read>
  180748:	103ff71e 	bne	r2,zero,180728 <__alt_data_end+0xfff80728>
			return -1;
		}

		*regv = adv7513_i2c_bffr.byte_arry[0];
  18074c:	d0e70083 	ldbu	r3,-25598(gp)
  180750:	8445c83a 	sub	r2,r16,r17
  180754:	a085883a 	add	r2,r20,r2
  180758:	10c00005 	stb	r3,0(r2)
int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
  18075c:	84000044 	addi	r16,r16,1
  180760:	003fe806 	br	180704 <__alt_data_end+0xfff80704>

		*regv = adv7513_i2c_bffr.byte_arry[0];

	}

	return 0;
  180764:	0005883a 	mov	r2,zero
}
  180768:	dfc00717 	ldw	ra,28(sp)
  18076c:	dd400617 	ldw	r21,24(sp)
  180770:	dd000517 	ldw	r20,20(sp)
  180774:	dcc00417 	ldw	r19,16(sp)
  180778:	dc800317 	ldw	r18,12(sp)
  18077c:	dc400217 	ldw	r17,8(sp)
  180780:	dc000117 	ldw	r16,4(sp)
  180784:	dec00804 	addi	sp,sp,32
  180788:	f800283a 	ret

0018078c <adv7513_regmap_dump>:

int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
  18078c:	defff904 	addi	sp,sp,-28
  180790:	dd000515 	stw	r20,20(sp)
  180794:	dcc00415 	stw	r19,16(sp)
  180798:	dc800315 	stw	r18,12(sp)
  18079c:	dc400215 	stw	r17,8(sp)
  1807a0:	dc000115 	stw	r16,4(sp)
  1807a4:	dfc00615 	stw	ra,24(sp)
  1807a8:	2023883a 	mov	r17,r4
  1807ac:	2827883a 	mov	r19,r5
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
  1807b0:	0021883a 	mov	r16,zero
		adv7513_i2c_bffr.byte_arry[0] = i & 0xff;

		if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  1807b4:	05000044 	movi	r20,1
int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
  1807b8:	04804004 	movi	r18,256
		adv7513_i2c_bffr.byte_arry[0] = i & 0xff;
  1807bc:	d4270085 	stb	r16,-25598(gp)

		if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  1807c0:	89000003 	ldbu	r4,0(r17)
  1807c4:	01800044 	movi	r6,1
  1807c8:	d8000015 	stw	zero,0(sp)
  1807cc:	d1670084 	addi	r5,gp,-25598
  1807d0:	300f883a 	mov	r7,r6
  1807d4:	01875f80 	call	1875f8 <i2c_xtn_write>
  1807d8:	10000226 	beq	r2,zero,1807e4 <adv7513_regmap_dump+0x58>
			return -1;
  1807dc:	00bfffc4 	movi	r2,-1
  1807e0:	00000d06 	br	180818 <adv7513_regmap_dump+0x8c>
		}

		if(i2c_xtn_read(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,1))	{
  1807e4:	89000003 	ldbu	r4,0(r17)
  1807e8:	01800044 	movi	r6,1
  1807ec:	dd000015 	stw	r20,0(sp)
  1807f0:	d1670084 	addi	r5,gp,-25598
  1807f4:	300f883a 	mov	r7,r6
  1807f8:	01876e00 	call	1876e0 <i2c_xtn_read>
  1807fc:	103ff71e 	bne	r2,zero,1807dc <__alt_data_end+0xfff807dc>
			return -1;
		}

		*regv = adv7513_i2c_bffr.byte_arry[0];
  180800:	d0e70083 	ldbu	r3,-25598(gp)
  180804:	9c05883a 	add	r2,r19,r16
int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
  180808:	84000044 	addi	r16,r16,1

		if(i2c_xtn_read(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,1))	{
			return -1;
		}

		*regv = adv7513_i2c_bffr.byte_arry[0];
  18080c:	10c00005 	stb	r3,0(r2)
int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
  180810:	84bfea1e 	bne	r16,r18,1807bc <__alt_data_end+0xfff807bc>

		*regv = adv7513_i2c_bffr.byte_arry[0];

	}

	return 0;
  180814:	0005883a 	mov	r2,zero
}
  180818:	dfc00617 	ldw	ra,24(sp)
  18081c:	dd000517 	ldw	r20,20(sp)
  180820:	dcc00417 	ldw	r19,16(sp)
  180824:	dc800317 	ldw	r18,12(sp)
  180828:	dc400217 	ldw	r17,8(sp)
  18082c:	dc000117 	ldw	r16,4(sp)
  180830:	dec00704 	addi	sp,sp,28
  180834:	f800283a 	ret

00180838 <adv7513_chip_init>:
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
  180838:	defffd04 	addi	sp,sp,-12
  18083c:	dc400115 	stw	r17,4(sp)
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
  180840:	018003c4 	movi	r6,15
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
  180844:	2823883a 	mov	r17,r5
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
  180848:	000f883a 	mov	r7,zero
  18084c:	01400544 	movi	r5,21
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
  180850:	dc000015 	stw	r16,0(sp)
  180854:	dfc00215 	stw	ra,8(sp)
  180858:	2021883a 	mov	r16,r4
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
  18085c:	01865bc0 	call	1865bc <reg_update_bits>
  180860:	10002c1e 	bne	r2,zero,180914 <adv7513_chip_init+0xdc>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
  180864:	8009883a 	mov	r4,r16
  180868:	01400584 	movi	r5,22
  18086c:	01800f44 	movi	r6,61
  180870:	01c00c04 	movi	r7,48
  180874:	01865bc0 	call	1865bc <reg_update_bits>
  180878:	1000261e 	bne	r2,zero,180914 <adv7513_chip_init+0xdc>
		return -1;

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
  18087c:	8009883a 	mov	r4,r16
  180880:	014005c4 	movi	r5,23
  180884:	01800084 	movi	r6,2
  180888:	000f883a 	mov	r7,zero
  18088c:	01865bc0 	call	1865bc <reg_update_bits>
  180890:	1000201e 	bne	r2,zero,180914 <adv7513_chip_init+0xdc>
	// 0x15 0x16 0x17
	if (adv7513_video_in_format(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_ASPECT_4V3, ADV7513_INPUT_INVALID) != 0)
		return -1;

	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (dvi != 0) {
  180894:	88002326 	beq	r17,zero,180924 <adv7513_chip_init+0xec>
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_DVI) != 0)
  180898:	8009883a 	mov	r4,r16
  18089c:	000b883a 	mov	r5,zero
  1808a0:	01802ec0 	call	1802ec <adv7513_video_out_format.constprop.4>
  1808a4:	1000921e 	bne	r2,zero,180af0 <adv7513_chip_init+0x2b8>
	int regv;

	//printf("adv7513_avi_infoframe()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
  1808a8:	00800084 	movi	r2,2
  1808ac:	80800915 	stw	r2,36(r16)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
	avi->active_fmt_ar = 8;		// active format aspect ratio
  1808b0:	00c00204 	movi	r3,8

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
  1808b4:	00800044 	movi	r2,1
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
  1808b8:	01800404 	movi	r6,16

	//printf("adv7513_avi_infoframe()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
  1808bc:	80000c15 	stw	zero,48(r16)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
  1808c0:	80800b15 	stw	r2,44(r16)
	avi->active_fmt_ar = 8;		// active format aspect ratio
  1808c4:	80c00d15 	stw	r3,52(r16)
	avi->pict_ar = 1;			// picture aspect ratio
  1808c8:	80800e15 	stw	r2,56(r16)
	avi->colorimetry = 0;		// colorimetry
  1808cc:	80000f15 	stw	zero,60(r16)
	avi->colorimetry_ext = 0;	// extended colorimetry
  1808d0:	80001215 	stw	zero,72(r16)
	avi->scaling = 0;			// non-uniform scaling
  1808d4:	80001015 	stw	zero,64(r16)
	avi->quant = 0;				// rgb quantization range
  1808d8:	80001115 	stw	zero,68(r16)
	avi->itc = 0;				// it content
  1808dc:	80001315 	stw	zero,76(r16)
	avi->pr = 0;				// pixel repetition factor
  1808e0:	80001515 	stw	zero,84(r16)
	avi->vic = 1;				// video identification code
  1808e4:	80801415 	stw	r2,80(r16)
	avi->yq1yq0 = 0;			// ??
  1808e8:	80001615 	stw	zero,88(r16)

	avi->bar_info = 1;  		// bar fields valid
  1808ec:	80800a15 	stw	r2,40(r16)
	avi->bar.top_e = 0;
  1808f0:	80001715 	stw	zero,92(r16)
	avi->bar.bottom_s = 0;
  1808f4:	80001815 	stw	zero,96(r16)
	avi->bar.left_e = 0;
  1808f8:	80001915 	stw	zero,100(r16)
	avi->bar.right_s = 0;
  1808fc:	80001a15 	stw	zero,104(r16)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
  180900:	8009883a 	mov	r4,r16
  180904:	01401104 	movi	r5,68
  180908:	300f883a 	mov	r7,r6
  18090c:	01865bc0 	call	1865bc <reg_update_bits>
  180910:	10000726 	beq	r2,zero,180930 <adv7513_chip_init+0xf8>
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_ASPECT_4V3, ADV7513_INPUT_INVALID) != 0)
		return -1;
  180914:	00bfffc4 	movi	r2,-1
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
	if (adv7513_video_init(ec, dvi) != 0)
  180918:	1004c03a 	cmpne	r2,r2,zero
  18091c:	0085c83a 	sub	r2,zero,r2
  180920:	00007406 	br	180af4 <adv7513_chip_init+0x2bc>
	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (dvi != 0) {
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_DVI) != 0)
			return -1;
	} else {
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_HDMI) != 0)
  180924:	8009883a 	mov	r4,r16
  180928:	01400044 	movi	r5,1
  18092c:	003fdc06 	br	1808a0 <__alt_data_end+0xfff808a0>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
  180930:	01803004 	movi	r6,192
  180934:	8009883a 	mov	r4,r16
  180938:	01401284 	movi	r5,74
  18093c:	300f883a 	mov	r7,r6
  180940:	01865bc0 	call	1865bc <reg_update_bits>
  180944:	103ff31e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
  180948:	80800c17 	ldw	r2,48(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
  18094c:	8009883a 	mov	r4,r16
  180950:	01401544 	movi	r5,85

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
  180954:	108000cc 	andi	r2,r2,3
  180958:	100e917a 	slli	r7,r2,5
  18095c:	80800b17 	ldw	r2,44(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
  180960:	01801c04 	movi	r6,112

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
  180964:	1080004c 	andi	r2,r2,1
  180968:	1004913a 	slli	r2,r2,4
  18096c:	3884b03a 	or	r2,r7,r2
  180970:	81c00917 	ldw	r7,36(r16)
  180974:	39c000cc 	andi	r7,r7,3
  180978:	11ceb03a 	or	r7,r2,r7
  18097c:	80800a17 	ldw	r2,40(r16)
  180980:	108000cc 	andi	r2,r2,3
  180984:	1085883a 	add	r2,r2,r2
  180988:	1085883a 	add	r2,r2,r2
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
  18098c:	388eb03a 	or	r7,r7,r2
  180990:	01865bc0 	call	1865bc <reg_update_bits>
  180994:	103fdf1e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
  180998:	81800f17 	ldw	r6,60(r16)
  18099c:	80800e17 	ldw	r2,56(r16)
	if (reg_write(ec, 0x56, regv) != 0)
  1809a0:	8009883a 	mov	r4,r16
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
  1809a4:	300c91ba 	slli	r6,r6,6
  1809a8:	108000cc 	andi	r2,r2,3
  1809ac:	1004913a 	slli	r2,r2,4
  1809b0:	31803fcc 	andi	r6,r6,255
	if (reg_write(ec, 0x56, regv) != 0)
  1809b4:	01401584 	movi	r5,86
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
  1809b8:	3084b03a 	or	r2,r6,r2
  1809bc:	81800d17 	ldw	r6,52(r16)
  1809c0:	318003cc 	andi	r6,r6,15
	if (reg_write(ec, 0x56, regv) != 0)
  1809c4:	118cb03a 	or	r6,r2,r6
  1809c8:	01865780 	call	186578 <reg_write>
  1809cc:	103fd11e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
  1809d0:	80801317 	ldw	r2,76(r16)
	if (reg_write(ec, 0x57, regv) != 0)
  1809d4:	8009883a 	mov	r4,r16
  1809d8:	014015c4 	movi	r5,87

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
  1809dc:	100491fa 	slli	r2,r2,7
  1809e0:	11803fcc 	andi	r6,r2,255
  1809e4:	80801217 	ldw	r2,72(r16)
  1809e8:	108001cc 	andi	r2,r2,7
  1809ec:	1004913a 	slli	r2,r2,4
  1809f0:	3084b03a 	or	r2,r6,r2
  1809f4:	81801017 	ldw	r6,64(r16)
  1809f8:	318000cc 	andi	r6,r6,3
  1809fc:	118cb03a 	or	r6,r2,r6
  180a00:	80801117 	ldw	r2,68(r16)
  180a04:	108000cc 	andi	r2,r2,3
  180a08:	1085883a 	add	r2,r2,r2
  180a0c:	1085883a 	add	r2,r2,r2
	if (reg_write(ec, 0x57, regv) != 0)
  180a10:	308cb03a 	or	r6,r6,r2
  180a14:	01865780 	call	186578 <reg_write>
  180a18:	103fbe1e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
  180a1c:	81801617 	ldw	r6,88(r16)
	if (reg_write(ec, 0x59, regv) != 0)
  180a20:	8009883a 	mov	r4,r16
  180a24:	01401644 	movi	r5,89
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
	if (reg_write(ec, 0x57, regv) != 0)
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
  180a28:	300c913a 	slli	r6,r6,4
	if (reg_write(ec, 0x59, regv) != 0)
  180a2c:	31803c0c 	andi	r6,r6,240
  180a30:	01865780 	call	186578 <reg_write>
  180a34:	103fb71e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
	if (reg_write(ec, 0x5a, regv) != 0)
  180a38:	81801703 	ldbu	r6,92(r16)
  180a3c:	8009883a 	mov	r4,r16
  180a40:	01401684 	movi	r5,90
  180a44:	01865780 	call	186578 <reg_write>
  180a48:	103fb21e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
	if (reg_write(ec, 0x5b, regv) != 0)
  180a4c:	81801743 	ldbu	r6,93(r16)
  180a50:	8009883a 	mov	r4,r16
  180a54:	014016c4 	movi	r5,91
  180a58:	01865780 	call	186578 <reg_write>
  180a5c:	103fad1e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
	if (reg_write(ec, 0x5c, regv) != 0)
  180a60:	81801803 	ldbu	r6,96(r16)
  180a64:	8009883a 	mov	r4,r16
  180a68:	01401704 	movi	r5,92
  180a6c:	01865780 	call	186578 <reg_write>
  180a70:	103fa81e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
	if (reg_write(ec, 0x5d, regv) != 0)
  180a74:	81801843 	ldbu	r6,97(r16)
  180a78:	8009883a 	mov	r4,r16
  180a7c:	01401744 	movi	r5,93
  180a80:	01865780 	call	186578 <reg_write>
  180a84:	103fa31e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
	if (reg_write(ec, 0x5e, regv) != 0)
  180a88:	81801903 	ldbu	r6,100(r16)
  180a8c:	8009883a 	mov	r4,r16
  180a90:	01401784 	movi	r5,94
  180a94:	01865780 	call	186578 <reg_write>
  180a98:	103f9e1e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
	if (reg_write(ec, 0x5f, regv) != 0)
  180a9c:	81801943 	ldbu	r6,101(r16)
  180aa0:	8009883a 	mov	r4,r16
  180aa4:	014017c4 	movi	r5,95
  180aa8:	01865780 	call	186578 <reg_write>
  180aac:	103f991e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
	if (reg_write(ec, 0x60, regv) != 0)
  180ab0:	81801a03 	ldbu	r6,104(r16)
  180ab4:	8009883a 	mov	r4,r16
  180ab8:	01401804 	movi	r5,96
  180abc:	01865780 	call	186578 <reg_write>
  180ac0:	103f941e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>
		return -1;

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
	if (reg_write(ec, 0x61, regv) != 0)
  180ac4:	81801a43 	ldbu	r6,105(r16)
  180ac8:	8009883a 	mov	r4,r16
  180acc:	01401844 	movi	r5,97
  180ad0:	01865780 	call	186578 <reg_write>
  180ad4:	103f8f1e 	bne	r2,zero,180914 <__alt_data_end+0xfff80914>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
  180ad8:	8009883a 	mov	r4,r16
  180adc:	01401284 	movi	r5,74
  180ae0:	01801004 	movi	r6,64
  180ae4:	01866bc0 	call	1866bc <reg_clear_bits>
  180ae8:	103f8b26 	beq	r2,zero,180918 <__alt_data_end+0xfff80918>
  180aec:	003f8906 	br	180914 <__alt_data_end+0xfff80914>
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
	if (adv7513_video_init(ec, dvi) != 0)
		return -1;
  180af0:	00bfffc4 	movi	r2,-1

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
}
  180af4:	dfc00217 	ldw	ra,8(sp)
  180af8:	dc400117 	ldw	r17,4(sp)
  180afc:	dc000017 	ldw	r16,0(sp)
  180b00:	dec00304 	addi	sp,sp,12
  180b04:	f800283a 	ret

00180b08 <adv7513_int_handler>:

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
void adv7513_int_handler(void *context)
{
  180b08:	deffb404 	addi	sp,sp,-304
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = GET_HDMI_IRQ_STATUS;
  180b0c:	00800834 	movhi	r2,32

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
void adv7513_int_handler(void *context)
{
  180b10:	dc004515 	stw	r16,276(sp)
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = GET_HDMI_IRQ_STATUS;
  180b14:	10841304 	addi	r2,r2,4172

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
void adv7513_int_handler(void *context)
{
  180b18:	2021883a 	mov	r16,r4
  180b1c:	dfc04b15 	stw	ra,300(sp)
  180b20:	dd404a15 	stw	r21,296(sp)
  180b24:	dd004915 	stw	r20,292(sp)
  180b28:	dcc04815 	stw	r19,288(sp)
  180b2c:	dc804715 	stw	r18,284(sp)
  180b30:	dc404615 	stw	r17,280(sp)
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = GET_HDMI_IRQ_STATUS;
  180b34:	10c00037 	ldwio	r3,0(r2)
	//if (irq_status == 0)
	//	return;

	// clear system irq flag
	CLEAR_HDMI_IRQ_FLAG;
  180b38:	10000035 	stwio	zero,0(r2)

	// reload adv7513 int mask value
	adv7513_long_to_int_mask(&int_mask, ec->int_mask);

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
  180b3c:	014024c4 	movi	r5,147
  180b40:	d9804404 	addi	r6,sp,272

	// clear system irq flag
	CLEAR_HDMI_IRQ_FLAG;

	// reload adv7513 int mask value
	adv7513_long_to_int_mask(&int_mask, ec->int_mask);
  180b44:	24400617 	ldw	r17,24(r4)

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
  180b48:	01864f00 	call	1864f0 <reg_read>
	if (r != 0)
  180b4c:	1000761e 	bne	r2,zero,180d28 <adv7513_int_handler+0x220>
		return;
	int_status.reg93 = regv;

	r = reg_read(ec, 0x96, &regv);
  180b50:	8009883a 	mov	r4,r16
  180b54:	01402584 	movi	r5,150
  180b58:	d9804404 	addi	r6,sp,272

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
	if (r != 0)
		return;
	int_status.reg93 = regv;
  180b5c:	dd004403 	ldbu	r20,272(sp)

	r = reg_read(ec, 0x96, &regv);
  180b60:	01864f00 	call	1864f0 <reg_read>
	if (r != 0)
  180b64:	1000701e 	bne	r2,zero,180d28 <adv7513_int_handler+0x220>
		return;
	int_status.reg96 = regv;

	r = reg_read(ec, 0x97, &regv);
  180b68:	8009883a 	mov	r4,r16
  180b6c:	014025c4 	movi	r5,151
  180b70:	d9804404 	addi	r6,sp,272
	int_status.reg93 = regv;

	r = reg_read(ec, 0x96, &regv);
	if (r != 0)
		return;
	int_status.reg96 = regv;
  180b74:	dc804403 	ldbu	r18,272(sp)

	r = reg_read(ec, 0x97, &regv);
  180b78:	01864f00 	call	1864f0 <reg_read>
	if (r != 0)
  180b7c:	10006a1e 	bne	r2,zero,180d28 <adv7513_int_handler+0x220>
		return;
	int_status.reg97 = regv;

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
  180b80:	8009883a 	mov	r4,r16
  180b84:	01402484 	movi	r5,146
  180b88:	000d883a 	mov	r6,zero
	int_status.reg96 = regv;

	r = reg_read(ec, 0x97, &regv);
	if (r != 0)
		return;
	int_status.reg97 = regv;
  180b8c:	dcc04403 	ldbu	r19,272(sp)

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
  180b90:	01865780 	call	186578 <reg_write>
	reg_write(ec, 0x94, 0);
  180b94:	8009883a 	mov	r4,r16
  180b98:	01402504 	movi	r5,148
  180b9c:	000d883a 	mov	r6,zero
  180ba0:	01865780 	call	186578 <reg_write>
	reg_write(ec, 0x95, 0);
  180ba4:	8009883a 	mov	r4,r16
  180ba8:	01402544 	movi	r5,149
  180bac:	000d883a 	mov	r6,zero

	// clear adv7513 int status
	if (int_status.reg93 != 0) {
  180bb0:	a5003fcc 	andi	r20,r20,255
	int_status.reg97 = regv;

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
	reg_write(ec, 0x94, 0);
	reg_write(ec, 0x95, 0);
  180bb4:	01865780 	call	186578 <reg_write>

	// clear adv7513 int status
	if (int_status.reg93 != 0) {
  180bb8:	a0000426 	beq	r20,zero,180bcc <adv7513_int_handler+0xc4>
		reg_write(ec, 0x93, 0xff);
  180bbc:	8009883a 	mov	r4,r16
  180bc0:	014024c4 	movi	r5,147
  180bc4:	01803fc4 	movi	r6,255
  180bc8:	01865780 	call	186578 <reg_write>
	int_status.reg93 = regv;

	r = reg_read(ec, 0x96, &regv);
	if (r != 0)
		return;
	int_status.reg96 = regv;
  180bcc:	94803fcc 	andi	r18,r18,255
	// clear adv7513 int status
	if (int_status.reg93 != 0) {
		reg_write(ec, 0x93, 0xff);
	}

	if (int_status.reg96 != 0) {
  180bd0:	90000426 	beq	r18,zero,180be4 <adv7513_int_handler+0xdc>
		reg_write(ec, 0x96, 0xff);
  180bd4:	8009883a 	mov	r4,r16
  180bd8:	01402584 	movi	r5,150
  180bdc:	01803fc4 	movi	r6,255
  180be0:	01865780 	call	186578 <reg_write>
	}

	if (int_status.reg97 != 0) {
  180be4:	9cc03fcc 	andi	r19,r19,255
  180be8:	98000426 	beq	r19,zero,180bfc <adv7513_int_handler+0xf4>
		reg_write(ec, 0x97, 0xff);
  180bec:	8009883a 	mov	r4,r16
  180bf0:	014025c4 	movi	r5,151
  180bf4:	01803fc4 	movi	r6,255
  180bf8:	01865780 	call	186578 <reg_write>
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
}

static inline void adv7513_long_to_int_mask(struct adv7513_int_mask *mask, unsigned int long_val)
{
	mask->reg92 = (long_val >> 16) & 0xff;
  180bfc:	8828d43a 	srli	r20,r17,16
	mask->reg94 = (long_val >> 8) & 0xff;
  180c00:	8826d23a 	srli	r19,r17,8

	// -------------------------------------------------------
	// handle adv7513 interrupt events
	// WARNING: this should be an application level task ...
	//
	if (int_status.reg96_bits.monitor_sense || int_status.reg96_bits.hpd) {
  180c04:	9480300c 	andi	r18,r18,192
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
}

static inline void adv7513_long_to_int_mask(struct adv7513_int_mask *mask, unsigned int long_val)
{
	mask->reg92 = (long_val >> 16) & 0xff;
  180c08:	a5003fcc 	andi	r20,r20,255
	mask->reg94 = (long_val >> 8) & 0xff;
  180c0c:	9cc03fcc 	andi	r19,r19,255
	mask->reg95 = long_val & 0xff;
  180c10:	8c403fcc 	andi	r17,r17,255
  180c14:	90003826 	beq	r18,zero,180cf8 <adv7513_int_handler+0x1f0>

		alt_u8 edid[256];
		int dvi_mode = 0;
		int pwr_state = 0;
  180c18:	d8004315 	stw	zero,268(sp)
		int pwron_retry_count = 200;
		int m_sense_retry_count = 30;

		while (m_sense_retry_count-- > 0) {
  180c1c:	048007c4 	movi	r18,31
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
			if (r != 0)
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
  180c20:	05401804 	movi	r21,96
  180c24:	94bfffc4 	addi	r18,r18,-1
		int dvi_mode = 0;
		int pwr_state = 0;
		int pwron_retry_count = 200;
		int m_sense_retry_count = 30;

		while (m_sense_retry_count-- > 0) {
  180c28:	90000826 	beq	r18,zero,180c4c <adv7513_int_handler+0x144>
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
  180c2c:	8009883a 	mov	r4,r16
  180c30:	01401084 	movi	r5,66
  180c34:	d9804404 	addi	r6,sp,272
  180c38:	01864f00 	call	1864f0 <reg_read>
			if (r != 0)
  180c3c:	10002e1e 	bne	r2,zero,180cf8 <adv7513_int_handler+0x1f0>
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
  180c40:	d8804403 	ldbu	r2,272(sp)
  180c44:	1080180c 	andi	r2,r2,96
  180c48:	157ff61e 	bne	r2,r21,180c24 <__alt_data_end+0xfff80c24>
				break;
		}

		if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) != ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
  180c4c:	d8804403 	ldbu	r2,272(sp)
  180c50:	00c01804 	movi	r3,96
  180c54:	1080180c 	andi	r2,r2,96
  180c58:	10c0271e 	bne	r2,r3,180cf8 <adv7513_int_handler+0x1f0>
			goto __unplugged_iret;

		// now we have both HPD and monitor-sense signal asserted

		// power up the hdmi-encoder ...
		r = adv7513_do_hpd_powerup(ec);
  180c5c:	8009883a 	mov	r4,r16
  180c60:	01804d00 	call	1804d0 <adv7513_do_hpd_powerup>
		if (r != 0)
  180c64:	1000241e 	bne	r2,zero,180cf8 <adv7513_int_handler+0x1f0>
			goto __unplugged_iret;

		// readback edid data
		r = adv7513_edid_read(ec, edid, 0);
  180c68:	8009883a 	mov	r4,r16
  180c6c:	d80b883a 	mov	r5,sp
  180c70:	000d883a 	mov	r6,zero
  180c74:	01806cc0 	call	1806cc <adv7513_edid_read>
		if (r != 0)
			dvi_mode = 1;

		if (edid[0x7e] == 0)
  180c78:	d8c01f83 	ldbu	r3,126(sp)
  180c7c:	18000226 	beq	r3,zero,180c88 <adv7513_int_handler+0x180>
		if (r != 0)
			goto __unplugged_iret;

		// readback edid data
		r = adv7513_edid_read(ec, edid, 0);
		if (r != 0)
  180c80:	1024c03a 	cmpne	r18,r2,zero
  180c84:	00000106 	br	180c8c <adv7513_int_handler+0x184>
			dvi_mode = 1;

		if (edid[0x7e] == 0)
			dvi_mode = 1;
  180c88:	04800044 	movi	r18,1
  180c8c:	05403204 	movi	r21,200

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
			r = adv7513_chip_init(ec, dvi_mode);
  180c90:	8009883a 	mov	r4,r16
  180c94:	900b883a 	mov	r5,r18
  180c98:	01808380 	call	180838 <adv7513_chip_init>
			if (r != 0)
  180c9c:	1000161e 	bne	r2,zero,180cf8 <adv7513_int_handler+0x1f0>
				goto __unplugged_iret;

			r = adv7513_power_state(ec, &pwr_state);
  180ca0:	8009883a 	mov	r4,r16
  180ca4:	d9404304 	addi	r5,sp,268
  180ca8:	01806100 	call	180610 <adv7513_power_state>
			if (r != 0)
  180cac:	1000121e 	bne	r2,zero,180cf8 <adv7513_int_handler+0x1f0>
				goto __unplugged_iret;

			if (pwr_state != 0)
  180cb0:	d8804317 	ldw	r2,268(sp)
  180cb4:	1000021e 	bne	r2,zero,180cc0 <adv7513_int_handler+0x1b8>
  180cb8:	ad7fffc4 	addi	r21,r21,-1

		if (edid[0x7e] == 0)
			dvi_mode = 1;

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
  180cbc:	a83ff41e 	bne	r21,zero,180c90 <__alt_data_end+0xfff80c90>
			if (pwr_state != 0)
				break;
			--pwron_retry_count;
		}

		r = adv7513_power_state(ec, &pwr_state);
  180cc0:	8009883a 	mov	r4,r16
  180cc4:	d9404304 	addi	r5,sp,268
  180cc8:	01806100 	call	180610 <adv7513_power_state>
		if (r != 0)
  180ccc:	10000a1e 	bne	r2,zero,180cf8 <adv7513_int_handler+0x1f0>
			goto __unplugged_iret;

		if (pwr_state == 0)
  180cd0:	d8804317 	ldw	r2,268(sp)
  180cd4:	10000826 	beq	r2,zero,180cf8 <adv7513_int_handler+0x1f0>
	return;

__plugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
  180cd8:	8009883a 	mov	r4,r16
  180cdc:	01402484 	movi	r5,146
  180ce0:	a00d883a 	mov	r6,r20
  180ce4:	01865780 	call	186578 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94 & 0xbf);  // disable sending monitor-sense interrupt since it is already connected
  180ce8:	8009883a 	mov	r4,r16
  180cec:	01402504 	movi	r5,148
  180cf0:	99802fcc 	andi	r6,r19,191
  180cf4:	00000706 	br	180d14 <adv7513_int_handler+0x20c>
	}

__unplugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
  180cf8:	8009883a 	mov	r4,r16
  180cfc:	01402484 	movi	r5,146
  180d00:	a00d883a 	mov	r6,r20
  180d04:	01865780 	call	186578 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94);
  180d08:	8009883a 	mov	r4,r16
  180d0c:	01402504 	movi	r5,148
  180d10:	980d883a 	mov	r6,r19
  180d14:	01865780 	call	186578 <reg_write>
	reg_write(ec, 0x95, int_mask.reg95);
  180d18:	8009883a 	mov	r4,r16
  180d1c:	01402544 	movi	r5,149
  180d20:	880d883a 	mov	r6,r17
  180d24:	01865780 	call	186578 <reg_write>
	reg_write(ec, 0x92, int_mask.reg92);
	reg_write(ec, 0x94, int_mask.reg94 & 0xbf);  // disable sending monitor-sense interrupt since it is already connected
	reg_write(ec, 0x95, int_mask.reg95);

	return;
}
  180d28:	dfc04b17 	ldw	ra,300(sp)
  180d2c:	dd404a17 	ldw	r21,296(sp)
  180d30:	dd004917 	ldw	r20,292(sp)
  180d34:	dcc04817 	ldw	r19,288(sp)
  180d38:	dc804717 	ldw	r18,284(sp)
  180d3c:	dc404617 	ldw	r17,280(sp)
  180d40:	dc004517 	ldw	r16,276(sp)
  180d44:	dec04c04 	addi	sp,sp,304
  180d48:	f800283a 	ret

00180d4c <adv7513_chip_init_3d>:

	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
  180d4c:	defff904 	addi	sp,sp,-28
  180d50:	dcc00315 	stw	r19,12(sp)
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
  180d54:	018003c4 	movi	r6,15

	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
  180d58:	2827883a 	mov	r19,r5
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
  180d5c:	000f883a 	mov	r7,zero
  180d60:	01400544 	movi	r5,21

	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
  180d64:	dc000015 	stw	r16,0(sp)
  180d68:	dfc00615 	stw	ra,24(sp)
  180d6c:	dd400515 	stw	r21,20(sp)
  180d70:	dd000415 	stw	r20,16(sp)
  180d74:	dc800215 	stw	r18,8(sp)
  180d78:	dc400115 	stw	r17,4(sp)
  180d7c:	2021883a 	mov	r16,r4
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
  180d80:	01865bc0 	call	1865bc <reg_update_bits>
  180d84:	10003f1e 	bne	r2,zero,180e84 <adv7513_chip_init_3d+0x138>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
  180d88:	8009883a 	mov	r4,r16
  180d8c:	01400584 	movi	r5,22
  180d90:	01800f44 	movi	r6,61
  180d94:	01c00c04 	movi	r7,48
  180d98:	01865bc0 	call	1865bc <reg_update_bits>
  180d9c:	1000391e 	bne	r2,zero,180e84 <adv7513_chip_init_3d+0x138>
		return -1;

	switch (vic) {
  180da0:	9c7fffc4 	addi	r17,r19,-1
  180da4:	008005c4 	movi	r2,23
  180da8:	14402136 	bltu	r2,r17,180e30 <adv7513_chip_init_3d+0xe4>
  180dac:	880690ba 	slli	r3,r17,2
  180db0:	00800634 	movhi	r2,24
  180db4:	10837104 	addi	r2,r2,3524
  180db8:	1885883a 	add	r2,r3,r2
  180dbc:	10800017 	ldw	r2,0(r2)
  180dc0:	1000683a 	jmp	r2
  180dc4:	00180e2c 	andhi	zero,zero,24632
  180dc8:	00180e2c 	andhi	zero,zero,24632
  180dcc:	00180e24 	muli	zero,zero,24632
  180dd0:	00180e24 	muli	zero,zero,24632
  180dd4:	00180e24 	muli	zero,zero,24632
  180dd8:	00180e2c 	andhi	zero,zero,24632
  180ddc:	00180e24 	muli	zero,zero,24632
  180de0:	00180e2c 	andhi	zero,zero,24632
  180de4:	00180e24 	muli	zero,zero,24632
  180de8:	00180e2c 	andhi	zero,zero,24632
  180dec:	00180e24 	muli	zero,zero,24632
  180df0:	00180e2c 	andhi	zero,zero,24632
  180df4:	00180e24 	muli	zero,zero,24632
  180df8:	00180e2c 	andhi	zero,zero,24632
  180dfc:	00180e24 	muli	zero,zero,24632
  180e00:	00180e24 	muli	zero,zero,24632
  180e04:	00180e2c 	andhi	zero,zero,24632
  180e08:	00180e24 	muli	zero,zero,24632
  180e0c:	00180e24 	muli	zero,zero,24632
  180e10:	00180e24 	muli	zero,zero,24632
  180e14:	00180e2c 	andhi	zero,zero,24632
  180e18:	00180e24 	muli	zero,zero,24632
  180e1c:	00180e2c 	andhi	zero,zero,24632
  180e20:	00180e24 	muli	zero,zero,24632
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_16V9;
  180e24:	05000044 	movi	r20,1
  180e28:	00000106 	br	180e30 <adv7513_chip_init_3d+0xe4>
	case ADV7513_VIC_240p60x8_4_3:	// (2880)x240p 60Hz
	case ADV7513_VIC_480p60x2_4_3:	// 1440x480p 60Hz
	case ADV7513_VIC_576p50_4_3:	// 720x576p 50Hz
	case ADV7513_VIC_576i50x2_4_3:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_4_3:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_4V3;
  180e2c:	0029883a 	mov	r20,zero
		aspect = ADV7513_INPUT_ASPECT_16V9;
		break;
	}

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
  180e30:	054005c4 	movi	r21,23
  180e34:	04800084 	movi	r18,2
  180e38:	8009883a 	mov	r4,r16
  180e3c:	a80b883a 	mov	r5,r21
  180e40:	900d883a 	mov	r6,r18
  180e44:	a50f883a 	add	r7,r20,r20
  180e48:	01865bc0 	call	1865bc <reg_update_bits>
  180e4c:	10001126 	beq	r2,zero,180e94 <adv7513_chip_init_3d+0x148>
  180e50:	00000c06 	br	180e84 <adv7513_chip_init_3d+0x138>
		return -1;
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- 0)dvi 1)hdmi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (1 & 0x01) << 1) != 0)
  180e54:	8009883a 	mov	r4,r16
  180e58:	01402bc4 	movi	r5,175
  180e5c:	01802084 	movi	r6,130
  180e60:	900f883a 	mov	r7,r18
  180e64:	01865bc0 	call	1865bc <reg_update_bits>
  180e68:	1000061e 	bne	r2,zero,180e84 <adv7513_chip_init_3d+0x138>
		return -1;

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
  180e6c:	01802004 	movi	r6,128
  180e70:	8009883a 	mov	r4,r16
  180e74:	01401004 	movi	r5,64
  180e78:	300f883a 	mov	r7,r6
  180e7c:	01865bc0 	call	1865bc <reg_update_bits>
  180e80:	10001226 	beq	r2,zero,180ecc <adv7513_chip_init_3d+0x180>
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format_3d(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_INVALID, vic) != 0)
		return -1;
  180e84:	00bfffc4 	movi	r2,-1
	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
	if (adv7513_video_init_3d(ec, vic) != 0)
  180e88:	1004c03a 	cmpne	r2,r2,zero
  180e8c:	0085c83a 	sub	r2,zero,r2
  180e90:	0000ca06 	br	1811bc <adv7513_chip_init_3d+0x470>

	//printf("adv7513_video_out_format_3d()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
  180e94:	8009883a 	mov	r4,r16
  180e98:	01400584 	movi	r5,22
  180e9c:	01802004 	movi	r6,128
  180ea0:	000f883a 	mov	r7,zero
  180ea4:	01865bc0 	call	1865bc <reg_update_bits>
  180ea8:	103ff61e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

	// 0x18[7] <- enable
	// 0x18[6:5] <- scaling
	// 0x18[4:0] <- csc_a1[4:0]
	int regv = (enable ? 1 : 0) << 7;
	if (reg_update_bits(ec, 0x18, 0x80, regv) != 0)
  180eac:	8009883a 	mov	r4,r16
  180eb0:	01400604 	movi	r5,24
  180eb4:	01802004 	movi	r6,128
  180eb8:	000f883a 	mov	r7,zero
  180ebc:	01865bc0 	call	1865bc <reg_update_bits>
  180ec0:	103fe426 	beq	r2,zero,180e54 <__alt_data_end+0xfff80e54>
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
	if (adv7513_video_init_3d(ec, vic) != 0)
		return -1;
  180ec4:	00bfffc4 	movi	r2,-1
  180ec8:	0000bc06 	br	1811bc <adv7513_chip_init_3d+0x470>
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
		return -1;

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
  180ecc:	8009883a 	mov	r4,r16
  180ed0:	01401304 	movi	r5,76
  180ed4:	018003c4 	movi	r6,15
  180ed8:	01c00104 	movi	r7,4
  180edc:	01865bc0 	call	1865bc <reg_update_bits>
  180ee0:	103fe81e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

	// pixel repetition
	// 0x3b[6:5] <- pr mode 0)auto 1)max 2)manual 3)manual
	// 0x3b[4:3] <- pr pll (x input) 0)x1 1)x2 2)x4 3)x4
	// 0x3b[2:1] <- pr pll (sent) 0)x1 1)x2 2)x4 3)x4
	if (reg_update_bits(ec, 0x3b, 0x7e, (2 << 5) | (0 << 3) | (0 << 1)) != 0)
  180ee4:	8009883a 	mov	r4,r16
  180ee8:	01400ec4 	movi	r5,59
  180eec:	01801f84 	movi	r6,126
  180ef0:	01c01004 	movi	r7,64
  180ef4:	01865bc0 	call	1865bc <reg_update_bits>
  180ef8:	103fe21e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// manual VIC
	// 0x3c[5:0] <- 0x01 & 0x3f
	if (reg_update_bits(ec, 0x3c, 0x3f, vic) != 0)
  180efc:	8009883a 	mov	r4,r16
  180f00:	01400f04 	movi	r5,60
  180f04:	01800fc4 	movi	r6,63
  180f08:	980f883a 	mov	r7,r19
  180f0c:	01865bc0 	call	1865bc <reg_update_bits>
  180f10:	103fdc1e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
  180f14:	00800044 	movi	r2,1
	avi->bar.top_e = 0;
	avi->bar.bottom_s = 0;
	avi->bar.left_e = 0;
	avi->bar.right_s = 0;

	avi->active_fmt_ar = 8;		// active format aspect ratio (same as pict_ar)
  180f18:	00c00204 	movi	r3,8
	int regv;

	//printf("adv7513_avi_infoframe_3d()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
  180f1c:	84800915 	stw	r18,36(r16)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
  180f20:	80000c15 	stw	zero,48(r16)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
  180f24:	80800b15 	stw	r2,44(r16)

	avi->colorimetry = 0;		// colorimetry
  180f28:	80000f15 	stw	zero,60(r16)
	avi->colorimetry_ext = 0;	// extended colorimetry
  180f2c:	80001215 	stw	zero,72(r16)
	avi->scaling = 0;			// non-uniform scaling
  180f30:	80001015 	stw	zero,64(r16)
	avi->quant = 0;				// rgb quantization range
  180f34:	80001115 	stw	zero,68(r16)
	avi->itc = 0;				// it content
  180f38:	80001315 	stw	zero,76(r16)
	avi->pr = 1;				// pixel repetition factor 0)no 1)2x 2)3x 3)4x ...
  180f3c:	80801515 	stw	r2,84(r16)
	avi->vic = vic;				// video identification code
  180f40:	84c01415 	stw	r19,80(r16)
	avi->yq1yq0 = 0;			// ??
  180f44:	80001615 	stw	zero,88(r16)

	avi->bar_info = 0;  		// bar fields valid
  180f48:	80000a15 	stw	zero,40(r16)
	avi->bar.top_e = 0;
  180f4c:	80001715 	stw	zero,92(r16)
	avi->bar.bottom_s = 0;
  180f50:	80001815 	stw	zero,96(r16)
	avi->bar.left_e = 0;
  180f54:	80001915 	stw	zero,100(r16)
	avi->bar.right_s = 0;
  180f58:	80001a15 	stw	zero,104(r16)

	avi->active_fmt_ar = 8;		// active format aspect ratio (same as pict_ar)
  180f5c:	80c00d15 	stw	r3,52(r16)

	switch (vic) {
  180f60:	ac402036 	bltu	r21,r17,180fe4 <adv7513_chip_init_3d+0x298>
  180f64:	882290ba 	slli	r17,r17,2
  180f68:	00c00634 	movhi	r3,24
  180f6c:	18c3df04 	addi	r3,r3,3964
  180f70:	88e3883a 	add	r17,r17,r3
  180f74:	88c00017 	ldw	r3,0(r17)
  180f78:	1800683a 	jmp	r3
  180f7c:	00180fe0 	cmpeqi	zero,zero,24639
  180f80:	00180fe0 	cmpeqi	zero,zero,24639
  180f84:	00180fdc 	xori	zero,zero,24639
  180f88:	00180fdc 	xori	zero,zero,24639
  180f8c:	00180fdc 	xori	zero,zero,24639
  180f90:	00180fe0 	cmpeqi	zero,zero,24639
  180f94:	00180fdc 	xori	zero,zero,24639
  180f98:	00180fe0 	cmpeqi	zero,zero,24639
  180f9c:	00180fdc 	xori	zero,zero,24639
  180fa0:	00180fe0 	cmpeqi	zero,zero,24639
  180fa4:	00180fdc 	xori	zero,zero,24639
  180fa8:	00180fe0 	cmpeqi	zero,zero,24639
  180fac:	00180fdc 	xori	zero,zero,24639
  180fb0:	00180fe0 	cmpeqi	zero,zero,24639
  180fb4:	00180fdc 	xori	zero,zero,24639
  180fb8:	00180fdc 	xori	zero,zero,24639
  180fbc:	00180fe0 	cmpeqi	zero,zero,24639
  180fc0:	00180fdc 	xori	zero,zero,24639
  180fc4:	00180fdc 	xori	zero,zero,24639
  180fc8:	00180fdc 	xori	zero,zero,24639
  180fcc:	00180fe0 	cmpeqi	zero,zero,24639
  180fd0:	00180fdc 	xori	zero,zero,24639
  180fd4:	00180fe0 	cmpeqi	zero,zero,24639
  180fd8:	00180fdc 	xori	zero,zero,24639
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		avi->pict_ar = 2;			// picture aspect ratio (16:9)
  180fdc:	00800084 	movi	r2,2
  180fe0:	80800e15 	stw	r2,56(r16)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
  180fe4:	01800404 	movi	r6,16
  180fe8:	8009883a 	mov	r4,r16
  180fec:	01401104 	movi	r5,68
  180ff0:	300f883a 	mov	r7,r6
  180ff4:	01865bc0 	call	1865bc <reg_update_bits>
  180ff8:	103fa21e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
  180ffc:	01803004 	movi	r6,192
  181000:	8009883a 	mov	r4,r16
  181004:	01401284 	movi	r5,74
  181008:	300f883a 	mov	r7,r6
  18100c:	01865bc0 	call	1865bc <reg_update_bits>
  181010:	103f9c1e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
  181014:	80800c17 	ldw	r2,48(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
  181018:	8009883a 	mov	r4,r16
  18101c:	01401544 	movi	r5,85

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
  181020:	108000cc 	andi	r2,r2,3
  181024:	100e917a 	slli	r7,r2,5
  181028:	80800b17 	ldw	r2,44(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
  18102c:	01801c04 	movi	r6,112

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
  181030:	1080004c 	andi	r2,r2,1
  181034:	1004913a 	slli	r2,r2,4
  181038:	3884b03a 	or	r2,r7,r2
  18103c:	81c00917 	ldw	r7,36(r16)
  181040:	39c000cc 	andi	r7,r7,3
  181044:	11ceb03a 	or	r7,r2,r7
  181048:	80800a17 	ldw	r2,40(r16)
  18104c:	108000cc 	andi	r2,r2,3
  181050:	1085883a 	add	r2,r2,r2
  181054:	1085883a 	add	r2,r2,r2
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
  181058:	388eb03a 	or	r7,r7,r2
  18105c:	01865bc0 	call	1865bc <reg_update_bits>
  181060:	103f881e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
  181064:	81800f17 	ldw	r6,60(r16)
  181068:	80800e17 	ldw	r2,56(r16)
	if (reg_write(ec, 0x56, regv) != 0)
  18106c:	8009883a 	mov	r4,r16
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
  181070:	300c91ba 	slli	r6,r6,6
  181074:	108000cc 	andi	r2,r2,3
  181078:	1004913a 	slli	r2,r2,4
  18107c:	31803fcc 	andi	r6,r6,255
	if (reg_write(ec, 0x56, regv) != 0)
  181080:	01401584 	movi	r5,86
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
  181084:	3084b03a 	or	r2,r6,r2
  181088:	81800d17 	ldw	r6,52(r16)
  18108c:	318003cc 	andi	r6,r6,15
	if (reg_write(ec, 0x56, regv) != 0)
  181090:	118cb03a 	or	r6,r2,r6
  181094:	01865780 	call	186578 <reg_write>
  181098:	103f7a1e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
  18109c:	80801317 	ldw	r2,76(r16)
	if (reg_write(ec, 0x57, regv) != 0)
  1810a0:	8009883a 	mov	r4,r16
  1810a4:	014015c4 	movi	r5,87

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
  1810a8:	100491fa 	slli	r2,r2,7
  1810ac:	11803fcc 	andi	r6,r2,255
  1810b0:	80801217 	ldw	r2,72(r16)
  1810b4:	108001cc 	andi	r2,r2,7
  1810b8:	1004913a 	slli	r2,r2,4
  1810bc:	3084b03a 	or	r2,r6,r2
  1810c0:	81801017 	ldw	r6,64(r16)
  1810c4:	318000cc 	andi	r6,r6,3
  1810c8:	118cb03a 	or	r6,r2,r6
  1810cc:	80801117 	ldw	r2,68(r16)
  1810d0:	108000cc 	andi	r2,r2,3
  1810d4:	1085883a 	add	r2,r2,r2
  1810d8:	1085883a 	add	r2,r2,r2
	if (reg_write(ec, 0x57, regv) != 0)
  1810dc:	308cb03a 	or	r6,r6,r2
  1810e0:	01865780 	call	186578 <reg_write>
  1810e4:	103f671e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
  1810e8:	81801617 	ldw	r6,88(r16)
	if (reg_write(ec, 0x59, regv) != 0)
  1810ec:	8009883a 	mov	r4,r16
  1810f0:	01401644 	movi	r5,89
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
	if (reg_write(ec, 0x57, regv) != 0)
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
  1810f4:	300c913a 	slli	r6,r6,4
	if (reg_write(ec, 0x59, regv) != 0)
  1810f8:	31803c0c 	andi	r6,r6,240
  1810fc:	01865780 	call	186578 <reg_write>
  181100:	103f601e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
	if (reg_write(ec, 0x5a, regv) != 0)
  181104:	81801703 	ldbu	r6,92(r16)
  181108:	8009883a 	mov	r4,r16
  18110c:	01401684 	movi	r5,90
  181110:	01865780 	call	186578 <reg_write>
  181114:	103f5b1e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
	if (reg_write(ec, 0x5b, regv) != 0)
  181118:	81801743 	ldbu	r6,93(r16)
  18111c:	8009883a 	mov	r4,r16
  181120:	014016c4 	movi	r5,91
  181124:	01865780 	call	186578 <reg_write>
  181128:	103f561e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
	if (reg_write(ec, 0x5c, regv) != 0)
  18112c:	81801803 	ldbu	r6,96(r16)
  181130:	8009883a 	mov	r4,r16
  181134:	01401704 	movi	r5,92
  181138:	01865780 	call	186578 <reg_write>
  18113c:	103f511e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
	if (reg_write(ec, 0x5d, regv) != 0)
  181140:	81801843 	ldbu	r6,97(r16)
  181144:	8009883a 	mov	r4,r16
  181148:	01401744 	movi	r5,93
  18114c:	01865780 	call	186578 <reg_write>
  181150:	103f4c1e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
	if (reg_write(ec, 0x5e, regv) != 0)
  181154:	81801903 	ldbu	r6,100(r16)
  181158:	8009883a 	mov	r4,r16
  18115c:	01401784 	movi	r5,94
  181160:	01865780 	call	186578 <reg_write>
  181164:	103f471e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
	if (reg_write(ec, 0x5f, regv) != 0)
  181168:	81801943 	ldbu	r6,101(r16)
  18116c:	8009883a 	mov	r4,r16
  181170:	014017c4 	movi	r5,95
  181174:	01865780 	call	186578 <reg_write>
  181178:	103f421e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
	if (reg_write(ec, 0x60, regv) != 0)
  18117c:	81801a03 	ldbu	r6,104(r16)
  181180:	8009883a 	mov	r4,r16
  181184:	01401804 	movi	r5,96
  181188:	01865780 	call	186578 <reg_write>
  18118c:	103f3d1e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>
		return -1;

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
	if (reg_write(ec, 0x61, regv) != 0)
  181190:	81801a43 	ldbu	r6,105(r16)
  181194:	8009883a 	mov	r4,r16
  181198:	01401844 	movi	r5,97
  18119c:	01865780 	call	186578 <reg_write>
  1811a0:	103f381e 	bne	r2,zero,180e84 <__alt_data_end+0xfff80e84>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
  1811a4:	8009883a 	mov	r4,r16
  1811a8:	01401284 	movi	r5,74
  1811ac:	01801004 	movi	r6,64
  1811b0:	01866bc0 	call	1866bc <reg_clear_bits>
  1811b4:	103f3426 	beq	r2,zero,180e88 <__alt_data_end+0xfff80e88>
  1811b8:	003f3206 	br	180e84 <__alt_data_end+0xfff80e84>

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
}
  1811bc:	dfc00617 	ldw	ra,24(sp)
  1811c0:	dd400517 	ldw	r21,20(sp)
  1811c4:	dd000417 	ldw	r20,16(sp)
  1811c8:	dcc00317 	ldw	r19,12(sp)
  1811cc:	dc800217 	ldw	r18,8(sp)
  1811d0:	dc400117 	ldw	r17,4(sp)
  1811d4:	dc000017 	ldw	r16,0(sp)
  1811d8:	dec00704 	addi	sp,sp,28
  1811dc:	f800283a 	ret

001811e0 <adv7513_int_setup>:

	return;
}

int adv7513_int_setup(struct hdmi_encoder *ec, const struct adv7513_int_mask *mask, alt_isr_func isr)
{
  1811e0:	defffb04 	addi	sp,sp,-20
  1811e4:	dc800315 	stw	r18,12(sp)
  1811e8:	dc400215 	stw	r17,8(sp)
  1811ec:	dc000115 	stw	r16,4(sp)
  1811f0:	dfc00415 	stw	ra,16(sp)
	};
};

static inline unsigned int adv7513_int_mask_to_long(const struct adv7513_int_mask *mask)
{
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
  1811f4:	28800017 	ldw	r2,0(r5)
  1811f8:	2021883a 	mov	r16,r4
  1811fc:	2823883a 	mov	r17,r5
  181200:	1006943a 	slli	r3,r2,16
  181204:	28800117 	ldw	r2,4(r5)
  181208:	3025883a 	mov	r18,r6
  18120c:	1004923a 	slli	r2,r2,8
  181210:	1884b03a 	or	r2,r3,r2
  181214:	28c00217 	ldw	r3,8(r5)
	//printf("adv7513_int_setup()\n");

	ec->int_mask = adv7513_int_mask_to_long(mask);

	// disable HDMI_TX_INT
	DISABLE_HDMI_IRQ;
  181218:	01400104 	movi	r5,4
  18121c:	10c4b03a 	or	r2,r2,r3
{
	int r = 0;

	//printf("adv7513_int_setup()\n");

	ec->int_mask = adv7513_int_mask_to_long(mask);
  181220:	20800615 	stw	r2,24(r4)

	// disable HDMI_TX_INT
	DISABLE_HDMI_IRQ;
  181224:	0009883a 	mov	r4,zero
  181228:	01965700 	call	196570 <alt_ic_irq_disable>

	r = reg_write(ec, 0x92, 0);
  18122c:	8009883a 	mov	r4,r16
  181230:	01402484 	movi	r5,146
  181234:	000d883a 	mov	r6,zero
  181238:	01865780 	call	186578 <reg_write>
	if (r != 0)
  18123c:	10000226 	beq	r2,zero,181248 <adv7513_int_setup+0x68>
		return -1;
  181240:	00bfffc4 	movi	r2,-1
  181244:	00003f06 	br	181344 <adv7513_int_setup+0x164>

	r = reg_write(ec, 0x94, 0);
  181248:	8009883a 	mov	r4,r16
  18124c:	01402504 	movi	r5,148
  181250:	000d883a 	mov	r6,zero
  181254:	01865780 	call	186578 <reg_write>
	if (r != 0)
  181258:	103ff91e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
		return -1;

	r = reg_write(ec, 0x95, 0);
  18125c:	8009883a 	mov	r4,r16
  181260:	01402544 	movi	r5,149
  181264:	000d883a 	mov	r6,zero
  181268:	01865780 	call	186578 <reg_write>
	if (r != 0)
  18126c:	103ff41e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
		return -1;

	// clear int flags
	CLEAR_HDMI_IRQ_FLAG;
  181270:	00800834 	movhi	r2,32
  181274:	10841304 	addi	r2,r2,4172
  181278:	10000035 	stwio	zero,0(r2)

	r = reg_write(ec, 0x93, 0xff);
  18127c:	8009883a 	mov	r4,r16
  181280:	014024c4 	movi	r5,147
  181284:	01803fc4 	movi	r6,255
  181288:	01865780 	call	186578 <reg_write>
	if (r != 0)
  18128c:	103fec1e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
		return -1;

	r = reg_write(ec, 0x96, 0xff);
  181290:	8009883a 	mov	r4,r16
  181294:	01402584 	movi	r5,150
  181298:	01803fc4 	movi	r6,255
  18129c:	01865780 	call	186578 <reg_write>
	if (r != 0)
  1812a0:	103fe71e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
		return -1;

	r = reg_write(ec, 0x97, 0xff);
  1812a4:	8009883a 	mov	r4,r16
  1812a8:	014025c4 	movi	r5,151
  1812ac:	01803fc4 	movi	r6,255
  1812b0:	01865780 	call	186578 <reg_write>
	if (r != 0)
  1812b4:	103fe21e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
		return -1;

	// enable interrupt
	if (ec->int_mask > 0) {
  1812b8:	80800617 	ldw	r2,24(r16)
  1812bc:	10002026 	beq	r2,zero,181340 <adv7513_int_setup+0x160>
		// register isr
		if (isr) {
  1812c0:	9000061e 	bne	r18,zero,1812dc <adv7513_int_setup+0xfc>
			if (r != 0)
				return -1;
		}

		// enable interrupts
		r = reg_write(ec, 0x92, mask->reg92);
  1812c4:	89800017 	ldw	r6,0(r17)
  1812c8:	8009883a 	mov	r4,r16
  1812cc:	01402484 	movi	r5,146
  1812d0:	01865780 	call	186578 <reg_write>
		if (r != 0)
  1812d4:	10000926 	beq	r2,zero,1812fc <adv7513_int_setup+0x11c>
  1812d8:	003fd906 	br	181240 <__alt_data_end+0xfff81240>
	// enable interrupt
	if (ec->int_mask > 0) {
		// register isr
		if (isr) {
			// register interrupt handler
			r = REGISTER_HDMI_ISR(ec,isr);
  1812dc:	d8000015 	stw	zero,0(sp)
  1812e0:	0009883a 	mov	r4,zero
  1812e4:	01400104 	movi	r5,4
  1812e8:	900d883a 	mov	r6,r18
  1812ec:	800f883a 	mov	r7,r16
  1812f0:	01964800 	call	196480 <alt_ic_isr_register>
			if (r != 0)
  1812f4:	103ff326 	beq	r2,zero,1812c4 <__alt_data_end+0xfff812c4>
  1812f8:	003fd106 	br	181240 <__alt_data_end+0xfff81240>
		// enable interrupts
		r = reg_write(ec, 0x92, mask->reg92);
		if (r != 0)
			return -1;

		r = reg_write(ec, 0x94, mask->reg94);
  1812fc:	89800117 	ldw	r6,4(r17)
  181300:	8009883a 	mov	r4,r16
  181304:	01402504 	movi	r5,148
  181308:	01865780 	call	186578 <reg_write>
		if (r != 0)
  18130c:	103fcc1e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
			return -1;

		r = reg_write(ec, 0x95, mask->reg95);
  181310:	89800217 	ldw	r6,8(r17)
  181314:	8009883a 	mov	r4,r16
  181318:	01402544 	movi	r5,149
  18131c:	01865780 	call	186578 <reg_write>
		if (r != 0)
  181320:	103fc71e 	bne	r2,zero,181240 <__alt_data_end+0xfff81240>
			return -1;

		ENABLE_HDMI_IRQ;
  181324:	00800834 	movhi	r2,32
  181328:	10841204 	addi	r2,r2,4168
  18132c:	00c00044 	movi	r3,1
  181330:	10c00035 	stwio	r3,0(r2)
  181334:	0009883a 	mov	r4,zero
  181338:	01400104 	movi	r5,4
  18133c:	01964d00 	call	1964d0 <alt_ic_irq_enable>

	}

	return 0;
  181340:	0005883a 	mov	r2,zero
}
  181344:	dfc00417 	ldw	ra,16(sp)
  181348:	dc800317 	ldw	r18,12(sp)
  18134c:	dc400217 	ldw	r17,8(sp)
  181350:	dc000117 	ldw	r16,4(sp)
  181354:	dec00504 	addi	sp,sp,20
  181358:	f800283a 	ret

0018135c <adv7513_init>:


int adv7513_init()	{
  18135c:	defffb04 	addi	sp,sp,-20

	int r = 0, rr = 0;

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));
  181360:	d809883a 	mov	r4,sp
  181364:	000b883a 	mov	r5,zero
  181368:	01800304 	movi	r6,12

	return 0;
}


int adv7513_init()	{
  18136c:	dfc00415 	stw	ra,16(sp)
  181370:	dc000315 	stw	r16,12(sp)

	int r = 0, rr = 0;

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));
  181374:	0188fb80 	call	188fb8 <memset>

	adv7513_encoder.slave_addr = ADV7513_SALVE_ADDR8;
  181378:	040006b4 	movhi	r16,26
  18137c:	840bda04 	addi	r16,r16,12136
  181380:	00801c84 	movi	r2,114
	adv7513_encoder.edid_addr  = ADV7513_EDID_ADDR8;
	adv7513_encoder.hpd	       = 0;

	printf("[adv7513_init] Identifying Chip\n");
  181384:	010006b4 	movhi	r4,26

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));

	adv7513_encoder.slave_addr = ADV7513_SALVE_ADDR8;
  181388:	80800015 	stw	r2,0(r16)
	adv7513_encoder.edid_addr  = ADV7513_EDID_ADDR8;
	adv7513_encoder.hpd	       = 0;

	printf("[adv7513_init] Identifying Chip\n");
  18138c:	212d0a04 	addi	r4,r4,-19416
	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));

	adv7513_encoder.slave_addr = ADV7513_SALVE_ADDR8;
	adv7513_encoder.edid_addr  = ADV7513_EDID_ADDR8;
  181390:	00801f84 	movi	r2,126
  181394:	80800115 	stw	r2,4(r16)
	adv7513_encoder.hpd	       = 0;
  181398:	80000515 	stw	zero,20(r16)

	printf("[adv7513_init] Identifying Chip\n");
  18139c:	018920c0 	call	18920c <puts>

	r = adv7513_chip_identify(&adv7513_encoder);
  1813a0:	8009883a 	mov	r4,r16
  1813a4:	01803ac0 	call	1803ac <adv7513_chip_identify>
	if (r != 0) {
  1813a8:	10000326 	beq	r2,zero,1813b8 <adv7513_init+0x5c>
		printf("[adv7513_init][error] failed to do chip-identification! (%d)\n", r);
  1813ac:	010006b4 	movhi	r4,26
  1813b0:	212d1204 	addi	r4,r4,-19384
  1813b4:	00001c06 	br	181428 <adv7513_init+0xcc>
		rr = -1;
		goto _safe_exit;
	}

	if ((adv7513_encoder.chip_id[0] == 0x11) && (adv7513_encoder.chip_id[1] == 0x75)) {
  1813b8:	8100070b 	ldhu	r4,28(r16)
  1813bc:	00dd4444 	movi	r3,29969
  1813c0:	80800743 	ldbu	r2,29(r16)
  1813c4:	81800703 	ldbu	r6,28(r16)
  1813c8:	81c00803 	ldbu	r7,32(r16)
  1813cc:	20c0041e 	bne	r4,r3,1813e0 <adv7513_init+0x84>
		printf("[adv7513_init] encoder chip : ADV%02x%02x rev: 0x%02x\n", adv7513_encoder.chip_id[1], adv7513_encoder.chip_id[0], adv7513_encoder.chip_rev[0]);
  1813d0:	010006b4 	movhi	r4,26
  1813d4:	212d2204 	addi	r4,r4,-19320
  1813d8:	100b883a 	mov	r5,r2
  1813dc:	00000406 	br	1813f0 <adv7513_init+0x94>
	} else {
		printf("[adv7513_init] encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", adv7513_encoder.chip_id[0], adv7513_encoder.chip_id[1], adv7513_encoder.chip_rev[0]);
  1813e0:	010006b4 	movhi	r4,26
  1813e4:	300b883a 	mov	r5,r6
  1813e8:	212d3004 	addi	r4,r4,-19264
  1813ec:	100d883a 	mov	r6,r2
  1813f0:	01891080 	call	189108 <printf>
	}

	ie_mask.reg94_bits.hpd = 1;
  1813f4:	d8c00103 	ldbu	r3,4(sp)
  1813f8:	00bff004 	movi	r2,-64
	ie_mask.reg94_bits.monitor_sense = 1;

	r = adv7513_int_setup(&adv7513_encoder, &ie_mask, adv7513_int_handler);
  1813fc:	010006b4 	movhi	r4,26
  181400:	01800634 	movhi	r6,24
	} else {
		printf("[adv7513_init] encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", adv7513_encoder.chip_id[0], adv7513_encoder.chip_id[1], adv7513_encoder.chip_rev[0]);
	}

	ie_mask.reg94_bits.hpd = 1;
	ie_mask.reg94_bits.monitor_sense = 1;
  181404:	1884b03a 	or	r2,r3,r2

	r = adv7513_int_setup(&adv7513_encoder, &ie_mask, adv7513_int_handler);
  181408:	210bda04 	addi	r4,r4,12136
  18140c:	d80b883a 	mov	r5,sp
  181410:	3182c204 	addi	r6,r6,2824
	} else {
		printf("[adv7513_init] encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", adv7513_encoder.chip_id[0], adv7513_encoder.chip_id[1], adv7513_encoder.chip_rev[0]);
	}

	ie_mask.reg94_bits.hpd = 1;
	ie_mask.reg94_bits.monitor_sense = 1;
  181414:	d8800105 	stb	r2,4(sp)

	r = adv7513_int_setup(&adv7513_encoder, &ie_mask, adv7513_int_handler);
  181418:	01811e00 	call	1811e0 <adv7513_int_setup>

	if (r != 0) {
  18141c:	10000626 	beq	r2,zero,181438 <adv7513_init+0xdc>
		printf("[adv7513_init][error] failed to do HDMI_TX_INT interrupt setup! (%d)\n", r);
  181420:	010006b4 	movhi	r4,26
  181424:	212d4204 	addi	r4,r4,-19192
  181428:	100b883a 	mov	r5,r2
  18142c:	01891080 	call	189108 <printf>

	return 0;

	_safe_exit:

	return -1;
  181430:	00bfffc4 	movi	r2,-1
	r = adv7513_int_setup(&adv7513_encoder, &ie_mask, adv7513_int_handler);

	if (r != 0) {
		printf("[adv7513_init][error] failed to do HDMI_TX_INT interrupt setup! (%d)\n", r);
		rr = -1;
		goto _safe_exit;
  181434:	00000a06 	br	181460 <adv7513_init+0x104>
	} else {
		printf("[adv7513_init]success to setup HDMI_TX_INT interrupt handler.\n");
  181438:	010006b4 	movhi	r4,26
  18143c:	212d5404 	addi	r4,r4,-19120
  181440:	018920c0 	call	18920c <puts>
	}

	adv7513_kick_up(&adv7513_encoder);
  181444:	010006b4 	movhi	r4,26
  181448:	210bda04 	addi	r4,r4,12136
  18144c:	01805b80 	call	1805b8 <adv7513_kick_up>

	printf("[adv7513_init] Device Ready\n");
  181450:	010006b4 	movhi	r4,26
  181454:	212d6404 	addi	r4,r4,-19056
  181458:	018920c0 	call	18920c <puts>


	return 0;
  18145c:	0005883a 	mov	r2,zero

	_safe_exit:

	return -1;
}
  181460:	dfc00417 	ldw	ra,16(sp)
  181464:	dc000317 	ldw	r16,12(sp)
  181468:	dec00504 	addi	sp,sp,20
  18146c:	f800283a 	ret

00181470 <eb_establish_timing>:
	int rb;			// reduced blanking
};

static inline void eb_establish_timing(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  181470:	d8800017 	ldw	r2,0(sp)
  181474:	10000626 	beq	r2,zero,181490 <eb_establish_timing+0x20>
		et->valid = 1;
  181478:	00800044 	movi	r2,1
  18147c:	20800015 	stw	r2,0(r4)
		et->width = x;
  181480:	21400115 	stw	r5,4(r4)
		et->height = y;
  181484:	21800215 	stw	r6,8(r4)
		et->refresh = r;
  181488:	21c00315 	stw	r7,12(r4)
  18148c:	00000406 	br	1814a0 <eb_establish_timing+0x30>
		et->interlaced = 0;
		et->rb = 0;
	} else {
		et->valid = 0;
  181490:	20000015 	stw	zero,0(r4)
		et->width = 0;
  181494:	20000115 	stw	zero,4(r4)
		et->height = 0;
  181498:	20000215 	stw	zero,8(r4)
		et->refresh = 0;
  18149c:	20000315 	stw	zero,12(r4)
		et->interlaced = 0;
  1814a0:	20000415 	stw	zero,16(r4)
		et->rb = 0;
  1814a4:	20000515 	stw	zero,20(r4)
  1814a8:	f800283a 	ret

001814ac <edid_decode_cea>:
}
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
  1814ac:	30c00044 	addi	r3,r6,1
  1814b0:	180691fa 	slli	r3,r3,7
    return v;
}
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
  1814b4:	deffe804 	addi	sp,sp,-96
  1814b8:	dd001215 	stw	r20,72(sp)
  1814bc:	dfc01715 	stw	ra,92(sp)
  1814c0:	df001615 	stw	fp,88(sp)
  1814c4:	ddc01515 	stw	r23,84(sp)
  1814c8:	dd801415 	stw	r22,80(sp)
  1814cc:	dd401315 	stw	r21,76(sp)
  1814d0:	dcc01115 	stw	r19,68(sp)
  1814d4:	dc801015 	stw	r18,64(sp)
  1814d8:	dc400f15 	stw	r17,60(sp)
  1814dc:	dc000e15 	stw	r16,56(sp)
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
  1814e0:	28e9883a 	add	r20,r5,r3
	struct edid_cea *cea = &ext_data->cea_ext;

	c = &ext_bin[1];

	// version
	if (*c != 0x03)
  1814e4:	a0c00043 	ldbu	r3,1(r20)
  1814e8:	008000c4 	movi	r2,3
  1814ec:	1883bc1e 	bne	r3,r2,1823e0 <edid_decode_cea+0xf34>
  1814f0:	2021883a 	mov	r16,r4
		return -1;	// todo: support v1 / v2

	ext_data->ext_tag = EDID_EXT_TAG_CEA;
  1814f4:	01416f04 	movi	r5,1468
  1814f8:	3009883a 	mov	r4,r6
  1814fc:	3023883a 	mov	r17,r6
  181500:	0187dd80 	call	187dd8 <__mulsi3>
  181504:	8087883a 	add	r3,r16,r2
  181508:	01000084 	movi	r4,2
  18150c:	19060b15 	stw	r4,6188(r3)
	cea->rev = *c;
  181510:	1805883a 	mov	r2,r3
  181514:	a0c00043 	ldbu	r3,1(r20)
  181518:	10c60c15 	stw	r3,6192(r2)

	// obtain offset to detail timing descriptor
	c = &ext_bin[2];
	if (*c > 4)
  18151c:	a5400083 	ldbu	r21,2(r20)
  181520:	00800104 	movi	r2,4
  181524:	1540032e 	bgeu	r2,r21,181534 <edid_decode_cea+0x88>
		dtd = &ext_bin[*c];
  181528:	a547883a 	add	r3,r20,r21
  18152c:	d8c00015 	stw	r3,0(sp)
  181530:	00000106 	br	181538 <edid_decode_cea+0x8c>
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
	u8 *c, *hv, *dtd = 0;
  181534:	d8000015 	stw	zero,0(sp)
	// obtain offset to detail timing descriptor
	c = &ext_bin[2];
	if (*c > 4)
		dtd = &ext_bin[*c];

	cea->off_dtd = c[0];
  181538:	8809883a 	mov	r4,r17
  18153c:	01416f04 	movi	r5,1468
  181540:	0187dd80 	call	187dd8 <__mulsi3>
  181544:	1025883a 	mov	r18,r2
  181548:	8085883a 	add	r2,r16,r2
  18154c:	15461115 	stw	r21,6212(r2)
	cea->nr_dtd = c[1] & 0x0f;
  181550:	1007883a 	mov	r3,r2
  181554:	a08000c3 	ldbu	r2,3(r20)
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;

	// data block collection
	c = &ext_bin[4];
  181558:	a4c00104 	addi	r19,r20,4
				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
  18155c:	07000044 	movi	fp,1
	c = &ext_bin[2];
	if (*c > 4)
		dtd = &ext_bin[*c];

	cea->off_dtd = c[0];
	cea->nr_dtd = c[1] & 0x0f;
  181560:	108003cc 	andi	r2,r2,15
  181564:	18861215 	stw	r2,6216(r3)

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
  181568:	a08000c3 	ldbu	r2,3(r20)
  18156c:	1004d1fa 	srli	r2,r2,7
  181570:	18860d15 	stw	r2,6196(r3)
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
  181574:	a08000c3 	ldbu	r2,3(r20)
  181578:	1080100c 	andi	r2,r2,64
  18157c:	1004c03a 	cmpne	r2,r2,zero
  181580:	18860e15 	stw	r2,6200(r3)
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
  181584:	a08000c3 	ldbu	r2,3(r20)
  181588:	1080080c 	andi	r2,r2,32
  18158c:	1004c03a 	cmpne	r2,r2,zero
  181590:	18860f15 	stw	r2,6204(r3)
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;
  181594:	a08000c3 	ldbu	r2,3(r20)

	// data block collection
	c = &ext_bin[4];

	cea->nr_dbcs = 0;
  181598:	18061315 	stw	zero,6220(r3)
	cea->nr_dtd = c[1] & 0x0f;

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;
  18159c:	1080040c 	andi	r2,r2,16
  1815a0:	1004c03a 	cmpne	r2,r2,zero
  1815a4:	18861015 	stw	r2,6208(r3)
  1815a8:	90867504 	addi	r2,r18,6612
  1815ac:	8085883a 	add	r2,r16,r2
  1815b0:	d8800115 	stw	r2,4(sp)
  1815b4:	90863404 	addi	r2,r18,6352
  1815b8:	8085883a 	add	r2,r16,r2
  1815bc:	d8800215 	stw	r2,8(sp)

	// data block collection
	c = &ext_bin[4];

	cea->nr_dbcs = 0;
	while (c < dtd) {
  1815c0:	d8c00017 	ldw	r3,0(sp)
  1815c4:	98c2802e 	bgeu	r19,r3,181fc8 <edid_decode_cea+0xb1c>
		switch (*c >> 5) {
  1815c8:	98800003 	ldbu	r2,0(r19)
  1815cc:	01000184 	movi	r4,6
  1815d0:	1004d17a 	srli	r2,r2,5
  1815d4:	10bfffc4 	addi	r2,r2,-1
  1815d8:	10803fcc 	andi	r2,r2,255
  1815dc:	20827a36 	bltu	r4,r2,181fc8 <edid_decode_cea+0xb1c>
  1815e0:	100490ba 	slli	r2,r2,2
  1815e4:	00c00634 	movhi	r3,24
  1815e8:	18c57e04 	addi	r3,r3,5624
  1815ec:	10c5883a 	add	r2,r2,r3
  1815f0:	10800017 	ldw	r2,0(r2)
  1815f4:	1000683a 	jmp	r2
  1815f8:	00181614 	movui	zero,24664
  1815fc:	00181714 	movui	zero,24668
  181600:	00181798 	cmpnei	zero,zero,24670
  181604:	00181d04 	movi	zero,24692
  181608:	00181d44 	movi	zero,24693
  18160c:	00181fc8 	cmpgei	zero,zero,24703
  181610:	00181d74 	movhi	zero,24693
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
  181614:	8809883a 	mov	r4,r17
  181618:	01416f04 	movi	r5,1468
  18161c:	0187dd80 	call	187dd8 <__mulsi3>
  181620:	11461304 	addi	r5,r2,6220
  181624:	814b883a 	add	r5,r16,r5
  181628:	29000017 	ldw	r4,0(r5)
  18162c:	00c00044 	movi	r3,1
  181630:	9d4000c4 	addi	r21,r19,3
  181634:	21800044 	addi	r6,r4,1
  181638:	29800015 	stw	r6,0(r5)
  18163c:	808b883a 	add	r5,r16,r2
  181640:	2909883a 	add	r4,r5,r4
  181644:	20c61405 	stb	r3,6224(r4)
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
  181648:	99000003 	ldbu	r4,0(r19)
  18164c:	10867404 	addi	r2,r2,6608
  181650:	014000c4 	movi	r5,3
  181654:	210007cc 	andi	r4,r4,31
  181658:	80a9883a 	add	r20,r16,r2
  18165c:	0187d180 	call	187d18 <__divsi3>
  181660:	a0800015 	stw	r2,0(r20)
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  181664:	dd000117 	ldw	r20,4(sp)
  181668:	9dc00044 	addi	r23,r19,1
  18166c:	99c00084 	addi	r7,r19,2
  181670:	000d883a 	mov	r6,zero
				cea->db_audio.sad[i].freq = (int)(sad_bin[1] & 0x7f);

				if (cea->db_audio.sad[i].format == CEA_SAD_FMT_LPCM) {
					cea->db_audio.sad[i].resolution = (int)(sad_bin[2] & 0x07);
				} else if (cea->db_audio.sad[i].format != 0) {
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
  181674:	02000204 	movi	r8,8
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  181678:	8809883a 	mov	r4,r17
  18167c:	01416f04 	movi	r5,1468
  181680:	d9800d15 	stw	r6,52(sp)
  181684:	d9c00b15 	stw	r7,44(sp)
  181688:	da000c15 	stw	r8,48(sp)
  18168c:	0187dd80 	call	187dd8 <__mulsi3>
  181690:	8085883a 	add	r2,r16,r2
  181694:	10867417 	ldw	r2,6608(r2)
  181698:	d9800d17 	ldw	r6,52(sp)
  18169c:	d9c00b17 	ldw	r7,44(sp)
  1816a0:	da000c17 	ldw	r8,48(sp)
  1816a4:	3082430e 	bge	r6,r2,181fb4 <edid_decode_cea+0xb08>
				u8 *sad_bin = &c[1+3*i];
				cea->db_audio.sad[i].format = (int)((*sad_bin >> 3) & 0xf);
  1816a8:	b8800003 	ldbu	r2,0(r23)
  1816ac:	1004d0fa 	srli	r2,r2,3
  1816b0:	108003cc 	andi	r2,r2,15
  1816b4:	a0800015 	stw	r2,0(r20)
				cea->db_audio.sad[i].channels = (int)(*sad_bin & 0x7) + 1;
  1816b8:	b9000003 	ldbu	r4,0(r23)
  1816bc:	210001cc 	andi	r4,r4,7
  1816c0:	21000044 	addi	r4,r4,1
  1816c4:	a1000115 	stw	r4,4(r20)
				cea->db_audio.sad[i].freq = (int)(sad_bin[1] & 0x7f);
  1816c8:	39000003 	ldbu	r4,0(r7)
  1816cc:	21001fcc 	andi	r4,r4,127
  1816d0:	a1000215 	stw	r4,8(r20)

				if (cea->db_audio.sad[i].format == CEA_SAD_FMT_LPCM) {
  1816d4:	1700041e 	bne	r2,fp,1816e8 <edid_decode_cea+0x23c>
					cea->db_audio.sad[i].resolution = (int)(sad_bin[2] & 0x07);
  1816d8:	a8800003 	ldbu	r2,0(r21)
  1816dc:	108001cc 	andi	r2,r2,7
  1816e0:	a0800315 	stw	r2,12(r20)
  1816e4:	00000506 	br	1816fc <edid_decode_cea+0x250>
				} else if (cea->db_audio.sad[i].format != 0) {
  1816e8:	10000426 	beq	r2,zero,1816fc <edid_decode_cea+0x250>
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
  1816ec:	40800316 	blt	r8,r2,1816fc <edid_decode_cea+0x250>
						cea->db_audio.sad[i].bitrate = (int)sad_bin[2] * 8;
  1816f0:	a8800003 	ldbu	r2,0(r21)
  1816f4:	100490fa 	slli	r2,r2,3
  1816f8:	a0800415 	stw	r2,16(r20)
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  1816fc:	31800044 	addi	r6,r6,1
  181700:	ad4000c4 	addi	r21,r21,3
  181704:	bdc000c4 	addi	r23,r23,3
  181708:	a5000504 	addi	r20,r20,20
  18170c:	39c000c4 	addi	r7,r7,3
  181710:	003fd906 	br	181678 <__alt_data_end+0xfff81678>
			}
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
  181714:	8809883a 	mov	r4,r17
  181718:	01416f04 	movi	r5,1468
  18171c:	0187dd80 	call	187dd8 <__mulsi3>
  181720:	11461304 	addi	r5,r2,6220
  181724:	814b883a 	add	r5,r16,r5
  181728:	29000017 	ldw	r4,0(r5)
  18172c:	00c00084 	movi	r3,2
			cea->db_video.nr_svd = (int)(*c & 0x1f);
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  181730:	dd400217 	ldw	r21,8(sp)
			}
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
  181734:	21800044 	addi	r6,r4,1
  181738:	29800015 	stw	r6,0(r5)
  18173c:	808b883a 	add	r5,r16,r2
  181740:	2909883a 	add	r4,r5,r4
  181744:	20c61405 	stb	r3,6224(r4)
			cea->db_video.nr_svd = (int)(*c & 0x1f);
  181748:	99000003 	ldbu	r4,0(r19)
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  18174c:	9829883a 	mov	r20,r19
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
			cea->db_video.nr_svd = (int)(*c & 0x1f);
  181750:	210007cc 	andi	r4,r4,31
  181754:	29063315 	stw	r4,6348(r5)
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  181758:	8809883a 	mov	r4,r17
  18175c:	01416f04 	movi	r5,1468
  181760:	0187dd80 	call	187dd8 <__mulsi3>
  181764:	8085883a 	add	r2,r16,r2
  181768:	10863317 	ldw	r2,6348(r2)
  18176c:	a4efc83a 	sub	r23,r20,r19
  181770:	a5000044 	addi	r20,r20,1
  181774:	b8820f0e 	bge	r23,r2,181fb4 <edid_decode_cea+0xb08>
				cea->db_video.svd[i].native = c[1 + i] & 0x80 ? 1 : 0;
  181778:	a0800007 	ldb	r2,0(r20)
  18177c:	ad400204 	addi	r21,r21,8
  181780:	1004d7fa 	srli	r2,r2,31
  181784:	a8bffe15 	stw	r2,-8(r21)
				cea->db_video.svd[i].vic = (int)(c[1 + i] & 0x7f);
  181788:	a0800003 	ldbu	r2,0(r20)
  18178c:	10801fcc 	andi	r2,r2,127
  181790:	a8bfff15 	stw	r2,-4(r21)
  181794:	003ff006 	br	181758 <__alt_data_end+0xfff81758>
			}
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VENDOR:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VENDOR;
  181798:	8809883a 	mov	r4,r17
  18179c:	01416f04 	movi	r5,1468
  1817a0:	0187dd80 	call	187dd8 <__mulsi3>
  1817a4:	11461304 	addi	r5,r2,6220
  1817a8:	814b883a 	add	r5,r16,r5
  1817ac:	29000017 	ldw	r4,0(r5)
  1817b0:	00c000c4 	movi	r3,3
  1817b4:	21800044 	addi	r6,r4,1
  1817b8:	29800015 	stw	r6,0(r5)
  1817bc:	808b883a 	add	r5,r16,r2
  1817c0:	2909883a 	add	r4,r5,r4
  1817c4:	20c61405 	stb	r3,6224(r4)

			if ((c[1] != 0x03) || (c[2] != 0x0c) || (c[3] != 0x00)) {
  1817c8:	99000043 	ldbu	r4,1(r19)
  1817cc:	00c000c4 	movi	r3,3
  1817d0:	20c0051e 	bne	r4,r3,1817e8 <edid_decode_cea+0x33c>
  1817d4:	99000083 	ldbu	r4,2(r19)
  1817d8:	00c00304 	movi	r3,12
  1817dc:	20c0021e 	bne	r4,r3,1817e8 <edid_decode_cea+0x33c>
  1817e0:	990000c3 	ldbu	r4,3(r19)
  1817e4:	20000626 	beq	r4,zero,181800 <edid_decode_cea+0x354>
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
  1817e8:	8809883a 	mov	r4,r17
  1817ec:	01416f04 	movi	r5,1468
  1817f0:	0187dd80 	call	187dd8 <__mulsi3>
  1817f4:	8085883a 	add	r2,r16,r2
  1817f8:	1006a915 	stw	zero,6820(r2)
  1817fc:	0001ed06 	br	181fb4 <edid_decode_cea+0xb08>
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
  181800:	99000003 	ldbu	r4,0(r19)
  181804:	808b883a 	add	r5,r16,r2
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
  181808:	280d883a 	mov	r6,r5
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
  18180c:	210007cc 	andi	r4,r4,31
  181810:	2906a815 	stw	r4,6816(r5)
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
  181814:	990000c3 	ldbu	r4,3(r19)
  181818:	1206ae04 	addi	r8,r2,6840
			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);

			if ((*c & 0x1f) >= 6) {
  18181c:	00c00144 	movi	r3,5
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
  181820:	200a943a 	slli	r5,r4,16
  181824:	99000083 	ldbu	r4,2(r19)
  181828:	11c6b104 	addi	r7,r2,6852
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);

			if ((*c & 0x1f) >= 6) {
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
  18182c:	8211883a 	add	r8,r16,r8
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
  181830:	2008923a 	slli	r4,r4,8
  181834:	2908b03a 	or	r4,r5,r4
  181838:	99400043 	ldbu	r5,1(r19)
  18183c:	2148b03a 	or	r4,r4,r5
  181840:	3106a915 	stw	r4,6820(r6)

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
  181844:	99000103 	ldbu	r4,4(r19)
  181848:	1146af04 	addi	r5,r2,6844
  18184c:	2008d13a 	srli	r4,r4,4
  181850:	3106aa15 	stw	r4,6824(r6)
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
  181854:	99000103 	ldbu	r4,4(r19)
  181858:	210003cc 	andi	r4,r4,15
  18185c:	3106ab15 	stw	r4,6828(r6)
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
  181860:	99000143 	ldbu	r4,5(r19)
  181864:	2008d13a 	srli	r4,r4,4
  181868:	3106ac15 	stw	r4,6832(r6)
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);
  18186c:	99000143 	ldbu	r4,5(r19)
  181870:	210003cc 	andi	r4,r4,15
  181874:	3106ad15 	stw	r4,6836(r6)

			if ((*c & 0x1f) >= 6) {
  181878:	9a400003 	ldbu	r9,0(r19)
  18187c:	1186b004 	addi	r6,r2,6848
  181880:	1106b204 	addi	r4,r2,6856
  181884:	4a4007cc 	andi	r9,r9,31
  181888:	1086b304 	addi	r2,r2,6860
  18188c:	1a401c2e 	bgeu	r3,r9,181900 <edid_decode_cea+0x454>
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
  181890:	9a400187 	ldb	r9,6(r19)
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
  181894:	81cf883a 	add	r7,r16,r7
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
  181898:	818d883a 	add	r6,r16,r6
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);

			if ((*c & 0x1f) >= 6) {
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
  18189c:	4812d7fa 	srli	r9,r9,31
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
				cea->db_vsdb_hdmi.bpp30 = (c[6] & 0x10) ? 1 : 0;
  1818a0:	814b883a 	add	r5,r16,r5
				cea->db_vsdb_hdmi.ycbcr444 = (c[6] & 0x08) ? 1 : 0;
  1818a4:	8109883a 	add	r4,r16,r4
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);

			if ((*c & 0x1f) >= 6) {
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
  1818a8:	42400015 	stw	r9,0(r8)
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
  1818ac:	9a000183 	ldbu	r8,6(r19)
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
				cea->db_vsdb_hdmi.bpp30 = (c[6] & 0x10) ? 1 : 0;
				cea->db_vsdb_hdmi.ycbcr444 = (c[6] & 0x08) ? 1 : 0;
				cea->db_vsdb_hdmi.dvi_dual = (c[6] & 0x01) ? 1 : 0;
  1818b0:	8085883a 	add	r2,r16,r2
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);

			if ((*c & 0x1f) >= 6) {
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
  1818b4:	4010d1ba 	srli	r8,r8,6
  1818b8:	4200004c 	andi	r8,r8,1
  1818bc:	3a000015 	stw	r8,0(r7)
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
  1818c0:	99c00183 	ldbu	r7,6(r19)
  1818c4:	38ced83a 	srl	r7,r7,r3
  1818c8:	39c0004c 	andi	r7,r7,1
  1818cc:	31c00015 	stw	r7,0(r6)
				cea->db_vsdb_hdmi.bpp30 = (c[6] & 0x10) ? 1 : 0;
  1818d0:	99800183 	ldbu	r6,6(r19)
  1818d4:	300cd13a 	srli	r6,r6,4
  1818d8:	3180004c 	andi	r6,r6,1
  1818dc:	29800015 	stw	r6,0(r5)
				cea->db_vsdb_hdmi.ycbcr444 = (c[6] & 0x08) ? 1 : 0;
  1818e0:	99400183 	ldbu	r5,6(r19)
  1818e4:	280ad0fa 	srli	r5,r5,3
  1818e8:	2940004c 	andi	r5,r5,1
  1818ec:	21400015 	stw	r5,0(r4)
				cea->db_vsdb_hdmi.dvi_dual = (c[6] & 0x01) ? 1 : 0;
  1818f0:	99000183 	ldbu	r4,6(r19)
  1818f4:	2100004c 	andi	r4,r4,1
  1818f8:	11000015 	stw	r4,0(r2)
  1818fc:	00000b06 	br	18192c <edid_decode_cea+0x480>
			} else {
				cea->db_vsdb_hdmi.ai = 0;
  181900:	40000015 	stw	zero,0(r8)
				cea->db_vsdb_hdmi.bpp48 = 0;
  181904:	81cf883a 	add	r7,r16,r7
  181908:	38000015 	stw	zero,0(r7)
				cea->db_vsdb_hdmi.bpp36 = 0;
  18190c:	818d883a 	add	r6,r16,r6
  181910:	30000015 	stw	zero,0(r6)
				cea->db_vsdb_hdmi.bpp30 = 0;
  181914:	814b883a 	add	r5,r16,r5
  181918:	28000015 	stw	zero,0(r5)
				cea->db_vsdb_hdmi.ycbcr444 = 0;
  18191c:	8109883a 	add	r4,r16,r4
  181920:	20000015 	stw	zero,0(r4)
				cea->db_vsdb_hdmi.dvi_dual = 0;
  181924:	8085883a 	add	r2,r16,r2
  181928:	10000015 	stw	zero,0(r2)
			}

			if ((*c & 0x1f) >= 7) {
  18192c:	98800003 	ldbu	r2,0(r19)
  181930:	01000184 	movi	r4,6
  181934:	108007cc 	andi	r2,r2,31
  181938:	20800a2e 	bgeu	r4,r2,181964 <edid_decode_cea+0x4b8>
				cea->db_vsdb_hdmi.max_tmds_clk = c[7] * 5;
  18193c:	8809883a 	mov	r4,r17
  181940:	01416f04 	movi	r5,1468
  181944:	0187dd80 	call	187dd8 <__mulsi3>
  181948:	990001c3 	ldbu	r4,7(r19)
  18194c:	1086b704 	addi	r2,r2,6876
  181950:	01400144 	movi	r5,5
  181954:	80a9883a 	add	r20,r16,r2
  181958:	0187dd80 	call	187dd8 <__mulsi3>
  18195c:	a0800015 	stw	r2,0(r20)
  181960:	00000506 	br	181978 <edid_decode_cea+0x4cc>
			} else {
				cea->db_vsdb_hdmi.max_tmds_clk = 0;
  181964:	8809883a 	mov	r4,r17
  181968:	01416f04 	movi	r5,1468
  18196c:	0187dd80 	call	187dd8 <__mulsi3>
  181970:	8085883a 	add	r2,r16,r2
  181974:	1006b715 	stw	zero,6876(r2)
			}

			cea->db_vsdb_hdmi.p_latency = 0;
  181978:	8809883a 	mov	r4,r17
  18197c:	01416f04 	movi	r5,1468
  181980:	0187dd80 	call	187dd8 <__mulsi3>
  181984:	1186b404 	addi	r6,r2,6864
  181988:	818d883a 	add	r6,r16,r6
  18198c:	30000015 	stw	zero,0(r6)
			cea->db_vsdb_hdmi.i_latency = 0;
  181990:	8089883a 	add	r4,r16,r2
			cea->db_vsdb_hdmi.hdmi_video = 0;

			cea->db_vsdb_hdmi.vid_latency_p = 0;
  181994:	1146b804 	addi	r5,r2,6880
			} else {
				cea->db_vsdb_hdmi.max_tmds_clk = 0;
			}

			cea->db_vsdb_hdmi.p_latency = 0;
			cea->db_vsdb_hdmi.i_latency = 0;
  181998:	2006b515 	stw	zero,6868(r4)
			cea->db_vsdb_hdmi.hdmi_video = 0;
  18199c:	2006b615 	stw	zero,6872(r4)

			cea->db_vsdb_hdmi.vid_latency_p = 0;
  1819a0:	814b883a 	add	r5,r16,r5
			cea->db_vsdb_hdmi.aud_latency_p = 0;
  1819a4:	1106b904 	addi	r4,r2,6884

			cea->db_vsdb_hdmi.p_latency = 0;
			cea->db_vsdb_hdmi.i_latency = 0;
			cea->db_vsdb_hdmi.hdmi_video = 0;

			cea->db_vsdb_hdmi.vid_latency_p = 0;
  1819a8:	28000015 	stw	zero,0(r5)
			cea->db_vsdb_hdmi.aud_latency_p = 0;
  1819ac:	8109883a 	add	r4,r16,r4
  1819b0:	20000015 	stw	zero,0(r4)
			cea->db_vsdb_hdmi.vid_latency_i = 0;
  1819b4:	808f883a 	add	r7,r16,r2
  1819b8:	3806ba15 	stw	zero,6888(r7)
			cea->db_vsdb_hdmi.aud_latency_i = 0;
  1819bc:	3806bb15 	stw	zero,6892(r7)

			if ((*c & 0x1f) >= 8) {
  1819c0:	98800003 	ldbu	r2,0(r19)
  1819c4:	00c001c4 	movi	r3,7
  1819c8:	108007cc 	andi	r2,r2,31
  1819cc:	1880292e 	bgeu	r3,r2,181a74 <edid_decode_cea+0x5c8>
				u8 c8 = c[8];
  1819d0:	9d000203 	ldbu	r20,8(r19)
				hv = &c[9];
				if (c8 & 0x80) {
  1819d4:	a0803fcc 	andi	r2,r20,255
  1819d8:	1080201c 	xori	r2,r2,128
  1819dc:	10bfe004 	addi	r2,r2,-128
  1819e0:	10000216 	blt	r2,zero,1819ec <edid_decode_cea+0x540>
			cea->db_vsdb_hdmi.vid_latency_i = 0;
			cea->db_vsdb_hdmi.aud_latency_i = 0;

			if ((*c & 0x1f) >= 8) {
				u8 c8 = c[8];
				hv = &c[9];
  1819e4:	9d800244 	addi	r22,r19,9
  1819e8:	00000a06 	br	181a14 <edid_decode_cea+0x568>
				if (c8 & 0x80) {
					cea->db_vsdb_hdmi.p_latency = 1;
  1819ec:	37000015 	stw	fp,0(r6)
					cea->db_vsdb_hdmi.vid_latency_p = (hv[0] - 1) * 2;  // (ms)
  1819f0:	98800243 	ldbu	r2,9(r19)
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
					hv += 2;
  1819f4:	9d8002c4 	addi	r22,r19,11
			if ((*c & 0x1f) >= 8) {
				u8 c8 = c[8];
				hv = &c[9];
				if (c8 & 0x80) {
					cea->db_vsdb_hdmi.p_latency = 1;
					cea->db_vsdb_hdmi.vid_latency_p = (hv[0] - 1) * 2;  // (ms)
  1819f8:	10bfffc4 	addi	r2,r2,-1
  1819fc:	1085883a 	add	r2,r2,r2
  181a00:	28800015 	stw	r2,0(r5)
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
  181a04:	98800283 	ldbu	r2,10(r19)
  181a08:	10bfffc4 	addi	r2,r2,-1
  181a0c:	1085883a 	add	r2,r2,r2
  181a10:	20800015 	stw	r2,0(r4)
					hv += 2;
				}
				if (c8 & 0x40) {
  181a14:	a080100c 	andi	r2,r20,64
  181a18:	10000f26 	beq	r2,zero,181a58 <edid_decode_cea+0x5ac>
					cea->db_vsdb_hdmi.i_latency = 1;
  181a1c:	8809883a 	mov	r4,r17
  181a20:	01416f04 	movi	r5,1468
  181a24:	0187dd80 	call	187dd8 <__mulsi3>
  181a28:	8089883a 	add	r4,r16,r2
  181a2c:	2706b515 	stw	fp,6868(r4)
					cea->db_vsdb_hdmi.vid_latency_i = (hv[0] - 1) * 2;  // (ms)
  181a30:	200b883a 	mov	r5,r4
  181a34:	b1000003 	ldbu	r4,0(r22)
					cea->db_vsdb_hdmi.aud_latency_i = (hv[1] - 1) * 2;  // (ms)
					hv += 2;
  181a38:	b5800084 	addi	r22,r22,2
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
					hv += 2;
				}
				if (c8 & 0x40) {
					cea->db_vsdb_hdmi.i_latency = 1;
					cea->db_vsdb_hdmi.vid_latency_i = (hv[0] - 1) * 2;  // (ms)
  181a3c:	213fffc4 	addi	r4,r4,-1
  181a40:	2109883a 	add	r4,r4,r4
  181a44:	2906ba15 	stw	r4,6888(r5)
					cea->db_vsdb_hdmi.aud_latency_i = (hv[1] - 1) * 2;  // (ms)
  181a48:	b13fffc3 	ldbu	r4,-1(r22)
  181a4c:	213fffc4 	addi	r4,r4,-1
  181a50:	2109883a 	add	r4,r4,r4
  181a54:	2906bb15 	stw	r4,6892(r5)
					hv += 2;
				}
				if (c8 & 0x20) {
  181a58:	a500080c 	andi	r20,r20,32
  181a5c:	a0000526 	beq	r20,zero,181a74 <edid_decode_cea+0x5c8>
					cea->db_vsdb_hdmi.hdmi_video = 1;
  181a60:	8809883a 	mov	r4,r17
  181a64:	01416f04 	movi	r5,1468
  181a68:	0187dd80 	call	187dd8 <__mulsi3>
  181a6c:	8085883a 	add	r2,r16,r2
  181a70:	1706b615 	stw	fp,6872(r2)
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
  181a74:	8809883a 	mov	r4,r17
  181a78:	01416f04 	movi	r5,1468
  181a7c:	0187dd80 	call	187dd8 <__mulsi3>
  181a80:	8089883a 	add	r4,r16,r2
  181a84:	2206b617 	ldw	r8,6872(r4)
  181a88:	1186bc04 	addi	r6,r2,6896
  181a8c:	1146bd04 	addi	r5,r2,6900
  181a90:	1106be04 	addi	r4,r2,6904
  181a94:	11c6bf04 	addi	r7,r2,6908
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
  181a98:	818d883a 	add	r6,r16,r6
  181a9c:	1086c004 	addi	r2,r2,6912
				if (c8 & 0x20) {
					cea->db_vsdb_hdmi.hdmi_video = 1;
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
  181aa0:	0200160e 	bge	zero,r8,181afc <edid_decode_cea+0x650>
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
  181aa4:	b2000007 	ldb	r8,0(r22)
				cea->db_vsdb_hdmi.multi_3d = (hv[0] >> 5) & 0x03;
  181aa8:	814b883a 	add	r5,r16,r5
				cea->db_vsdb_hdmi.image_size = (hv[0] >> 3) & 0x03;
  181aac:	8109883a 	add	r4,r16,r4
					cea->db_vsdb_hdmi.hdmi_video = 1;
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
  181ab0:	4010d7fa 	srli	r8,r8,31
				cea->db_vsdb_hdmi.multi_3d = (hv[0] >> 5) & 0x03;
				cea->db_vsdb_hdmi.image_size = (hv[0] >> 3) & 0x03;
				cea->db_vsdb_hdmi.hdmi_xx_len = hv[1] >> 5;
  181ab4:	81cf883a 	add	r7,r16,r7
				cea->db_vsdb_hdmi.hdmi_3d_len = hv[1] & 0x1f;
  181ab8:	8085883a 	add	r2,r16,r2
					cea->db_vsdb_hdmi.hdmi_video = 1;
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
  181abc:	32000015 	stw	r8,0(r6)
				cea->db_vsdb_hdmi.multi_3d = (hv[0] >> 5) & 0x03;
  181ac0:	b1800003 	ldbu	r6,0(r22)
  181ac4:	300cd17a 	srli	r6,r6,5
  181ac8:	318000cc 	andi	r6,r6,3
  181acc:	29800015 	stw	r6,0(r5)
				cea->db_vsdb_hdmi.image_size = (hv[0] >> 3) & 0x03;
  181ad0:	b1400003 	ldbu	r5,0(r22)
  181ad4:	280ad0fa 	srli	r5,r5,3
  181ad8:	294000cc 	andi	r5,r5,3
  181adc:	21400015 	stw	r5,0(r4)
				cea->db_vsdb_hdmi.hdmi_xx_len = hv[1] >> 5;
  181ae0:	b1000043 	ldbu	r4,1(r22)
  181ae4:	2008d17a 	srli	r4,r4,5
  181ae8:	39000015 	stw	r4,0(r7)
				cea->db_vsdb_hdmi.hdmi_3d_len = hv[1] & 0x1f;
  181aec:	b1000043 	ldbu	r4,1(r22)
  181af0:	210007cc 	andi	r4,r4,31
  181af4:	11000015 	stw	r4,0(r2)
  181af8:	00000906 	br	181b20 <edid_decode_cea+0x674>
			} else {
				cea->db_vsdb_hdmi.present_3d = 0;
  181afc:	30000015 	stw	zero,0(r6)
				cea->db_vsdb_hdmi.multi_3d = 0;
  181b00:	814b883a 	add	r5,r16,r5
  181b04:	28000015 	stw	zero,0(r5)
				cea->db_vsdb_hdmi.image_size = 0;
  181b08:	8109883a 	add	r4,r16,r4
  181b0c:	20000015 	stw	zero,0(r4)
				cea->db_vsdb_hdmi.hdmi_xx_len = 0;
  181b10:	81cf883a 	add	r7,r16,r7
  181b14:	38000015 	stw	zero,0(r7)
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
  181b18:	8085883a 	add	r2,r16,r2
  181b1c:	10000015 	stw	zero,0(r2)
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
  181b20:	8809883a 	mov	r4,r17
  181b24:	01416f04 	movi	r5,1468
  181b28:	0187dd80 	call	187dd8 <__mulsi3>
  181b2c:	8089883a 	add	r4,r16,r2
  181b30:	25c6c017 	ldw	r23,6912(r4)
  181b34:	1146c104 	addi	r5,r2,6916
  181b38:	1106c204 	addi	r4,r2,6920
  181b3c:	05c06c0e 	bge	zero,r23,181cf0 <edid_decode_cea+0x844>
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
  181b40:	808d883a 	add	r6,r16,r2
  181b44:	3506bf17 	ldw	r20,6908(r6)
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
  181b48:	3086bd17 	ldw	r2,6900(r6)
  181b4c:	00c00084 	movi	r3,2
				cea->db_vsdb_hdmi.hdmi_xx_len = 0;
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
  181b50:	a5000084 	addi	r20,r20,2
  181b54:	b529883a 	add	r20,r22,r20
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181b58:	814b883a 	add	r5,r16,r5
			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
  181b5c:	10c00e1e 	bne	r2,r3,181b98 <edid_decode_cea+0x6ec>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181b60:	a0800003 	ldbu	r2,0(r20)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
  181b64:	8109883a 	add	r4,r16,r4
					vic = &d[4];
  181b68:	a5000104 	addi	r20,r20,4
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181b6c:	100c923a 	slli	r6,r2,8
  181b70:	a0bfff43 	ldbu	r2,-3(r20)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
  181b74:	bdffff04 	addi	r23,r23,-4
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181b78:	3084b03a 	or	r2,r6,r2
  181b7c:	28800015 	stw	r2,0(r5)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
  181b80:	a0bfff83 	ldbu	r2,-2(r20)
  181b84:	100a923a 	slli	r5,r2,8
  181b88:	a0bfffc3 	ldbu	r2,-1(r20)
  181b8c:	2884b03a 	or	r2,r5,r2
  181b90:	20800015 	stw	r2,0(r4)
  181b94:	00001006 	br	181bd8 <edid_decode_cea+0x72c>
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
  181b98:	17000a1e 	bne	r2,fp,181bc4 <edid_decode_cea+0x718>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181b9c:	a0800003 	ldbu	r2,0(r20)
					cea->db_vsdb_hdmi.mask_3d = 0;
  181ba0:	8109883a 	add	r4,r16,r4
					vic = &d[2];
  181ba4:	a5000084 	addi	r20,r20,2
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181ba8:	100c923a 	slli	r6,r2,8
  181bac:	a0bfffc3 	ldbu	r2,-1(r20)
					cea->db_vsdb_hdmi.mask_3d = 0;
					vic = &d[2];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 2;
  181bb0:	bdffff84 	addi	r23,r23,-2
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
  181bb4:	3084b03a 	or	r2,r6,r2
  181bb8:	28800015 	stw	r2,0(r5)
					cea->db_vsdb_hdmi.mask_3d = 0;
  181bbc:	20000015 	stw	zero,0(r4)
  181bc0:	00000506 	br	181bd8 <edid_decode_cea+0x72c>
					vic = &d[2];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 2;
				} else {
					cea->db_vsdb_hdmi.struct_all_3d = 0;
  181bc4:	28000015 	stw	zero,0(r5)
					cea->db_vsdb_hdmi.mask_3d = 0;
  181bc8:	8109883a 	add	r4,r16,r4
  181bcc:	20000015 	stw	zero,0(r4)
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1
  181bd0:	002f883a 	mov	r23,zero
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
  181bd4:	0029883a 	mov	r20,zero
				} else {
					cea->db_vsdb_hdmi.struct_all_3d = 0;
					cea->db_vsdb_hdmi.mask_3d = 0;
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
  181bd8:	8809883a 	mov	r4,r17
  181bdc:	01416f04 	movi	r5,1468
  181be0:	0187dd80 	call	187dd8 <__mulsi3>
  181be4:	8085883a 	add	r2,r16,r2
  181be8:	1006c315 	stw	zero,6924(r2)
				while (vic_l > 0) {
  181bec:	05c0f10e 	bge	zero,r23,181fb4 <edid_decode_cea+0xb08>
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
  181bf0:	8809883a 	mov	r4,r17
  181bf4:	01416f04 	movi	r5,1468
  181bf8:	0187dd80 	call	187dd8 <__mulsi3>
  181bfc:	1186c304 	addi	r6,r2,6924
  181c00:	818d883a 	add	r6,r16,r6
  181c04:	31000017 	ldw	r4,0(r6)
  181c08:	01400304 	movi	r5,12
  181c0c:	102b883a 	mov	r21,r2
  181c10:	d9800d15 	stw	r6,52(sp)
  181c14:	0187dd80 	call	187dd8 <__mulsi3>
  181c18:	a1000003 	ldbu	r4,0(r20)
  181c1c:	1545883a 	add	r2,r2,r21
  181c20:	8085883a 	add	r2,r16,r2
  181c24:	2008d13a 	srli	r4,r4,4
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
  181c28:	01400304 	movi	r5,12
					cea->db_vsdb_hdmi.mask_3d = 0;
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
				while (vic_l > 0) {
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
  181c2c:	1106c415 	stw	r4,6928(r2)
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
  181c30:	d9800d17 	ldw	r6,52(sp)
  181c34:	31000017 	ldw	r4,0(r6)
  181c38:	0187dd80 	call	187dd8 <__mulsi3>
  181c3c:	a1000003 	ldbu	r4,0(r20)
  181c40:	1545883a 	add	r2,r2,r21
  181c44:	8085883a 	add	r2,r16,r2
  181c48:	210003cc 	andi	r4,r4,15
  181c4c:	1106c515 	stw	r4,6932(r2)
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
  181c50:	d9800d17 	ldw	r6,52(sp)
  181c54:	01400304 	movi	r5,12
  181c58:	31800017 	ldw	r6,0(r6)
  181c5c:	3009883a 	mov	r4,r6
  181c60:	d9800d15 	stw	r6,52(sp)
  181c64:	0187dd80 	call	187dd8 <__mulsi3>
  181c68:	1545883a 	add	r2,r2,r21
  181c6c:	8085883a 	add	r2,r16,r2
  181c70:	1086c517 	ldw	r2,6932(r2)
  181c74:	010001c4 	movi	r4,7
  181c78:	d9800d17 	ldw	r6,52(sp)
  181c7c:	20800b0e 	bge	r4,r2,181cac <edid_decode_cea+0x800>
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
  181c80:	3009883a 	mov	r4,r6
  181c84:	01400304 	movi	r5,12
  181c88:	0187dd80 	call	187dd8 <__mulsi3>
  181c8c:	a1000043 	ldbu	r4,1(r20)
  181c90:	1545883a 	add	r2,r2,r21
  181c94:	8085883a 	add	r2,r16,r2
  181c98:	2008d13a 	srli	r4,r4,4
						vic += 2;
  181c9c:	a5000084 	addi	r20,r20,2
						vic_l -= 2;
  181ca0:	bdffff84 	addi	r23,r23,-2
				cea->db_vsdb_hdmi.nr_vic_3d = 0;
				while (vic_l > 0) {
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
  181ca4:	1106c615 	stw	r4,6936(r2)
  181ca8:	00000806 	br	181ccc <edid_decode_cea+0x820>
						vic += 2;
						vic_l -= 2;
					} else {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = 0;
  181cac:	3009883a 	mov	r4,r6
  181cb0:	01400304 	movi	r5,12
  181cb4:	0187dd80 	call	187dd8 <__mulsi3>
  181cb8:	1545883a 	add	r2,r2,r21
  181cbc:	8085883a 	add	r2,r16,r2
  181cc0:	1006c615 	stw	zero,6936(r2)
						++vic;
  181cc4:	a5000044 	addi	r20,r20,1
						--vic_l;
  181cc8:	bdffffc4 	addi	r23,r23,-1
					}
					++cea->db_vsdb_hdmi.nr_vic_3d;
  181ccc:	8809883a 	mov	r4,r17
  181cd0:	01416f04 	movi	r5,1468
  181cd4:	0187dd80 	call	187dd8 <__mulsi3>
  181cd8:	1086c304 	addi	r2,r2,6924
  181cdc:	8085883a 	add	r2,r16,r2
  181ce0:	11000017 	ldw	r4,0(r2)
  181ce4:	21000044 	addi	r4,r4,1
  181ce8:	11000015 	stw	r4,0(r2)
  181cec:	003fbf06 	br	181bec <__alt_data_end+0xfff81bec>
				}
			} else {
				cea->db_vsdb_hdmi.struct_all_3d = 0;
  181cf0:	814b883a 	add	r5,r16,r5
  181cf4:	28000015 	stw	zero,0(r5)
				cea->db_vsdb_hdmi.mask_3d = 0;
  181cf8:	8109883a 	add	r4,r16,r4
  181cfc:	20000015 	stw	zero,0(r4)
  181d00:	0000ac06 	br	181fb4 <edid_decode_cea+0xb08>

			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_SPEAKER:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_SPEAKER;
  181d04:	8809883a 	mov	r4,r17
  181d08:	01416f04 	movi	r5,1468
  181d0c:	0187dd80 	call	187dd8 <__mulsi3>
  181d10:	11461304 	addi	r5,r2,6220
  181d14:	814b883a 	add	r5,r16,r5
  181d18:	29000017 	ldw	r4,0(r5)
  181d1c:	00c00104 	movi	r3,4
  181d20:	21800044 	addi	r6,r4,1
  181d24:	29800015 	stw	r6,0(r5)
  181d28:	808b883a 	add	r5,r16,r2
  181d2c:	2909883a 	add	r4,r5,r4
  181d30:	20c61405 	stb	r3,6224(r4)
			cea->db_speaker.designation = (int)(c[1] & 0x7f);
  181d34:	99000043 	ldbu	r4,1(r19)
  181d38:	21001fcc 	andi	r4,r4,127
  181d3c:	2906a715 	stw	r4,6812(r5)
  181d40:	00009c06 	br	181fb4 <edid_decode_cea+0xb08>
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_DTC:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_DTC;
  181d44:	8809883a 	mov	r4,r17
  181d48:	01416f04 	movi	r5,1468
  181d4c:	0187dd80 	call	187dd8 <__mulsi3>
  181d50:	11461304 	addi	r5,r2,6220
  181d54:	814b883a 	add	r5,r16,r5
  181d58:	29000017 	ldw	r4,0(r5)
  181d5c:	8085883a 	add	r2,r16,r2
  181d60:	21800044 	addi	r6,r4,1
  181d64:	29800015 	stw	r6,0(r5)
  181d68:	1109883a 	add	r4,r2,r4
  181d6c:	00800144 	movi	r2,5
  181d70:	00008f06 	br	181fb0 <edid_decode_cea+0xb04>
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_EXTENDED:
			switch (c[1]) {
  181d74:	98800043 	ldbu	r2,1(r19)
  181d78:	00c00484 	movi	r3,18
  181d7c:	18808136 	bltu	r3,r2,181f84 <edid_decode_cea+0xad8>
  181d80:	100490ba 	slli	r2,r2,2
  181d84:	01000634 	movhi	r4,24
  181d88:	21076604 	addi	r4,r4,7576
  181d8c:	1105883a 	add	r2,r2,r4
  181d90:	10800017 	ldw	r2,0(r2)
  181d94:	1000683a 	jmp	r2
  181d98:	00181de4 	muli	zero,zero,24695
  181d9c:	00181e44 	movi	zero,24697
  181da0:	00181e68 	cmpgeui	zero,zero,24697
  181da4:	00181e8c 	andi	zero,zero,24698
  181da8:	00181eb4 	movhi	zero,24698
  181dac:	00181ed8 	cmpnei	zero,zero,24699
  181db0:	00181f84 	movi	zero,24702
  181db4:	00181f84 	movi	zero,24702
  181db8:	00181f84 	movi	zero,24702
  181dbc:	00181f84 	movi	zero,24702
  181dc0:	00181f84 	movi	zero,24702
  181dc4:	00181f84 	movi	zero,24702
  181dc8:	00181f84 	movi	zero,24702
  181dcc:	00181f84 	movi	zero,24702
  181dd0:	00181f84 	movi	zero,24702
  181dd4:	00181f84 	movi	zero,24702
  181dd8:	00181f18 	cmpnei	zero,zero,24700
  181ddc:	00181f3c 	xorhi	zero,zero,24700
  181de0:	00181f60 	cmpeqi	zero,zero,24701
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
  181de4:	8809883a 	mov	r4,r17
  181de8:	01416f04 	movi	r5,1468
  181dec:	0187dd80 	call	187dd8 <__mulsi3>
  181df0:	8089883a 	add	r4,r16,r2
  181df4:	21061317 	ldw	r4,6220(r4)
  181df8:	808b883a 	add	r5,r16,r2
  181dfc:	2909883a 	add	r4,r5,r4
  181e00:	20062385 	stb	zero,6286(r4)
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
  181e04:	99000083 	ldbu	r4,2(r19)
  181e08:	2008d1ba 	srli	r4,r4,6
  181e0c:	2100004c 	andi	r4,r4,1
  181e10:	2906f615 	stw	r4,7128(r5)
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
  181e14:	99000083 	ldbu	r4,2(r19)
  181e18:	2008d13a 	srli	r4,r4,4
  181e1c:	210000cc 	andi	r4,r4,3
  181e20:	2906f715 	stw	r4,7132(r5)
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
  181e24:	99000083 	ldbu	r4,2(r19)
  181e28:	2008d0ba 	srli	r4,r4,2
  181e2c:	210000cc 	andi	r4,r4,3
  181e30:	2906f815 	stw	r4,7136(r5)
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
  181e34:	99000083 	ldbu	r4,2(r19)
  181e38:	210000cc 	andi	r4,r4,3
  181e3c:	2906f915 	stw	r4,7140(r5)
				break;
  181e40:	00005006 	br	181f84 <edid_decode_cea+0xad8>
			case CEA_DBE_VIDEO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VENDOR;
  181e44:	8809883a 	mov	r4,r17
  181e48:	01416f04 	movi	r5,1468
  181e4c:	0187dd80 	call	187dd8 <__mulsi3>
  181e50:	8089883a 	add	r4,r16,r2
  181e54:	21061317 	ldw	r4,6220(r4)
  181e58:	8085883a 	add	r2,r16,r2
  181e5c:	00c00044 	movi	r3,1
  181e60:	1105883a 	add	r2,r2,r4
  181e64:	00001106 	br	181eac <edid_decode_cea+0xa00>
				break;
			case CEA_DBE_VIDEO_DDI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_DDI;
  181e68:	8809883a 	mov	r4,r17
  181e6c:	01416f04 	movi	r5,1468
  181e70:	0187dd80 	call	187dd8 <__mulsi3>
  181e74:	8089883a 	add	r4,r16,r2
  181e78:	21061317 	ldw	r4,6220(r4)
  181e7c:	8085883a 	add	r2,r16,r2
  181e80:	1105883a 	add	r2,r2,r4
  181e84:	01000084 	movi	r4,2
  181e88:	00003d06 	br	181f80 <edid_decode_cea+0xad4>
				break;
			case CEA_DBE_VIDEO_VESA:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VESA;
  181e8c:	8809883a 	mov	r4,r17
  181e90:	01416f04 	movi	r5,1468
  181e94:	0187dd80 	call	187dd8 <__mulsi3>
  181e98:	8089883a 	add	r4,r16,r2
  181e9c:	21061317 	ldw	r4,6220(r4)
  181ea0:	8085883a 	add	r2,r16,r2
  181ea4:	00c000c4 	movi	r3,3
  181ea8:	1105883a 	add	r2,r2,r4
  181eac:	10c62385 	stb	r3,6286(r2)
				break;
  181eb0:	00003406 	br	181f84 <edid_decode_cea+0xad8>
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
  181eb4:	8809883a 	mov	r4,r17
  181eb8:	01416f04 	movi	r5,1468
  181ebc:	0187dd80 	call	187dd8 <__mulsi3>
  181ec0:	8089883a 	add	r4,r16,r2
  181ec4:	21061317 	ldw	r4,6220(r4)
  181ec8:	8085883a 	add	r2,r16,r2
  181ecc:	1105883a 	add	r2,r2,r4
  181ed0:	01000104 	movi	r4,4
  181ed4:	00002a06 	br	181f80 <edid_decode_cea+0xad4>
				break;
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
  181ed8:	8809883a 	mov	r4,r17
  181edc:	01416f04 	movi	r5,1468
  181ee0:	0187dd80 	call	187dd8 <__mulsi3>
  181ee4:	8089883a 	add	r4,r16,r2
  181ee8:	21061317 	ldw	r4,6220(r4)
  181eec:	808b883a 	add	r5,r16,r2
  181ef0:	00c00144 	movi	r3,5
  181ef4:	2909883a 	add	r4,r5,r4
  181ef8:	20c62385 	stb	r3,6286(r4)
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
  181efc:	99000083 	ldbu	r4,2(r19)
  181f00:	210000cc 	andi	r4,r4,3
  181f04:	2906f415 	stw	r4,7120(r5)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
  181f08:	990000c3 	ldbu	r4,3(r19)
  181f0c:	210001cc 	andi	r4,r4,7
  181f10:	2906f515 	stw	r4,7124(r5)
				break;
  181f14:	00001b06 	br	181f84 <edid_decode_cea+0xad8>
			case CEA_DBE_AUDIO_MISC:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_MISC;
  181f18:	8809883a 	mov	r4,r17
  181f1c:	01416f04 	movi	r5,1468
  181f20:	0187dd80 	call	187dd8 <__mulsi3>
  181f24:	8089883a 	add	r4,r16,r2
  181f28:	21061317 	ldw	r4,6220(r4)
  181f2c:	8085883a 	add	r2,r16,r2
  181f30:	1105883a 	add	r2,r2,r4
  181f34:	01000404 	movi	r4,16
  181f38:	00001106 	br	181f80 <edid_decode_cea+0xad4>
				break;
			case CEA_DBE_AUDIO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_VENDOR;
  181f3c:	8809883a 	mov	r4,r17
  181f40:	01416f04 	movi	r5,1468
  181f44:	0187dd80 	call	187dd8 <__mulsi3>
  181f48:	8089883a 	add	r4,r16,r2
  181f4c:	21061317 	ldw	r4,6220(r4)
  181f50:	8085883a 	add	r2,r16,r2
  181f54:	00c00444 	movi	r3,17
  181f58:	1105883a 	add	r2,r2,r4
  181f5c:	003fd306 	br	181eac <__alt_data_end+0xfff81eac>
				break;
			case CEA_DBE_AUDIO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_HDMI;
  181f60:	8809883a 	mov	r4,r17
  181f64:	01416f04 	movi	r5,1468
  181f68:	0187dd80 	call	187dd8 <__mulsi3>
  181f6c:	8089883a 	add	r4,r16,r2
  181f70:	21061317 	ldw	r4,6220(r4)
  181f74:	8085883a 	add	r2,r16,r2
  181f78:	1105883a 	add	r2,r2,r4
  181f7c:	01000484 	movi	r4,18
  181f80:	11062385 	stb	r4,6286(r2)
				break;
			}

			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_EXTENDED;
  181f84:	8809883a 	mov	r4,r17
  181f88:	01416f04 	movi	r5,1468
  181f8c:	0187dd80 	call	187dd8 <__mulsi3>
  181f90:	11461304 	addi	r5,r2,6220
  181f94:	814b883a 	add	r5,r16,r5
  181f98:	29000017 	ldw	r4,0(r5)
  181f9c:	8085883a 	add	r2,r16,r2
  181fa0:	21800044 	addi	r6,r4,1
  181fa4:	29800015 	stw	r6,0(r5)
  181fa8:	1109883a 	add	r4,r2,r4
  181fac:	008001c4 	movi	r2,7
  181fb0:	20861405 	stb	r2,6224(r4)

			c += (*c & 0x1f) + 1;
  181fb4:	98800003 	ldbu	r2,0(r19)
  181fb8:	108007cc 	andi	r2,r2,31
  181fbc:	10800044 	addi	r2,r2,1
  181fc0:	98a7883a 	add	r19,r19,r2
			break;
  181fc4:	003d7e06 	br	1815c0 <__alt_data_end+0xfff815c0>
			break;
		}
	}

	// detail timing descriptor
	if (dtd == 0)
  181fc8:	d8c00017 	ldw	r3,0(sp)
  181fcc:	1800e326 	beq	r3,zero,18235c <edid_decode_cea+0xeb0>
  181fd0:	1827883a 	mov	r19,r3
  181fd4:	95470904 	addi	r21,r18,7204
  181fd8:	84a9883a 	add	r20,r16,r18
  181fdc:	94870804 	addi	r18,r18,7200
  181fe0:	1d800444 	addi	r22,r3,17
  181fe4:	1b400044 	addi	r13,r3,1
  181fe8:	856b883a 	add	r21,r16,r21
  181fec:	84a5883a 	add	r18,r16,r18
  181ff0:	18c00104 	addi	r3,r3,4
  181ff4:	9b000084 	addi	r12,r19,2
  181ff8:	9f0001c4 	addi	fp,r19,7
  181ffc:	9ac00144 	addi	r11,r19,5
  182000:	9a8000c4 	addi	r10,r19,3
  182004:	9a400184 	addi	r9,r19,6
  182008:	9dc002c4 	addi	r23,r19,11
  18200c:	9a000204 	addi	r8,r19,8
  182010:	99800284 	addi	r6,r19,10
  182014:	9b800244 	addi	r14,r19,9
  182018:	99c00384 	addi	r7,r19,14
  18201c:	9bc00304 	addi	r15,r19,12
  182020:	d8000015 	stw	zero,0(sp)
  182024:	0000b006 	br	1822e8 <edid_decode_cea+0xe3c>
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
		c = &dtd[18 * i];

        cea->detailed_timing[i].pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
  182028:	68800003 	ldbu	r2,0(r13)
  18202c:	99000003 	ldbu	r4,0(r19)
  182030:	0149c404 	movi	r5,10000
  182034:	1004923a 	slli	r2,r2,8
  182038:	d8c00715 	stw	r3,28(sp)
  18203c:	d9800d15 	stw	r6,52(sp)
  182040:	1108b03a 	or	r4,r2,r4
  182044:	d9c00b15 	stw	r7,44(sp)
  182048:	da000c15 	stw	r8,48(sp)
  18204c:	da400315 	stw	r9,12(sp)
  182050:	da800415 	stw	r10,16(sp)
  182054:	dac00515 	stw	r11,20(sp)
  182058:	db000615 	stw	r12,24(sp)
  18205c:	db400815 	stw	r13,32(sp)
  182060:	db800915 	stw	r14,36(sp)
  182064:	dbc00a15 	stw	r15,40(sp)
  182068:	0187dd80 	call	187dd8 <__mulsi3>
  18206c:	a086fa15 	stw	r2,7144(r20)
        cea->detailed_timing[i].width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
  182070:	d8c00717 	ldw	r3,28(sp)
  182074:	db000617 	ldw	r12,24(sp)
  182078:	18800003 	ldbu	r2,0(r3)
  18207c:	61000003 	ldbu	r4,0(r12)
  182080:	1004913a 	slli	r2,r2,4
  182084:	1083c00c 	andi	r2,r2,3840
  182088:	1104b03a 	or	r2,r2,r4
  18208c:	a086fb15 	stw	r2,7148(r20)
        cea->detailed_timing[i].height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
  182090:	e0800003 	ldbu	r2,0(fp)
  182094:	dac00517 	ldw	r11,20(sp)
  182098:	1004913a 	slli	r2,r2,4
  18209c:	59000003 	ldbu	r4,0(r11)
  1820a0:	1083c00c 	andi	r2,r2,3840
  1820a4:	1104b03a 	or	r2,r2,r4
  1820a8:	a086fc15 	stw	r2,7152(r20)
        cea->detailed_timing[i].h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
  1820ac:	18800003 	ldbu	r2,0(r3)
  1820b0:	da800417 	ldw	r10,16(sp)
  1820b4:	1004923a 	slli	r2,r2,8
  1820b8:	51000003 	ldbu	r4,0(r10)
  1820bc:	1083c00c 	andi	r2,r2,3840
  1820c0:	1104b03a 	or	r2,r2,r4
  1820c4:	a086fd15 	stw	r2,7156(r20)
        cea->detailed_timing[i].v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
  1820c8:	e0800003 	ldbu	r2,0(fp)
  1820cc:	da400317 	ldw	r9,12(sp)
  1820d0:	1004923a 	slli	r2,r2,8
  1820d4:	49000003 	ldbu	r4,0(r9)
  1820d8:	1083c00c 	andi	r2,r2,3840
  1820dc:	1104b03a 	or	r2,r2,r4
  1820e0:	a086fe15 	stw	r2,7160(r20)
        cea->detailed_timing[i].h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
  1820e4:	b8800003 	ldbu	r2,0(r23)
  1820e8:	da000c17 	ldw	r8,48(sp)
  1820ec:	1085883a 	add	r2,r2,r2
  1820f0:	41000003 	ldbu	r4,0(r8)
  1820f4:	1085883a 	add	r2,r2,r2
  1820f8:	1080c00c 	andi	r2,r2,768
  1820fc:	1104b03a 	or	r2,r2,r4
  182100:	a086ff15 	stw	r2,7164(r20)
        cea->detailed_timing[i].v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
  182104:	d9800d17 	ldw	r6,52(sp)
  182108:	b8800003 	ldbu	r2,0(r23)
  18210c:	31000003 	ldbu	r4,0(r6)
  182110:	1085883a 	add	r2,r2,r2
  182114:	1085883a 	add	r2,r2,r2
  182118:	2008d13a 	srli	r4,r4,4
  18211c:	10800c0c 	andi	r2,r2,48
  182120:	1104b03a 	or	r2,r2,r4
  182124:	a0870015 	stw	r2,7168(r20)
        cea->detailed_timing[i].h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
  182128:	b8800003 	ldbu	r2,0(r23)
  18212c:	db800917 	ldw	r14,36(sp)
  182130:	1004913a 	slli	r2,r2,4
  182134:	71000003 	ldbu	r4,0(r14)
  182138:	1080c00c 	andi	r2,r2,768
  18213c:	1104b03a 	or	r2,r2,r4
  182140:	a0870115 	stw	r2,7172(r20)
        cea->detailed_timing[i].v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
  182144:	b8800003 	ldbu	r2,0(r23)
  182148:	1004913a 	slli	r2,r2,4
  18214c:	11000c0c 	andi	r4,r2,48
  182150:	30800003 	ldbu	r2,0(r6)
  182154:	108003cc 	andi	r2,r2,15
  182158:	2084b03a 	or	r2,r4,r2
  18215c:	a0870215 	stw	r2,7176(r20)
        cea->detailed_timing[i].h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
  182160:	d9c00b17 	ldw	r7,44(sp)
  182164:	dbc00a17 	ldw	r15,40(sp)
  182168:	38800003 	ldbu	r2,0(r7)
  18216c:	79000003 	ldbu	r4,0(r15)
  182170:	1004913a 	slli	r2,r2,4
  182174:	1083c00c 	andi	r2,r2,3840
  182178:	1104b03a 	or	r2,r2,r4
  18217c:	a0870315 	stw	r2,7180(r20)
        cea->detailed_timing[i].v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
  182180:	38800003 	ldbu	r2,0(r7)
  182184:	99000343 	ldbu	r4,13(r19)
  182188:	1004923a 	slli	r2,r2,8
  18218c:	1083c00c 	andi	r2,r2,3840
  182190:	1104b03a 	or	r2,r2,r4
  182194:	a0870415 	stw	r2,7184(r20)
        cea->detailed_timing[i].border_lr = (int)c[15];
  182198:	988003c3 	ldbu	r2,15(r19)
        cea->detailed_timing[i].border_tb = (int)c[16];

        cea->detailed_timing[i].interlaced = (c[17] & 0x80) ? 1 : 0;

        cea->detailed_timing[i].stereo = STEREO_NONE;
		if ((c[17] & 0x61) == 0x20)
  18219c:	01000804 	movi	r4,32
        cea->detailed_timing[i].v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
        cea->detailed_timing[i].h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
        cea->detailed_timing[i].v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
        cea->detailed_timing[i].h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
        cea->detailed_timing[i].v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
        cea->detailed_timing[i].border_lr = (int)c[15];
  1821a0:	a0870515 	stw	r2,7188(r20)
        cea->detailed_timing[i].border_tb = (int)c[16];
  1821a4:	98800403 	ldbu	r2,16(r19)
  1821a8:	a0870615 	stw	r2,7192(r20)

        cea->detailed_timing[i].interlaced = (c[17] & 0x80) ? 1 : 0;
  1821ac:	b0800007 	ldb	r2,0(r22)
  1821b0:	1004d7fa 	srli	r2,r2,31
  1821b4:	a0870715 	stw	r2,7196(r20)

        cea->detailed_timing[i].stereo = STEREO_NONE;
  1821b8:	90000015 	stw	zero,0(r18)
		if ((c[17] & 0x61) == 0x20)
  1821bc:	b0800003 	ldbu	r2,0(r22)
  1821c0:	db400817 	ldw	r13,32(sp)
  1821c4:	1080184c 	andi	r2,r2,97
  1821c8:	1100021e 	bne	r2,r4,1821d4 <edid_decode_cea+0xd28>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
  1821cc:	00800084 	movi	r2,2
  1821d0:	90800015 	stw	r2,0(r18)
		if ((c[17] & 0x61) == 0x40)
  1821d4:	b0800003 	ldbu	r2,0(r22)
  1821d8:	01001004 	movi	r4,64
  1821dc:	1080184c 	andi	r2,r2,97
  1821e0:	1100031e 	bne	r2,r4,1821f0 <edid_decode_cea+0xd44>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
  1821e4:	90800017 	ldw	r2,0(r18)
  1821e8:	10800114 	ori	r2,r2,4
  1821ec:	90800015 	stw	r2,0(r18)
		if ((c[17] & 0x61) == 0x21)
  1821f0:	b0800003 	ldbu	r2,0(r22)
  1821f4:	01000844 	movi	r4,33
  1821f8:	1080184c 	andi	r2,r2,97
  1821fc:	1100031e 	bne	r2,r4,18220c <edid_decode_cea+0xd60>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
  182200:	90800017 	ldw	r2,0(r18)
  182204:	10800214 	ori	r2,r2,8
  182208:	90800015 	stw	r2,0(r18)
		if ((c[17] & 0x61) == 0x41)
  18220c:	b0800003 	ldbu	r2,0(r22)
  182210:	01001044 	movi	r4,65
  182214:	1080184c 	andi	r2,r2,97
  182218:	1100031e 	bne	r2,r4,182228 <edid_decode_cea+0xd7c>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
  18221c:	90800017 	ldw	r2,0(r18)
  182220:	10800414 	ori	r2,r2,16
  182224:	90800015 	stw	r2,0(r18)
		if ((c[17] & 0x61) == 0x60)
  182228:	b0800003 	ldbu	r2,0(r22)
  18222c:	01001804 	movi	r4,96
  182230:	1080184c 	andi	r2,r2,97
  182234:	1100031e 	bne	r2,r4,182244 <edid_decode_cea+0xd98>
			cea->detailed_timing[i].stereo |= STEREO_4WAY_INTERLEAVE;
  182238:	90800017 	ldw	r2,0(r18)
  18223c:	10800814 	ori	r2,r2,32
  182240:	90800015 	stw	r2,0(r18)
		if ((c[17] & 0x61) == 0x61)
  182244:	b0800003 	ldbu	r2,0(r22)
  182248:	01001844 	movi	r4,97
  18224c:	1080184c 	andi	r2,r2,97
  182250:	1100031e 	bne	r2,r4,182260 <edid_decode_cea+0xdb4>
			cea->detailed_timing[i].stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
  182254:	90800017 	ldw	r2,0(r18)
  182258:	10801014 	ori	r2,r2,64
  18225c:	90800015 	stw	r2,0(r18)

		cea->detailed_timing[i].sync = 0;
  182260:	a8000015 	stw	zero,0(r21)
        if (c[17] & 0x10) {
  182264:	b0800003 	ldbu	r2,0(r22)
  182268:	1100040c 	andi	r4,r2,16
  18226c:	20003d1e 	bne	r4,zero,182364 <edid_decode_cea+0xeb8>
            	cea->detailed_timing[i].sync |= D_COMPOSITE_SYNC;
            	if (c[17] & 0x04)
                	cea->detailed_timing[i].sync |= D_COMPOSITE_SERRATION;
            }
        } else {
        	if (c[17] & 0x80) {
  182270:	10803fcc 	andi	r2,r2,255
  182274:	1080201c 	xori	r2,r2,128
  182278:	10bfe004 	addi	r2,r2,-128
  18227c:	1000550e 	bge	r2,zero,1823d4 <edid_decode_cea+0xf28>
        		cea->detailed_timing[i].sync |= A_BIPOLAR_COMPOSITE_SYNC;
  182280:	01000084 	movi	r4,2
  182284:	a9000015 	stw	r4,0(r21)
        		if (c[17] & 0x40) {
  182288:	b0800003 	ldbu	r2,0(r22)
  18228c:	1080100c 	andi	r2,r2,64
  182290:	1000461e 	bne	r2,zero,1823ac <edid_decode_cea+0xf00>

	// detail timing descriptor
	if (dtd == 0)
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
  182294:	d8800017 	ldw	r2,0(sp)
  182298:	ad401004 	addi	r21,r21,64
  18229c:	a5001004 	addi	r20,r20,64
  1822a0:	10800044 	addi	r2,r2,1
  1822a4:	d8800015 	stw	r2,0(sp)
  1822a8:	b5800484 	addi	r22,r22,18
  1822ac:	9cc00484 	addi	r19,r19,18
  1822b0:	94801004 	addi	r18,r18,64
  1822b4:	6b400484 	addi	r13,r13,18
  1822b8:	18c00484 	addi	r3,r3,18
  1822bc:	63000484 	addi	r12,r12,18
  1822c0:	e7000484 	addi	fp,fp,18
  1822c4:	5ac00484 	addi	r11,r11,18
  1822c8:	52800484 	addi	r10,r10,18
  1822cc:	4a400484 	addi	r9,r9,18
  1822d0:	bdc00484 	addi	r23,r23,18
  1822d4:	42000484 	addi	r8,r8,18
  1822d8:	31800484 	addi	r6,r6,18
  1822dc:	73800484 	addi	r14,r14,18
  1822e0:	39c00484 	addi	r7,r7,18
  1822e4:	7bc00484 	addi	r15,r15,18
  1822e8:	8809883a 	mov	r4,r17
  1822ec:	01416f04 	movi	r5,1468
  1822f0:	d8c00715 	stw	r3,28(sp)
  1822f4:	d9800d15 	stw	r6,52(sp)
  1822f8:	d9c00b15 	stw	r7,44(sp)
  1822fc:	da000c15 	stw	r8,48(sp)
  182300:	da400315 	stw	r9,12(sp)
  182304:	da800415 	stw	r10,16(sp)
  182308:	dac00515 	stw	r11,20(sp)
  18230c:	db000615 	stw	r12,24(sp)
  182310:	db400815 	stw	r13,32(sp)
  182314:	db800915 	stw	r14,36(sp)
  182318:	dbc00a15 	stw	r15,40(sp)
  18231c:	0187dd80 	call	187dd8 <__mulsi3>
  182320:	8085883a 	add	r2,r16,r2
  182324:	10861217 	ldw	r2,6216(r2)
  182328:	d9000017 	ldw	r4,0(sp)
  18232c:	d8c00717 	ldw	r3,28(sp)
  182330:	d9800d17 	ldw	r6,52(sp)
  182334:	d9c00b17 	ldw	r7,44(sp)
  182338:	da000c17 	ldw	r8,48(sp)
  18233c:	da400317 	ldw	r9,12(sp)
  182340:	da800417 	ldw	r10,16(sp)
  182344:	dac00517 	ldw	r11,20(sp)
  182348:	db000617 	ldw	r12,24(sp)
  18234c:	db400817 	ldw	r13,32(sp)
  182350:	db800917 	ldw	r14,36(sp)
  182354:	dbc00a17 	ldw	r15,40(sp)
  182358:	20bf3316 	blt	r4,r2,182028 <__alt_data_end+0xfff82028>
		}
	}

	// detail timing descriptor
	if (dtd == 0)
		return 0;
  18235c:	0005883a 	mov	r2,zero
  182360:	00002006 	br	1823e4 <edid_decode_cea+0xf38>
		if ((c[17] & 0x61) == 0x61)
			cea->detailed_timing[i].stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

		cea->detailed_timing[i].sync = 0;
        if (c[17] & 0x10) {
            if (c[17] & 0x08) {
  182364:	1080020c 	andi	r2,r2,8
  182368:	10000926 	beq	r2,zero,182390 <edid_decode_cea+0xee4>
            	cea->detailed_timing[i].sync |= D_SEPERATE_SYNC;
  18236c:	00802004 	movi	r2,128
  182370:	a8800015 	stw	r2,0(r21)
            	if (c[17] & 0x04)
  182374:	b0800003 	ldbu	r2,0(r22)
  182378:	1080010c 	andi	r2,r2,4
  18237c:	10000226 	beq	r2,zero,182388 <edid_decode_cea+0xedc>
                	cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_P;
  182380:	0100a004 	movi	r4,640
  182384:	00001406 	br	1823d8 <edid_decode_cea+0xf2c>
            	else
            		cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_N;
  182388:	00806004 	movi	r2,384
  18238c:	00000f06 	br	1823cc <edid_decode_cea+0xf20>
            } else {
            	cea->detailed_timing[i].sync |= D_COMPOSITE_SYNC;
  182390:	01000804 	movi	r4,32
  182394:	a9000015 	stw	r4,0(r21)
            	if (c[17] & 0x04)
  182398:	b0800003 	ldbu	r2,0(r22)
  18239c:	1080010c 	andi	r2,r2,4
  1823a0:	103fbc26 	beq	r2,zero,182294 <__alt_data_end+0xfff82294>
                	cea->detailed_timing[i].sync |= D_COMPOSITE_SERRATION;
  1823a4:	00801804 	movi	r2,96
  1823a8:	00000806 	br	1823cc <edid_decode_cea+0xf20>
            }
        } else {
        	if (c[17] & 0x80) {
        		cea->detailed_timing[i].sync |= A_BIPOLAR_COMPOSITE_SYNC;
        		if (c[17] & 0x40) {
            		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION;
  1823ac:	00800184 	movi	r2,6
  1823b0:	a8800015 	stw	r2,0(r21)
            		if (c[17] & 0x20)
  1823b4:	b0800003 	ldbu	r2,0(r22)
  1823b8:	1080080c 	andi	r2,r2,32
  1823bc:	10000226 	beq	r2,zero,1823c8 <edid_decode_cea+0xf1c>
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
  1823c0:	01000584 	movi	r4,22
  1823c4:	00000406 	br	1823d8 <edid_decode_cea+0xf2c>
            		else
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_G;
  1823c8:	00800384 	movi	r2,14
  1823cc:	a8800015 	stw	r2,0(r21)
  1823d0:	003fb006 	br	182294 <__alt_data_end+0xfff82294>
        		}
        	} else {
        		cea->detailed_timing[i].sync |= A_COMPOSITE_SYNC;
  1823d4:	01000044 	movi	r4,1
  1823d8:	a9000015 	stw	r4,0(r21)
  1823dc:	003fad06 	br	182294 <__alt_data_end+0xfff82294>

	c = &ext_bin[1];

	// version
	if (*c != 0x03)
		return -1;	// todo: support v1 / v2
  1823e0:	00bfffc4 	movi	r2,-1
        	}
        }
	}

	return 0;
}
  1823e4:	dfc01717 	ldw	ra,92(sp)
  1823e8:	df001617 	ldw	fp,88(sp)
  1823ec:	ddc01517 	ldw	r23,84(sp)
  1823f0:	dd801417 	ldw	r22,80(sp)
  1823f4:	dd401317 	ldw	r21,76(sp)
  1823f8:	dd001217 	ldw	r20,72(sp)
  1823fc:	dcc01117 	ldw	r19,68(sp)
  182400:	dc801017 	ldw	r18,64(sp)
  182404:	dc400f17 	ldw	r17,60(sp)
  182408:	dc000e17 	ldw	r16,56(sp)
  18240c:	dec01804 	addi	sp,sp,96
  182410:	f800283a 	ret

00182414 <edid_print_cea>:

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
  182414:	deffee04 	addi	sp,sp,-72
  182418:	dc400915 	stw	r17,36(sp)
  18241c:	dc000815 	stw	r16,32(sp)
  182420:	2823883a 	mov	r17,r5
  182424:	2021883a 	mov	r16,r4
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
	struct edid_cea *cea = &ext_data->cea_ext;

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
  182428:	2809883a 	mov	r4,r5
  18242c:	01416f04 	movi	r5,1468

	return 0;
}

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
  182430:	dfc01115 	stw	ra,68(sp)
  182434:	dc800a15 	stw	r18,40(sp)
  182438:	df001015 	stw	fp,64(sp)
  18243c:	ddc00f15 	stw	r23,60(sp)
  182440:	dd800e15 	stw	r22,56(sp)
  182444:	dd400d15 	stw	r21,52(sp)
  182448:	dd000c15 	stw	r20,48(sp)
  18244c:	dcc00b15 	stw	r19,44(sp)
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
	struct edid_cea *cea = &ext_data->cea_ext;

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
  182450:	0187dd80 	call	187dd8 <__mulsi3>
  182454:	1025883a 	mov	r18,r2
  182458:	8085883a 	add	r2,r16,r2
  18245c:	11860c17 	ldw	r6,6192(r2)
  182460:	010006b4 	movhi	r4,26
  182464:	212f6304 	addi	r4,r4,-17012
  182468:	880b883a 	mov	r5,r17
  18246c:	01891080 	call	189108 <printf>

	printf("  number of DBCs (data block collections)      : %d\n", cea->nr_dbcs);
  182470:	8485883a 	add	r2,r16,r18
  182474:	11461317 	ldw	r5,6220(r2)
  182478:	010006b4 	movhi	r4,26
  18247c:	212f7304 	addi	r4,r4,-16948
  182480:	01891080 	call	189108 <printf>
	printf("  number of DTDs (detailed timing descriptors) : %d\n", cea->nr_dtd);
  182484:	8485883a 	add	r2,r16,r18
  182488:	11461217 	ldw	r5,6216(r2)
  18248c:	010006b4 	movhi	r4,26
  182490:	212f8104 	addi	r4,r4,-16892
  182494:	01891080 	call	189108 <printf>
	printf("  offset to DTD                                : %d\n", cea->off_dtd);
  182498:	8485883a 	add	r2,r16,r18
  18249c:	11461117 	ldw	r5,6212(r2)
  1824a0:	010006b4 	movhi	r4,26
  1824a4:	212f8f04 	addi	r4,r4,-16836
  1824a8:	01891080 	call	189108 <printf>
	printf("  monitor underscans IT formats                : %s\n", cea->flags.underscan ? "yes" : "no");
  1824ac:	84a5883a 	add	r18,r16,r18
  1824b0:	90860d17 	ldw	r2,6196(r18)
  1824b4:	1000031e 	bne	r2,zero,1824c4 <edid_print_cea+0xb0>
  1824b8:	014006b4 	movhi	r5,26
  1824bc:	296f5f04 	addi	r5,r5,-17028
  1824c0:	00000206 	br	1824cc <edid_print_cea+0xb8>
  1824c4:	014006b4 	movhi	r5,26
  1824c8:	296f5e04 	addi	r5,r5,-17032
  1824cc:	010006b4 	movhi	r4,26
  1824d0:	212f9d04 	addi	r4,r4,-16780
  1824d4:	01891080 	call	189108 <printf>
	printf("  supports audio                               : %s\n", cea->flags.audio ? "yes" : "no");
  1824d8:	8809883a 	mov	r4,r17
  1824dc:	01416f04 	movi	r5,1468
  1824e0:	0187dd80 	call	187dd8 <__mulsi3>
  1824e4:	8085883a 	add	r2,r16,r2
  1824e8:	10860e17 	ldw	r2,6200(r2)
  1824ec:	1000031e 	bne	r2,zero,1824fc <edid_print_cea+0xe8>
  1824f0:	014006b4 	movhi	r5,26
  1824f4:	296f5f04 	addi	r5,r5,-17028
  1824f8:	00000206 	br	182504 <edid_print_cea+0xf0>
  1824fc:	014006b4 	movhi	r5,26
  182500:	296f5e04 	addi	r5,r5,-17032
  182504:	010006b4 	movhi	r4,26
  182508:	212fab04 	addi	r4,r4,-16724
  18250c:	01891080 	call	189108 <printf>
	printf("  supports YCbCr 4:4:4 in addition to RGB      : %s\n", cea->flags.ycbcr444 ? "yes" : "no");
  182510:	8809883a 	mov	r4,r17
  182514:	01416f04 	movi	r5,1468
  182518:	0187dd80 	call	187dd8 <__mulsi3>
  18251c:	8085883a 	add	r2,r16,r2
  182520:	10860f17 	ldw	r2,6204(r2)
  182524:	1000031e 	bne	r2,zero,182534 <edid_print_cea+0x120>
  182528:	014006b4 	movhi	r5,26
  18252c:	296f5f04 	addi	r5,r5,-17028
  182530:	00000206 	br	18253c <edid_print_cea+0x128>
  182534:	014006b4 	movhi	r5,26
  182538:	296f5e04 	addi	r5,r5,-17032
  18253c:	010006b4 	movhi	r4,26
  182540:	212fb904 	addi	r4,r4,-16668
  182544:	01891080 	call	189108 <printf>
	printf("  supports YCbCr 4:2:2 in addition to RGB      : %s\n", cea->flags.ycbcr422 ? "yes" : "no");
  182548:	8809883a 	mov	r4,r17
  18254c:	01416f04 	movi	r5,1468
  182550:	0187dd80 	call	187dd8 <__mulsi3>
  182554:	8085883a 	add	r2,r16,r2
  182558:	10861017 	ldw	r2,6208(r2)
  18255c:	1000031e 	bne	r2,zero,18256c <edid_print_cea+0x158>
  182560:	014006b4 	movhi	r5,26
  182564:	296f5f04 	addi	r5,r5,-17028
  182568:	00000206 	br	182574 <edid_print_cea+0x160>
  18256c:	014006b4 	movhi	r5,26
  182570:	296f5e04 	addi	r5,r5,-17032
  182574:	010006b4 	movhi	r4,26
  182578:	212fc704 	addi	r4,r4,-16612
  18257c:	01891080 	call	189108 <printf>

	printf("\n  data block collections\n  ---------------------------------\n");
  182580:	010006b4 	movhi	r4,26
  182584:	212fd504 	addi	r4,r4,-16556
  182588:	018920c0 	call	18920c <puts>
  18258c:	8809883a 	mov	r4,r17
  182590:	01416f04 	movi	r5,1468
  182594:	0187dd80 	call	187dd8 <__mulsi3>
  182598:	1025883a 	mov	r18,r2
  18259c:	90c67504 	addi	r3,r18,6612
  1825a0:	80c7883a 	add	r3,r16,r3
  1825a4:	d8c00415 	stw	r3,16(sp)
  1825a8:	90c63404 	addi	r3,r18,6352
  1825ac:	80c7883a 	add	r3,r16,r3
  1825b0:	d8c00515 	stw	r3,20(sp)
  1825b4:	90c6c504 	addi	r3,r18,6932
  1825b8:	80c7883a 	add	r3,r16,r3
  1825bc:	14c62384 	addi	r19,r2,6286
  1825c0:	d8c00615 	stw	r3,24(sp)
  1825c4:	8085883a 	add	r2,r16,r2
  1825c8:	00f9dc84 	movi	r3,-6286
  1825cc:	1887c83a 	sub	r3,r3,r2
  1825d0:	84e7883a 	add	r19,r16,r19
  1825d4:	d8c00715 	stw	r3,28(sp)
  1825d8:	d8c00717 	ldw	r3,28(sp)

	// data block collection
	for (t = 0; t < cea->nr_dbcs; ++t) {
  1825dc:	8809883a 	mov	r4,r17
  1825e0:	01416f04 	movi	r5,1468
  1825e4:	1ce9883a 	add	r20,r3,r19
  1825e8:	0187dd80 	call	187dd8 <__mulsi3>
  1825ec:	8087883a 	add	r3,r16,r2
  1825f0:	18c61317 	ldw	r3,6220(r3)
  1825f4:	a0c3420e 	bge	r20,r3,183300 <edid_print_cea+0xeec>

		switch (cea->dbc_tags[t]) {
  1825f8:	99bff083 	ldbu	r6,-62(r19)
  1825fc:	00c00184 	movi	r3,6
  182600:	30bfffc4 	addi	r2,r6,-1
  182604:	10803fcc 	andi	r2,r2,255
  182608:	18833636 	bltu	r3,r2,1832e4 <edid_print_cea+0xed0>
  18260c:	100490ba 	slli	r2,r2,2
  182610:	00c00634 	movhi	r3,24
  182614:	18c98904 	addi	r3,r3,9764
  182618:	10c5883a 	add	r2,r2,r3
  18261c:	10800017 	ldw	r2,0(r2)
  182620:	1000683a 	jmp	r2
  182624:	00182640 	call	18264 <__alt_mem_sram-0x167d9c>
  182628:	0018277c 	xorhi	zero,zero,24733
  18262c:	00182858 	cmpnei	zero,zero,24737
  182630:	00182ea0 	cmpeqi	zero,zero,24762
  182634:	00183054 	movui	zero,24769
  182638:	001832e4 	muli	zero,zero,24779
  18263c:	00183060 	cmpeqi	zero,zero,24769
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
  182640:	010006b4 	movhi	r4,26
  182644:	a00b883a 	mov	r5,r20
  182648:	212fe504 	addi	r4,r4,-16492
  18264c:	01891080 	call	189108 <printf>
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);
  182650:	8809883a 	mov	r4,r17
  182654:	01416f04 	movi	r5,1468
  182658:	0187dd80 	call	187dd8 <__mulsi3>
  18265c:	8085883a 	add	r2,r16,r2
  182660:	11467417 	ldw	r5,6608(r2)
  182664:	010006b4 	movhi	r4,26
  182668:	212fed04 	addi	r4,r4,-16460
  18266c:	01891080 	call	189108 <printf>

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  182670:	dd000417 	ldw	r20,16(sp)
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
  182674:	058006b4 	movhi	r22,26
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  182678:	002b883a 	mov	r21,zero
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
  18267c:	b5b9d704 	addi	r22,r22,-6308
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  182680:	8809883a 	mov	r4,r17
  182684:	01416f04 	movi	r5,1468
  182688:	0187dd80 	call	187dd8 <__mulsi3>
  18268c:	8085883a 	add	r2,r16,r2
  182690:	10867417 	ldw	r2,6608(r2)
  182694:	a883180e 	bge	r21,r2,1832f8 <edid_print_cea+0xee4>
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
  182698:	a0800017 	ldw	r2,0(r20)
  18269c:	010006b4 	movhi	r4,26
  1826a0:	212ffb04 	addi	r4,r4,-16404
  1826a4:	1085883a 	add	r2,r2,r2
  1826a8:	1085883a 	add	r2,r2,r2
  1826ac:	b085883a 	add	r2,r22,r2
  1826b0:	11800017 	ldw	r6,0(r2)
  1826b4:	a80b883a 	mov	r5,r21
  1826b8:	01891080 	call	189108 <printf>
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
  1826bc:	a1400117 	ldw	r5,4(r20)
  1826c0:	010006b4 	movhi	r4,26
  1826c4:	21300304 	addi	r4,r4,-16372
  1826c8:	01891080 	call	189108 <printf>
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
  1826cc:	a0800217 	ldw	r2,8(r20)
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
  1826d0:	010006b4 	movhi	r4,26
  1826d4:	21300b04 	addi	r4,r4,-16340
  1826d8:	1006d0fa 	srli	r3,r2,3
  1826dc:	100ad1ba 	srli	r5,r2,6
  1826e0:	100cd17a 	srli	r6,r2,5
  1826e4:	18c0004c 	andi	r3,r3,1
  1826e8:	d8c00015 	stw	r3,0(sp)
  1826ec:	1006d0ba 	srli	r3,r2,2
  1826f0:	100ed13a 	srli	r7,r2,4
  1826f4:	2940004c 	andi	r5,r5,1
  1826f8:	18c0004c 	andi	r3,r3,1
  1826fc:	d8c00115 	stw	r3,4(sp)
  182700:	1006d07a 	srli	r3,r2,1
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);
  182704:	1080004c 	andi	r2,r2,1
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
  182708:	d8800315 	stw	r2,12(sp)
  18270c:	18c0004c 	andi	r3,r3,1
  182710:	d8c00215 	stw	r3,8(sp)
  182714:	3180004c 	andi	r6,r6,1
  182718:	39c0004c 	andi	r7,r7,1
  18271c:	01891080 	call	189108 <printf>
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
  182720:	a0800017 	ldw	r2,0(r20)
  182724:	00c00044 	movi	r3,1
  182728:	10c00826 	beq	r2,r3,18274c <edid_print_cea+0x338>
  18272c:	0080100e 	bge	zero,r2,182770 <edid_print_cea+0x35c>
  182730:	00c00204 	movi	r3,8
  182734:	18800e16 	blt	r3,r2,182770 <edid_print_cea+0x35c>
				case CEA_SAD_FMT_MP3:
				case CEA_SAD_FMT_MPEG2:
				case CEA_SAD_FMT_AAC:
				case CEA_SAD_FMT_DTS:
				case CEA_SAD_FMT_ATRAC:
					printf("           bitrate max : %d (kHz)\n", cea->db_audio.sad[i].bitrate);
  182738:	a1400417 	ldw	r5,16(r20)
  18273c:	010006b4 	movhi	r4,26
  182740:	21302e04 	addi	r4,r4,-16200
  182744:	01891080 	call	189108 <printf>
					break;
  182748:	00000906 	br	182770 <edid_print_cea+0x35c>
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
  18274c:	a1c00317 	ldw	r7,12(r20)
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
  182750:	010006b4 	movhi	r4,26
  182754:	21302004 	addi	r4,r4,-16256
  182758:	380ad0ba 	srli	r5,r7,2
  18275c:	380cd07a 	srli	r6,r7,1
  182760:	39c0004c 	andi	r7,r7,1
  182764:	2940004c 	andi	r5,r5,1
  182768:	3180004c 	andi	r6,r6,1
  18276c:	01891080 	call	189108 <printf>
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
  182770:	ad400044 	addi	r21,r21,1
  182774:	a5000504 	addi	r20,r20,20
  182778:	003fc106 	br	182680 <__alt_data_end+0xfff82680>
				"720x480p       @239.76/240 Hz (16:9)",
				"720(1440)x480i @239.76/240 Hz (4:3)",
				"720(1440)x480i @239.76/240 Hz (16:9)",
			};

			printf("\n  [%02d] video data block ...\n", t);
  18277c:	010006b4 	movhi	r4,26
  182780:	a00b883a 	mov	r5,r20
  182784:	21303704 	addi	r4,r4,-16164
  182788:	01891080 	call	189108 <printf>
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);
  18278c:	8809883a 	mov	r4,r17
  182790:	01416f04 	movi	r5,1468
  182794:	0187dd80 	call	187dd8 <__mulsi3>
  182798:	8085883a 	add	r2,r16,r2
  18279c:	11463317 	ldw	r5,6348(r2)
  1827a0:	010006b4 	movhi	r4,26
  1827a4:	21303f04 	addi	r4,r4,-16132
  1827a8:	01891080 	call	189108 <printf>

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  1827ac:	dd000517 	ldw	r20,20(sp)
				if (cea->db_video.svd[i].vic < 60)
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
  1827b0:	054006b4 	movhi	r21,26
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  1827b4:	002d883a 	mov	r22,zero
				if (cea->db_video.svd[i].vic < 60)
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
  1827b8:	ad799b04 	addi	r21,r21,-6548
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  1827bc:	8809883a 	mov	r4,r17
  1827c0:	01416f04 	movi	r5,1468
  1827c4:	0187dd80 	call	187dd8 <__mulsi3>
  1827c8:	8085883a 	add	r2,r16,r2
  1827cc:	10863317 	ldw	r2,6348(r2)
  1827d0:	b082c90e 	bge	r22,r2,1832f8 <edid_print_cea+0xee4>
				if (cea->db_video.svd[i].vic < 60)
  1827d4:	a1800117 	ldw	r6,4(r20)
  1827d8:	00800ec4 	movi	r2,59
  1827dc:	a0c00017 	ldw	r3,0(r20)
  1827e0:	11801016 	blt	r2,r6,182824 <edid_print_cea+0x410>
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
  1827e4:	3185883a 	add	r2,r6,r6
  1827e8:	1085883a 	add	r2,r2,r2
  1827ec:	a885883a 	add	r2,r21,r2
  1827f0:	11c00017 	ldw	r7,0(r2)
  1827f4:	1800031e 	bne	r3,zero,182804 <edid_print_cea+0x3f0>
  1827f8:	008006b4 	movhi	r2,26
  1827fc:	10b19a04 	addi	r2,r2,-14744
  182800:	00000206 	br	18280c <edid_print_cea+0x3f8>
  182804:	008006b4 	movhi	r2,26
  182808:	10af6004 	addi	r2,r2,-17024
  18280c:	010006b4 	movhi	r4,26
  182810:	d8800015 	stw	r2,0(sp)
  182814:	21304d04 	addi	r4,r4,-16076
  182818:	b00b883a 	mov	r5,r22
  18281c:	01891080 	call	189108 <printf>
  182820:	00000a06 	br	18284c <edid_print_cea+0x438>
				else
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
  182824:	1800031e 	bne	r3,zero,182834 <edid_print_cea+0x420>
  182828:	01c006b4 	movhi	r7,26
  18282c:	39f19a04 	addi	r7,r7,-14744
  182830:	00000206 	br	18283c <edid_print_cea+0x428>
  182834:	01c006b4 	movhi	r7,26
  182838:	39ef6004 	addi	r7,r7,-17024
  18283c:	010006b4 	movhi	r4,26
  182840:	21305504 	addi	r4,r4,-16044
  182844:	b00b883a 	mov	r5,r22
  182848:	01891080 	call	189108 <printf>
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
  18284c:	b5800044 	addi	r22,r22,1
  182850:	a5000204 	addi	r20,r20,8
  182854:	003fd906 	br	1827bc <__alt_data_end+0xfff827bc>
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
			}
			break;
		}
		case CEA_DB_VENDOR:
			if (cea->db_vsdb_hdmi.ieee_reg_id != 0x000c03) {
  182858:	8809883a 	mov	r4,r17
  18285c:	01416f04 	movi	r5,1468
  182860:	0187dd80 	call	187dd8 <__mulsi3>
  182864:	102b883a 	mov	r21,r2
  182868:	8085883a 	add	r2,r16,r2
  18286c:	10c6a917 	ldw	r3,6820(r2)
  182870:	008300c4 	movi	r2,3075
  182874:	18800326 	beq	r3,r2,182884 <edid_print_cea+0x470>
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
  182878:	010006b4 	movhi	r4,26
  18287c:	21305e04 	addi	r4,r4,-16008
  182880:	00027606 	br	18325c <edid_print_cea+0xe48>
				break;
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
  182884:	010006b4 	movhi	r4,26
  182888:	21306a04 	addi	r4,r4,-15960
  18288c:	a00b883a 	mov	r5,r20
  182890:	01891080 	call	189108 <printf>
			printf("       source physical address         : %d.%d.%d.%d\n",
  182894:	854b883a 	add	r5,r16,r21
  182898:	2906ad17 	ldw	r4,6836(r5)
  18289c:	2807883a 	mov	r3,r5
  1828a0:	d9000015 	stw	r4,0(sp)
  1828a4:	1986ab17 	ldw	r6,6828(r3)
  1828a8:	19c6ac17 	ldw	r7,6832(r3)
  1828ac:	2946aa17 	ldw	r5,6824(r5)
  1828b0:	010006b4 	movhi	r4,26
  1828b4:	21307704 	addi	r4,r4,-15908
  1828b8:	01891080 	call	189108 <printf>
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
				cea->db_vsdb_hdmi.addr_c, cea->db_vsdb_hdmi.addr_d);

			if (cea->db_vsdb_hdmi.ext_len >= 6) {
  1828bc:	8545883a 	add	r2,r16,r21
  1828c0:	1086a817 	ldw	r2,6816(r2)
  1828c4:	00c00144 	movi	r3,5
  1828c8:	1880510e 	bge	r3,r2,182a10 <edid_print_cea+0x5fc>
				printf("       support ACP ISRC1 ISRC2 packets : %s\n", cea->db_vsdb_hdmi.ai ? "yes" : "no");
  1828cc:	856b883a 	add	r21,r16,r21
  1828d0:	a886ae17 	ldw	r2,6840(r21)
  1828d4:	1000031e 	bne	r2,zero,1828e4 <edid_print_cea+0x4d0>
  1828d8:	014006b4 	movhi	r5,26
  1828dc:	296f5f04 	addi	r5,r5,-17028
  1828e0:	00000206 	br	1828ec <edid_print_cea+0x4d8>
  1828e4:	014006b4 	movhi	r5,26
  1828e8:	296f5e04 	addi	r5,r5,-17032
  1828ec:	010006b4 	movhi	r4,26
  1828f0:	21308504 	addi	r4,r4,-15852
  1828f4:	01891080 	call	189108 <printf>
				printf("       support 48 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp48 ? "yes" : "no");
  1828f8:	8809883a 	mov	r4,r17
  1828fc:	01416f04 	movi	r5,1468
  182900:	0187dd80 	call	187dd8 <__mulsi3>
  182904:	8085883a 	add	r2,r16,r2
  182908:	1086b117 	ldw	r2,6852(r2)
  18290c:	1000031e 	bne	r2,zero,18291c <edid_print_cea+0x508>
  182910:	014006b4 	movhi	r5,26
  182914:	296f5f04 	addi	r5,r5,-17028
  182918:	00000206 	br	182924 <edid_print_cea+0x510>
  18291c:	014006b4 	movhi	r5,26
  182920:	296f5e04 	addi	r5,r5,-17032
  182924:	010006b4 	movhi	r4,26
  182928:	21309104 	addi	r4,r4,-15804
  18292c:	01891080 	call	189108 <printf>
				printf("       support 36 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp36 ? "yes" : "no");
  182930:	8809883a 	mov	r4,r17
  182934:	01416f04 	movi	r5,1468
  182938:	0187dd80 	call	187dd8 <__mulsi3>
  18293c:	8085883a 	add	r2,r16,r2
  182940:	1086b017 	ldw	r2,6848(r2)
  182944:	1000031e 	bne	r2,zero,182954 <edid_print_cea+0x540>
  182948:	014006b4 	movhi	r5,26
  18294c:	296f5f04 	addi	r5,r5,-17028
  182950:	00000206 	br	18295c <edid_print_cea+0x548>
  182954:	014006b4 	movhi	r5,26
  182958:	296f5e04 	addi	r5,r5,-17032
  18295c:	010006b4 	movhi	r4,26
  182960:	21309d04 	addi	r4,r4,-15756
  182964:	01891080 	call	189108 <printf>
				printf("       support 30 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp30 ? "yes" : "no");
  182968:	8809883a 	mov	r4,r17
  18296c:	01416f04 	movi	r5,1468
  182970:	0187dd80 	call	187dd8 <__mulsi3>
  182974:	8085883a 	add	r2,r16,r2
  182978:	1086af17 	ldw	r2,6844(r2)
  18297c:	1000031e 	bne	r2,zero,18298c <edid_print_cea+0x578>
  182980:	014006b4 	movhi	r5,26
  182984:	296f5f04 	addi	r5,r5,-17028
  182988:	00000206 	br	182994 <edid_print_cea+0x580>
  18298c:	014006b4 	movhi	r5,26
  182990:	296f5e04 	addi	r5,r5,-17032
  182994:	010006b4 	movhi	r4,26
  182998:	2130a904 	addi	r4,r4,-15708
  18299c:	01891080 	call	189108 <printf>
				printf("       support YCbCr 4:4:4 deep color  : %s\n", cea->db_vsdb_hdmi.ycbcr444 ? "yes" : "no");
  1829a0:	8809883a 	mov	r4,r17
  1829a4:	01416f04 	movi	r5,1468
  1829a8:	0187dd80 	call	187dd8 <__mulsi3>
  1829ac:	8085883a 	add	r2,r16,r2
  1829b0:	1086b217 	ldw	r2,6856(r2)
  1829b4:	1000031e 	bne	r2,zero,1829c4 <edid_print_cea+0x5b0>
  1829b8:	014006b4 	movhi	r5,26
  1829bc:	296f5f04 	addi	r5,r5,-17028
  1829c0:	00000206 	br	1829cc <edid_print_cea+0x5b8>
  1829c4:	014006b4 	movhi	r5,26
  1829c8:	296f5e04 	addi	r5,r5,-17032
  1829cc:	010006b4 	movhi	r4,26
  1829d0:	2130b504 	addi	r4,r4,-15660
  1829d4:	01891080 	call	189108 <printf>
				printf("       support DVI dual-link           : %s\n", cea->db_vsdb_hdmi.dvi_dual ? "yes" : "no");
  1829d8:	8809883a 	mov	r4,r17
  1829dc:	01416f04 	movi	r5,1468
  1829e0:	0187dd80 	call	187dd8 <__mulsi3>
  1829e4:	8085883a 	add	r2,r16,r2
  1829e8:	1086b317 	ldw	r2,6860(r2)
  1829ec:	1000031e 	bne	r2,zero,1829fc <edid_print_cea+0x5e8>
  1829f0:	014006b4 	movhi	r5,26
  1829f4:	296f5f04 	addi	r5,r5,-17028
  1829f8:	00000206 	br	182a04 <edid_print_cea+0x5f0>
  1829fc:	014006b4 	movhi	r5,26
  182a00:	296f5e04 	addi	r5,r5,-17032
  182a04:	010006b4 	movhi	r4,26
  182a08:	2130c104 	addi	r4,r4,-15612
  182a0c:	01891080 	call	189108 <printf>
			}

			if (cea->db_vsdb_hdmi.ext_len >= 7) {
  182a10:	8809883a 	mov	r4,r17
  182a14:	01416f04 	movi	r5,1468
  182a18:	0187dd80 	call	187dd8 <__mulsi3>
  182a1c:	8087883a 	add	r3,r16,r2
  182a20:	18c6a817 	ldw	r3,6816(r3)
  182a24:	01000184 	movi	r4,6
  182a28:	20c0050e 	bge	r4,r3,182a40 <edid_print_cea+0x62c>
				printf("       max TMDS clock                  : %d (MHz)\n", cea->db_vsdb_hdmi.max_tmds_clk);
  182a2c:	8085883a 	add	r2,r16,r2
  182a30:	1146b717 	ldw	r5,6876(r2)
  182a34:	010006b4 	movhi	r4,26
  182a38:	2130cd04 	addi	r4,r4,-15564
  182a3c:	01891080 	call	189108 <printf>
			}

			if (cea->db_vsdb_hdmi.p_latency != 0) {
  182a40:	8809883a 	mov	r4,r17
  182a44:	01416f04 	movi	r5,1468
  182a48:	0187dd80 	call	187dd8 <__mulsi3>
  182a4c:	1029883a 	mov	r20,r2
  182a50:	8085883a 	add	r2,r16,r2
  182a54:	1086b417 	ldw	r2,6864(r2)
  182a58:	10000a26 	beq	r2,zero,182a84 <edid_print_cea+0x670>
				printf("       video latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_p);
  182a5c:	8505883a 	add	r2,r16,r20
  182a60:	1146b817 	ldw	r5,6880(r2)
  182a64:	010006b4 	movhi	r4,26
  182a68:	2130da04 	addi	r4,r4,-15512
  182a6c:	01891080 	call	189108 <printf>
				printf("       audio latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_p);
  182a70:	8529883a 	add	r20,r16,r20
  182a74:	a146b917 	ldw	r5,6884(r20)
  182a78:	010006b4 	movhi	r4,26
  182a7c:	2130e704 	addi	r4,r4,-15460
  182a80:	01891080 	call	189108 <printf>
			}

			if (cea->db_vsdb_hdmi.i_latency != 0) {
  182a84:	8809883a 	mov	r4,r17
  182a88:	01416f04 	movi	r5,1468
  182a8c:	0187dd80 	call	187dd8 <__mulsi3>
  182a90:	1029883a 	mov	r20,r2
  182a94:	8085883a 	add	r2,r16,r2
  182a98:	1086b517 	ldw	r2,6868(r2)
  182a9c:	10000a26 	beq	r2,zero,182ac8 <edid_print_cea+0x6b4>
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
  182aa0:	8505883a 	add	r2,r16,r20
  182aa4:	1146ba17 	ldw	r5,6888(r2)
  182aa8:	010006b4 	movhi	r4,26
  182aac:	2130f404 	addi	r4,r4,-15408
  182ab0:	01891080 	call	189108 <printf>
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
  182ab4:	8529883a 	add	r20,r16,r20
  182ab8:	a146bb17 	ldw	r5,6892(r20)
  182abc:	010006b4 	movhi	r4,26
  182ac0:	21310104 	addi	r4,r4,-15356
  182ac4:	01891080 	call	189108 <printf>
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
  182ac8:	8809883a 	mov	r4,r17
  182acc:	01416f04 	movi	r5,1468
  182ad0:	0187dd80 	call	187dd8 <__mulsi3>
  182ad4:	8085883a 	add	r2,r16,r2
  182ad8:	1086b617 	ldw	r2,6872(r2)
  182adc:	1000031e 	bne	r2,zero,182aec <edid_print_cea+0x6d8>
  182ae0:	014006b4 	movhi	r5,26
  182ae4:	296f5f04 	addi	r5,r5,-17028
  182ae8:	00000206 	br	182af4 <edid_print_cea+0x6e0>
  182aec:	014006b4 	movhi	r5,26
  182af0:	296f5e04 	addi	r5,r5,-17032
  182af4:	010006b4 	movhi	r4,26
  182af8:	21310e04 	addi	r4,r4,-15304
  182afc:	01891080 	call	189108 <printf>
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
  182b00:	8809883a 	mov	r4,r17
  182b04:	01416f04 	movi	r5,1468
  182b08:	0187dd80 	call	187dd8 <__mulsi3>
  182b0c:	8085883a 	add	r2,r16,r2
  182b10:	1086bc17 	ldw	r2,6896(r2)
  182b14:	1000031e 	bne	r2,zero,182b24 <edid_print_cea+0x710>
  182b18:	014006b4 	movhi	r5,26
  182b1c:	296f5f04 	addi	r5,r5,-17028
  182b20:	00000206 	br	182b2c <edid_print_cea+0x718>
  182b24:	014006b4 	movhi	r5,26
  182b28:	296f5e04 	addi	r5,r5,-17032
  182b2c:	010006b4 	movhi	r4,26
  182b30:	21311a04 	addi	r4,r4,-15256
  182b34:	01891080 	call	189108 <printf>

			if (cea->db_vsdb_hdmi.hdmi_video != 0) {
  182b38:	8809883a 	mov	r4,r17
  182b3c:	01416f04 	movi	r5,1468
  182b40:	0187dd80 	call	187dd8 <__mulsi3>
  182b44:	8087883a 	add	r3,r16,r2
  182b48:	18c6b617 	ldw	r3,6872(r3)
  182b4c:	1801ea26 	beq	r3,zero,1832f8 <edid_print_cea+0xee4>
				switch (cea->db_vsdb_hdmi.multi_3d) {
  182b50:	8085883a 	add	r2,r16,r2
  182b54:	1086bd17 	ldw	r2,6900(r2)
  182b58:	00c00044 	movi	r3,1
  182b5c:	10c00c26 	beq	r2,r3,182b90 <edid_print_cea+0x77c>
  182b60:	18800416 	blt	r3,r2,182b74 <edid_print_cea+0x760>
  182b64:	1000101e 	bne	r2,zero,182ba8 <edid_print_cea+0x794>
				case 0:
					printf("         3D-Multi_present              : 2b00 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
  182b68:	010006b4 	movhi	r4,26
  182b6c:	21312604 	addi	r4,r4,-15208
  182b70:	00000c06 	br	182ba4 <edid_print_cea+0x790>

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");

			if (cea->db_vsdb_hdmi.hdmi_video != 0) {
				switch (cea->db_vsdb_hdmi.multi_3d) {
  182b74:	00c00084 	movi	r3,2
  182b78:	10c00826 	beq	r2,r3,182b9c <edid_print_cea+0x788>
  182b7c:	00c000c4 	movi	r3,3
  182b80:	10c0091e 	bne	r2,r3,182ba8 <edid_print_cea+0x794>
					break;
				case 2:
					printf("         3D-Multi_present              : 2b10 (with 3D_Structure_ALL_15..0, with 3D_MASK_15..0)\n");
					break;
				case 3:
					printf("         3D-Multi_present              : 2b11 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
  182b84:	010006b4 	movhi	r4,26
  182b88:	21316d04 	addi	r4,r4,-14924
  182b8c:	00000506 	br	182ba4 <edid_print_cea+0x790>
				switch (cea->db_vsdb_hdmi.multi_3d) {
				case 0:
					printf("         3D-Multi_present              : 2b00 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
					break;
				case 1:
					printf("         3D-Multi_present              : 2b01 (with 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
  182b90:	010006b4 	movhi	r4,26
  182b94:	21313d04 	addi	r4,r4,-15116
  182b98:	00000206 	br	182ba4 <edid_print_cea+0x790>
					break;
				case 2:
					printf("         3D-Multi_present              : 2b10 (with 3D_Structure_ALL_15..0, with 3D_MASK_15..0)\n");
  182b9c:	010006b4 	movhi	r4,26
  182ba0:	21315504 	addi	r4,r4,-15020
					break;
				case 3:
					printf("         3D-Multi_present              : 2b11 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
  182ba4:	018920c0 	call	18920c <puts>
					break;
				}

				if ((cea->db_vsdb_hdmi.multi_3d == 1) || (cea->db_vsdb_hdmi.multi_3d == 2)) {
  182ba8:	8809883a 	mov	r4,r17
  182bac:	01416f04 	movi	r5,1468
  182bb0:	0187dd80 	call	187dd8 <__mulsi3>
  182bb4:	8087883a 	add	r3,r16,r2
  182bb8:	18c6bd17 	ldw	r3,6900(r3)
  182bbc:	01000044 	movi	r4,1
  182bc0:	18ffffc4 	addi	r3,r3,-1
  182bc4:	20c02736 	bltu	r4,r3,182c64 <edid_print_cea+0x850>
					if (cea->db_vsdb_hdmi.struct_all_3d == 0) {
  182bc8:	1086c104 	addi	r2,r2,6916
  182bcc:	80a9883a 	add	r20,r16,r2
  182bd0:	a0800017 	ldw	r2,0(r20)
  182bd4:	1000041e 	bne	r2,zero,182be8 <edid_print_cea+0x7d4>
						printf("         3D_Structure_ALL              : none\n");
  182bd8:	010006b4 	movhi	r4,26
  182bdc:	21318404 	addi	r4,r4,-14832
  182be0:	018920c0 	call	18920c <puts>
  182be4:	00001f06 	br	182c64 <edid_print_cea+0x850>
					} else {
						printf("         3D_Structure_ALL              : ");
  182be8:	010006b4 	movhi	r4,26
  182bec:	21319004 	addi	r4,r4,-14784
  182bf0:	01891080 	call	189108 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x01)
  182bf4:	a0800017 	ldw	r2,0(r20)
  182bf8:	1080004c 	andi	r2,r2,1
  182bfc:	10000326 	beq	r2,zero,182c0c <edid_print_cea+0x7f8>
							printf("frame_packing ");
  182c00:	010006b4 	movhi	r4,26
  182c04:	21319b04 	addi	r4,r4,-14740
  182c08:	01891080 	call	189108 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x40)
  182c0c:	8809883a 	mov	r4,r17
  182c10:	01416f04 	movi	r5,1468
  182c14:	0187dd80 	call	187dd8 <__mulsi3>
  182c18:	8085883a 	add	r2,r16,r2
  182c1c:	1086c117 	ldw	r2,6916(r2)
  182c20:	1080100c 	andi	r2,r2,64
  182c24:	10000326 	beq	r2,zero,182c34 <edid_print_cea+0x820>
							printf("top-and-bottom ");
  182c28:	010006b4 	movhi	r4,26
  182c2c:	21319f04 	addi	r4,r4,-14724
  182c30:	01891080 	call	189108 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x100)
  182c34:	8809883a 	mov	r4,r17
  182c38:	01416f04 	movi	r5,1468
  182c3c:	0187dd80 	call	187dd8 <__mulsi3>
  182c40:	8085883a 	add	r2,r16,r2
  182c44:	1086c117 	ldw	r2,6916(r2)
  182c48:	1080400c 	andi	r2,r2,256
  182c4c:	10000326 	beq	r2,zero,182c5c <edid_print_cea+0x848>
							printf("side-by-side(half h_subsampling)");
  182c50:	010006b4 	movhi	r4,26
  182c54:	2131a304 	addi	r4,r4,-14708
  182c58:	01891080 	call	189108 <printf>
						printf("\n");
  182c5c:	01000284 	movi	r4,10
  182c60:	018914c0 	call	18914c <putchar>
					}
				}

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
  182c64:	8809883a 	mov	r4,r17
  182c68:	01416f04 	movi	r5,1468
  182c6c:	0187dd80 	call	187dd8 <__mulsi3>
  182c70:	8087883a 	add	r3,r16,r2
  182c74:	1906bd17 	ldw	r4,6900(r3)
  182c78:	00c00084 	movi	r3,2
  182c7c:	20c0051e 	bne	r4,r3,182c94 <edid_print_cea+0x880>
					printf("         3D_MASK                       : 0x%04x\n", cea->db_vsdb_hdmi.mask_3d);
  182c80:	8085883a 	add	r2,r16,r2
  182c84:	1146c217 	ldw	r5,6920(r2)
  182c88:	010006b4 	movhi	r4,26
  182c8c:	2131ac04 	addi	r4,r4,-14672
  182c90:	01891080 	call	189108 <printf>
				}

				switch (cea->db_vsdb_hdmi.image_size) {
  182c94:	8809883a 	mov	r4,r17
  182c98:	01416f04 	movi	r5,1468
  182c9c:	0187dd80 	call	187dd8 <__mulsi3>
  182ca0:	8085883a 	add	r2,r16,r2
  182ca4:	1086be17 	ldw	r2,6904(r2)
  182ca8:	00c00044 	movi	r3,1
  182cac:	10c00c26 	beq	r2,r3,182ce0 <edid_print_cea+0x8cc>
  182cb0:	18800416 	blt	r3,r2,182cc4 <edid_print_cea+0x8b0>
  182cb4:	1000101e 	bne	r2,zero,182cf8 <edid_print_cea+0x8e4>
				case 0:
					printf("         image size extra properties   : none\n");
  182cb8:	010006b4 	movhi	r4,26
  182cbc:	2131b904 	addi	r4,r4,-14620
  182cc0:	00000c06 	br	182cf4 <edid_print_cea+0x8e0>

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					printf("         3D_MASK                       : 0x%04x\n", cea->db_vsdb_hdmi.mask_3d);
				}

				switch (cea->db_vsdb_hdmi.image_size) {
  182cc4:	00c00084 	movi	r3,2
  182cc8:	10c00826 	beq	r2,r3,182cec <edid_print_cea+0x8d8>
  182ccc:	00c000c4 	movi	r3,3
  182cd0:	10c0091e 	bne	r2,r3,182cf8 <edid_print_cea+0x8e4>
					break;
				case 2:
					printf("         image size extra properties   : size correct (1cm nearest rounded)\n");
					break;
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
  182cd4:	010006b4 	movhi	r4,26
  182cd8:	2131e904 	addi	r4,r4,-14428
  182cdc:	00000506 	br	182cf4 <edid_print_cea+0x8e0>
				switch (cea->db_vsdb_hdmi.image_size) {
				case 0:
					printf("         image size extra properties   : none\n");
					break;
				case 1:
					printf("         image size extra properties   : exact aspect ratio only\n");
  182ce0:	010006b4 	movhi	r4,26
  182ce4:	2131c504 	addi	r4,r4,-14572
  182ce8:	00000206 	br	182cf4 <edid_print_cea+0x8e0>
					break;
				case 2:
					printf("         image size extra properties   : size correct (1cm nearest rounded)\n");
  182cec:	010006b4 	movhi	r4,26
  182cf0:	2131d604 	addi	r4,r4,-14504
					break;
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
  182cf4:	018920c0 	call	18920c <puts>
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
  182cf8:	dd000617 	ldw	r20,24(sp)

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {

					printf("         [%02d] 2D_VIC_Order)%02d ", i, cea->db_vsdb_hdmi.vic_3d[i].vic_2d);

					switch (cea->db_vsdb_hdmi.vic_3d[i].struct_3d) {
  182cfc:	05c00634 	movhi	r23,24
						printf("3D_Structure)unknown ");
						break;
					}

					if (cea->db_vsdb_hdmi.vic_3d[i].struct_3d == 0x08) {
						switch (cea->db_vsdb_hdmi.vic_3d[i].detail_3d) {
  182d00:	07000634 	movhi	fp,24
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
  182d04:	002b883a 	mov	r21,zero

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {

					printf("         [%02d] 2D_VIC_Order)%02d ", i, cea->db_vsdb_hdmi.vic_3d[i].vic_2d);

					switch (cea->db_vsdb_hdmi.vic_3d[i].struct_3d) {
  182d08:	bdcb5604 	addi	r23,r23,11608
						printf("3D_Structure)unknown ");
						break;
					}

					if (cea->db_vsdb_hdmi.vic_3d[i].struct_3d == 0x08) {
						switch (cea->db_vsdb_hdmi.vic_3d[i].detail_3d) {
  182d0c:	e70b8304 	addi	fp,fp,11788
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
  182d10:	8809883a 	mov	r4,r17
  182d14:	01416f04 	movi	r5,1468
  182d18:	0187dd80 	call	187dd8 <__mulsi3>
  182d1c:	8085883a 	add	r2,r16,r2
  182d20:	1086c317 	ldw	r2,6924(r2)
  182d24:	a881740e 	bge	r21,r2,1832f8 <edid_print_cea+0xee4>

					printf("         [%02d] 2D_VIC_Order)%02d ", i, cea->db_vsdb_hdmi.vic_3d[i].vic_2d);
  182d28:	a1bfff17 	ldw	r6,-4(r20)
  182d2c:	010006b4 	movhi	r4,26
  182d30:	2131fe04 	addi	r4,r4,-14344
  182d34:	a80b883a 	mov	r5,r21
  182d38:	01891080 	call	189108 <printf>

					switch (cea->db_vsdb_hdmi.vic_3d[i].struct_3d) {
  182d3c:	a0800017 	ldw	r2,0(r20)
  182d40:	05800204 	movi	r22,8
  182d44:	b0802536 	bltu	r22,r2,182ddc <edid_print_cea+0x9c8>
  182d48:	100490ba 	slli	r2,r2,2
  182d4c:	15c5883a 	add	r2,r2,r23
  182d50:	10800017 	ldw	r2,0(r2)
  182d54:	1000683a 	jmp	r2
  182d58:	00182d7c 	xorhi	zero,zero,24757
  182d5c:	00182d88 	cmpgei	zero,zero,24758
  182d60:	00182d94 	movui	zero,24758
  182d64:	00182da0 	cmpeqi	zero,zero,24758
  182d68:	00182dac 	andhi	zero,zero,24758
  182d6c:	00182db8 	rdprs	zero,zero,24758
  182d70:	00182dc4 	movi	zero,24759
  182d74:	00182ddc 	xori	zero,zero,24759
  182d78:	00182dd0 	cmplti	zero,zero,24759
					case 0:
						printf("3D_Structure)frame_packing ");
  182d7c:	010006b4 	movhi	r4,26
  182d80:	21320704 	addi	r4,r4,-14308
  182d84:	00001706 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 1:
						printf("3D_Structure)field_alternative ");
  182d88:	010006b4 	movhi	r4,26
  182d8c:	21320e04 	addi	r4,r4,-14280
  182d90:	00001406 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 2:
						printf("3D_Structure)line_alternative ");
  182d94:	010006b4 	movhi	r4,26
  182d98:	21321604 	addi	r4,r4,-14248
  182d9c:	00001106 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 3:
						printf("3D_Structure)side-by-side(full) ");
  182da0:	010006b4 	movhi	r4,26
  182da4:	21321e04 	addi	r4,r4,-14216
  182da8:	00000e06 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 4:
						printf("3D_Structure)L+depth ");
  182dac:	010006b4 	movhi	r4,26
  182db0:	21322704 	addi	r4,r4,-14180
  182db4:	00000b06 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 5:
						printf("3D_Structure)L+depth+graphics+graphics_depth ");
  182db8:	010006b4 	movhi	r4,26
  182dbc:	21322d04 	addi	r4,r4,-14156
  182dc0:	00000806 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 6:
						printf("3D_Structure)top-and-bottom ");
  182dc4:	010006b4 	movhi	r4,26
  182dc8:	21323904 	addi	r4,r4,-14108
  182dcc:	00000506 	br	182de4 <edid_print_cea+0x9d0>
						break;
					case 8:
						printf("3D_Structure)side-by-side(half) ");
  182dd0:	010006b4 	movhi	r4,26
  182dd4:	21324104 	addi	r4,r4,-14076
  182dd8:	00000206 	br	182de4 <edid_print_cea+0x9d0>
						break;
					default:
						printf("3D_Structure)unknown ");
  182ddc:	010006b4 	movhi	r4,26
  182de0:	21324a04 	addi	r4,r4,-14040
  182de4:	01891080 	call	189108 <printf>
						break;
					}

					if (cea->db_vsdb_hdmi.vic_3d[i].struct_3d == 0x08) {
  182de8:	a0800017 	ldw	r2,0(r20)
  182dec:	1580271e 	bne	r2,r22,182e8c <edid_print_cea+0xa78>
						switch (cea->db_vsdb_hdmi.vic_3d[i].detail_3d) {
  182df0:	a0800117 	ldw	r2,4(r20)
  182df4:	00c00284 	movi	r3,10
  182df8:	18802436 	bltu	r3,r2,182e8c <edid_print_cea+0xa78>
  182dfc:	100490ba 	slli	r2,r2,2
  182e00:	1705883a 	add	r2,r2,fp
  182e04:	10800017 	ldw	r2,0(r2)
  182e08:	1000683a 	jmp	r2
  182e0c:	00182e38 	rdprs	zero,zero,24760
  182e10:	00182e44 	movi	zero,24761
  182e14:	00182e8c 	andi	zero,zero,24762
  182e18:	00182e8c 	andi	zero,zero,24762
  182e1c:	00182e8c 	andi	zero,zero,24762
  182e20:	00182e8c 	andi	zero,zero,24762
  182e24:	00182e50 	cmplti	zero,zero,24761
  182e28:	00182e5c 	xori	zero,zero,24761
  182e2c:	00182e68 	cmpgeui	zero,zero,24761
  182e30:	00182e74 	movhi	zero,24761
  182e34:	00182e80 	call	182e8 <__alt_mem_sram-0x167d18>
						case 0:
							printf("3D_Detail)h_sub_sampling+four_quincunx_matrix");
  182e38:	010006b4 	movhi	r4,26
  182e3c:	21325004 	addi	r4,r4,-14016
  182e40:	00001106 	br	182e88 <edid_print_cea+0xa74>
							break;
						case 1:
							printf("3D_Detail)h_sub_sampling");
  182e44:	010006b4 	movhi	r4,26
  182e48:	21325c04 	addi	r4,r4,-13968
  182e4c:	00000e06 	br	182e88 <edid_print_cea+0xa74>
							break;
						case 6:
							printf("3D_Detail)all_4_sub_sampling_position");
  182e50:	010006b4 	movhi	r4,26
  182e54:	21326304 	addi	r4,r4,-13940
  182e58:	00000b06 	br	182e88 <edid_print_cea+0xa74>
							break;
						case 7:
							printf("3D_Detail)odd_left+odd_right");
  182e5c:	010006b4 	movhi	r4,26
  182e60:	21326d04 	addi	r4,r4,-13900
  182e64:	00000806 	br	182e88 <edid_print_cea+0xa74>
							break;
						case 8:
							printf("3D_Detail)odd_left+even_right");
  182e68:	010006b4 	movhi	r4,26
  182e6c:	21327504 	addi	r4,r4,-13868
  182e70:	00000506 	br	182e88 <edid_print_cea+0xa74>
							break;
						case 9:
							printf("3D_Detail)even_left+odd_right");
  182e74:	010006b4 	movhi	r4,26
  182e78:	21327d04 	addi	r4,r4,-13836
  182e7c:	00000206 	br	182e88 <edid_print_cea+0xa74>
							break;
						case 10:
							printf("3D_Detail)even_left+even_right");
  182e80:	010006b4 	movhi	r4,26
  182e84:	21328504 	addi	r4,r4,-13804
  182e88:	01891080 	call	189108 <printf>
							break;
						}
					}

					printf("\n");
  182e8c:	01000284 	movi	r4,10
  182e90:	018914c0 	call	18914c <putchar>
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
  182e94:	ad400044 	addi	r21,r21,1
  182e98:	a5000304 	addi	r20,r20,12
  182e9c:	003f9c06 	br	182d10 <__alt_data_end+0xfff82d10>
			}

			break;

		case CEA_DB_SPEAKER:
			printf("\n  [%02d] speaker allocation data block ...\n", t);
  182ea0:	010006b4 	movhi	r4,26
  182ea4:	21328d04 	addi	r4,r4,-13772
  182ea8:	a00b883a 	mov	r5,r20
  182eac:	01891080 	call	189108 <printf>

			printf("       RLC/RRC : %s\n", cea->db_speaker.designation & CEA_SPK_RLC_RRC ? "yes" : "no");
  182eb0:	8809883a 	mov	r4,r17
  182eb4:	01416f04 	movi	r5,1468
  182eb8:	0187dd80 	call	187dd8 <__mulsi3>
  182ebc:	8085883a 	add	r2,r16,r2
  182ec0:	1086a717 	ldw	r2,6812(r2)
  182ec4:	1080100c 	andi	r2,r2,64
  182ec8:	1000031e 	bne	r2,zero,182ed8 <edid_print_cea+0xac4>
  182ecc:	014006b4 	movhi	r5,26
  182ed0:	296f5f04 	addi	r5,r5,-17028
  182ed4:	00000206 	br	182ee0 <edid_print_cea+0xacc>
  182ed8:	014006b4 	movhi	r5,26
  182edc:	296f5e04 	addi	r5,r5,-17032
  182ee0:	010006b4 	movhi	r4,26
  182ee4:	21329904 	addi	r4,r4,-13724
  182ee8:	01891080 	call	189108 <printf>
			printf("       FLC/FRC : %s\n", cea->db_speaker.designation & CEA_SPK_FLC_FRC ? "yes" : "no");
  182eec:	8809883a 	mov	r4,r17
  182ef0:	01416f04 	movi	r5,1468
  182ef4:	0187dd80 	call	187dd8 <__mulsi3>
  182ef8:	8085883a 	add	r2,r16,r2
  182efc:	1086a717 	ldw	r2,6812(r2)
  182f00:	1080080c 	andi	r2,r2,32
  182f04:	1000031e 	bne	r2,zero,182f14 <edid_print_cea+0xb00>
  182f08:	014006b4 	movhi	r5,26
  182f0c:	296f5f04 	addi	r5,r5,-17028
  182f10:	00000206 	br	182f1c <edid_print_cea+0xb08>
  182f14:	014006b4 	movhi	r5,26
  182f18:	296f5e04 	addi	r5,r5,-17032
  182f1c:	010006b4 	movhi	r4,26
  182f20:	21329f04 	addi	r4,r4,-13700
  182f24:	01891080 	call	189108 <printf>
			printf("       RC      : %s\n", cea->db_speaker.designation & CEA_SPK_RC ? "yes" : "no");
  182f28:	8809883a 	mov	r4,r17
  182f2c:	01416f04 	movi	r5,1468
  182f30:	0187dd80 	call	187dd8 <__mulsi3>
  182f34:	8085883a 	add	r2,r16,r2
  182f38:	1086a717 	ldw	r2,6812(r2)
  182f3c:	1080040c 	andi	r2,r2,16
  182f40:	1000031e 	bne	r2,zero,182f50 <edid_print_cea+0xb3c>
  182f44:	014006b4 	movhi	r5,26
  182f48:	296f5f04 	addi	r5,r5,-17028
  182f4c:	00000206 	br	182f58 <edid_print_cea+0xb44>
  182f50:	014006b4 	movhi	r5,26
  182f54:	296f5e04 	addi	r5,r5,-17032
  182f58:	010006b4 	movhi	r4,26
  182f5c:	2132a504 	addi	r4,r4,-13676
  182f60:	01891080 	call	189108 <printf>
			printf("       RL/RR   : %s\n", cea->db_speaker.designation & CEA_SPK_RL_RR ? "yes" : "no");
  182f64:	8809883a 	mov	r4,r17
  182f68:	01416f04 	movi	r5,1468
  182f6c:	0187dd80 	call	187dd8 <__mulsi3>
  182f70:	8085883a 	add	r2,r16,r2
  182f74:	1086a717 	ldw	r2,6812(r2)
  182f78:	1080020c 	andi	r2,r2,8
  182f7c:	1000031e 	bne	r2,zero,182f8c <edid_print_cea+0xb78>
  182f80:	014006b4 	movhi	r5,26
  182f84:	296f5f04 	addi	r5,r5,-17028
  182f88:	00000206 	br	182f94 <edid_print_cea+0xb80>
  182f8c:	014006b4 	movhi	r5,26
  182f90:	296f5e04 	addi	r5,r5,-17032
  182f94:	010006b4 	movhi	r4,26
  182f98:	2132ab04 	addi	r4,r4,-13652
  182f9c:	01891080 	call	189108 <printf>
			printf("       FC      : %s\n", cea->db_speaker.designation & CEA_SPK_FC ? "yes" : "no");
  182fa0:	8809883a 	mov	r4,r17
  182fa4:	01416f04 	movi	r5,1468
  182fa8:	0187dd80 	call	187dd8 <__mulsi3>
  182fac:	8085883a 	add	r2,r16,r2
  182fb0:	1086a717 	ldw	r2,6812(r2)
  182fb4:	1080010c 	andi	r2,r2,4
  182fb8:	1000031e 	bne	r2,zero,182fc8 <edid_print_cea+0xbb4>
  182fbc:	014006b4 	movhi	r5,26
  182fc0:	296f5f04 	addi	r5,r5,-17028
  182fc4:	00000206 	br	182fd0 <edid_print_cea+0xbbc>
  182fc8:	014006b4 	movhi	r5,26
  182fcc:	296f5e04 	addi	r5,r5,-17032
  182fd0:	010006b4 	movhi	r4,26
  182fd4:	2132b104 	addi	r4,r4,-13628
  182fd8:	01891080 	call	189108 <printf>
			printf("       LFE     : %s\n", cea->db_speaker.designation & CEA_SPK_LFE ? "yes" : "no");
  182fdc:	8809883a 	mov	r4,r17
  182fe0:	01416f04 	movi	r5,1468
  182fe4:	0187dd80 	call	187dd8 <__mulsi3>
  182fe8:	8085883a 	add	r2,r16,r2
  182fec:	1086a717 	ldw	r2,6812(r2)
  182ff0:	1080008c 	andi	r2,r2,2
  182ff4:	1000031e 	bne	r2,zero,183004 <edid_print_cea+0xbf0>
  182ff8:	014006b4 	movhi	r5,26
  182ffc:	296f5f04 	addi	r5,r5,-17028
  183000:	00000206 	br	18300c <edid_print_cea+0xbf8>
  183004:	014006b4 	movhi	r5,26
  183008:	296f5e04 	addi	r5,r5,-17032
  18300c:	010006b4 	movhi	r4,26
  183010:	2132b704 	addi	r4,r4,-13604
  183014:	01891080 	call	189108 <printf>
			printf("       FL/FR   : %s\n", cea->db_speaker.designation & CEA_SPK_FL_FR ? "yes" : "no");
  183018:	8809883a 	mov	r4,r17
  18301c:	01416f04 	movi	r5,1468
  183020:	0187dd80 	call	187dd8 <__mulsi3>
  183024:	8085883a 	add	r2,r16,r2
  183028:	1086a717 	ldw	r2,6812(r2)
  18302c:	1080004c 	andi	r2,r2,1
  183030:	1000031e 	bne	r2,zero,183040 <edid_print_cea+0xc2c>
  183034:	014006b4 	movhi	r5,26
  183038:	296f5f04 	addi	r5,r5,-17028
  18303c:	00000206 	br	183048 <edid_print_cea+0xc34>
  183040:	014006b4 	movhi	r5,26
  183044:	296f5e04 	addi	r5,r5,-17032
  183048:	010006b4 	movhi	r4,26
  18304c:	2132bd04 	addi	r4,r4,-13580
  183050:	00008306 	br	183260 <edid_print_cea+0xe4c>

			break;

		case CEA_DB_DTC:
			printf("\n  [%02d] VESA DTC data block ... (todo)\n", t);
  183054:	010006b4 	movhi	r4,26
  183058:	2132c304 	addi	r4,r4,-13556
  18305c:	00007f06 	br	18325c <edid_print_cea+0xe48>
			break;

		case CEA_DB_EXTENDED:
			switch (cea->dbe_tags[t]) {
  183060:	98800003 	ldbu	r2,0(r19)
  183064:	00c00484 	movi	r3,18
  183068:	1880a336 	bltu	r3,r2,1832f8 <edid_print_cea+0xee4>
  18306c:	100490ba 	slli	r2,r2,2
  183070:	00c00634 	movhi	r3,24
  183074:	18cc2104 	addi	r3,r3,12420
  183078:	10c5883a 	add	r2,r2,r3
  18307c:	10800017 	ldw	r2,0(r2)
  183080:	1000683a 	jmp	r2
  183084:	001830d0 	cmplti	zero,zero,24771
  183088:	00183248 	cmpgei	zero,zero,24777
  18308c:	00183254 	movui	zero,24777
  183090:	00183268 	cmpgeui	zero,zero,24777
  183094:	00183274 	movhi	zero,24777
  183098:	00183280 	call	18328 <__alt_mem_sram-0x167cd8>
  18309c:	001832f8 	rdprs	zero,zero,24779
  1830a0:	001832f8 	rdprs	zero,zero,24779
  1830a4:	001832f8 	rdprs	zero,zero,24779
  1830a8:	001832f8 	rdprs	zero,zero,24779
  1830ac:	001832f8 	rdprs	zero,zero,24779
  1830b0:	001832f8 	rdprs	zero,zero,24779
  1830b4:	001832f8 	rdprs	zero,zero,24779
  1830b8:	001832f8 	rdprs	zero,zero,24779
  1830bc:	001832f8 	rdprs	zero,zero,24779
  1830c0:	001832f8 	rdprs	zero,zero,24779
  1830c4:	001832c0 	call	1832c <__alt_mem_sram-0x167cd4>
  1830c8:	001832cc 	andi	zero,zero,24779
  1830cc:	001832d8 	cmpnei	zero,zero,24779
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);
  1830d0:	010006b4 	movhi	r4,26
  1830d4:	2132ce04 	addi	r4,r4,-13512
  1830d8:	a00b883a 	mov	r5,r20
  1830dc:	01891080 	call	189108 <printf>

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");
  1830e0:	8809883a 	mov	r4,r17
  1830e4:	01416f04 	movi	r5,1468
  1830e8:	0187dd80 	call	187dd8 <__mulsi3>
  1830ec:	8085883a 	add	r2,r16,r2
  1830f0:	1086f617 	ldw	r2,7128(r2)
  1830f4:	1000031e 	bne	r2,zero,183104 <edid_print_cea+0xcf0>
  1830f8:	014006b4 	movhi	r5,26
  1830fc:	296f5f04 	addi	r5,r5,-17028
  183100:	00000206 	br	18310c <edid_print_cea+0xcf8>
  183104:	014006b4 	movhi	r5,26
  183108:	296f5e04 	addi	r5,r5,-17032
  18310c:	010006b4 	movhi	r4,26
  183110:	2132db04 	addi	r4,r4,-13460
  183114:	01891080 	call	189108 <printf>

				switch (cea->db_vcdb.pt_scan_behavior) {
  183118:	8809883a 	mov	r4,r17
  18311c:	01416f04 	movi	r5,1468
  183120:	0187dd80 	call	187dd8 <__mulsi3>
  183124:	8085883a 	add	r2,r16,r2
  183128:	1086f717 	ldw	r2,7132(r2)
  18312c:	00c00044 	movi	r3,1
  183130:	10c00c26 	beq	r2,r3,183164 <edid_print_cea+0xd50>
  183134:	18800416 	blt	r3,r2,183148 <edid_print_cea+0xd34>
  183138:	1000101e 	bne	r2,zero,18317c <edid_print_cea+0xd68>
				case 0:
					printf("       PT scan behavior              : none\n");
  18313c:	010006b4 	movhi	r4,26
  183140:	2132e604 	addi	r4,r4,-13416
  183144:	00000c06 	br	183178 <edid_print_cea+0xd64>
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");

				switch (cea->db_vcdb.pt_scan_behavior) {
  183148:	00c00084 	movi	r3,2
  18314c:	10c00826 	beq	r2,r3,183170 <edid_print_cea+0xd5c>
  183150:	00c000c4 	movi	r3,3
  183154:	10c0091e 	bne	r2,r3,18317c <edid_print_cea+0xd68>
					break;
				case 2:
					printf("       PT scan behavior              : underscanned always\n");
					break;
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
  183158:	010006b4 	movhi	r4,26
  18315c:	21330f04 	addi	r4,r4,-13252
  183160:	00000506 	br	183178 <edid_print_cea+0xd64>
				switch (cea->db_vcdb.pt_scan_behavior) {
				case 0:
					printf("       PT scan behavior              : none\n");
					break;
				case 1:
					printf("       PT scan behavior              : overscanned always\n");
  183164:	010006b4 	movhi	r4,26
  183168:	2132f104 	addi	r4,r4,-13372
  18316c:	00000206 	br	183178 <edid_print_cea+0xd64>
					break;
				case 2:
					printf("       PT scan behavior              : underscanned always\n");
  183170:	010006b4 	movhi	r4,26
  183174:	21330004 	addi	r4,r4,-13312
					break;
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
  183178:	018920c0 	call	18920c <puts>
					break;
				}

				switch (cea->db_vcdb.it_scan_behavior) {
  18317c:	8809883a 	mov	r4,r17
  183180:	01416f04 	movi	r5,1468
  183184:	0187dd80 	call	187dd8 <__mulsi3>
  183188:	8085883a 	add	r2,r16,r2
  18318c:	1086f817 	ldw	r2,7136(r2)
  183190:	00c00044 	movi	r3,1
  183194:	10c00c26 	beq	r2,r3,1831c8 <edid_print_cea+0xdb4>
  183198:	18800416 	blt	r3,r2,1831ac <edid_print_cea+0xd98>
  18319c:	1000101e 	bne	r2,zero,1831e0 <edid_print_cea+0xdcc>
				case 0:
					printf("       IT scan behavior              : none\n");
  1831a0:	010006b4 	movhi	r4,26
  1831a4:	21332104 	addi	r4,r4,-13180
  1831a8:	00000c06 	br	1831dc <edid_print_cea+0xdc8>
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
					break;
				}

				switch (cea->db_vcdb.it_scan_behavior) {
  1831ac:	00c00084 	movi	r3,2
  1831b0:	10c00826 	beq	r2,r3,1831d4 <edid_print_cea+0xdc0>
  1831b4:	00c000c4 	movi	r3,3
  1831b8:	10c0091e 	bne	r2,r3,1831e0 <edid_print_cea+0xdcc>
					break;
				case 2:
					printf("       IT scan behavior              : underscanned always\n");
					break;
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
  1831bc:	010006b4 	movhi	r4,26
  1831c0:	21334a04 	addi	r4,r4,-13016
  1831c4:	00000506 	br	1831dc <edid_print_cea+0xdc8>
				switch (cea->db_vcdb.it_scan_behavior) {
				case 0:
					printf("       IT scan behavior              : none\n");
					break;
				case 1:
					printf("       IT scan behavior              : overscanned always\n");
  1831c8:	010006b4 	movhi	r4,26
  1831cc:	21332c04 	addi	r4,r4,-13136
  1831d0:	00000206 	br	1831dc <edid_print_cea+0xdc8>
					break;
				case 2:
					printf("       IT scan behavior              : underscanned always\n");
  1831d4:	010006b4 	movhi	r4,26
  1831d8:	21333b04 	addi	r4,r4,-13076
					break;
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
  1831dc:	018920c0 	call	18920c <puts>
					break;
				}

				switch (cea->db_vcdb.ce_scan_behavior) {
  1831e0:	8809883a 	mov	r4,r17
  1831e4:	01416f04 	movi	r5,1468
  1831e8:	0187dd80 	call	187dd8 <__mulsi3>
  1831ec:	8085883a 	add	r2,r16,r2
  1831f0:	1086f917 	ldw	r2,7140(r2)
  1831f4:	00c00044 	movi	r3,1
  1831f8:	10c00c26 	beq	r2,r3,18322c <edid_print_cea+0xe18>
  1831fc:	18800416 	blt	r3,r2,183210 <edid_print_cea+0xdfc>
  183200:	10003d1e 	bne	r2,zero,1832f8 <edid_print_cea+0xee4>
				case 0:
					printf("       CE scan behavior              : none\n");
  183204:	010006b4 	movhi	r4,26
  183208:	21335c04 	addi	r4,r4,-12944
  18320c:	00000c06 	br	183240 <edid_print_cea+0xe2c>
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
					break;
				}

				switch (cea->db_vcdb.ce_scan_behavior) {
  183210:	00c00084 	movi	r3,2
  183214:	10c00826 	beq	r2,r3,183238 <edid_print_cea+0xe24>
  183218:	00c000c4 	movi	r3,3
  18321c:	10c0361e 	bne	r2,r3,1832f8 <edid_print_cea+0xee4>
					break;
				case 2:
					printf("       CE scan behavior              : underscanned always\n");
					break;
				case 3:
					printf("       CE scan behavior              : supports both over/under-scan\n");
  183220:	010006b4 	movhi	r4,26
  183224:	21338504 	addi	r4,r4,-12780
  183228:	00000506 	br	183240 <edid_print_cea+0xe2c>
				switch (cea->db_vcdb.ce_scan_behavior) {
				case 0:
					printf("       CE scan behavior              : none\n");
					break;
				case 1:
					printf("       CE scan behavior              : overscanned always\n");
  18322c:	010006b4 	movhi	r4,26
  183230:	21336704 	addi	r4,r4,-12900
  183234:	00000206 	br	183240 <edid_print_cea+0xe2c>
					break;
				case 2:
					printf("       CE scan behavior              : underscanned always\n");
  183238:	010006b4 	movhi	r4,26
  18323c:	21337604 	addi	r4,r4,-12840
					break;
				case 3:
					printf("       CE scan behavior              : supports both over/under-scan\n");
  183240:	018920c0 	call	18920c <puts>
					break;
  183244:	00002c06 	br	1832f8 <edid_print_cea+0xee4>
				}
				break;
			case CEA_DBE_VIDEO_VENDOR:
				printf("\n  [%02d] vendor-specific video data block (ext) ... (todo)\n", t);
  183248:	010006b4 	movhi	r4,26
  18324c:	21339704 	addi	r4,r4,-12708
  183250:	00000206 	br	18325c <edid_print_cea+0xe48>
				break;
			case CEA_DBE_VIDEO_DDI:
				printf("\n  [%02d] VESA video display device information data block (ext) ... (todo)\n", t);
  183254:	010006b4 	movhi	r4,26
  183258:	2133a704 	addi	r4,r4,-12644
  18325c:	a00b883a 	mov	r5,r20
  183260:	01891080 	call	189108 <printf>
				break;
  183264:	00002406 	br	1832f8 <edid_print_cea+0xee4>
			case CEA_DBE_VIDEO_VESA:
				printf("\n  [%02d] VESA video data block (ext) ... (todo)\n", t);
  183268:	010006b4 	movhi	r4,26
  18326c:	2133bb04 	addi	r4,r4,-12564
  183270:	003ffa06 	br	18325c <__alt_data_end+0xfff8325c>
				break;
			case CEA_DBE_VIDEO_HDMI:
				printf("\n  [%02d] HDMI video data block (ext) ... (todo)\n", t);
  183274:	010006b4 	movhi	r4,26
  183278:	2133c804 	addi	r4,r4,-12512
  18327c:	003ff706 	br	18325c <__alt_data_end+0xfff8325c>
				break;
			case CEA_DBE_COLORIMETRY:
				printf("\n  [%02d] colorimetry data block (ext) ... (todo)\n", t);
  183280:	010006b4 	movhi	r4,26
  183284:	2133d504 	addi	r4,r4,-12460
  183288:	a00b883a 	mov	r5,r20
  18328c:	01891080 	call	189108 <printf>
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
  183290:	8809883a 	mov	r4,r17
  183294:	01416f04 	movi	r5,1468
  183298:	0187dd80 	call	187dd8 <__mulsi3>
  18329c:	0009883a 	mov	r4,zero
  1832a0:	20c00083 	ldbu	r3,2(r4)
  1832a4:	808b883a 	add	r5,r16,r2
  1832a8:	18c000cc 	andi	r3,r3,3
  1832ac:	28c6f415 	stw	r3,7120(r5)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
  1832b0:	20c000c3 	ldbu	r3,3(r4)
  1832b4:	18c001cc 	andi	r3,r3,7
  1832b8:	28c6f515 	stw	r3,7124(r5)
				break;
  1832bc:	00000e06 	br	1832f8 <edid_print_cea+0xee4>
			case CEA_DBE_AUDIO_MISC:
				printf("\n  [%02d] CEA misc audio fields (ext) ... (todo)\n", t);
  1832c0:	010006b4 	movhi	r4,26
  1832c4:	2133e204 	addi	r4,r4,-12408
  1832c8:	003fe406 	br	18325c <__alt_data_end+0xfff8325c>
				break;
			case CEA_DBE_AUDIO_VENDOR:
				printf("\n  [%02d] vendor-specific audio data block (ext) ... (todo)\n", t);
  1832cc:	010006b4 	movhi	r4,26
  1832d0:	2133ef04 	addi	r4,r4,-12356
  1832d4:	003fe106 	br	18325c <__alt_data_end+0xfff8325c>
				break;
			case CEA_DBE_AUDIO_HDMI:
				printf("\n  [%02d] HDMI audio data block (ext) ... (todo)\n", t);
  1832d8:	010006b4 	movhi	r4,26
  1832dc:	2133ff04 	addi	r4,r4,-12292
  1832e0:	003fde06 	br	18325c <__alt_data_end+0xfff8325c>
			}

			break;

		default:
			printf("\n  [%02d] unknown data block (%d).\n", t, cea->dbc_tags[t]);
  1832e4:	010006b4 	movhi	r4,26
  1832e8:	21340c04 	addi	r4,r4,-12240
  1832ec:	a00b883a 	mov	r5,r20
  1832f0:	31803fcc 	andi	r6,r6,255
  1832f4:	01891080 	call	189108 <printf>
  1832f8:	9cc00044 	addi	r19,r19,1
  1832fc:	003cb606 	br	1825d8 <__alt_data_end+0xfff825d8>
			break;
		}
	}

	if (cea->nr_dtd != 0)
  183300:	8085883a 	add	r2,r16,r2
  183304:	10861217 	ldw	r2,6216(r2)
  183308:	10000326 	beq	r2,zero,183318 <edid_print_cea+0xf04>
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");
  18330c:	010006b4 	movhi	r4,26
  183310:	21341504 	addi	r4,r4,-12204
  183314:	018920c0 	call	18920c <puts>
  183318:	94c70904 	addi	r19,r18,7204
  18331c:	95070804 	addi	r20,r18,7200
  183320:	9486fd04 	addi	r18,r18,7156
  183324:	84e7883a 	add	r19,r16,r19
  183328:	8529883a 	add	r20,r16,r20
  18332c:	84a5883a 	add	r18,r16,r18
		case CEA_DB_EXTENDED:
			switch (cea->dbe_tags[t]) {
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");
  183330:	002b883a 	mov	r21,zero

	if (cea->nr_dtd != 0)
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
  183334:	8809883a 	mov	r4,r17
  183338:	01416f04 	movi	r5,1468
  18333c:	0187dd80 	call	187dd8 <__mulsi3>
  183340:	8085883a 	add	r2,r16,r2
  183344:	10861217 	ldw	r2,6216(r2)
  183348:	a880c60e 	bge	r21,r2,183664 <edid_print_cea+0x1250>

		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
  18334c:	010006b4 	movhi	r4,26
  183350:	21342604 	addi	r4,r4,-12136
  183354:	a80b883a 	mov	r5,r21
  183358:	01891080 	call	189108 <printf>

		printf("      pixel clock   : %d (Hz)\n", cea->detailed_timing[i].pixel_clock);
  18335c:	997ff117 	ldw	r5,-60(r19)
  183360:	010006b4 	movhi	r4,26
  183364:	21343104 	addi	r4,r4,-12092
  183368:	01891080 	call	189108 <printf>
		printf("      h addressible : %d (pixels)\n", cea->detailed_timing[i].width);
  18336c:	997ff217 	ldw	r5,-56(r19)
  183370:	010006b4 	movhi	r4,26
  183374:	21343904 	addi	r4,r4,-12060
  183378:	01891080 	call	189108 <printf>
		printf("        blank       : %d (pixels)\n", cea->detailed_timing[i].h_blank);
  18337c:	91400017 	ldw	r5,0(r18)
  183380:	010006b4 	movhi	r4,26
  183384:	21344204 	addi	r4,r4,-12024
  183388:	01891080 	call	189108 <printf>
		printf("        fp          : %d (pixels)\n", cea->detailed_timing[i].h_fp);
  18338c:	997ff617 	ldw	r5,-40(r19)
  183390:	010006b4 	movhi	r4,26
  183394:	21344b04 	addi	r4,r4,-11988
  183398:	01891080 	call	189108 <printf>
		printf("        sync        : %d (pixels)\n", cea->detailed_timing[i].h_sync);
  18339c:	997ff817 	ldw	r5,-32(r19)
  1833a0:	010006b4 	movhi	r4,26
  1833a4:	21345404 	addi	r4,r4,-11952
  1833a8:	01891080 	call	189108 <printf>
		printf("        bp          : %d (pixels)\n", cea->detailed_timing[i].h_blank - cea->detailed_timing[i].h_fp - cea->detailed_timing[i].h_sync);
  1833ac:	997ff617 	ldw	r5,-40(r19)
  1833b0:	90800017 	ldw	r2,0(r18)
  1833b4:	010006b4 	movhi	r4,26
  1833b8:	21345d04 	addi	r4,r4,-11916
  1833bc:	1145c83a 	sub	r2,r2,r5
  1833c0:	997ff817 	ldw	r5,-32(r19)
  1833c4:	114bc83a 	sub	r5,r2,r5
  1833c8:	01891080 	call	189108 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].h_size);
  1833cc:	997ffa17 	ldw	r5,-24(r19)
  1833d0:	010006b4 	movhi	r4,26
  1833d4:	21346604 	addi	r4,r4,-11880
  1833d8:	01891080 	call	189108 <printf>
		printf("      v addressible : %d (lines)\n", cea->detailed_timing[i].height);
  1833dc:	997ff317 	ldw	r5,-52(r19)
  1833e0:	010006b4 	movhi	r4,26
  1833e4:	21346e04 	addi	r4,r4,-11848
  1833e8:	01891080 	call	189108 <printf>
		printf("        blank       : %d (lines)\n", cea->detailed_timing[i].v_blank);
  1833ec:	997ff517 	ldw	r5,-44(r19)
  1833f0:	010006b4 	movhi	r4,26
  1833f4:	21347704 	addi	r4,r4,-11812
  1833f8:	01891080 	call	189108 <printf>
		printf("        fp          : %d (lines)\n", cea->detailed_timing[i].v_fp);
  1833fc:	997ff717 	ldw	r5,-36(r19)
  183400:	010006b4 	movhi	r4,26
  183404:	21348004 	addi	r4,r4,-11776
  183408:	01891080 	call	189108 <printf>
		printf("        sync        : %d (lines)\n", cea->detailed_timing[i].v_sync);
  18340c:	997ff917 	ldw	r5,-28(r19)
  183410:	010006b4 	movhi	r4,26
  183414:	21348904 	addi	r4,r4,-11740
  183418:	01891080 	call	189108 <printf>
		printf("        bp          : %d (lines)\n", cea->detailed_timing[i].v_blank - cea->detailed_timing[i].v_fp - cea->detailed_timing[i].v_sync);
  18341c:	997ff717 	ldw	r5,-36(r19)
  183420:	98bff517 	ldw	r2,-44(r19)
  183424:	010006b4 	movhi	r4,26
  183428:	21349204 	addi	r4,r4,-11704
  18342c:	1145c83a 	sub	r2,r2,r5
  183430:	997ff917 	ldw	r5,-28(r19)
  183434:	114bc83a 	sub	r5,r2,r5
  183438:	01891080 	call	189108 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].v_size);
  18343c:	997ffb17 	ldw	r5,-20(r19)
  183440:	010006b4 	movhi	r4,26
  183444:	21346604 	addi	r4,r4,-11880
  183448:	01891080 	call	189108 <printf>
		printf("      border (L&R)  : %d (pixels)\n", cea->detailed_timing[i].border_lr);
  18344c:	997ffc17 	ldw	r5,-16(r19)
  183450:	010006b4 	movhi	r4,26
  183454:	21349b04 	addi	r4,r4,-11668
  183458:	01891080 	call	189108 <printf>
		printf("      border (T&B)  : %d (lines)\n", cea->detailed_timing[i].border_tb);
  18345c:	997ffd17 	ldw	r5,-12(r19)
  183460:	010006b4 	movhi	r4,26
  183464:	2134a404 	addi	r4,r4,-11632
  183468:	01891080 	call	189108 <printf>
		printf("      interlaced    : %d\n", cea->detailed_timing[i].interlaced);
  18346c:	997ffe17 	ldw	r5,-8(r19)
  183470:	010006b4 	movhi	r4,26
  183474:	2134ad04 	addi	r4,r4,-11596
  183478:	01891080 	call	189108 <printf>

		if (cea->detailed_timing[i].stereo == STEREO_NONE) {
  18347c:	a0800017 	ldw	r2,0(r20)
  183480:	1000041e 	bne	r2,zero,183494 <edid_print_cea+0x1080>
			printf("      stereo        : none\n");
  183484:	010006b4 	movhi	r4,26
  183488:	2134b404 	addi	r4,r4,-11568
  18348c:	018920c0 	call	18920c <puts>
  183490:	00002906 	br	183538 <edid_print_cea+0x1124>
		} else {
    		printf("      stereo        : ");
  183494:	010006b4 	movhi	r4,26
  183498:	2134bb04 	addi	r4,r4,-11540
  18349c:	01891080 	call	189108 <printf>

    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
  1834a0:	a0800017 	ldw	r2,0(r20)
  1834a4:	1080008c 	andi	r2,r2,2
  1834a8:	10000326 	beq	r2,zero,1834b8 <edid_print_cea+0x10a4>
        		printf("field_seq_right ");
  1834ac:	010006b4 	movhi	r4,26
  1834b0:	2134c104 	addi	r4,r4,-11516
  1834b4:	01891080 	call	189108 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
  1834b8:	a0800017 	ldw	r2,0(r20)
  1834bc:	1080010c 	andi	r2,r2,4
  1834c0:	10000326 	beq	r2,zero,1834d0 <edid_print_cea+0x10bc>
        		printf("field_seq_left ");
  1834c4:	010006b4 	movhi	r4,26
  1834c8:	2134c604 	addi	r4,r4,-11496
  1834cc:	01891080 	call	189108 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
  1834d0:	a0800017 	ldw	r2,0(r20)
  1834d4:	1080020c 	andi	r2,r2,8
  1834d8:	10000326 	beq	r2,zero,1834e8 <edid_print_cea+0x10d4>
        		printf("2way_interleave_right ");
  1834dc:	010006b4 	movhi	r4,26
  1834e0:	2134ca04 	addi	r4,r4,-11480
  1834e4:	01891080 	call	189108 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
  1834e8:	a0800017 	ldw	r2,0(r20)
  1834ec:	1080040c 	andi	r2,r2,16
  1834f0:	10000326 	beq	r2,zero,183500 <edid_print_cea+0x10ec>
        		printf("2way_interleave_left ");
  1834f4:	010006b4 	movhi	r4,26
  1834f8:	2134d004 	addi	r4,r4,-11456
  1834fc:	01891080 	call	189108 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_4WAY_INTERLEAVE)
  183500:	a0800017 	ldw	r2,0(r20)
  183504:	1080080c 	andi	r2,r2,32
  183508:	10000326 	beq	r2,zero,183518 <edid_print_cea+0x1104>
        		printf("4way_interleave ");
  18350c:	010006b4 	movhi	r4,26
  183510:	2134d604 	addi	r4,r4,-11432
  183514:	01891080 	call	189108 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
  183518:	a0800017 	ldw	r2,0(r20)
  18351c:	1080100c 	andi	r2,r2,64
  183520:	10000326 	beq	r2,zero,183530 <edid_print_cea+0x111c>
        		printf("side-by-side ");
  183524:	010006b4 	movhi	r4,26
  183528:	2134db04 	addi	r4,r4,-11412
  18352c:	01891080 	call	189108 <printf>

    		printf("\n");
  183530:	01000284 	movi	r4,10
  183534:	018914c0 	call	18914c <putchar>
		}

		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC) {
  183538:	98800017 	ldw	r2,0(r19)
  18353c:	10c0004c 	andi	r3,r2,1
  183540:	18002126 	beq	r3,zero,1835c8 <edid_print_cea+0x11b4>

			printf("      analog sync   : composite");
  183544:	010006b4 	movhi	r4,26
  183548:	2134df04 	addi	r4,r4,-11396
  18354c:	01891080 	call	189108 <printf>

    		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC)
  183550:	98800017 	ldw	r2,0(r19)
  183554:	1080004c 	andi	r2,r2,1
  183558:	10000326 	beq	r2,zero,183568 <edid_print_cea+0x1154>
        		printf(" bipolar");
  18355c:	010006b4 	movhi	r4,26
  183560:	2134e704 	addi	r4,r4,-11364
  183564:	01891080 	call	189108 <printf>

    		if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION) {
  183568:	98800017 	ldw	r2,0(r19)
  18356c:	1080010c 	andi	r2,r2,4
  183570:	10000f26 	beq	r2,zero,1835b0 <edid_print_cea+0x119c>
        		printf(" with_serrations");
  183574:	010006b4 	movhi	r4,26
  183578:	2134ea04 	addi	r4,r4,-11352
  18357c:	01891080 	call	189108 <printf>
    			if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_G)
  183580:	98800017 	ldw	r2,0(r19)
  183584:	1080020c 	andi	r2,r2,8
  183588:	10000326 	beq	r2,zero,183598 <edid_print_cea+0x1184>
					printf(" syn_on_green");
  18358c:	010006b4 	movhi	r4,26
  183590:	2134ef04 	addi	r4,r4,-11332
  183594:	01891080 	call	189108 <printf>
				if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_RGB)
  183598:	98800017 	ldw	r2,0(r19)
  18359c:	1080040c 	andi	r2,r2,16
  1835a0:	10000626 	beq	r2,zero,1835bc <edid_print_cea+0x11a8>
					printf(" syn_on_rgb");
  1835a4:	010006b4 	movhi	r4,26
  1835a8:	2134f304 	addi	r4,r4,-11316
  1835ac:	00000206 	br	1835b8 <edid_print_cea+0x11a4>
    		} else {
        		printf(" without_serrations");
  1835b0:	010006b4 	movhi	r4,26
  1835b4:	2134f604 	addi	r4,r4,-11304
  1835b8:	01891080 	call	189108 <printf>
    		}

			printf("\n");
  1835bc:	01000284 	movi	r4,10
  1835c0:	018914c0 	call	18914c <putchar>
  1835c4:	00002206 	br	183650 <edid_print_cea+0x123c>

		} else if (cea->detailed_timing[i].sync & D_COMPOSITE_SYNC) {
  1835c8:	10c0080c 	andi	r3,r2,32
  1835cc:	18000926 	beq	r3,zero,1835f4 <edid_print_cea+0x11e0>

			printf("      digital sync  : composite");
  1835d0:	010006b4 	movhi	r4,26
  1835d4:	2134fb04 	addi	r4,r4,-11284
  1835d8:	01891080 	call	189108 <printf>

    		if (cea->detailed_timing[i].sync & D_COMPOSITE_SERRATION)
  1835dc:	98800017 	ldw	r2,0(r19)
  1835e0:	1080100c 	andi	r2,r2,64
  1835e4:	103ff226 	beq	r2,zero,1835b0 <__alt_data_end+0xfff835b0>
        		printf(" with_serrations");
  1835e8:	010006b4 	movhi	r4,26
  1835ec:	2134ea04 	addi	r4,r4,-11352
  1835f0:	003ff106 	br	1835b8 <__alt_data_end+0xfff835b8>
    		else
    			printf(" without_serrations");

    		printf("\n");

		} else if (cea->detailed_timing[i].sync & D_SEPERATE_SYNC) {
  1835f4:	1080200c 	andi	r2,r2,128
  1835f8:	10001526 	beq	r2,zero,183650 <edid_print_cea+0x123c>

			printf("      digital sync  : seperate");
  1835fc:	010006b4 	movhi	r4,26
  183600:	21350304 	addi	r4,r4,-11252
  183604:	01891080 	call	189108 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_VSYNC_N)
  183608:	98800017 	ldw	r2,0(r19)
  18360c:	1080400c 	andi	r2,r2,256
  183610:	10000326 	beq	r2,zero,183620 <edid_print_cea+0x120c>
				printf(" vsync_n");
  183614:	010006b4 	movhi	r4,26
  183618:	21350b04 	addi	r4,r4,-11220
  18361c:	00000206 	br	183628 <edid_print_cea+0x1214>
			else
				printf(" vsync_p");
  183620:	010006b4 	movhi	r4,26
  183624:	21350e04 	addi	r4,r4,-11208
  183628:	01891080 	call	189108 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_HSYNC_N)
  18362c:	98800017 	ldw	r2,0(r19)
  183630:	1081000c 	andi	r2,r2,1024
  183634:	10000326 	beq	r2,zero,183644 <edid_print_cea+0x1230>
				printf(" hsync_n");
  183638:	010006b4 	movhi	r4,26
  18363c:	21351104 	addi	r4,r4,-11196
  183640:	003fdd06 	br	1835b8 <__alt_data_end+0xfff835b8>
			else
				printf(" hsync_p");
  183644:	010006b4 	movhi	r4,26
  183648:	21351404 	addi	r4,r4,-11184
  18364c:	003fda06 	br	1835b8 <__alt_data_end+0xfff835b8>

	if (cea->nr_dtd != 0)
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
  183650:	ad400044 	addi	r21,r21,1
  183654:	9cc01004 	addi	r19,r19,64
  183658:	a5001004 	addi	r20,r20,64
  18365c:	94801004 	addi	r18,r18,64
  183660:	003f3406 	br	183334 <__alt_data_end+0xfff83334>
				printf(" hsync_p");

    		printf("\n");
		}
	}
}
  183664:	dfc01117 	ldw	ra,68(sp)
  183668:	df001017 	ldw	fp,64(sp)
  18366c:	ddc00f17 	ldw	r23,60(sp)
  183670:	dd800e17 	ldw	r22,56(sp)
  183674:	dd400d17 	ldw	r21,52(sp)
  183678:	dd000c17 	ldw	r20,48(sp)
  18367c:	dcc00b17 	ldw	r19,44(sp)
  183680:	dc800a17 	ldw	r18,40(sp)
  183684:	dc400917 	ldw	r17,36(sp)
  183688:	dc000817 	ldw	r16,32(sp)
  18368c:	dec01204 	addi	sp,sp,72
  183690:	f800283a 	ret

00183694 <edid_decode_extensions>:

int edid_decode_extensions(struct base_edid *edid, const unsigned char *edid_bin)
{
  183694:	defffb04 	addi	sp,sp,-20
  183698:	dc800215 	stw	r18,8(sp)
  18369c:	dc400115 	stw	r17,4(sp)
  1836a0:	dfc00415 	stw	ra,16(sp)
  1836a4:	dcc00315 	stw	r19,12(sp)
  1836a8:	dc000015 	stw	r16,0(sp)
	const u8 *c = edid_bin;
	int i, nr_ext;

	nr_ext = (int)c[0x7e];
  1836ac:	2c001f83 	ldbu	r16,126(r5)
		}
	}
}

int edid_decode_extensions(struct base_edid *edid, const unsigned char *edid_bin)
{
  1836b0:	2025883a 	mov	r18,r4
  1836b4:	2823883a 	mov	r17,r5
  1836b8:	0400010e 	bge	zero,r16,1836c0 <edid_decode_extensions+0x2c>
  1836bc:	04000044 	movi	r16,1
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
		nr_ext = 1;
#endif

	for (i = 0; i < nr_ext; ++i) {
  1836c0:	0005883a 	mov	r2,zero

		c = &edid_bin[128 + 128 * i];

		switch (c[0]) {
  1836c4:	04c00084 	movi	r19,2
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
		nr_ext = 1;
#endif

	for (i = 0; i < nr_ext; ++i) {
  1836c8:	1400090e 	bge	r2,r16,1836f0 <edid_decode_extensions+0x5c>

		c = &edid_bin[128 + 128 * i];

		switch (c[0]) {
  1836cc:	88802003 	ldbu	r2,128(r17)
  1836d0:	14c0051e 	bne	r2,r19,1836e8 <edid_decode_extensions+0x54>
		case 0x01:  // 0x01 (LCD Timings)
			// todo ...
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
  1836d4:	9009883a 	mov	r4,r18
  1836d8:	880b883a 	mov	r5,r17
  1836dc:	000d883a 	mov	r6,zero
  1836e0:	01814ac0 	call	1814ac <edid_decode_cea>
  1836e4:	1000041e 	bne	r2,zero,1836f8 <edid_decode_extensions+0x64>
  1836e8:	00800044 	movi	r2,1
  1836ec:	003ff606 	br	1836c8 <__alt_data_end+0xfff836c8>
		case 0xff:  // 0xff (define by display manufacturer)
			break;
		}
	}

	return 0;
  1836f0:	0005883a 	mov	r2,zero
  1836f4:	00000106 	br	1836fc <edid_decode_extensions+0x68>
			// todo ...
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
				return -1;
  1836f8:	00bfffc4 	movi	r2,-1
			break;
		}
	}

	return 0;
}
  1836fc:	dfc00417 	ldw	ra,16(sp)
  183700:	dcc00317 	ldw	r19,12(sp)
  183704:	dc800217 	ldw	r18,8(sp)
  183708:	dc400117 	ldw	r17,4(sp)
  18370c:	dc000017 	ldw	r16,0(sp)
  183710:	dec00504 	addi	sp,sp,20
  183714:	f800283a 	ret

00183718 <edid_decode_v14>:

int edid_decode_v14(struct base_edid *edid, const unsigned char *edid_bin)
{
  183718:	defff204 	addi	sp,sp,-56
  18371c:	df000c15 	stw	fp,48(sp)
  183720:	dc400515 	stw	r17,20(sp)
  183724:	2039883a 	mov	fp,r4
  183728:	2823883a 	mov	r17,r5
	const u8 *c = edid_bin;
    u8 checksum = 0;
    int i = 0, s = 0;

    // header
    if (memcmp(c, header, 8) != 0)
  18372c:	2809883a 	mov	r4,r5
  183730:	01800204 	movi	r6,8
  183734:	d1600004 	addi	r5,gp,-32768

	return 0;
}

int edid_decode_v14(struct base_edid *edid, const unsigned char *edid_bin)
{
  183738:	dfc00d15 	stw	ra,52(sp)
  18373c:	ddc00b15 	stw	r23,44(sp)
  183740:	dd800a15 	stw	r22,40(sp)
  183744:	dd400915 	stw	r21,36(sp)
  183748:	dd000815 	stw	r20,32(sp)
  18374c:	dcc00715 	stw	r19,28(sp)
  183750:	dc800615 	stw	r18,24(sp)
  183754:	dc000415 	stw	r16,16(sp)
	const u8 *c = edid_bin;
    u8 checksum = 0;
    int i = 0, s = 0;

    // header
    if (memcmp(c, header, 8) != 0)
  183758:	0188e040 	call	188e04 <memcmp>
  18375c:	1007ec1e 	bne	r2,zero,185710 <edid_decode_v14+0x1ff8>
  183760:	8809883a 	mov	r4,r17
  183764:	89401fc4 	addi	r5,r17,127
        return -1;

    // checksum
    for (s = 0; s < 127; ++s)
        checksum += c[s];
  183768:	21800003 	ldbu	r6,0(r4)
  18376c:	21000044 	addi	r4,r4,1
  183770:	1185883a 	add	r2,r2,r6
    // header
    if (memcmp(c, header, 8) != 0)
        return -1;

    // checksum
    for (s = 0; s < 127; ++s)
  183774:	217ffc1e 	bne	r4,r5,183768 <__alt_data_end+0xfff83768>
        checksum += c[s];

    if ((u8)(checksum + c[127]) != 0x00)
  183778:	89001fc3 	ldbu	r4,127(r17)
  18377c:	1105883a 	add	r2,r2,r4
  183780:	10803fcc 	andi	r2,r2,255
  183784:	1007e21e 	bne	r2,zero,185710 <edid_decode_v14+0x1ff8>
    	return -1;

    edid->checksum = c[127];
  183788:	21003fcc 	andi	r4,r4,255
  18378c:	e1060a15 	stw	r4,6184(fp)

    // vid/pid
    c = &edid_bin[8];

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
  183790:	88800203 	ldbu	r2,8(r17)

	edid->mfg_week = 0;
	edid->mfg_year = 0;
	edid->model_year = 0;

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
  183794:	01400d44 	movi	r5,53
    edid->checksum = c[127];

    // vid/pid
    c = &edid_bin[8];

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
  183798:	1004d0ba 	srli	r2,r2,2
  18379c:	108007cc 	andi	r2,r2,31
  1837a0:	10801004 	addi	r2,r2,64
  1837a4:	e0800005 	stb	r2,0(fp)
    edid->id_mfg[1] = 0x40 + (((c[0] << 3) | (c[1] >> 5)) & 0x1f);
  1837a8:	88800203 	ldbu	r2,8(r17)
  1837ac:	100890fa 	slli	r4,r2,3
  1837b0:	88800243 	ldbu	r2,9(r17)
  1837b4:	1004d17a 	srli	r2,r2,5
  1837b8:	2084b03a 	or	r2,r4,r2
  1837bc:	108007cc 	andi	r2,r2,31
  1837c0:	10801004 	addi	r2,r2,64
  1837c4:	e0800045 	stb	r2,1(fp)
    edid->id_mfg[2] = 0x40 + (c[1] & 0x1f);
  1837c8:	88800243 	ldbu	r2,9(r17)
    edid->id_mfg[3] = 0;
  1837cc:	e00000c5 	stb	zero,3(fp)
    // vid/pid
    c = &edid_bin[8];

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
    edid->id_mfg[1] = 0x40 + (((c[0] << 3) | (c[1] >> 5)) & 0x1f);
    edid->id_mfg[2] = 0x40 + (c[1] & 0x1f);
  1837d0:	108007cc 	andi	r2,r2,31
  1837d4:	10801004 	addi	r2,r2,64
  1837d8:	e0800085 	stb	r2,2(fp)
    edid->id_mfg[3] = 0;

    c = &edid_bin[0x0a];
    edid->id_prod = (c[1] << 8) | c[0];
  1837dc:	888002c3 	ldbu	r2,11(r17)
  1837e0:	1008923a 	slli	r4,r2,8
  1837e4:	88800283 	ldbu	r2,10(r17)
  1837e8:	2084b03a 	or	r2,r4,r2
  1837ec:	e0800115 	stw	r2,4(fp)

    c = &edid_bin[0x0c];
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
  1837f0:	888003c3 	ldbu	r2,15(r17)
  1837f4:	1008963a 	slli	r4,r2,24
  1837f8:	88800383 	ldbu	r2,14(r17)
  1837fc:	1004943a 	slli	r2,r2,16
  183800:	2084b03a 	or	r2,r4,r2
  183804:	89000303 	ldbu	r4,12(r17)
  183808:	1108b03a 	or	r4,r2,r4
  18380c:	88800343 	ldbu	r2,13(r17)

    c = &edid_bin[0x10];

	edid->mfg_week = 0;
  183810:	e0000315 	stw	zero,12(fp)
	edid->mfg_year = 0;
  183814:	e0000415 	stw	zero,16(fp)

    c = &edid_bin[0x0a];
    edid->id_prod = (c[1] << 8) | c[0];

    c = &edid_bin[0x0c];
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
  183818:	1004923a 	slli	r2,r2,8

    c = &edid_bin[0x10];

	edid->mfg_week = 0;
	edid->mfg_year = 0;
	edid->model_year = 0;
  18381c:	e0000515 	stw	zero,20(fp)

    c = &edid_bin[0x0a];
    edid->id_prod = (c[1] << 8) | c[0];

    c = &edid_bin[0x0c];
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
  183820:	2084b03a 	or	r2,r4,r2
  183824:	e0800215 	stw	r2,8(fp)

	edid->mfg_week = 0;
	edid->mfg_year = 0;
	edid->model_year = 0;

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
  183828:	88800403 	ldbu	r2,16(r17)
  18382c:	113fffc4 	addi	r4,r2,-1
  183830:	21003fcc 	andi	r4,r4,255
  183834:	29000236 	bltu	r5,r4,183840 <edid_decode_v14+0x128>
    	edid->mfg_week = c[0];
  183838:	10803fcc 	andi	r2,r2,255
  18383c:	e0800315 	stw	r2,12(fp)
  183840:	88800443 	ldbu	r2,17(r17)

    if (c[0] == 0xff)
  183844:	89400403 	ldbu	r5,16(r17)
  183848:	01003fc4 	movi	r4,255
    	edid->model_year = 1990 + c[1];
  18384c:	1081f184 	addi	r2,r2,1990
	edid->model_year = 0;

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
    	edid->mfg_week = c[0];

    if (c[0] == 0xff)
  183850:	2900021e 	bne	r5,r4,18385c <edid_decode_v14+0x144>
    	edid->model_year = 1990 + c[1];
  183854:	e0800515 	stw	r2,20(fp)
  183858:	00000106 	br	183860 <edid_decode_v14+0x148>
    else
    	edid->mfg_year = 1990 + c[1];
  18385c:	e0800415 	stw	r2,16(fp)

    // edid version
    c = &edid_bin[0x12];

    edid->ver_mj = c[0];
  183860:	88800483 	ldbu	r2,18(r17)
  183864:	e0800615 	stw	r2,24(fp)
    edid->ver_mn = c[1];
  183868:	888004c3 	ldbu	r2,19(r17)
  18386c:	e0800715 	stw	r2,28(fp)

    // basic display parameters & features
    c = &edid_bin[0x14];

    if (*c & 0x80) {
  183870:	88800507 	ldb	r2,20(r17)
  183874:	1000410e 	bge	r2,zero,18397c <edid_decode_v14+0x264>
        edid->input.digital_if = 1;
  183878:	01000044 	movi	r4,1
  18387c:	e1000815 	stw	r4,32(fp)

        switch ((*c >> 4) & 0x7) {
  183880:	88800503 	ldbu	r2,20(r17)
  183884:	01800144 	movi	r6,5
  183888:	1004d13a 	srli	r2,r2,4
  18388c:	108001cc 	andi	r2,r2,7
  183890:	10bfffc4 	addi	r2,r2,-1
  183894:	10803fcc 	andi	r2,r2,255
  183898:	30801936 	bltu	r6,r2,183900 <edid_decode_v14+0x1e8>
  18389c:	100490ba 	slli	r2,r2,2
  1838a0:	01400634 	movhi	r5,24
  1838a4:	294e2d04 	addi	r5,r5,14516
  1838a8:	1145883a 	add	r2,r2,r5
  1838ac:	10800017 	ldw	r2,0(r2)
  1838b0:	1000683a 	jmp	r2
  1838b4:	001838cc 	andi	zero,zero,24803
  1838b8:	001838d4 	movui	zero,24803
  1838bc:	001838dc 	xori	zero,zero,24803
  1838c0:	001838e8 	cmpgeui	zero,zero,24803
  1838c4:	001838f0 	cmpltui	zero,zero,24803
  1838c8:	001838f8 	rdprs	zero,zero,24803
        case 1:
            edid->input.digital.depth = VID_6BITS;
  1838cc:	e1000915 	stw	r4,36(fp)
            break;
  1838d0:	00000c06 	br	183904 <edid_decode_v14+0x1ec>
        case 2:
            edid->input.digital.depth = VID_8BITS;
  1838d4:	00800084 	movi	r2,2
  1838d8:	00000106 	br	1838e0 <edid_decode_v14+0x1c8>
            break;
        case 3:
            edid->input.digital.depth = VID_10BITS;
  1838dc:	008000c4 	movi	r2,3
  1838e0:	e0800915 	stw	r2,36(fp)
            break;
  1838e4:	00000706 	br	183904 <edid_decode_v14+0x1ec>
        case 4:
            edid->input.digital.depth = VID_12BITS;
  1838e8:	00800104 	movi	r2,4
  1838ec:	003ffc06 	br	1838e0 <__alt_data_end+0xfff838e0>
            break;
        case 5:
            edid->input.digital.depth = VID_14BITS;
  1838f0:	e1800915 	stw	r6,36(fp)
            break;
  1838f4:	00000306 	br	183904 <edid_decode_v14+0x1ec>
        case 6:
            edid->input.digital.depth = VID_16BITS;
  1838f8:	00800184 	movi	r2,6
  1838fc:	003ff806 	br	1838e0 <__alt_data_end+0xfff838e0>
            break;
        case 0:
        default:
            edid->input.digital.depth = VID_NOT_DEFINED;
  183900:	e0000915 	stw	zero,36(fp)
            break;
        }

        switch (*c & 0xf) {
  183904:	88800503 	ldbu	r2,20(r17)
  183908:	01400104 	movi	r5,4
  18390c:	108003cc 	andi	r2,r2,15
  183910:	10bfffc4 	addi	r2,r2,-1
  183914:	10803fcc 	andi	r2,r2,255
  183918:	28801636 	bltu	r5,r2,183974 <edid_decode_v14+0x25c>
  18391c:	100490ba 	slli	r2,r2,2
  183920:	01000634 	movhi	r4,24
  183924:	210e4d04 	addi	r4,r4,14644
  183928:	1105883a 	add	r2,r2,r4
  18392c:	10800017 	ldw	r2,0(r2)
  183930:	1000683a 	jmp	r2
  183934:	00183948 	cmpgei	zero,zero,24805
  183938:	00183950 	cmplti	zero,zero,24805
  18393c:	0018395c 	xori	zero,zero,24805
  183940:	00183964 	muli	zero,zero,24805
  183944:	0018396c 	andhi	zero,zero,24805
        case 1:
            edid->input.digital.interface = VII_DVI;
  183948:	00800044 	movi	r2,1
  18394c:	00000106 	br	183954 <edid_decode_v14+0x23c>
            break;
        case 2:
            edid->input.digital.interface = VII_HDMI_A;
  183950:	00800084 	movi	r2,2
  183954:	e0800a15 	stw	r2,40(fp)
            break;
  183958:	00003506 	br	183a30 <edid_decode_v14+0x318>
        case 3:
            edid->input.digital.interface = VII_HDMI_B;
  18395c:	008000c4 	movi	r2,3
  183960:	003ffc06 	br	183954 <__alt_data_end+0xfff83954>
            break;
        case 4:
            edid->input.digital.interface = VII_MDDI;
  183964:	e1400a15 	stw	r5,40(fp)
            break;
  183968:	00003106 	br	183a30 <edid_decode_v14+0x318>
        case 5:
            edid->input.digital.interface = VII_DISPLAYPORT;
  18396c:	00800144 	movi	r2,5
  183970:	003ff806 	br	183954 <__alt_data_end+0xfff83954>
            break;
        case 0:
        default:
            edid->input.digital.interface = VII_NOT_DEFINED;
  183974:	e0000a15 	stw	zero,40(fp)
            break;
  183978:	00002d06 	br	183a30 <edid_decode_v14+0x318>
        }

    } else {

        edid->input.digital_if = 0;
  18397c:	e0000815 	stw	zero,32(fp)

        switch ((*c >> 5) & 0x3) {
  183980:	88800503 	ldbu	r2,20(r17)
  183984:	01000084 	movi	r4,2
  183988:	1004d17a 	srli	r2,r2,5
  18398c:	108000cc 	andi	r2,r2,3
  183990:	11000626 	beq	r2,r4,1839ac <edid_decode_v14+0x294>
  183994:	010000c4 	movi	r4,3
  183998:	11000426 	beq	r2,r4,1839ac <edid_decode_v14+0x294>
  18399c:	01000044 	movi	r4,1
  1839a0:	11000226 	beq	r2,r4,1839ac <edid_decode_v14+0x294>
        case 0:
            edid->input.analog.level = VIL_0P700_0P300_1P000;
  1839a4:	e0000915 	stw	zero,36(fp)
            break;
  1839a8:	00000106 	br	1839b0 <edid_decode_v14+0x298>
            break;
        case 2:
            edid->input.analog.level = VIL_1P000_0P400_1P400;
            break;
        case 3:
            edid->input.analog.level = VIL_0P700_0P000_0P700;
  1839ac:	e0800915 	stw	r2,36(fp)
            break;
        }

        if (*c & 0x10)
  1839b0:	88800503 	ldbu	r2,20(r17)
  1839b4:	1080040c 	andi	r2,r2,16
  1839b8:	10000326 	beq	r2,zero,1839c8 <edid_decode_v14+0x2b0>
            edid->input.analog.setup = VIS_BLANK_TO_BLACK_PEDESTAL;
  1839bc:	00800044 	movi	r2,1
  1839c0:	e0800a15 	stw	r2,40(fp)
  1839c4:	00000106 	br	1839cc <edid_decode_v14+0x2b4>
        else
            edid->input.analog.setup = VIS_BLANK_LEVEL_EQ_BLACK_LEVEL;
  1839c8:	e0000a15 	stw	zero,40(fp)

        edid->input.analog.sync_type = 0;
  1839cc:	e0000b15 	stw	zero,44(fp)
        if (*c & 0x08)
  1839d0:	88800503 	ldbu	r2,20(r17)
  1839d4:	1080020c 	andi	r2,r2,8
  1839d8:	10000226 	beq	r2,zero,1839e4 <edid_decode_v14+0x2cc>
        	edid->input.analog.sync_type |= VIS_SEPERATE_H_V_SYNC;
  1839dc:	00800044 	movi	r2,1
  1839e0:	e0800b15 	stw	r2,44(fp)
        if (*c & 0x04)
  1839e4:	88800503 	ldbu	r2,20(r17)
  1839e8:	1080010c 	andi	r2,r2,4
  1839ec:	10000326 	beq	r2,zero,1839fc <edid_decode_v14+0x2e4>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_H_SYNC;
  1839f0:	e0800b17 	ldw	r2,44(fp)
  1839f4:	10800094 	ori	r2,r2,2
  1839f8:	e0800b15 	stw	r2,44(fp)
        if (*c & 0x02)
  1839fc:	88800503 	ldbu	r2,20(r17)
  183a00:	1080008c 	andi	r2,r2,2
  183a04:	10000326 	beq	r2,zero,183a14 <edid_decode_v14+0x2fc>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_G_VIDEO;
  183a08:	e0800b17 	ldw	r2,44(fp)
  183a0c:	10800114 	ori	r2,r2,4
  183a10:	e0800b15 	stw	r2,44(fp)

        if (*c & 0x01)
  183a14:	88800503 	ldbu	r2,20(r17)
  183a18:	1080004c 	andi	r2,r2,1
  183a1c:	10000326 	beq	r2,zero,183a2c <edid_decode_v14+0x314>
        	edid->input.analog.serrations = VISR_VSYNC;
  183a20:	00800044 	movi	r2,1
  183a24:	e0800c15 	stw	r2,48(fp)
  183a28:	00000106 	br	183a30 <edid_decode_v14+0x318>
        else
        	edid->input.analog.serrations = 0;
  183a2c:	e0000c15 	stw	zero,48(fp)
    }

    c = &edid_bin[0x15];

    edid->screen.size_defined = 0;
  183a30:	e0000d15 	stw	zero,52(fp)
    edid->screen.size.horizontal = 0;
    edid->screen.size.vertical = 0;
    edid->screen.aspect_defined = 0;
  183a34:	e0000e15 	stw	zero,56(fp)
    edid->screen.aspect.landscape = 0.0f;
  183a38:	e0000f15 	stw	zero,60(fp)
    edid->screen.aspect.portrait = 0.0f;
  183a3c:	e0001015 	stw	zero,64(fp)

    if (c[0] != 0) {
  183a40:	89000543 	ldbu	r4,21(r17)
  183a44:	88800583 	ldbu	r2,22(r17)
  183a48:	20001326 	beq	r4,zero,183a98 <edid_decode_v14+0x380>
  183a4c:	01000044 	movi	r4,1
        if (c[1] != 0) {
  183a50:	10000526 	beq	r2,zero,183a68 <edid_decode_v14+0x350>
        	edid->screen.size_defined = 1;
  183a54:	e1000d15 	stw	r4,52(fp)
        	edid->screen.size.horizontal = c[0];
  183a58:	88800543 	ldbu	r2,21(r17)
  183a5c:	e0800f15 	stw	r2,60(fp)
        	edid->screen.size.vertical = c[1];
  183a60:	88800583 	ldbu	r2,22(r17)
  183a64:	00001706 	br	183ac4 <edid_decode_v14+0x3ac>
        } else {
        	edid->screen.aspect_defined = 1;
  183a68:	e1000e15 	stw	r4,56(fp)
        	edid->screen.aspect.landscape = ((float)c[0] + 99.0f) * 0.01f;
  183a6c:	89000543 	ldbu	r4,21(r17)
  183a70:	0188b800 	call	188b80 <__floatunsisf>
  183a74:	1009883a 	mov	r4,r2
  183a78:	0150b1b4 	movhi	r5,17094
  183a7c:	0187e000 	call	187e00 <__addsf3>
  183a80:	014f0934 	movhi	r5,15396
  183a84:	1009883a 	mov	r4,r2
  183a88:	2975c284 	addi	r5,r5,-10486
  183a8c:	01887300 	call	188730 <__mulsf3>
  183a90:	e0800f15 	stw	r2,60(fp)
  183a94:	00000c06 	br	183ac8 <edid_decode_v14+0x3b0>
        }
    } else if (c[1] != 0) {
  183a98:	10000b26 	beq	r2,zero,183ac8 <edid_decode_v14+0x3b0>
    	edid->screen.aspect_defined = 2;
  183a9c:	00800084 	movi	r2,2
  183aa0:	e0800e15 	stw	r2,56(fp)
    	edid->screen.aspect.portrait = 100.0f / ((float)c[1] + 99.0f);
  183aa4:	89000583 	ldbu	r4,22(r17)
  183aa8:	0188b800 	call	188b80 <__floatunsisf>
  183aac:	1009883a 	mov	r4,r2
  183ab0:	0150b1b4 	movhi	r5,17094
  183ab4:	0187e000 	call	187e00 <__addsf3>
  183ab8:	0110b234 	movhi	r4,17096
  183abc:	100b883a 	mov	r5,r2
  183ac0:	01882e00 	call	1882e0 <__divsf3>
  183ac4:	e0801015 	stw	r2,64(fp)
    }

    // gamma
    c = &edid_bin[0x17];

    if (*c < 0xff)
  183ac8:	890005c3 	ldbu	r4,23(r17)
  183acc:	00803fc4 	movi	r2,255
  183ad0:	20800926 	beq	r4,r2,183af8 <edid_decode_v14+0x3e0>
        edid->gamma = ((float)(*c) + 100.0f) / 100.0f;
  183ad4:	0188b800 	call	188b80 <__floatunsisf>
  183ad8:	1009883a 	mov	r4,r2
  183adc:	0150b234 	movhi	r5,17096
  183ae0:	0187e000 	call	187e00 <__addsf3>
  183ae4:	1009883a 	mov	r4,r2
  183ae8:	0150b234 	movhi	r5,17096
  183aec:	01882e00 	call	1882e0 <__divsf3>
  183af0:	e0801115 	stw	r2,68(fp)
  183af4:	00000106 	br	183afc <edid_decode_v14+0x3e4>
    else
        edid->gamma = 0.0f;  // defined in an extension block
  183af8:	e0001115 	stw	zero,68(fp)

    // feature
    c = &edid_bin[0x18];

    edid->feature = 0;
  183afc:	e0001215 	stw	zero,72(fp)
    if (*c & 0x80)
  183b00:	88800607 	ldb	r2,24(r17)
  183b04:	1000020e 	bge	r2,zero,183b10 <edid_decode_v14+0x3f8>
    	edid->feature |= FS_PM_STANDBY;
  183b08:	00800044 	movi	r2,1
  183b0c:	e0801215 	stw	r2,72(fp)
    if (*c & 0x40)
  183b10:	88800603 	ldbu	r2,24(r17)
  183b14:	1080100c 	andi	r2,r2,64
  183b18:	10000326 	beq	r2,zero,183b28 <edid_decode_v14+0x410>
    	edid->feature |= FS_PM_SUSPEND;
  183b1c:	e0801217 	ldw	r2,72(fp)
  183b20:	10800094 	ori	r2,r2,2
  183b24:	e0801215 	stw	r2,72(fp)
    if (*c & 0x20)
  183b28:	88800603 	ldbu	r2,24(r17)
  183b2c:	1080080c 	andi	r2,r2,32
  183b30:	10000326 	beq	r2,zero,183b40 <edid_decode_v14+0x428>
    	edid->feature |= FS_PM_ACTIVE_OFF;
  183b34:	e0801217 	ldw	r2,72(fp)
  183b38:	10800114 	ori	r2,r2,4
  183b3c:	e0801215 	stw	r2,72(fp)
  183b40:	88800603 	ldbu	r2,24(r17)

    if (edid->input.digital_if) {
  183b44:	e1000817 	ldw	r4,32(fp)
        switch ((*c >> 3) & 0x03) {
  183b48:	1004d0fa 	srli	r2,r2,3
  183b4c:	108000cc 	andi	r2,r2,3
    if (*c & 0x40)
    	edid->feature |= FS_PM_SUSPEND;
    if (*c & 0x20)
    	edid->feature |= FS_PM_ACTIVE_OFF;

    if (edid->input.digital_if) {
  183b50:	20001026 	beq	r4,zero,183b94 <edid_decode_v14+0x47c>
        switch ((*c >> 3) & 0x03) {
  183b54:	01400084 	movi	r5,2
  183b58:	e1001217 	ldw	r4,72(fp)
  183b5c:	11400826 	beq	r2,r5,183b80 <edid_decode_v14+0x468>
  183b60:	014000c4 	movi	r5,3
  183b64:	11400826 	beq	r2,r5,183b88 <edid_decode_v14+0x470>
  183b68:	01400044 	movi	r5,1
  183b6c:	11400226 	beq	r2,r5,183b78 <edid_decode_v14+0x460>
        case 0:
        	edid->feature |= FS_CEF_RGB444;
  183b70:	21001014 	ori	r4,r4,64
  183b74:	00000506 	br	183b8c <edid_decode_v14+0x474>
            break;
        case 1:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444);
  183b78:	21003014 	ori	r4,r4,192
  183b7c:	00000306 	br	183b8c <edid_decode_v14+0x474>
            break;
        case 2:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR422);
  183b80:	21005014 	ori	r4,r4,320
  183b84:	00000106 	br	183b8c <edid_decode_v14+0x474>
            break;
        case 3:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444 | FS_CEF_YCBCR422);
  183b88:	21007014 	ori	r4,r4,448
  183b8c:	e1001215 	stw	r4,72(fp)
            break;
  183b90:	00000e06 	br	183bcc <edid_decode_v14+0x4b4>
        }
    } else {
        switch ((*c >> 3) & 0x03) {
  183b94:	01000044 	movi	r4,1
  183b98:	11000926 	beq	r2,r4,183bc0 <edid_decode_v14+0x4a8>
  183b9c:	10000526 	beq	r2,zero,183bb4 <edid_decode_v14+0x49c>
  183ba0:	01000084 	movi	r4,2
  183ba4:	1100091e 	bne	r2,r4,183bcc <edid_decode_v14+0x4b4>
            break;
        case 1:
        	edid->feature |= FS_DCT_RGB;
            break;
        case 2:
        	edid->feature |= FS_DCT_NON_RGB;
  183ba8:	e0801217 	ldw	r2,72(fp)
  183bac:	10800814 	ori	r2,r2,32
  183bb0:	00000506 	br	183bc8 <edid_decode_v14+0x4b0>
            break;
        }
    } else {
        switch ((*c >> 3) & 0x03) {
        case 0:
        	edid->feature |= FS_DCT_MONO_GRAY;
  183bb4:	e0801217 	ldw	r2,72(fp)
  183bb8:	10800214 	ori	r2,r2,8
  183bbc:	00000206 	br	183bc8 <edid_decode_v14+0x4b0>
            break;
        case 1:
        	edid->feature |= FS_DCT_RGB;
  183bc0:	e0801217 	ldw	r2,72(fp)
  183bc4:	10800414 	ori	r2,r2,16
            break;
        case 2:
        	edid->feature |= FS_DCT_NON_RGB;
  183bc8:	e0801215 	stw	r2,72(fp)
            break;
        }
    }

    if (*c & 0x04)
  183bcc:	88800603 	ldbu	r2,24(r17)
  183bd0:	1080010c 	andi	r2,r2,4
  183bd4:	10000326 	beq	r2,zero,183be4 <edid_decode_v14+0x4cc>
    	edid->feature |= FS_OF_SRGB_DEFAULT;
  183bd8:	e0801217 	ldw	r2,72(fp)
  183bdc:	10808014 	ori	r2,r2,512
  183be0:	e0801215 	stw	r2,72(fp)
    if (*c & 0x02)
  183be4:	88800603 	ldbu	r2,24(r17)
  183be8:	1080008c 	andi	r2,r2,2
  183bec:	10000326 	beq	r2,zero,183bfc <edid_decode_v14+0x4e4>
    	edid->feature |= FS_OF_NATIVE_PREFERRED;
  183bf0:	e0801217 	ldw	r2,72(fp)
  183bf4:	10810014 	ori	r2,r2,1024
  183bf8:	e0801215 	stw	r2,72(fp)
    if (*c & 0x01)
  183bfc:	88800603 	ldbu	r2,24(r17)
  183c00:	1080004c 	andi	r2,r2,1
  183c04:	10000326 	beq	r2,zero,183c14 <edid_decode_v14+0x4fc>
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;
  183c08:	e0801217 	ldw	r2,72(fp)
  183c0c:	10820014 	ori	r2,r2,2048
  183c10:	e0801215 	stw	r2,72(fp)

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
  183c14:	88800643 	ldbu	r2,25(r17)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
  183c18:	043fe004 	movi	r16,-128
  183c1c:	0140b404 	movi	r5,720
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
  183c20:	1008d1ba 	srli	r4,r2,6
  183c24:	888006c3 	ldbu	r2,27(r17)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
  183c28:	01806404 	movi	r6,400
  183c2c:	01c01184 	movi	r7,70
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
  183c30:	1085883a 	add	r2,r2,r2
  183c34:	1085883a 	add	r2,r2,r2
  183c38:	2084b03a 	or	r2,r4,r2
  183c3c:	e0801315 	stw	r2,76(fp)
    edid->chromaticity.r_y = ((u16)c[3] << 2) | (((u16)c[0] >> 4) & 0x3);
  183c40:	88800643 	ldbu	r2,25(r17)
  183c44:	1004d13a 	srli	r2,r2,4
  183c48:	110000cc 	andi	r4,r2,3
  183c4c:	88800703 	ldbu	r2,28(r17)
  183c50:	1085883a 	add	r2,r2,r2
  183c54:	1085883a 	add	r2,r2,r2
  183c58:	2084b03a 	or	r2,r4,r2
  183c5c:	e0801415 	stw	r2,80(fp)
    edid->chromaticity.g_x = ((u16)c[4] << 2) | (((u16)c[0] >> 2) & 0x3);
  183c60:	88800643 	ldbu	r2,25(r17)
  183c64:	1004d0ba 	srli	r2,r2,2
  183c68:	110000cc 	andi	r4,r2,3
  183c6c:	88800743 	ldbu	r2,29(r17)
  183c70:	1085883a 	add	r2,r2,r2
  183c74:	1085883a 	add	r2,r2,r2
  183c78:	2084b03a 	or	r2,r4,r2
  183c7c:	e0801515 	stw	r2,84(fp)
    edid->chromaticity.g_y = ((u16)c[5] << 2) | ((u16)c[0] & 0x3);
  183c80:	88800643 	ldbu	r2,25(r17)
  183c84:	110000cc 	andi	r4,r2,3
  183c88:	88800783 	ldbu	r2,30(r17)
  183c8c:	1085883a 	add	r2,r2,r2
  183c90:	1085883a 	add	r2,r2,r2
  183c94:	2084b03a 	or	r2,r4,r2
  183c98:	e0801615 	stw	r2,88(fp)
    edid->chromaticity.b_x = ((u16)c[6] << 2) | (((u16)c[1] >> 6) & 0x3);
  183c9c:	88800683 	ldbu	r2,26(r17)
  183ca0:	1008d1ba 	srli	r4,r2,6
  183ca4:	888007c3 	ldbu	r2,31(r17)
  183ca8:	1085883a 	add	r2,r2,r2
  183cac:	1085883a 	add	r2,r2,r2
  183cb0:	2084b03a 	or	r2,r4,r2
  183cb4:	e0801715 	stw	r2,92(fp)
    edid->chromaticity.b_y = ((u16)c[7] << 2) | (((u16)c[1] >> 4) & 0x3);
  183cb8:	88800683 	ldbu	r2,26(r17)
  183cbc:	1004d13a 	srli	r2,r2,4
  183cc0:	110000cc 	andi	r4,r2,3
  183cc4:	88800803 	ldbu	r2,32(r17)
  183cc8:	1085883a 	add	r2,r2,r2
  183ccc:	1085883a 	add	r2,r2,r2
  183cd0:	2084b03a 	or	r2,r4,r2
  183cd4:	e0801815 	stw	r2,96(fp)
    edid->chromaticity.w_x = ((u16)c[8] << 2) | (((u16)c[1] >> 2) & 0x3);
  183cd8:	88800683 	ldbu	r2,26(r17)
  183cdc:	1004d0ba 	srli	r2,r2,2
  183ce0:	110000cc 	andi	r4,r2,3
  183ce4:	88800843 	ldbu	r2,33(r17)
  183ce8:	1085883a 	add	r2,r2,r2
  183cec:	1085883a 	add	r2,r2,r2
  183cf0:	2084b03a 	or	r2,r4,r2
  183cf4:	e0801915 	stw	r2,100(fp)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);
  183cf8:	88800683 	ldbu	r2,26(r17)
  183cfc:	110000cc 	andi	r4,r2,3
  183d00:	88800883 	ldbu	r2,34(r17)
  183d04:	1085883a 	add	r2,r2,r2
  183d08:	1085883a 	add	r2,r2,r2
  183d0c:	2084b03a 	or	r2,r4,r2
  183d10:	e0801a15 	stw	r2,104(fp)

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
  183d14:	890008c3 	ldbu	r4,35(r17)
  183d18:	8108703a 	and	r4,r16,r4
  183d1c:	d9000015 	stw	r4,0(sp)
  183d20:	e1001b04 	addi	r4,fp,108
  183d24:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[1], 720, 400, 88, c[0] & 0x40);
  183d28:	890008c3 	ldbu	r4,35(r17)
  183d2c:	0140b404 	movi	r5,720
  183d30:	01806404 	movi	r6,400
  183d34:	2100100c 	andi	r4,r4,64
  183d38:	d9000015 	stw	r4,0(sp)
  183d3c:	01c01604 	movi	r7,88
  183d40:	e1002104 	addi	r4,fp,132
  183d44:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[2], 640, 480, 60, c[0] & 0x20);
  183d48:	890008c3 	ldbu	r4,35(r17)
  183d4c:	0140a004 	movi	r5,640
  183d50:	01807804 	movi	r6,480
  183d54:	2100080c 	andi	r4,r4,32
  183d58:	d9000015 	stw	r4,0(sp)
  183d5c:	01c00f04 	movi	r7,60
  183d60:	e1002704 	addi	r4,fp,156
  183d64:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[3], 640, 480, 67, c[0] & 0x10);
  183d68:	890008c3 	ldbu	r4,35(r17)
  183d6c:	0140a004 	movi	r5,640
  183d70:	01807804 	movi	r6,480
  183d74:	2100040c 	andi	r4,r4,16
  183d78:	d9000015 	stw	r4,0(sp)
  183d7c:	01c010c4 	movi	r7,67
  183d80:	e1002d04 	addi	r4,fp,180
  183d84:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[4], 640, 480, 72, c[0] & 0x08);
  183d88:	890008c3 	ldbu	r4,35(r17)
  183d8c:	0140a004 	movi	r5,640
  183d90:	01807804 	movi	r6,480
  183d94:	2100020c 	andi	r4,r4,8
  183d98:	d9000015 	stw	r4,0(sp)
  183d9c:	01c01204 	movi	r7,72
  183da0:	e1003304 	addi	r4,fp,204
  183da4:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[5], 640, 480, 75, c[0] & 0x04);
  183da8:	890008c3 	ldbu	r4,35(r17)
  183dac:	0140a004 	movi	r5,640
  183db0:	01807804 	movi	r6,480
  183db4:	2100010c 	andi	r4,r4,4
  183db8:	d9000015 	stw	r4,0(sp)
  183dbc:	01c012c4 	movi	r7,75
  183dc0:	e1003904 	addi	r4,fp,228
  183dc4:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[6], 800, 600, 56, c[0] & 0x02);
  183dc8:	890008c3 	ldbu	r4,35(r17)
  183dcc:	0140c804 	movi	r5,800
  183dd0:	01809604 	movi	r6,600
  183dd4:	2100008c 	andi	r4,r4,2
  183dd8:	d9000015 	stw	r4,0(sp)
  183ddc:	01c00e04 	movi	r7,56
  183de0:	e1003f04 	addi	r4,fp,252
  183de4:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[7], 800, 600, 60, c[0] & 0x01);
  183de8:	890008c3 	ldbu	r4,35(r17)
  183dec:	0140c804 	movi	r5,800
  183df0:	01809604 	movi	r6,600
  183df4:	2100004c 	andi	r4,r4,1
  183df8:	d9000015 	stw	r4,0(sp)
  183dfc:	01c00f04 	movi	r7,60
  183e00:	e1004504 	addi	r4,fp,276
  183e04:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[8], 800, 600, 72, c[1] & 0x80);
  183e08:	88800903 	ldbu	r2,36(r17)
  183e0c:	e1004b04 	addi	r4,fp,300
  183e10:	0140c804 	movi	r5,800
  183e14:	8084703a 	and	r2,r16,r2
  183e18:	d8800015 	stw	r2,0(sp)
  183e1c:	01809604 	movi	r6,600
  183e20:	01c01204 	movi	r7,72
  183e24:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[9], 800, 600, 75, c[1] & 0x40);
  183e28:	88800903 	ldbu	r2,36(r17)
  183e2c:	e1005104 	addi	r4,fp,324
  183e30:	0140c804 	movi	r5,800
  183e34:	1080100c 	andi	r2,r2,64
  183e38:	d8800015 	stw	r2,0(sp)
  183e3c:	01809604 	movi	r6,600
  183e40:	01c012c4 	movi	r7,75
  183e44:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[10], 823, 624, 75, c[1] & 0x20);
  183e48:	88800903 	ldbu	r2,36(r17)
  183e4c:	e1005704 	addi	r4,fp,348
  183e50:	0140cdc4 	movi	r5,823
  183e54:	1080080c 	andi	r2,r2,32
  183e58:	d8800015 	stw	r2,0(sp)
  183e5c:	01809c04 	movi	r6,624
  183e60:	01c012c4 	movi	r7,75
  183e64:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing_i(&edid->timing_1_2[11], 1024, 768, 87, c[1] & 0x10);
  183e68:	88800903 	ldbu	r2,36(r17)
  183e6c:	1080040c 	andi	r2,r2,16
	}
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  183e70:	10000a26 	beq	r2,zero,183e9c <edid_decode_v14+0x784>
		et->valid = 1;
		et->width = x;
  183e74:	01010004 	movi	r4,1024
  183e78:	e1005e15 	stw	r4,376(fp)
		et->height = y;
  183e7c:	0100c004 	movi	r4,768
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
  183e80:	00800044 	movi	r2,1
		et->width = x;
		et->height = y;
  183e84:	e1005f15 	stw	r4,380(fp)
		et->refresh = r;
  183e88:	010015c4 	movi	r4,87
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
  183e8c:	e0805d15 	stw	r2,372(fp)
		et->width = x;
		et->height = y;
		et->refresh = r;
  183e90:	e1006015 	stw	r4,384(fp)
		et->interlaced = 1;
  183e94:	e0806115 	stw	r2,388(fp)
  183e98:	00000506 	br	183eb0 <edid_decode_v14+0x798>
		et->rb = 0;
	} else {
		et->valid = 0;
  183e9c:	e0005d15 	stw	zero,372(fp)
		et->width = 0;
  183ea0:	e0005e15 	stw	zero,376(fp)
		et->height = 0;
  183ea4:	e0005f15 	stw	zero,380(fp)
		et->refresh = 0;
  183ea8:	e0006015 	stw	zero,384(fp)
		et->interlaced = 0;
  183eac:	e0006115 	stw	zero,388(fp)
		et->rb = 0;
  183eb0:	e0006215 	stw	zero,392(fp)
	eb_establish_timing(&edid->timing_1_2[12], 1024, 768, 60, c[1] & 0x08);
  183eb4:	88800903 	ldbu	r2,36(r17)
  183eb8:	e1006304 	addi	r4,fp,396
  183ebc:	01410004 	movi	r5,1024
  183ec0:	1080020c 	andi	r2,r2,8
  183ec4:	d8800015 	stw	r2,0(sp)
  183ec8:	0180c004 	movi	r6,768
  183ecc:	01c00f04 	movi	r7,60
  183ed0:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[13], 1024, 768, 70, c[1] & 0x04);
  183ed4:	88800903 	ldbu	r2,36(r17)
  183ed8:	e1006904 	addi	r4,fp,420
  183edc:	01410004 	movi	r5,1024
  183ee0:	1080010c 	andi	r2,r2,4
  183ee4:	d8800015 	stw	r2,0(sp)
  183ee8:	0180c004 	movi	r6,768
  183eec:	01c01184 	movi	r7,70
  183ef0:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[14], 1024, 768, 75, c[1] & 0x02);
  183ef4:	88800903 	ldbu	r2,36(r17)
  183ef8:	e1006f04 	addi	r4,fp,444
  183efc:	01410004 	movi	r5,1024
  183f00:	1080008c 	andi	r2,r2,2
  183f04:	d8800015 	stw	r2,0(sp)
  183f08:	0180c004 	movi	r6,768
  183f0c:	01c012c4 	movi	r7,75
  183f10:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[15], 1280, 1024, 75, c[1] & 0x01);
  183f14:	88800903 	ldbu	r2,36(r17)
  183f18:	e1007504 	addi	r4,fp,468
  183f1c:	01414004 	movi	r5,1280
  183f20:	1080004c 	andi	r2,r2,1
  183f24:	d8800015 	stw	r2,0(sp)
  183f28:	01810004 	movi	r6,1024
  183f2c:	01c012c4 	movi	r7,75
  183f30:	01814700 	call	181470 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);
  183f34:	88800943 	ldbu	r2,37(r17)
  183f38:	01412004 	movi	r5,1152
  183f3c:	0180d984 	movi	r6,870
  183f40:	1080200c 	andi	r2,r2,128
  183f44:	d8800015 	stw	r2,0(sp)
  183f48:	01c012c4 	movi	r7,75
  183f4c:	e1007b04 	addi	r4,fp,492
  183f50:	01814700 	call	181470 <eb_establish_timing>

    // standard timings
    c = &edid_bin[0x26];
  183f54:	89400984 	addi	r5,r17,38
  183f58:	898009c4 	addi	r6,r17,39
  183f5c:	e2008304 	addi	r8,fp,524
  183f60:	e1c08104 	addi	r7,fp,516
  183f64:	e0808204 	addi	r2,fp,520
  183f68:	8b000d84 	addi	r12,r17,54
        if (*c == 0)
        	continue;

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;

		switch ((c[1] >> 6) & 0x3) {
  183f6c:	02400044 	movi	r9,1
  183f70:	02800084 	movi	r10,2
  183f74:	02c000c4 	movi	r11,3

    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
        if (*c == 0)
  183f78:	29000003 	ldbu	r4,0(r5)
  183f7c:	20001426 	beq	r4,zero,183fd0 <edid_decode_v14+0x8b8>
        	continue;

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;
  183f80:	210007c4 	addi	r4,r4,31
  183f84:	200890fa 	slli	r4,r4,3
  183f88:	39000015 	stw	r4,0(r7)

		switch ((c[1] >> 6) & 0x3) {
  183f8c:	31000003 	ldbu	r4,0(r6)
  183f90:	2008d1ba 	srli	r4,r4,6
  183f94:	22400726 	beq	r4,r9,183fb4 <edid_decode_v14+0x89c>
  183f98:	20000426 	beq	r4,zero,183fac <edid_decode_v14+0x894>
  183f9c:	22800726 	beq	r4,r10,183fbc <edid_decode_v14+0x8a4>
  183fa0:	22c0071e 	bne	r4,r11,183fc0 <edid_decode_v14+0x8a8>
			break;
		case 2:
			edid->standard_timings[i].aspect_ratio = ST_AR_5_4;
			break;
		case 3:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_9;
  183fa4:	12c00015 	stw	r11,0(r2)
			break;
  183fa8:	00000506 	br	183fc0 <edid_decode_v14+0x8a8>

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;

		switch ((c[1] >> 6) & 0x3) {
		case 0:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_10;
  183fac:	10000015 	stw	zero,0(r2)
			break;
  183fb0:	00000306 	br	183fc0 <edid_decode_v14+0x8a8>
		case 1:
			edid->standard_timings[i].aspect_ratio = ST_AR_4_3;
  183fb4:	12400015 	stw	r9,0(r2)
			break;
  183fb8:	00000106 	br	183fc0 <edid_decode_v14+0x8a8>
		case 2:
			edid->standard_timings[i].aspect_ratio = ST_AR_5_4;
  183fbc:	12800015 	stw	r10,0(r2)
		case 3:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_9;
			break;
		}

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
  183fc0:	31000003 	ldbu	r4,0(r6)
  183fc4:	21000fcc 	andi	r4,r4,63
  183fc8:	21000f04 	addi	r4,r4,60
  183fcc:	41000015 	stw	r4,0(r8)
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);

    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
  183fd0:	29400084 	addi	r5,r5,2
  183fd4:	31800084 	addi	r6,r6,2
  183fd8:	42000304 	addi	r8,r8,12
  183fdc:	39c00304 	addi	r7,r7,12
  183fe0:	10800304 	addi	r2,r2,12
  183fe4:	2b3fe41e 	bne	r5,r12,183f78 <__alt_data_end+0xfff83f78>
  183fe8:	00c00104 	movi	r3,4
  183fec:	d8c00115 	stw	r3,4(sp)
  183ff0:	0025883a 	mov	r18,zero
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
			if ((c[17] & 0x61) == 0x20)
  183ff4:	05800804 	movi	r22,32
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
			if ((c[17] & 0x61) == 0x40)
  183ff8:	05c01004 	movi	r23,64
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {

    	c = &edid_bin[0x36 + 18 * i];
  183ffc:	9009883a 	mov	r4,r18
  184000:	01400484 	movi	r5,18
  184004:	0187dd80 	call	187dd8 <__mulsi3>
  184008:	10800d84 	addi	r2,r2,54
  18400c:	88a1883a 	add	r16,r17,r2

        if ((c[0] != 0) || (c[1] != 0)) {
  184010:	80800003 	ldbu	r2,0(r16)
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;
  184014:	9009883a 	mov	r4,r18
  184018:	01415c04 	movi	r5,1392
    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {

    	c = &edid_bin[0x36 + 18 * i];

        if ((c[0] != 0) || (c[1] != 0)) {
  18401c:	1000021e 	bne	r2,zero,184028 <edid_decode_v14+0x910>
  184020:	80800043 	ldbu	r2,1(r16)
  184024:	1000d826 	beq	r2,zero,184388 <edid_decode_v14+0xc70>
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;
  184028:	0187dd80 	call	187dd8 <__mulsi3>
  18402c:	1027883a 	mov	r19,r2
  184030:	e085883a 	add	r2,fp,r2
  184034:	10009915 	stw	zero,612(r2)

            edid->descriptors[i].detailed_timing.pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
  184038:	80800043 	ldbu	r2,1(r16)
  18403c:	81000003 	ldbu	r4,0(r16)
  184040:	9d009b04 	addi	r20,r19,620
  184044:	1004923a 	slli	r2,r2,8
  184048:	0149c404 	movi	r5,10000
  18404c:	e529883a 	add	r20,fp,r20
  184050:	1108b03a 	or	r4,r2,r4
  184054:	0187dd80 	call	187dd8 <__mulsi3>
  184058:	a0800015 	stw	r2,0(r20)
            edid->descriptors[i].detailed_timing.width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
  18405c:	80800103 	ldbu	r2,4(r16)
  184060:	81000083 	ldbu	r4,2(r16)
  184064:	e4cb883a 	add	r5,fp,r19
  184068:	1004913a 	slli	r2,r2,4
            edid->descriptors[i].detailed_timing.border_lr = (int)c[15];
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
  18406c:	9cc0a904 	addi	r19,r19,676
  184070:	e4e7883a 	add	r19,fp,r19
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;

            edid->descriptors[i].detailed_timing.pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
            edid->descriptors[i].detailed_timing.width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
  184074:	1083c00c 	andi	r2,r2,3840
  184078:	1104b03a 	or	r2,r2,r4
  18407c:	28809c15 	stw	r2,624(r5)
            edid->descriptors[i].detailed_timing.height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
  184080:	808001c3 	ldbu	r2,7(r16)
  184084:	81000143 	ldbu	r4,5(r16)
  184088:	1004913a 	slli	r2,r2,4
  18408c:	1083c00c 	andi	r2,r2,3840
  184090:	1104b03a 	or	r2,r2,r4
  184094:	28809d15 	stw	r2,628(r5)
            edid->descriptors[i].detailed_timing.h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
  184098:	80800103 	ldbu	r2,4(r16)
  18409c:	810000c3 	ldbu	r4,3(r16)
  1840a0:	1004923a 	slli	r2,r2,8
  1840a4:	1083c00c 	andi	r2,r2,3840
  1840a8:	1104b03a 	or	r2,r2,r4
  1840ac:	28809e15 	stw	r2,632(r5)
            edid->descriptors[i].detailed_timing.v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
  1840b0:	808001c3 	ldbu	r2,7(r16)
  1840b4:	81000183 	ldbu	r4,6(r16)
  1840b8:	1004923a 	slli	r2,r2,8
  1840bc:	1083c00c 	andi	r2,r2,3840
  1840c0:	1104b03a 	or	r2,r2,r4
  1840c4:	28809f15 	stw	r2,636(r5)
            edid->descriptors[i].detailed_timing.h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
  1840c8:	808002c3 	ldbu	r2,11(r16)
  1840cc:	81000203 	ldbu	r4,8(r16)
  1840d0:	1085883a 	add	r2,r2,r2
  1840d4:	1085883a 	add	r2,r2,r2
  1840d8:	1080c00c 	andi	r2,r2,768
  1840dc:	1104b03a 	or	r2,r2,r4
  1840e0:	2880a015 	stw	r2,640(r5)
            edid->descriptors[i].detailed_timing.v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
  1840e4:	808002c3 	ldbu	r2,11(r16)
  1840e8:	81000283 	ldbu	r4,10(r16)
  1840ec:	1085883a 	add	r2,r2,r2
  1840f0:	2008d13a 	srli	r4,r4,4
  1840f4:	1085883a 	add	r2,r2,r2
  1840f8:	10800c0c 	andi	r2,r2,48
  1840fc:	1104b03a 	or	r2,r2,r4
  184100:	2880a115 	stw	r2,644(r5)
            edid->descriptors[i].detailed_timing.h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
  184104:	808002c3 	ldbu	r2,11(r16)
  184108:	81000243 	ldbu	r4,9(r16)
  18410c:	1004913a 	slli	r2,r2,4
  184110:	1080c00c 	andi	r2,r2,768
  184114:	1104b03a 	or	r2,r2,r4
  184118:	2880a215 	stw	r2,648(r5)
            edid->descriptors[i].detailed_timing.v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
  18411c:	808002c3 	ldbu	r2,11(r16)
  184120:	1004913a 	slli	r2,r2,4
  184124:	11000c0c 	andi	r4,r2,48
  184128:	80800283 	ldbu	r2,10(r16)
  18412c:	108003cc 	andi	r2,r2,15
  184130:	2084b03a 	or	r2,r4,r2
  184134:	2880a315 	stw	r2,652(r5)
            edid->descriptors[i].detailed_timing.h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
  184138:	80800383 	ldbu	r2,14(r16)
  18413c:	81000303 	ldbu	r4,12(r16)
  184140:	1004913a 	slli	r2,r2,4
  184144:	1083c00c 	andi	r2,r2,3840
  184148:	1104b03a 	or	r2,r2,r4
  18414c:	2880a415 	stw	r2,656(r5)
            edid->descriptors[i].detailed_timing.v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
  184150:	80800383 	ldbu	r2,14(r16)
  184154:	81000343 	ldbu	r4,13(r16)
  184158:	1004923a 	slli	r2,r2,8
  18415c:	1083c00c 	andi	r2,r2,3840
  184160:	1104b03a 	or	r2,r2,r4
  184164:	2880a515 	stw	r2,660(r5)
            edid->descriptors[i].detailed_timing.border_lr = (int)c[15];
  184168:	810003c3 	ldbu	r4,15(r16)
  18416c:	2900a615 	stw	r4,664(r5)
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];
  184170:	81000403 	ldbu	r4,16(r16)
  184174:	2900a715 	stw	r4,668(r5)

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;
  184178:	80800447 	ldb	r2,17(r16)
  18417c:	1004d7fa 	srli	r2,r2,31
  184180:	2880a815 	stw	r2,672(r5)

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
  184184:	98000015 	stw	zero,0(r19)
			if ((c[17] & 0x61) == 0x20)
  184188:	80800443 	ldbu	r2,17(r16)
  18418c:	1080184c 	andi	r2,r2,97
  184190:	1580021e 	bne	r2,r22,18419c <edid_decode_v14+0xa84>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
  184194:	00800084 	movi	r2,2
  184198:	98800015 	stw	r2,0(r19)
			if ((c[17] & 0x61) == 0x40)
  18419c:	80800443 	ldbu	r2,17(r16)
  1841a0:	1080184c 	andi	r2,r2,97
  1841a4:	15c0081e 	bne	r2,r23,1841c8 <edid_decode_v14+0xab0>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
  1841a8:	9009883a 	mov	r4,r18
  1841ac:	01415c04 	movi	r5,1392
  1841b0:	0187dd80 	call	187dd8 <__mulsi3>
  1841b4:	1080a904 	addi	r2,r2,676
  1841b8:	e085883a 	add	r2,fp,r2
  1841bc:	11000017 	ldw	r4,0(r2)
  1841c0:	21000114 	ori	r4,r4,4
  1841c4:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x21)
  1841c8:	80800443 	ldbu	r2,17(r16)
  1841cc:	00c00844 	movi	r3,33
  1841d0:	1080184c 	andi	r2,r2,97
  1841d4:	10c0081e 	bne	r2,r3,1841f8 <edid_decode_v14+0xae0>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
  1841d8:	9009883a 	mov	r4,r18
  1841dc:	01415c04 	movi	r5,1392
  1841e0:	0187dd80 	call	187dd8 <__mulsi3>
  1841e4:	1080a904 	addi	r2,r2,676
  1841e8:	e085883a 	add	r2,fp,r2
  1841ec:	11000017 	ldw	r4,0(r2)
  1841f0:	21000214 	ori	r4,r4,8
  1841f4:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x41)
  1841f8:	80800443 	ldbu	r2,17(r16)
  1841fc:	01001044 	movi	r4,65
  184200:	1080184c 	andi	r2,r2,97
  184204:	1100081e 	bne	r2,r4,184228 <edid_decode_v14+0xb10>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
  184208:	9009883a 	mov	r4,r18
  18420c:	01415c04 	movi	r5,1392
  184210:	0187dd80 	call	187dd8 <__mulsi3>
  184214:	1080a904 	addi	r2,r2,676
  184218:	e085883a 	add	r2,fp,r2
  18421c:	11000017 	ldw	r4,0(r2)
  184220:	21000414 	ori	r4,r4,16
  184224:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x60)
  184228:	80800443 	ldbu	r2,17(r16)
  18422c:	01001804 	movi	r4,96
  184230:	1080184c 	andi	r2,r2,97
  184234:	1100081e 	bne	r2,r4,184258 <edid_decode_v14+0xb40>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
  184238:	9009883a 	mov	r4,r18
  18423c:	01415c04 	movi	r5,1392
  184240:	0187dd80 	call	187dd8 <__mulsi3>
  184244:	1080a904 	addi	r2,r2,676
  184248:	e085883a 	add	r2,fp,r2
  18424c:	11000017 	ldw	r4,0(r2)
  184250:	21000814 	ori	r4,r4,32
  184254:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x61)
  184258:	80800443 	ldbu	r2,17(r16)
  18425c:	01001844 	movi	r4,97
  184260:	1080184c 	andi	r2,r2,97
  184264:	1100081e 	bne	r2,r4,184288 <edid_decode_v14+0xb70>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
  184268:	9009883a 	mov	r4,r18
  18426c:	01415c04 	movi	r5,1392
  184270:	0187dd80 	call	187dd8 <__mulsi3>
  184274:	1080a904 	addi	r2,r2,676
  184278:	e085883a 	add	r2,fp,r2
  18427c:	11000017 	ldw	r4,0(r2)
  184280:	21001014 	ori	r4,r4,64
  184284:	11000015 	stw	r4,0(r2)

			edid->descriptors[i].detailed_timing.sync = 0;
  184288:	9009883a 	mov	r4,r18
  18428c:	01415c04 	movi	r5,1392
  184290:	0187dd80 	call	187dd8 <__mulsi3>
  184294:	1080aa04 	addi	r2,r2,680
  184298:	e085883a 	add	r2,fp,r2
  18429c:	10000015 	stw	zero,0(r2)
            if (c[17] & 0x10) {
  1842a0:	81000443 	ldbu	r4,17(r16)
  1842a4:	2140040c 	andi	r5,r4,16
  1842a8:	28002226 	beq	r5,zero,184334 <edid_decode_v14+0xc1c>
                if (c[17] & 0x08) {
  1842ac:	2100020c 	andi	r4,r4,8
  1842b0:	20001a26 	beq	r4,zero,18431c <edid_decode_v14+0xc04>
                	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_SYNC;
  1842b4:	01002004 	movi	r4,128
  1842b8:	11000015 	stw	r4,0(r2)

                	if (c[17] & 0x04)
  1842bc:	81000443 	ldbu	r4,17(r16)
  1842c0:	2100010c 	andi	r4,r4,4
  1842c4:	20000226 	beq	r4,zero,1842d0 <edid_decode_v14+0xbb8>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_P;
  1842c8:	0100a004 	movi	r4,640
  1842cc:	00000106 	br	1842d4 <edid_decode_v14+0xbbc>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;
  1842d0:	01006004 	movi	r4,384
  1842d4:	11000015 	stw	r4,0(r2)

                	if (c[17] & 0x02)
  1842d8:	80800443 	ldbu	r2,17(r16)
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
  1842dc:	9009883a 	mov	r4,r18
  1842e0:	01415c04 	movi	r5,1392
                	if (c[17] & 0x04)
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_P;
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;

                	if (c[17] & 0x02)
  1842e4:	1080008c 	andi	r2,r2,2
  1842e8:	10000626 	beq	r2,zero,184304 <edid_decode_v14+0xbec>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
  1842ec:	0187dd80 	call	187dd8 <__mulsi3>
  1842f0:	1080aa04 	addi	r2,r2,680
  1842f4:	e085883a 	add	r2,fp,r2
  1842f8:	11000017 	ldw	r4,0(r2)
  1842fc:	21020014 	ori	r4,r4,2048
  184300:	00001d06 	br	184378 <edid_decode_v14+0xc60>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_N;
  184304:	0187dd80 	call	187dd8 <__mulsi3>
  184308:	1080aa04 	addi	r2,r2,680
  18430c:	e085883a 	add	r2,fp,r2
  184310:	11000017 	ldw	r4,0(r2)
  184314:	21010014 	ori	r4,r4,1024
  184318:	00001706 	br	184378 <edid_decode_v14+0xc60>
                } else {
                	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SYNC;
  18431c:	15800015 	stw	r22,0(r2)
                	if (c[17] & 0x04)
  184320:	81000443 	ldbu	r4,17(r16)
  184324:	2100010c 	andi	r4,r4,4
  184328:	2004ec26 	beq	r4,zero,1856dc <edid_decode_v14+0x1fc4>
                    	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SERRATION;
  18432c:	01001804 	movi	r4,96
  184330:	00001106 	br	184378 <edid_decode_v14+0xc60>
                }
            } else {
            	if (c[17] & 0x80) {
  184334:	21003fcc 	andi	r4,r4,255
  184338:	2100201c 	xori	r4,r4,128
  18433c:	213fe004 	addi	r4,r4,-128
  184340:	20000f0e 	bge	r4,zero,184380 <edid_decode_v14+0xc68>
            		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_COMPOSITE_SYNC;
  184344:	01000084 	movi	r4,2
  184348:	11000015 	stw	r4,0(r2)
            		if (c[17] & 0x40) {
  18434c:	81000443 	ldbu	r4,17(r16)
  184350:	2100100c 	andi	r4,r4,64
  184354:	2004e126 	beq	r4,zero,1856dc <edid_decode_v14+0x1fc4>
                		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION;
  184358:	01000184 	movi	r4,6
  18435c:	11000015 	stw	r4,0(r2)
                		if (c[17] & 0x20)
  184360:	81000443 	ldbu	r4,17(r16)
  184364:	2100080c 	andi	r4,r4,32
  184368:	20000226 	beq	r4,zero,184374 <edid_decode_v14+0xc5c>
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
  18436c:	01000584 	movi	r4,22
  184370:	00000106 	br	184378 <edid_decode_v14+0xc60>
                		else
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_G;
  184374:	01000384 	movi	r4,14
  184378:	11000015 	stw	r4,0(r2)
  18437c:	0004d706 	br	1856dc <edid_decode_v14+0x1fc4>
            		}
            	} else {
            		edid->descriptors[i].detailed_timing.sync |= A_COMPOSITE_SYNC;
  184380:	01000044 	movi	r4,1
  184384:	003ffc06 	br	184378 <__alt_data_end+0xfff84378>
            }

        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;
  184388:	0187dd80 	call	187dd8 <__mulsi3>
  18438c:	1027883a 	mov	r19,r2
  184390:	05000044 	movi	r20,1
  184394:	e085883a 	add	r2,fp,r2
  184398:	15009915 	stw	r20,612(r2)

        	switch (c[3]) {  // tag
  18439c:	808000c3 	ldbu	r2,3(r16)
  1843a0:	01003e84 	movi	r4,250
  1843a4:	11023026 	beq	r2,r4,184c68 <edid_decode_v14+0x1550>
  1843a8:	20803136 	bltu	r4,r2,184470 <edid_decode_v14+0xd58>
  1843ac:	01003dc4 	movi	r4,247
  1843b0:	1102b526 	beq	r2,r4,184e88 <edid_decode_v14+0x1770>
  1843b4:	20800536 	bltu	r4,r2,1843cc <edid_decode_v14+0xcb4>
  1843b8:	01000404 	movi	r4,16
  1843bc:	1104c71e 	bne	r2,r4,1856dc <edid_decode_v14+0x1fc4>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 5 * 8], 1920, 1440, 65, c[11] & 0x20);
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 5 * 8], 1920, 1440, 75, c[11] & 0x10);
                break;

            case 0x10:
            	edid->descriptors[i].tag = DTAG_DUMMY;
  1843c0:	e4e7883a 	add	r19,fp,r19
  1843c4:	98809a15 	stw	r2,616(r19)
                break;
  1843c8:	0004c406 	br	1856dc <edid_decode_v14+0x1fc4>
        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
  1843cc:	01003e04 	movi	r4,248
  1843d0:	11024a26 	beq	r2,r4,184cfc <edid_decode_v14+0x15e4>
  1843d4:	01003e44 	movi	r4,249
  1843d8:	1104c01e 	bne	r2,r4,1856dc <edid_decode_v14+0x1fc4>

                break;

            case 0xf9:
            	// display color management data
            	edid->descriptors[i].tag = DTAG_DCM_DATA;
  1843dc:	e4c9883a 	add	r4,fp,r19
  1843e0:	20809a15 	stw	r2,616(r4)

            	edid->descriptors[i].dcm.ver = c[5];
  1843e4:	2005883a 	mov	r2,r4
  1843e8:	81000143 	ldbu	r4,5(r16)
            	edid->descriptors[i].dcm.r_a2 = ((u32)c[9] << 8) | (u32)c[8];
  1843ec:	100b883a 	mov	r5,r2

            case 0xf9:
            	// display color management data
            	edid->descriptors[i].tag = DTAG_DCM_DATA;

            	edid->descriptors[i].dcm.ver = c[5];
  1843f0:	1100be15 	stw	r4,760(r2)
            	edid->descriptors[i].dcm.r_a2 = ((u32)c[9] << 8) | (u32)c[8];
  1843f4:	80800243 	ldbu	r2,9(r16)
  1843f8:	1008923a 	slli	r4,r2,8
  1843fc:	80800203 	ldbu	r2,8(r16)
  184400:	2084b03a 	or	r2,r4,r2
  184404:	2880bf15 	stw	r2,764(r5)
            	edid->descriptors[i].dcm.r_a3 = ((u32)c[7] << 8) | (u32)c[6];
  184408:	808001c3 	ldbu	r2,7(r16)
  18440c:	1008923a 	slli	r4,r2,8
  184410:	80800183 	ldbu	r2,6(r16)
  184414:	2084b03a 	or	r2,r4,r2
  184418:	2880c015 	stw	r2,768(r5)
            	edid->descriptors[i].dcm.g_a2 = ((u32)c[13] << 8) | (u32)c[12];
  18441c:	80800343 	ldbu	r2,13(r16)
  184420:	1008923a 	slli	r4,r2,8
  184424:	80800303 	ldbu	r2,12(r16)
  184428:	2084b03a 	or	r2,r4,r2
  18442c:	2880c115 	stw	r2,772(r5)
            	edid->descriptors[i].dcm.g_a3 = ((u32)c[11] << 8) | (u32)c[10];
  184430:	808002c3 	ldbu	r2,11(r16)
  184434:	1008923a 	slli	r4,r2,8
  184438:	80800283 	ldbu	r2,10(r16)
  18443c:	2084b03a 	or	r2,r4,r2
  184440:	2880c215 	stw	r2,776(r5)
            	edid->descriptors[i].dcm.b_a2 = ((u32)c[17] << 8) | (u32)c[16];
  184444:	80800443 	ldbu	r2,17(r16)
  184448:	1008923a 	slli	r4,r2,8
  18444c:	80800403 	ldbu	r2,16(r16)
  184450:	2084b03a 	or	r2,r4,r2
  184454:	2880c315 	stw	r2,780(r5)
            	edid->descriptors[i].dcm.b_a3 = ((u32)c[15] << 8) | (u32)c[14];
  184458:	808003c3 	ldbu	r2,15(r16)
  18445c:	1008923a 	slli	r4,r2,8
  184460:	80800383 	ldbu	r2,14(r16)
  184464:	2084b03a 	or	r2,r4,r2
  184468:	2880c415 	stw	r2,784(r5)

            	break;
  18446c:	00049b06 	br	1856dc <edid_decode_v14+0x1fc4>
        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
  184470:	01003f44 	movi	r4,253
  184474:	11003c26 	beq	r2,r4,184568 <edid_decode_v14+0xe50>
  184478:	20801136 	bltu	r4,r2,1844c0 <edid_decode_v14+0xda8>
  18447c:	01003ec4 	movi	r4,251
  184480:	1101ac26 	beq	r2,r4,184b34 <edid_decode_v14+0x141c>
  184484:	01003f04 	movi	r4,252
  184488:	1104941e 	bne	r2,r4,1856dc <edid_decode_v14+0x1fc4>
                }

                break;

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
  18448c:	e4c9883a 	add	r4,fp,r19
  184490:	20809a15 	stw	r2,616(r4)
            	edid->descriptors[i].prod_name[18] = 0;
  184494:	20009f85 	stb	zero,638(r4)
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
  184498:	99009b04 	addi	r4,r19,620
  18449c:	e10f883a 	add	r7,fp,r4
  1844a0:	3809883a 	mov	r4,r7
  1844a4:	81400144 	addi	r5,r16,5
  1844a8:	01800344 	movi	r6,13
  1844ac:	0188e800 	call	188e80 <memcpy>
  1844b0:	1009883a 	mov	r4,r2
                for (s = 0; s < 18-5; ++s) {
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
  1844b4:	01400284 	movi	r5,10
  1844b8:	9cc09e44 	addi	r19,r19,633
  1844bc:	00019906 	br	184b24 <edid_decode_v14+0x140c>
        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
  1844c0:	01003f84 	movi	r4,254
  1844c4:	11001526 	beq	r2,r4,18451c <edid_decode_v14+0xe04>
  1844c8:	01003fc4 	movi	r4,255
  1844cc:	1104831e 	bne	r2,r4,1856dc <edid_decode_v14+0x1fc4>
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
  1844d0:	e4c9883a 	add	r4,fp,r19
  1844d4:	20809a15 	stw	r2,616(r4)
            	edid->descriptors[i].serial[18] = 0;
  1844d8:	20009f85 	stb	zero,638(r4)
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
  1844dc:	99009b04 	addi	r4,r19,620
  1844e0:	e10f883a 	add	r7,fp,r4
  1844e4:	3809883a 	mov	r4,r7
  1844e8:	81400144 	addi	r5,r16,5
  1844ec:	01800344 	movi	r6,13
  1844f0:	0188e800 	call	188e80 <memcpy>
  1844f4:	1009883a 	mov	r4,r2
                for (s = 0; s < 18-5; ++s) {
                    if (edid->descriptors[i].serial[s] == 0x0a) {
  1844f8:	01400284 	movi	r5,10
  1844fc:	9cc09e44 	addi	r19,r19,633
  184500:	20800007 	ldb	r2,0(r4)
  184504:	1140011e 	bne	r2,r5,18450c <edid_decode_v14+0xdf4>
                    	edid->descriptors[i].serial[s] = 0;
  184508:	20000005 	stb	zero,0(r4)
  18450c:	21000044 	addi	r4,r4,1
  184510:	24c5c83a 	sub	r2,r4,r19
        	switch (c[3]) {  // tag
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
            	edid->descriptors[i].serial[18] = 0;
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
  184514:	173ffa1e 	bne	r2,fp,184500 <__alt_data_end+0xfff84500>
  184518:	00047006 	br	1856dc <edid_decode_v14+0x1fc4>
                    }
                }
                break;

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
  18451c:	e4c9883a 	add	r4,fp,r19
  184520:	20809a15 	stw	r2,616(r4)
            	edid->descriptors[i].string[18] = 0;
  184524:	20009f85 	stb	zero,638(r4)
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
  184528:	99009b04 	addi	r4,r19,620
  18452c:	e10f883a 	add	r7,fp,r4
  184530:	3809883a 	mov	r4,r7
  184534:	81400144 	addi	r5,r16,5
  184538:	01800344 	movi	r6,13
  18453c:	0188e800 	call	188e80 <memcpy>
  184540:	1009883a 	mov	r4,r2
                for (s = 0; s < 18-5; ++s) {
                    if (edid->descriptors[i].string[s] == 0x0a) {
  184544:	01400284 	movi	r5,10
  184548:	9cc09e44 	addi	r19,r19,633
  18454c:	20800007 	ldb	r2,0(r4)
  184550:	1140011e 	bne	r2,r5,184558 <edid_decode_v14+0xe40>
                    	edid->descriptors[i].string[s] = 0;
  184554:	20000005 	stb	zero,0(r4)
  184558:	21000044 	addi	r4,r4,1
  18455c:	24c5c83a 	sub	r2,r4,r19

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
            	edid->descriptors[i].string[18] = 0;
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
  184560:	173ffa1e 	bne	r2,fp,18454c <__alt_data_end+0xfff8454c>
  184564:	00045d06 	br	1856dc <edid_decode_v14+0x1fc4>
                    }
                }
                break;

            case 0xfd:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
  184568:	e4c9883a 	add	r4,fp,r19

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;
  18456c:	9cc09c04 	addi	r19,r19,624
                    }
                }
                break;

            case 0xfd:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
  184570:	20809a15 	stw	r2,616(r4)

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;
  184574:	e4e7883a 	add	r19,fp,r19
  184578:	98000015 	stw	zero,0(r19)

            	switch (c[4] & 0xfc) {
  18457c:	80800103 	ldbu	r2,4(r16)
  184580:	01000204 	movi	r4,8
  184584:	10803f0c 	andi	r2,r2,252
  184588:	11000526 	beq	r2,r4,1845a0 <edid_decode_v14+0xe88>
  18458c:	01000304 	movi	r4,12
  184590:	1100041e 	bne	r2,r4,1845a4 <edid_decode_v14+0xe8c>
                case 0x08:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_ZERO;
                    break;
                case 0x0c:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_255;
  184594:	00800084 	movi	r2,2
  184598:	98800015 	stw	r2,0(r19)
                    break;
  18459c:	00000106 	br	1845a4 <edid_decode_v14+0xe8c>

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;

            	switch (c[4] & 0xfc) {
                case 0x08:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_ZERO;
  1845a0:	9d000015 	stw	r20,0(r19)
                case 0x0c:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_255;
                    break;
                }

            	edid->descriptors[i].range_limits.v_offset = VRO_ZERO;
  1845a4:	9009883a 	mov	r4,r18
  1845a8:	01415c04 	movi	r5,1392
  1845ac:	0187dd80 	call	187dd8 <__mulsi3>
  1845b0:	10809b04 	addi	r2,r2,620
  1845b4:	e085883a 	add	r2,fp,r2
  1845b8:	10000015 	stw	zero,0(r2)

                switch (c[4] & 0xf3) {
  1845bc:	81000103 	ldbu	r4,4(r16)
  1845c0:	01400084 	movi	r5,2
  1845c4:	21003ccc 	andi	r4,r4,243
  1845c8:	21400426 	beq	r4,r5,1845dc <edid_decode_v14+0xec4>
  1845cc:	018000c4 	movi	r6,3
  1845d0:	2180041e 	bne	r4,r6,1845e4 <edid_decode_v14+0xecc>
                case 0x02:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_ZERO;
                    break;
                case 0x03:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_255;
  1845d4:	11400015 	stw	r5,0(r2)
                    break;
  1845d8:	00000206 	br	1845e4 <edid_decode_v14+0xecc>

            	edid->descriptors[i].range_limits.v_offset = VRO_ZERO;

                switch (c[4] & 0xf3) {
                case 0x02:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_ZERO;
  1845dc:	01000044 	movi	r4,1
  1845e0:	11000015 	stw	r4,0(r2)
                case 0x03:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_255;
                    break;
                }

                if (c[5] != 0) {
  1845e4:	84c00143 	ldbu	r19,5(r16)
  1845e8:	98001026 	beq	r19,zero,18462c <edid_decode_v14+0xf14>
					if ((c[4] & 0x03) == 0x03)
  1845ec:	80800103 	ldbu	r2,4(r16)
  1845f0:	010000c4 	movi	r4,3
  1845f4:	108000cc 	andi	r2,r2,3
  1845f8:	1100061e 	bne	r2,r4,184614 <edid_decode_v14+0xefc>
						edid->descriptors[i].range_limits.v_min = c[5] + 255;
  1845fc:	9009883a 	mov	r4,r18
  184600:	01415c04 	movi	r5,1392
  184604:	0187dd80 	call	187dd8 <__mulsi3>
  184608:	e085883a 	add	r2,fp,r2
  18460c:	9cc03fc4 	addi	r19,r19,255
  184610:	00000406 	br	184624 <edid_decode_v14+0xf0c>
					else
						edid->descriptors[i].range_limits.v_min = c[5];
  184614:	9009883a 	mov	r4,r18
  184618:	01415c04 	movi	r5,1392
  18461c:	0187dd80 	call	187dd8 <__mulsi3>
  184620:	e085883a 	add	r2,fp,r2
  184624:	14c09d15 	stw	r19,628(r2)
  184628:	00000506 	br	184640 <edid_decode_v14+0xf28>
                } else {
                	edid->descriptors[i].range_limits.v_min = 0;
  18462c:	9009883a 	mov	r4,r18
  184630:	01415c04 	movi	r5,1392
  184634:	0187dd80 	call	187dd8 <__mulsi3>
  184638:	e085883a 	add	r2,fp,r2
  18463c:	10009d15 	stw	zero,628(r2)
                }

                if (c[6] != 0) {
  184640:	84c00183 	ldbu	r19,6(r16)
  184644:	98000d26 	beq	r19,zero,18467c <edid_decode_v14+0xf64>
					if ((c[4] & 0x02) == 0x02)
  184648:	80800103 	ldbu	r2,4(r16)
						edid->descriptors[i].range_limits.v_max = c[6] + 255;
  18464c:	9009883a 	mov	r4,r18
  184650:	01415c04 	movi	r5,1392
                } else {
                	edid->descriptors[i].range_limits.v_min = 0;
                }

                if (c[6] != 0) {
					if ((c[4] & 0x02) == 0x02)
  184654:	1080008c 	andi	r2,r2,2
  184658:	10000426 	beq	r2,zero,18466c <edid_decode_v14+0xf54>
						edid->descriptors[i].range_limits.v_max = c[6] + 255;
  18465c:	0187dd80 	call	187dd8 <__mulsi3>
  184660:	e085883a 	add	r2,fp,r2
  184664:	9cc03fc4 	addi	r19,r19,255
  184668:	00000206 	br	184674 <edid_decode_v14+0xf5c>
					else
						edid->descriptors[i].range_limits.v_max = c[6];
  18466c:	0187dd80 	call	187dd8 <__mulsi3>
  184670:	e085883a 	add	r2,fp,r2
  184674:	14c09e15 	stw	r19,632(r2)
  184678:	00000506 	br	184690 <edid_decode_v14+0xf78>
                } else {
                	edid->descriptors[i].range_limits.v_max = 0;
  18467c:	9009883a 	mov	r4,r18
  184680:	01415c04 	movi	r5,1392
  184684:	0187dd80 	call	187dd8 <__mulsi3>
  184688:	e085883a 	add	r2,fp,r2
  18468c:	10009e15 	stw	zero,632(r2)
                }

                if (c[7] != 0) {
  184690:	84c001c3 	ldbu	r19,7(r16)
  184694:	98001026 	beq	r19,zero,1846d8 <edid_decode_v14+0xfc0>
					if ((c[4] & 0x0c) == 0x0c)
  184698:	80800103 	ldbu	r2,4(r16)
  18469c:	01000304 	movi	r4,12
  1846a0:	1080030c 	andi	r2,r2,12
  1846a4:	1100061e 	bne	r2,r4,1846c0 <edid_decode_v14+0xfa8>
						edid->descriptors[i].range_limits.h_min = c[7] + 255;
  1846a8:	9009883a 	mov	r4,r18
  1846ac:	01415c04 	movi	r5,1392
  1846b0:	0187dd80 	call	187dd8 <__mulsi3>
  1846b4:	e085883a 	add	r2,fp,r2
  1846b8:	9cc03fc4 	addi	r19,r19,255
  1846bc:	00000406 	br	1846d0 <edid_decode_v14+0xfb8>
					else
						edid->descriptors[i].range_limits.h_min = c[7];
  1846c0:	9009883a 	mov	r4,r18
  1846c4:	01415c04 	movi	r5,1392
  1846c8:	0187dd80 	call	187dd8 <__mulsi3>
  1846cc:	e085883a 	add	r2,fp,r2
  1846d0:	14c09f15 	stw	r19,636(r2)
  1846d4:	00000506 	br	1846ec <edid_decode_v14+0xfd4>
                } else {
                	edid->descriptors[i].range_limits.h_min = 0;
  1846d8:	9009883a 	mov	r4,r18
  1846dc:	01415c04 	movi	r5,1392
  1846e0:	0187dd80 	call	187dd8 <__mulsi3>
  1846e4:	e085883a 	add	r2,fp,r2
  1846e8:	10009f15 	stw	zero,636(r2)
                }

                if (c[8] != 0) {
  1846ec:	84c00203 	ldbu	r19,8(r16)
  1846f0:	98000d26 	beq	r19,zero,184728 <edid_decode_v14+0x1010>
					if ((c[4] & 0x08) == 0x08)
  1846f4:	80800103 	ldbu	r2,4(r16)
						edid->descriptors[i].range_limits.h_max = c[8] + 255;
  1846f8:	9009883a 	mov	r4,r18
  1846fc:	01415c04 	movi	r5,1392
                } else {
                	edid->descriptors[i].range_limits.h_min = 0;
                }

                if (c[8] != 0) {
					if ((c[4] & 0x08) == 0x08)
  184700:	1080020c 	andi	r2,r2,8
  184704:	10000426 	beq	r2,zero,184718 <edid_decode_v14+0x1000>
						edid->descriptors[i].range_limits.h_max = c[8] + 255;
  184708:	0187dd80 	call	187dd8 <__mulsi3>
  18470c:	e085883a 	add	r2,fp,r2
  184710:	9cc03fc4 	addi	r19,r19,255
  184714:	00000206 	br	184720 <edid_decode_v14+0x1008>
					else
						edid->descriptors[i].range_limits.h_max = c[8];
  184718:	0187dd80 	call	187dd8 <__mulsi3>
  18471c:	e085883a 	add	r2,fp,r2
  184720:	14c0a015 	stw	r19,640(r2)
  184724:	00000506 	br	18473c <edid_decode_v14+0x1024>
                } else {
                	edid->descriptors[i].range_limits.h_max = 0;
  184728:	9009883a 	mov	r4,r18
  18472c:	01415c04 	movi	r5,1392
  184730:	0187dd80 	call	187dd8 <__mulsi3>
  184734:	e085883a 	add	r2,fp,r2
  184738:	1000a015 	stw	zero,640(r2)
                }

                edid->descriptors[i].range_limits.p_max = c[9] * 10;
  18473c:	9009883a 	mov	r4,r18
  184740:	01415c04 	movi	r5,1392
  184744:	0187dd80 	call	187dd8 <__mulsi3>
  184748:	81000243 	ldbu	r4,9(r16)
  18474c:	01400284 	movi	r5,10
  184750:	1027883a 	mov	r19,r2
  184754:	1500a104 	addi	r20,r2,644
  184758:	0187dd80 	call	187dd8 <__mulsi3>
  18475c:	e529883a 	add	r20,fp,r20

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;
  184760:	9900a204 	addi	r4,r19,648
						edid->descriptors[i].range_limits.h_max = c[8];
                } else {
                	edid->descriptors[i].range_limits.h_max = 0;
                }

                edid->descriptors[i].range_limits.p_max = c[9] * 10;
  184764:	a0800015 	stw	r2,0(r20)

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;
  184768:	e109883a 	add	r4,fp,r4
  18476c:	20000015 	stw	zero,0(r4)

            	if ((c[10] == 0) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
  184770:	80800283 	ldbu	r2,10(r16)
  184774:	1003d926 	beq	r2,zero,1856dc <edid_decode_v14+0x1fc4>

            		edid->descriptors[i].range_limits.timing_flags |= TF_DEFAULT_GTF;

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
  184778:	01400104 	movi	r5,4
  18477c:	1140cc1e 	bne	r2,r5,184ab0 <edid_decode_v14+0x1398>
  184780:	e1401217 	ldw	r5,72(fp)
  184784:	2942000c 	andi	r5,r5,2048
  184788:	2803d426 	beq	r5,zero,1856dc <edid_decode_v14+0x1fc4>

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;
  18478c:	20800015 	stw	r2,0(r4)

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
  184790:	808002c3 	ldbu	r2,11(r16)
  184794:	e4c9883a 	add	r4,fp,r19
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
  184798:	9d00a504 	addi	r20,r19,660

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
  18479c:	1004d13a 	srli	r2,r2,4
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
  1847a0:	e529883a 	add	r20,fp,r20
  1847a4:	9cc0a604 	addi	r19,r19,664

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
  1847a8:	2080a315 	stw	r2,652(r4)
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;
  1847ac:	808002c3 	ldbu	r2,11(r16)

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
                    if (c[13] != 0)
                    	edid->descriptors[i].range_limits.cvt.line_max = ((((u32)c[12] & 0x03) << 8) | (u32)c[13]) * 8;
  1847b0:	e4e7883a 	add	r19,fp,r19
            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;
  1847b4:	108003cc 	andi	r2,r2,15
  1847b8:	2080a415 	stw	r2,656(r4)

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
  1847bc:	81000303 	ldbu	r4,12(r16)
  1847c0:	2008d0ba 	srli	r4,r4,2
  1847c4:	0188b800 	call	188b80 <__floatunsisf>
  1847c8:	1009883a 	mov	r4,r2
  1847cc:	014fa034 	movhi	r5,16000
  1847d0:	01887300 	call	188730 <__mulsf3>
  1847d4:	a0800015 	stw	r2,0(r20)
                    if (c[13] != 0)
  1847d8:	80800343 	ldbu	r2,13(r16)
  1847dc:	10000726 	beq	r2,zero,1847fc <edid_decode_v14+0x10e4>
                    	edid->descriptors[i].range_limits.cvt.line_max = ((((u32)c[12] & 0x03) << 8) | (u32)c[13]) * 8;
  1847e0:	81000303 	ldbu	r4,12(r16)
  1847e4:	210000cc 	andi	r4,r4,3
  1847e8:	2008923a 	slli	r4,r4,8
  1847ec:	2084b03a 	or	r2,r4,r2
  1847f0:	100490fa 	slli	r2,r2,3
  1847f4:	98800015 	stw	r2,0(r19)
  1847f8:	00000106 	br	184800 <edid_decode_v14+0x10e8>
                    else
                    	edid->descriptors[i].range_limits.cvt.line_max = 0;
  1847fc:	98000015 	stw	zero,0(r19)

                    edid->descriptors[i].range_limits.cvt.aspect_ratios = 0;
  184800:	9009883a 	mov	r4,r18
  184804:	01415c04 	movi	r5,1392
  184808:	0187dd80 	call	187dd8 <__mulsi3>
  18480c:	1080a704 	addi	r2,r2,668
  184810:	e085883a 	add	r2,fp,r2
  184814:	10000015 	stw	zero,0(r2)
                    if (c[14] & 0x80)
  184818:	81000387 	ldb	r4,14(r16)
  18481c:	2000020e 	bge	r4,zero,184828 <edid_decode_v14+0x1110>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_4_3;
  184820:	01000044 	movi	r4,1
  184824:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x40)
  184828:	80800383 	ldbu	r2,14(r16)
  18482c:	1080100c 	andi	r2,r2,64
  184830:	10000826 	beq	r2,zero,184854 <edid_decode_v14+0x113c>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_9;
  184834:	9009883a 	mov	r4,r18
  184838:	01415c04 	movi	r5,1392
  18483c:	0187dd80 	call	187dd8 <__mulsi3>
  184840:	1080a704 	addi	r2,r2,668
  184844:	e085883a 	add	r2,fp,r2
  184848:	11000017 	ldw	r4,0(r2)
  18484c:	21000094 	ori	r4,r4,2
  184850:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x20)
  184854:	80800383 	ldbu	r2,14(r16)
  184858:	1080080c 	andi	r2,r2,32
  18485c:	10000826 	beq	r2,zero,184880 <edid_decode_v14+0x1168>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_10;
  184860:	9009883a 	mov	r4,r18
  184864:	01415c04 	movi	r5,1392
  184868:	0187dd80 	call	187dd8 <__mulsi3>
  18486c:	1080a704 	addi	r2,r2,668
  184870:	e085883a 	add	r2,fp,r2
  184874:	11000017 	ldw	r4,0(r2)
  184878:	21000114 	ori	r4,r4,4
  18487c:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x10)
  184880:	80800383 	ldbu	r2,14(r16)
  184884:	1080040c 	andi	r2,r2,16
  184888:	10000826 	beq	r2,zero,1848ac <edid_decode_v14+0x1194>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_5_4;
  18488c:	9009883a 	mov	r4,r18
  184890:	01415c04 	movi	r5,1392
  184894:	0187dd80 	call	187dd8 <__mulsi3>
  184898:	1080a704 	addi	r2,r2,668
  18489c:	e085883a 	add	r2,fp,r2
  1848a0:	11000017 	ldw	r4,0(r2)
  1848a4:	21000214 	ori	r4,r4,8
  1848a8:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x08)
  1848ac:	80800383 	ldbu	r2,14(r16)
  1848b0:	1080020c 	andi	r2,r2,8
  1848b4:	10000826 	beq	r2,zero,1848d8 <edid_decode_v14+0x11c0>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;
  1848b8:	9009883a 	mov	r4,r18
  1848bc:	01415c04 	movi	r5,1392
  1848c0:	0187dd80 	call	187dd8 <__mulsi3>
  1848c4:	1080a704 	addi	r2,r2,668
  1848c8:	e085883a 	add	r2,fp,r2
  1848cc:	11000017 	ldw	r4,0(r2)
  1848d0:	21000414 	ori	r4,r4,16
  1848d4:	11000015 	stw	r4,0(r2)

                    switch (c[15] & 0xe0) {
  1848d8:	808003c3 	ldbu	r2,15(r16)
  1848dc:	1080380c 	andi	r2,r2,224
  1848e0:	15c01926 	beq	r2,r23,184948 <edid_decode_v14+0x1230>
  1848e4:	b8800836 	bltu	r23,r2,184908 <edid_decode_v14+0x11f0>
  1848e8:	10001126 	beq	r2,zero,184930 <edid_decode_v14+0x1218>
  1848ec:	1580231e 	bne	r2,r22,18497c <edid_decode_v14+0x1264>
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
                        break;
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
  1848f0:	9009883a 	mov	r4,r18
  1848f4:	01415c04 	movi	r5,1392
  1848f8:	0187dd80 	call	187dd8 <__mulsi3>
  1848fc:	e085883a 	add	r2,fp,r2
  184900:	01000084 	movi	r4,2
  184904:	00001506 	br	18495c <edid_decode_v14+0x1244>
                    if (c[14] & 0x10)
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_5_4;
                    if (c[14] & 0x08)
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;

                    switch (c[15] & 0xe0) {
  184908:	01001804 	movi	r4,96
  18490c:	11001526 	beq	r2,r4,184964 <edid_decode_v14+0x124c>
  184910:	01002004 	movi	r4,128
  184914:	1100191e 	bne	r2,r4,18497c <edid_decode_v14+0x1264>
                        break;
                    case 0x60:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_5_4;
                        break;
                    case 0x80:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_15_9;
  184918:	9009883a 	mov	r4,r18
  18491c:	01415c04 	movi	r5,1392
  184920:	0187dd80 	call	187dd8 <__mulsi3>
  184924:	e085883a 	add	r2,fp,r2
  184928:	01000404 	movi	r4,16
  18492c:	00000b06 	br	18495c <edid_decode_v14+0x1244>
                    if (c[14] & 0x08)
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;

                    switch (c[15] & 0xe0) {
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
  184930:	9009883a 	mov	r4,r18
  184934:	01415c04 	movi	r5,1392
  184938:	0187dd80 	call	187dd8 <__mulsi3>
  18493c:	e085883a 	add	r2,fp,r2
  184940:	01000044 	movi	r4,1
  184944:	00000506 	br	18495c <edid_decode_v14+0x1244>
                        break;
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
                        break;
                    case 0x40:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_10;
  184948:	9009883a 	mov	r4,r18
  18494c:	01415c04 	movi	r5,1392
  184950:	0187dd80 	call	187dd8 <__mulsi3>
  184954:	e085883a 	add	r2,fp,r2
  184958:	01000104 	movi	r4,4
                    switch (c[15] & 0xe0) {
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
                        break;
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
  18495c:	1100a815 	stw	r4,672(r2)
                        break;
  184960:	00000b06 	br	184990 <edid_decode_v14+0x1278>
                    case 0x40:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_10;
                        break;
                    case 0x60:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_5_4;
  184964:	9009883a 	mov	r4,r18
  184968:	01415c04 	movi	r5,1392
  18496c:	0187dd80 	call	187dd8 <__mulsi3>
  184970:	e085883a 	add	r2,fp,r2
  184974:	01000204 	movi	r4,8
  184978:	003ff806 	br	18495c <__alt_data_end+0xfff8495c>
                        break;
                    case 0x80:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_15_9;
                        break;
                    default:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = 0;
  18497c:	9009883a 	mov	r4,r18
  184980:	01415c04 	movi	r5,1392
  184984:	0187dd80 	call	187dd8 <__mulsi3>
  184988:	e085883a 	add	r2,fp,r2
  18498c:	1000a815 	stw	zero,672(r2)
                        break;
                    }

                    edid->descriptors[i].range_limits.cvt.blanking = 0;
  184990:	9009883a 	mov	r4,r18
  184994:	01415c04 	movi	r5,1392
  184998:	0187dd80 	call	187dd8 <__mulsi3>
  18499c:	1080a904 	addi	r2,r2,676
  1849a0:	e085883a 	add	r2,fp,r2
  1849a4:	10000015 	stw	zero,0(r2)
					if (c[15] & 0x08)
  1849a8:	810003c3 	ldbu	r4,15(r16)
  1849ac:	2100020c 	andi	r4,r4,8
  1849b0:	20000226 	beq	r4,zero,1849bc <edid_decode_v14+0x12a4>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_STANDARD_BLANKING;
  1849b4:	01000044 	movi	r4,1
  1849b8:	11000015 	stw	r4,0(r2)
					if (c[15] & 0x10)
  1849bc:	808003c3 	ldbu	r2,15(r16)
  1849c0:	1080040c 	andi	r2,r2,16
  1849c4:	10000826 	beq	r2,zero,1849e8 <edid_decode_v14+0x12d0>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_REDUCED_BLANKING;
  1849c8:	9009883a 	mov	r4,r18
  1849cc:	01415c04 	movi	r5,1392
  1849d0:	0187dd80 	call	187dd8 <__mulsi3>
  1849d4:	1080a904 	addi	r2,r2,676
  1849d8:	e085883a 	add	r2,fp,r2
  1849dc:	11000017 	ldw	r4,0(r2)
  1849e0:	21000094 	ori	r4,r4,2
  1849e4:	11000015 	stw	r4,0(r2)

                    edid->descriptors[i].range_limits.cvt.scaling = 0;
  1849e8:	9009883a 	mov	r4,r18
  1849ec:	01415c04 	movi	r5,1392
  1849f0:	0187dd80 	call	187dd8 <__mulsi3>
  1849f4:	1080aa04 	addi	r2,r2,680
  1849f8:	e085883a 	add	r2,fp,r2
  1849fc:	10000015 	stw	zero,0(r2)
					if (c[16] & 0x80)
  184a00:	81000407 	ldb	r4,16(r16)
  184a04:	2000020e 	bge	r4,zero,184a10 <edid_decode_v14+0x12f8>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_SHRINK;
  184a08:	01000044 	movi	r4,1
  184a0c:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x40)
  184a10:	80800403 	ldbu	r2,16(r16)
  184a14:	1080100c 	andi	r2,r2,64
  184a18:	10000826 	beq	r2,zero,184a3c <edid_decode_v14+0x1324>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_STRETCH;
  184a1c:	9009883a 	mov	r4,r18
  184a20:	01415c04 	movi	r5,1392
  184a24:	0187dd80 	call	187dd8 <__mulsi3>
  184a28:	1080aa04 	addi	r2,r2,680
  184a2c:	e085883a 	add	r2,fp,r2
  184a30:	11000017 	ldw	r4,0(r2)
  184a34:	21000094 	ori	r4,r4,2
  184a38:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x20)
  184a3c:	80800403 	ldbu	r2,16(r16)
  184a40:	1080080c 	andi	r2,r2,32
  184a44:	10000826 	beq	r2,zero,184a68 <edid_decode_v14+0x1350>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_SHRINK;
  184a48:	9009883a 	mov	r4,r18
  184a4c:	01415c04 	movi	r5,1392
  184a50:	0187dd80 	call	187dd8 <__mulsi3>
  184a54:	1080aa04 	addi	r2,r2,680
  184a58:	e085883a 	add	r2,fp,r2
  184a5c:	11000017 	ldw	r4,0(r2)
  184a60:	21000114 	ori	r4,r4,4
  184a64:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x10)
  184a68:	80800403 	ldbu	r2,16(r16)
  184a6c:	1080040c 	andi	r2,r2,16
  184a70:	10000826 	beq	r2,zero,184a94 <edid_decode_v14+0x137c>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_STRETCH;
  184a74:	9009883a 	mov	r4,r18
  184a78:	01415c04 	movi	r5,1392
  184a7c:	0187dd80 	call	187dd8 <__mulsi3>
  184a80:	1080aa04 	addi	r2,r2,680
  184a84:	e085883a 	add	r2,fp,r2
  184a88:	11000017 	ldw	r4,0(r2)
  184a8c:	21000214 	ori	r4,r4,8
  184a90:	11000015 	stw	r4,0(r2)

					edid->descriptors[i].range_limits.cvt.v_refresh = c[17];
  184a94:	9009883a 	mov	r4,r18
  184a98:	01415c04 	movi	r5,1392
  184a9c:	0187dd80 	call	187dd8 <__mulsi3>
  184aa0:	81000443 	ldbu	r4,17(r16)
  184aa4:	e085883a 	add	r2,fp,r2
  184aa8:	1100ab15 	stw	r4,684(r2)
  184aac:	00030b06 	br	1856dc <edid_decode_v14+0x1fc4>

                } else if (c[10] == 0x01) {
  184ab0:	01400044 	movi	r5,1
  184ab4:	1140021e 	bne	r2,r5,184ac0 <edid_decode_v14+0x13a8>
                	edid->descriptors[i].range_limits.timing_flags |= TF_RANGE_LIMITS;
  184ab8:	20800015 	stw	r2,0(r4)
  184abc:	00030706 	br	1856dc <edid_decode_v14+0x1fc4>
                } else if (c[10] == 0x02) {
  184ac0:	01400084 	movi	r5,2
  184ac4:	1143051e 	bne	r2,r5,1856dc <edid_decode_v14+0x1fc4>
                	edid->descriptors[i].range_limits.timing_flags |= TF_SECOND_GTF;
  184ac8:	20800015 	stw	r2,0(r4)

                	edid->descriptors[i].range_limits.gtf_2nd_curve.break_freq = c[12] * 2;
  184acc:	80800303 	ldbu	r2,12(r16)
  184ad0:	e4c9883a 	add	r4,fp,r19
                	edid->descriptors[i].range_limits.gtf_2nd_curve.C = c[13] / 2;
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
  184ad4:	200b883a 	mov	r5,r4
                } else if (c[10] == 0x01) {
                	edid->descriptors[i].range_limits.timing_flags |= TF_RANGE_LIMITS;
                } else if (c[10] == 0x02) {
                	edid->descriptors[i].range_limits.timing_flags |= TF_SECOND_GTF;

                	edid->descriptors[i].range_limits.gtf_2nd_curve.break_freq = c[12] * 2;
  184ad8:	1085883a 	add	r2,r2,r2
  184adc:	2080a315 	stw	r2,652(r4)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.C = c[13] / 2;
  184ae0:	80800343 	ldbu	r2,13(r16)
  184ae4:	1004d07a 	srli	r2,r2,1
  184ae8:	2080a415 	stw	r2,656(r4)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
  184aec:	808003c3 	ldbu	r2,15(r16)
  184af0:	1008923a 	slli	r4,r2,8
  184af4:	80800383 	ldbu	r2,14(r16)
  184af8:	2084b03a 	or	r2,r4,r2
  184afc:	2880a515 	stw	r2,660(r5)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.K = c[16];
  184b00:	81000403 	ldbu	r4,16(r16)
  184b04:	2900a615 	stw	r4,664(r5)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.J = c[17] / 2;
  184b08:	80800443 	ldbu	r2,17(r16)
  184b0c:	1004d07a 	srli	r2,r2,1
  184b10:	2880a715 	stw	r2,668(r5)
  184b14:	0002f106 	br	1856dc <edid_decode_v14+0x1fc4>
  184b18:	21000044 	addi	r4,r4,1
  184b1c:	24c5c83a 	sub	r2,r4,r19

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
            	edid->descriptors[i].prod_name[18] = 0;
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
  184b20:	1702ee26 	beq	r2,fp,1856dc <edid_decode_v14+0x1fc4>
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
  184b24:	20800007 	ldb	r2,0(r4)
  184b28:	117ffb1e 	bne	r2,r5,184b18 <__alt_data_end+0xfff84b18>
                    	edid->descriptors[i].prod_name[s] = 0;
  184b2c:	20000005 	stb	zero,0(r4)
  184b30:	003ff906 	br	184b18 <__alt_data_end+0xfff84b18>
                    }
                }
                break;

            case 0xfb:
            	edid->descriptors[i].tag = DTAG_COLOR_POINT;
  184b34:	e4c9883a 	add	r4,fp,r19
  184b38:	20809a15 	stw	r2,616(r4)

				edid->descriptors[i].white_point[0].index = c[5];
  184b3c:	2005883a 	mov	r2,r4
  184b40:	81000143 	ldbu	r4,5(r16)
				edid->descriptors[i].white_point[0].x = ((u16)c[7] << 2) | (((u16)c[6] >> 2) & 0x3);
  184b44:	100b883a 	mov	r5,r2
  184b48:	9cc09e04 	addi	r19,r19,632
                break;

            case 0xfb:
            	edid->descriptors[i].tag = DTAG_COLOR_POINT;

				edid->descriptors[i].white_point[0].index = c[5];
  184b4c:	11009b15 	stw	r4,620(r2)
				edid->descriptors[i].white_point[0].x = ((u16)c[7] << 2) | (((u16)c[6] >> 2) & 0x3);
  184b50:	80800183 	ldbu	r2,6(r16)
				edid->descriptors[i].white_point[0].y = ((u16)c[8] << 2) | ((u16)c[6] & 0x3);
				if (c[9] < 0xff)
					edid->descriptors[i].white_point[0].gamma = ((float)c[9] + 100.0f) * 0.01f;
  184b54:	e4e7883a 	add	r19,fp,r19

            case 0xfb:
            	edid->descriptors[i].tag = DTAG_COLOR_POINT;

				edid->descriptors[i].white_point[0].index = c[5];
				edid->descriptors[i].white_point[0].x = ((u16)c[7] << 2) | (((u16)c[6] >> 2) & 0x3);
  184b58:	1004d0ba 	srli	r2,r2,2
  184b5c:	110000cc 	andi	r4,r2,3
  184b60:	808001c3 	ldbu	r2,7(r16)
  184b64:	1085883a 	add	r2,r2,r2
  184b68:	1085883a 	add	r2,r2,r2
  184b6c:	2084b03a 	or	r2,r4,r2
  184b70:	28809c15 	stw	r2,624(r5)
				edid->descriptors[i].white_point[0].y = ((u16)c[8] << 2) | ((u16)c[6] & 0x3);
  184b74:	80800183 	ldbu	r2,6(r16)
  184b78:	110000cc 	andi	r4,r2,3
  184b7c:	80800203 	ldbu	r2,8(r16)
  184b80:	1085883a 	add	r2,r2,r2
  184b84:	1085883a 	add	r2,r2,r2
  184b88:	2084b03a 	or	r2,r4,r2
  184b8c:	28809d15 	stw	r2,628(r5)
				if (c[9] < 0xff)
  184b90:	81000243 	ldbu	r4,9(r16)
  184b94:	00803fc4 	movi	r2,255
  184b98:	20800a26 	beq	r4,r2,184bc4 <edid_decode_v14+0x14ac>
					edid->descriptors[i].white_point[0].gamma = ((float)c[9] + 100.0f) * 0.01f;
  184b9c:	0188b800 	call	188b80 <__floatunsisf>
  184ba0:	1009883a 	mov	r4,r2
  184ba4:	0150b234 	movhi	r5,17096
  184ba8:	0187e000 	call	187e00 <__addsf3>
  184bac:	014f0934 	movhi	r5,15396
  184bb0:	1009883a 	mov	r4,r2
  184bb4:	2975c284 	addi	r5,r5,-10486
  184bb8:	01887300 	call	188730 <__mulsf3>
  184bbc:	98800015 	stw	r2,0(r19)
  184bc0:	00000106 	br	184bc8 <edid_decode_v14+0x14b0>
				else
					edid->descriptors[i].white_point[0].gamma = 0.0f;
  184bc4:	98000015 	stw	zero,0(r19)

				edid->descriptors[i].white_point[1].index = c[10];
  184bc8:	9009883a 	mov	r4,r18
  184bcc:	01415c04 	movi	r5,1392
  184bd0:	0187dd80 	call	187dd8 <__mulsi3>
  184bd4:	81400283 	ldbu	r5,10(r16)
  184bd8:	e089883a 	add	r4,fp,r2
				edid->descriptors[i].white_point[1].x = ((u16)c[12] << 2) | (((u16)c[11] >> 2) & 0x3);
  184bdc:	200d883a 	mov	r6,r4
				if (c[9] < 0xff)
					edid->descriptors[i].white_point[0].gamma = ((float)c[9] + 100.0f) * 0.01f;
				else
					edid->descriptors[i].white_point[0].gamma = 0.0f;

				edid->descriptors[i].white_point[1].index = c[10];
  184be0:	21409f15 	stw	r5,636(r4)
				edid->descriptors[i].white_point[1].x = ((u16)c[12] << 2) | (((u16)c[11] >> 2) & 0x3);
  184be4:	810002c3 	ldbu	r4,11(r16)
  184be8:	1080a204 	addi	r2,r2,648
  184bec:	2008d0ba 	srli	r4,r4,2
  184bf0:	214000cc 	andi	r5,r4,3
  184bf4:	81000303 	ldbu	r4,12(r16)
  184bf8:	2109883a 	add	r4,r4,r4
  184bfc:	2109883a 	add	r4,r4,r4
  184c00:	2908b03a 	or	r4,r5,r4
  184c04:	3100a015 	stw	r4,640(r6)
				edid->descriptors[i].white_point[1].y = ((u16)c[13] << 2) | ((u16)c[11] & 0x3);
  184c08:	810002c3 	ldbu	r4,11(r16)
  184c0c:	214000cc 	andi	r5,r4,3
  184c10:	81000343 	ldbu	r4,13(r16)
  184c14:	2109883a 	add	r4,r4,r4
  184c18:	2109883a 	add	r4,r4,r4
  184c1c:	2908b03a 	or	r4,r5,r4
  184c20:	3100a115 	stw	r4,644(r6)
				if (c[14] < 0xff)
  184c24:	81000383 	ldbu	r4,14(r16)
  184c28:	01403fc4 	movi	r5,255
  184c2c:	21400b26 	beq	r4,r5,184c5c <edid_decode_v14+0x1544>
					edid->descriptors[i].white_point[1].gamma = ((float)c[14] + 100.0f) * 0.01f;
  184c30:	e0a1883a 	add	r16,fp,r2
  184c34:	0188b800 	call	188b80 <__floatunsisf>
  184c38:	1009883a 	mov	r4,r2
  184c3c:	0150b234 	movhi	r5,17096
  184c40:	0187e000 	call	187e00 <__addsf3>
  184c44:	014f0934 	movhi	r5,15396
  184c48:	1009883a 	mov	r4,r2
  184c4c:	2975c284 	addi	r5,r5,-10486
  184c50:	01887300 	call	188730 <__mulsf3>
  184c54:	80800015 	stw	r2,0(r16)
  184c58:	0002a006 	br	1856dc <edid_decode_v14+0x1fc4>
				else
					edid->descriptors[i].white_point[1].gamma = 0.0f;
  184c5c:	e085883a 	add	r2,fp,r2
  184c60:	10000015 	stw	zero,0(r2)
  184c64:	00029d06 	br	1856dc <edid_decode_v14+0x1fc4>

                break;

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;
  184c68:	e4c9883a 	add	r4,fp,r19
  184c6c:	20809a15 	stw	r2,616(r4)
  184c70:	9900ad04 	addi	r4,r19,692
  184c74:	9cc0bf04 	addi	r19,r19,764
  184c78:	80800144 	addi	r2,r16,5
  184c7c:	e109883a 	add	r4,fp,r4
  184c80:	84000184 	addi	r16,r16,6
  184c84:	e4e7883a 	add	r19,fp,r19
            		if (*d == 0)
                    	continue;

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;

            		switch ((d[1] >> 6) & 0x3) {
  184c88:	01800084 	movi	r6,2
  184c8c:	01c000c4 	movi	r7,3
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;

                for (s = 0; s < 6; ++s) {
            		u8 *d = (u8 *)&c[5 + 2 * s];

            		if (*d == 0)
  184c90:	11400003 	ldbu	r5,0(r2)
  184c94:	28001426 	beq	r5,zero,184ce8 <edid_decode_v14+0x15d0>
                    	continue;

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;
  184c98:	294007c4 	addi	r5,r5,31
  184c9c:	280a90fa 	slli	r5,r5,3
  184ca0:	217fff15 	stw	r5,-4(r4)

            		switch ((d[1] >> 6) & 0x3) {
  184ca4:	81400003 	ldbu	r5,0(r16)
  184ca8:	280ad1ba 	srli	r5,r5,6
  184cac:	2d000726 	beq	r5,r20,184ccc <edid_decode_v14+0x15b4>
  184cb0:	28000426 	beq	r5,zero,184cc4 <edid_decode_v14+0x15ac>
  184cb4:	29800726 	beq	r5,r6,184cd4 <edid_decode_v14+0x15bc>
  184cb8:	29c0071e 	bne	r5,r7,184cd8 <edid_decode_v14+0x15c0>
            			break;
            		case 2:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_5_4;
            			break;
            		case 3:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_9;
  184cbc:	21c00015 	stw	r7,0(r4)
            			break;
  184cc0:	00000506 	br	184cd8 <edid_decode_v14+0x15c0>

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;

            		switch ((d[1] >> 6) & 0x3) {
            		case 0:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_10;
  184cc4:	20000015 	stw	zero,0(r4)
            			break;
  184cc8:	00000306 	br	184cd8 <edid_decode_v14+0x15c0>
            		case 1:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_4_3;
  184ccc:	25000015 	stw	r20,0(r4)
            			break;
  184cd0:	00000106 	br	184cd8 <edid_decode_v14+0x15c0>
            		case 2:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_5_4;
  184cd4:	21800015 	stw	r6,0(r4)
            		case 3:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_9;
            			break;
            		}

            		edid->descriptors[i].extra_standard_timings[s].refresh_rate = (d[1] & 0x3f) + 60;
  184cd8:	81400003 	ldbu	r5,0(r16)
  184cdc:	29400fcc 	andi	r5,r5,63
  184ce0:	29400f04 	addi	r5,r5,60
  184ce4:	21400115 	stw	r5,4(r4)
  184ce8:	21000304 	addi	r4,r4,12
  184cec:	10800084 	addi	r2,r2,2
  184cf0:	84000084 	addi	r16,r16,2
                break;

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;

                for (s = 0; s < 6; ++s) {
  184cf4:	24ffe61e 	bne	r4,r19,184c90 <__alt_data_end+0xfff84c90>
  184cf8:	00027806 	br	1856dc <edid_decode_v14+0x1fc4>
            	edid->descriptors[i].dcm.b_a3 = ((u32)c[15] << 8) | (u32)c[14];

            	break;

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;
  184cfc:	e4c9883a 	add	r4,fp,r19
  184d00:	9940c804 	addi	r5,r19,800
  184d04:	9980c704 	addi	r6,r19,796
  184d08:	9cc0c604 	addi	r19,r19,792
  184d0c:	20809a15 	stw	r2,616(r4)
  184d10:	820001c4 	addi	r8,r16,7
  184d14:	82400184 	addi	r9,r16,6
  184d18:	81c00204 	addi	r7,r16,8
  184d1c:	e14b883a 	add	r5,fp,r5
  184d20:	e18d883a 	add	r6,fp,r6
  184d24:	e4e7883a 	add	r19,fp,r19
  184d28:	84000504 	addi	r16,r16,20

                for (s = 0; s < 4; ++s) {
                	u8 *d = (u8 *)&c[6 + s * 3];

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];
  184d2c:	00bffc04 	movi	r2,-16

                	switch (d[1] & 0x0c) {
  184d30:	02800104 	movi	r10,4
  184d34:	02c00204 	movi	r11,8
  184d38:	03000304 	movi	r12,12
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
                        break;
                    }

                	switch (d[2] & 0x60) {
  184d3c:	03401804 	movi	r13,96
                    }

                	edid->descriptors[i].cvt[s].supported_v_rate_blank = 0;

                    if (d[2] & 0x10)
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_50HZ | CVT_STANDARD_BLANKING);
  184d40:	03804044 	movi	r14,257
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;

                for (s = 0; s < 4; ++s) {
                	u8 *d = (u8 *)&c[6 + s * 3];

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];
  184d44:	41000003 	ldbu	r4,0(r8)
  184d48:	4bc00003 	ldbu	r15,0(r9)
  184d4c:	1108703a 	and	r4,r2,r4
  184d50:	2008913a 	slli	r4,r4,4
  184d54:	23c8b03a 	or	r4,r4,r15
  184d58:	293ffd15 	stw	r4,-12(r5)

                	switch (d[1] & 0x0c) {
  184d5c:	41000003 	ldbu	r4,0(r8)
  184d60:	2100030c 	andi	r4,r4,12
  184d64:	22800a26 	beq	r4,r10,184d90 <edid_decode_v14+0x1678>
  184d68:	51000436 	bltu	r10,r4,184d7c <edid_decode_v14+0x1664>
  184d6c:	20000e1e 	bne	r4,zero,184da8 <edid_decode_v14+0x1690>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_4_3;
  184d70:	99000017 	ldw	r4,0(r19)
  184d74:	21000054 	ori	r4,r4,1
  184d78:	00000a06 	br	184da4 <edid_decode_v14+0x168c>
                for (s = 0; s < 4; ++s) {
                	u8 *d = (u8 *)&c[6 + s * 3];

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];

                	switch (d[1] & 0x0c) {
  184d7c:	22c00726 	beq	r4,r11,184d9c <edid_decode_v14+0x1684>
  184d80:	2300091e 	bne	r4,r12,184da8 <edid_decode_v14+0x1690>
                        break;
                    case 0x08:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_10;
                        break;
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
  184d84:	99000017 	ldw	r4,0(r19)
  184d88:	21000414 	ori	r4,r4,16
  184d8c:	00000506 	br	184da4 <edid_decode_v14+0x168c>
                	switch (d[1] & 0x0c) {
                    case 0x00:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_4_3;
                        break;
                    case 0x04:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_9;
  184d90:	99000017 	ldw	r4,0(r19)
  184d94:	21000094 	ori	r4,r4,2
  184d98:	00000206 	br	184da4 <edid_decode_v14+0x168c>
                        break;
                    case 0x08:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_10;
  184d9c:	99000017 	ldw	r4,0(r19)
  184da0:	21000114 	ori	r4,r4,4
                        break;
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
  184da4:	99000015 	stw	r4,0(r19)
                        break;
                    }

                	switch (d[2] & 0x60) {
  184da8:	39000003 	ldbu	r4,0(r7)
  184dac:	2100180c 	andi	r4,r4,96
  184db0:	25800a26 	beq	r4,r22,184ddc <edid_decode_v14+0x16c4>
  184db4:	b1000436 	bltu	r22,r4,184dc8 <edid_decode_v14+0x16b0>
  184db8:	20000e1e 	bne	r4,zero,184df4 <edid_decode_v14+0x16dc>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_50HZ;
  184dbc:	31000017 	ldw	r4,0(r6)
  184dc0:	21004014 	ori	r4,r4,256
  184dc4:	00000a06 	br	184df0 <edid_decode_v14+0x16d8>
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
                        break;
                    }

                	switch (d[2] & 0x60) {
  184dc8:	25c00726 	beq	r4,r23,184de8 <edid_decode_v14+0x16d0>
  184dcc:	2340091e 	bne	r4,r13,184df4 <edid_decode_v14+0x16dc>
                        break;
                    case 0x40:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_75HZ;
                        break;
                    case 0x60:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_85HZ;
  184dd0:	31000017 	ldw	r4,0(r6)
  184dd4:	21020014 	ori	r4,r4,2048
  184dd8:	00000506 	br	184df0 <edid_decode_v14+0x16d8>
                	switch (d[2] & 0x60) {
                    case 0x00:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_50HZ;
                        break;
                    case 0x20:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_60HZ;
  184ddc:	31000017 	ldw	r4,0(r6)
  184de0:	21008014 	ori	r4,r4,512
  184de4:	00000206 	br	184df0 <edid_decode_v14+0x16d8>
                        break;
                    case 0x40:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_75HZ;
  184de8:	31000017 	ldw	r4,0(r6)
  184dec:	21010014 	ori	r4,r4,1024
                        break;
                    case 0x60:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_85HZ;
  184df0:	31000015 	stw	r4,0(r6)
                        break;
                    }

                	edid->descriptors[i].cvt[s].supported_v_rate_blank = 0;
  184df4:	28000015 	stw	zero,0(r5)

                    if (d[2] & 0x10)
  184df8:	39000003 	ldbu	r4,0(r7)
  184dfc:	2100040c 	andi	r4,r4,16
  184e00:	20000126 	beq	r4,zero,184e08 <edid_decode_v14+0x16f0>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_50HZ | CVT_STANDARD_BLANKING);
  184e04:	2b800015 	stw	r14,0(r5)
                    if (d[2] & 0x08)
  184e08:	39000003 	ldbu	r4,0(r7)
  184e0c:	2100020c 	andi	r4,r4,8
  184e10:	20000326 	beq	r4,zero,184e20 <edid_decode_v14+0x1708>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_STANDARD_BLANKING);
  184e14:	29000017 	ldw	r4,0(r5)
  184e18:	21008054 	ori	r4,r4,513
  184e1c:	29000015 	stw	r4,0(r5)
                    if (d[2] & 0x04)
  184e20:	39000003 	ldbu	r4,0(r7)
  184e24:	2100010c 	andi	r4,r4,4
  184e28:	20000326 	beq	r4,zero,184e38 <edid_decode_v14+0x1720>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_75HZ | CVT_STANDARD_BLANKING);
  184e2c:	29000017 	ldw	r4,0(r5)
  184e30:	21010054 	ori	r4,r4,1025
  184e34:	29000015 	stw	r4,0(r5)
                    if (d[2] & 0x02)
  184e38:	39000003 	ldbu	r4,0(r7)
  184e3c:	2100008c 	andi	r4,r4,2
  184e40:	20000326 	beq	r4,zero,184e50 <edid_decode_v14+0x1738>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_85HZ | CVT_STANDARD_BLANKING);
  184e44:	29000017 	ldw	r4,0(r5)
  184e48:	21020054 	ori	r4,r4,2049
  184e4c:	29000015 	stw	r4,0(r5)
                    if (d[2] & 0x01)
  184e50:	39000003 	ldbu	r4,0(r7)
  184e54:	2100004c 	andi	r4,r4,1
  184e58:	20000326 	beq	r4,zero,184e68 <edid_decode_v14+0x1750>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_REDUCED_BLANKING);
  184e5c:	29000017 	ldw	r4,0(r5)
  184e60:	21008094 	ori	r4,r4,514
  184e64:	29000015 	stw	r4,0(r5)
  184e68:	39c000c4 	addi	r7,r7,3
  184e6c:	420000c4 	addi	r8,r8,3
  184e70:	4a4000c4 	addi	r9,r9,3
  184e74:	29400404 	addi	r5,r5,16
  184e78:	31800404 	addi	r6,r6,16
  184e7c:	9cc00404 	addi	r19,r19,16
            	break;

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;

                for (s = 0; s < 4; ++s) {
  184e80:	3c3fb01e 	bne	r7,r16,184d44 <__alt_data_end+0xfff84d44>
  184e84:	00021506 	br	1856dc <edid_decode_v14+0x1fc4>
                }

                break;

            case 0xf7:
            	edid->descriptors[i].tag = DTAG_ESTABLISHED_TIMING_III;
  184e88:	e4c9883a 	add	r4,fp,r19
  184e8c:	20809a15 	stw	r2,616(r4)

            	eb_establish_timing(&edid->descriptors[i].timing_3[0], 640, 350, 85, c[6] & 0x80);
  184e90:	80800183 	ldbu	r2,6(r16)
  184e94:	027fe004 	movi	r9,-128
  184e98:	9900d504 	addi	r4,r19,852
  184e9c:	4884703a 	and	r2,r9,r2
  184ea0:	d8800015 	stw	r2,0(sp)
  184ea4:	e109883a 	add	r4,fp,r4
  184ea8:	0140a004 	movi	r5,640
  184eac:	01805784 	movi	r6,350
  184eb0:	01c01544 	movi	r7,85
  184eb4:	da400215 	stw	r9,8(sp)
  184eb8:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1], 640, 400, 85, c[6] & 0x40);
  184ebc:	80800183 	ldbu	r2,6(r16)
  184ec0:	9900db04 	addi	r4,r19,876
  184ec4:	e109883a 	add	r4,fp,r4
  184ec8:	1080100c 	andi	r2,r2,64
  184ecc:	d8800015 	stw	r2,0(sp)
  184ed0:	0140a004 	movi	r5,640
  184ed4:	01806404 	movi	r6,400
  184ed8:	01c01544 	movi	r7,85
  184edc:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2], 720, 400, 85, c[6] & 0x20);
  184ee0:	80800183 	ldbu	r2,6(r16)
  184ee4:	9900e104 	addi	r4,r19,900
  184ee8:	e109883a 	add	r4,fp,r4
  184eec:	1080080c 	andi	r2,r2,32
  184ef0:	d8800015 	stw	r2,0(sp)
  184ef4:	0140b404 	movi	r5,720
  184ef8:	01806404 	movi	r6,400
  184efc:	01c01544 	movi	r7,85
  184f00:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3], 640, 480, 85, c[6] & 0x10);
  184f04:	80800183 	ldbu	r2,6(r16)
  184f08:	9900e704 	addi	r4,r19,924
  184f0c:	e109883a 	add	r4,fp,r4
  184f10:	1080040c 	andi	r2,r2,16
  184f14:	d8800015 	stw	r2,0(sp)
  184f18:	0140a004 	movi	r5,640
  184f1c:	01807804 	movi	r6,480
  184f20:	01c01544 	movi	r7,85
  184f24:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4], 848, 480, 60, c[6] & 0x08);
  184f28:	80800183 	ldbu	r2,6(r16)
  184f2c:	9900ed04 	addi	r4,r19,948
  184f30:	05400f04 	movi	r21,60
  184f34:	1080020c 	andi	r2,r2,8
  184f38:	d8800015 	stw	r2,0(sp)
  184f3c:	e109883a 	add	r4,fp,r4
  184f40:	0140d404 	movi	r5,848
  184f44:	01807804 	movi	r6,480
  184f48:	a80f883a 	mov	r7,r21
  184f4c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5], 800, 600, 85, c[6] & 0x04);
  184f50:	80800183 	ldbu	r2,6(r16)
  184f54:	9900f304 	addi	r4,r19,972
  184f58:	e109883a 	add	r4,fp,r4
  184f5c:	1080010c 	andi	r2,r2,4
  184f60:	d8800015 	stw	r2,0(sp)
  184f64:	0140c804 	movi	r5,800
  184f68:	01809604 	movi	r6,600
  184f6c:	01c01544 	movi	r7,85
  184f70:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6], 1024, 768, 85, c[6] & 0x02);
  184f74:	80800183 	ldbu	r2,6(r16)
  184f78:	0200c004 	movi	r8,768
  184f7c:	9900f904 	addi	r4,r19,996
  184f80:	1080008c 	andi	r2,r2,2
  184f84:	400d883a 	mov	r6,r8
  184f88:	d8800015 	stw	r2,0(sp)
  184f8c:	e109883a 	add	r4,fp,r4
  184f90:	01410004 	movi	r5,1024
  184f94:	01c01544 	movi	r7,85
  184f98:	da000315 	stw	r8,12(sp)
  184f9c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7], 1152, 864, 75, c[6] & 0x01);
  184fa0:	80800183 	ldbu	r2,6(r16)
  184fa4:	9900ff04 	addi	r4,r19,1020
  184fa8:	e109883a 	add	r4,fp,r4
  184fac:	1080004c 	andi	r2,r2,1
  184fb0:	d8800015 	stw	r2,0(sp)
  184fb4:	01412004 	movi	r5,1152
  184fb8:	0180d804 	movi	r6,864
  184fbc:	01c012c4 	movi	r7,75
  184fc0:	01814700 	call	181470 <eb_establish_timing>

				eb_establish_timing_rb(&edid->descriptors[i].timing_3[0 + 1 * 8], 1280, 768, 60, c[7] & 0x80);
  184fc4:	808001c3 	ldbu	r2,7(r16)
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  184fc8:	da400217 	ldw	r9,8(sp)
  184fcc:	99410504 	addi	r5,r19,1044
  184fd0:	99010604 	addi	r4,r19,1048
  184fd4:	4892703a 	and	r9,r9,r2
  184fd8:	99810804 	addi	r6,r19,1056
  184fdc:	98810704 	addi	r2,r19,1052
  184fe0:	99c10904 	addi	r7,r19,1060
  184fe4:	da000317 	ldw	r8,12(sp)
  184fe8:	9cc10a04 	addi	r19,r19,1064
		et->valid = 1;
  184fec:	e14b883a 	add	r5,fp,r5
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  184ff0:	48000d26 	beq	r9,zero,185028 <edid_decode_v14+0x1910>
		et->valid = 1;
  184ff4:	2d000015 	stw	r20,0(r5)
		et->width = x;
  184ff8:	e109883a 	add	r4,fp,r4
  184ffc:	01414004 	movi	r5,1280
  185000:	21400015 	stw	r5,0(r4)
		et->height = y;
  185004:	e085883a 	add	r2,fp,r2
  185008:	12000015 	stw	r8,0(r2)
		et->refresh = r;
  18500c:	e18d883a 	add	r6,fp,r6
  185010:	35400015 	stw	r21,0(r6)
		et->interlaced = 0;
  185014:	e1cf883a 	add	r7,fp,r7
  185018:	38000015 	stw	zero,0(r7)
		et->rb = 1;
  18501c:	e4e7883a 	add	r19,fp,r19
  185020:	9d000015 	stw	r20,0(r19)
  185024:	00000b06 	br	185054 <edid_decode_v14+0x193c>
	} else {
		et->valid = 0;
  185028:	28000015 	stw	zero,0(r5)
		et->width = 0;
  18502c:	e109883a 	add	r4,fp,r4
  185030:	20000015 	stw	zero,0(r4)
		et->height = 0;
  185034:	e085883a 	add	r2,fp,r2
  185038:	10000015 	stw	zero,0(r2)
		et->refresh = 0;
  18503c:	e18d883a 	add	r6,fp,r6
  185040:	30000015 	stw	zero,0(r6)
		et->interlaced = 0;
  185044:	e1cf883a 	add	r7,fp,r7
  185048:	38000015 	stw	zero,0(r7)
		et->rb = 0;
  18504c:	e4e7883a 	add	r19,fp,r19
  185050:	98000015 	stw	zero,0(r19)
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 1 * 8], 1280, 768, 60, c[7] & 0x40);
  185054:	9009883a 	mov	r4,r18
  185058:	01415c04 	movi	r5,1392
  18505c:	0187dd80 	call	187dd8 <__mulsi3>
  185060:	1029883a 	mov	r20,r2
  185064:	11010b04 	addi	r4,r2,1068
  185068:	808001c3 	ldbu	r2,7(r16)
  18506c:	04c00f04 	movi	r19,60
  185070:	e109883a 	add	r4,fp,r4
  185074:	1080100c 	andi	r2,r2,64
  185078:	d8800015 	stw	r2,0(sp)
  18507c:	01414004 	movi	r5,1280
  185080:	0180c004 	movi	r6,768
  185084:	980f883a 	mov	r7,r19
  185088:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 1 * 8], 1280, 768, 75, c[7] & 0x20);
  18508c:	808001c3 	ldbu	r2,7(r16)
  185090:	a1011104 	addi	r4,r20,1092
  185094:	e109883a 	add	r4,fp,r4
  185098:	1080080c 	andi	r2,r2,32
  18509c:	d8800015 	stw	r2,0(sp)
  1850a0:	01414004 	movi	r5,1280
  1850a4:	0180c004 	movi	r6,768
  1850a8:	01c012c4 	movi	r7,75
  1850ac:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 1 * 8], 1280, 768, 85, c[7] & 0x10);
  1850b0:	808001c3 	ldbu	r2,7(r16)
  1850b4:	a1011704 	addi	r4,r20,1116
  1850b8:	e109883a 	add	r4,fp,r4
  1850bc:	1080040c 	andi	r2,r2,16
  1850c0:	d8800015 	stw	r2,0(sp)
  1850c4:	01414004 	movi	r5,1280
  1850c8:	0180c004 	movi	r6,768
  1850cc:	01c01544 	movi	r7,85
  1850d0:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 1 * 8], 1280, 960, 60, c[7] & 0x08);
  1850d4:	808001c3 	ldbu	r2,7(r16)
  1850d8:	a1011d04 	addi	r4,r20,1140
  1850dc:	e109883a 	add	r4,fp,r4
  1850e0:	1080020c 	andi	r2,r2,8
  1850e4:	d8800015 	stw	r2,0(sp)
  1850e8:	01414004 	movi	r5,1280
  1850ec:	0180f004 	movi	r6,960
  1850f0:	980f883a 	mov	r7,r19
  1850f4:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 1 * 8], 1280, 960, 85, c[7] & 0x04);
  1850f8:	808001c3 	ldbu	r2,7(r16)
  1850fc:	a1012304 	addi	r4,r20,1164
  185100:	e109883a 	add	r4,fp,r4
  185104:	1080010c 	andi	r2,r2,4
  185108:	d8800015 	stw	r2,0(sp)
  18510c:	01414004 	movi	r5,1280
  185110:	0180f004 	movi	r6,960
  185114:	01c01544 	movi	r7,85
  185118:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 1 * 8], 1280, 1024, 60, c[7] & 0x02);
  18511c:	808001c3 	ldbu	r2,7(r16)
  185120:	a1012904 	addi	r4,r20,1188
  185124:	e109883a 	add	r4,fp,r4
  185128:	1080008c 	andi	r2,r2,2
  18512c:	d8800015 	stw	r2,0(sp)
  185130:	01414004 	movi	r5,1280
  185134:	01810004 	movi	r6,1024
  185138:	980f883a 	mov	r7,r19
  18513c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 1 * 8], 1280, 1024, 85, c[7] & 0x01);
  185140:	808001c3 	ldbu	r2,7(r16)
  185144:	a1012f04 	addi	r4,r20,1212
  185148:	e109883a 	add	r4,fp,r4
  18514c:	1080004c 	andi	r2,r2,1
  185150:	d8800015 	stw	r2,0(sp)
  185154:	01414004 	movi	r5,1280
  185158:	01810004 	movi	r6,1024
  18515c:	01c01544 	movi	r7,85
  185160:	01814700 	call	181470 <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 2 * 8], 1360, 768, 60, c[8] & 0x80);
  185164:	80800203 	ldbu	r2,8(r16)
  185168:	a1013504 	addi	r4,r20,1236
  18516c:	e109883a 	add	r4,fp,r4
  185170:	1080200c 	andi	r2,r2,128
  185174:	d8800015 	stw	r2,0(sp)
  185178:	01415404 	movi	r5,1360
  18517c:	0180c004 	movi	r6,768
  185180:	980f883a 	mov	r7,r19
  185184:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[1 + 2 * 8], 1440, 900, 60, c[8] & 0x40);
  185188:	82000203 	ldbu	r8,8(r16)
  18518c:	a1c13b04 	addi	r7,r20,1260
  185190:	a1813c04 	addi	r6,r20,1264
  185194:	4200100c 	andi	r8,r8,64
  185198:	a1413d04 	addi	r5,r20,1268
  18519c:	a1013e04 	addi	r4,r20,1272
  1851a0:	a0813f04 	addi	r2,r20,1276
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
  1851a4:	e1cf883a 	add	r7,fp,r7
  1851a8:	a5014004 	addi	r20,r20,1280
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  1851ac:	40000f26 	beq	r8,zero,1851ec <edid_decode_v14+0x1ad4>
		et->valid = 1;
  1851b0:	02000044 	movi	r8,1
  1851b4:	3a000015 	stw	r8,0(r7)
		et->width = x;
  1851b8:	e18d883a 	add	r6,fp,r6
  1851bc:	01c16804 	movi	r7,1440
  1851c0:	31c00015 	stw	r7,0(r6)
		et->height = y;
  1851c4:	e14b883a 	add	r5,fp,r5
  1851c8:	0180e104 	movi	r6,900
  1851cc:	29800015 	stw	r6,0(r5)
		et->refresh = r;
  1851d0:	e109883a 	add	r4,fp,r4
  1851d4:	24c00015 	stw	r19,0(r4)
		et->interlaced = 0;
  1851d8:	e085883a 	add	r2,fp,r2
  1851dc:	10000015 	stw	zero,0(r2)
		et->rb = 1;
  1851e0:	e529883a 	add	r20,fp,r20
  1851e4:	a2000015 	stw	r8,0(r20)
  1851e8:	00000b06 	br	185218 <edid_decode_v14+0x1b00>
	} else {
		et->valid = 0;
  1851ec:	38000015 	stw	zero,0(r7)
		et->width = 0;
  1851f0:	e18d883a 	add	r6,fp,r6
  1851f4:	30000015 	stw	zero,0(r6)
		et->height = 0;
  1851f8:	e14b883a 	add	r5,fp,r5
  1851fc:	28000015 	stw	zero,0(r5)
		et->refresh = 0;
  185200:	e109883a 	add	r4,fp,r4
  185204:	20000015 	stw	zero,0(r4)
		et->interlaced = 0;
  185208:	e085883a 	add	r2,fp,r2
  18520c:	10000015 	stw	zero,0(r2)
		et->rb = 0;
  185210:	e529883a 	add	r20,fp,r20
  185214:	a0000015 	stw	zero,0(r20)
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 2 * 8], 1440, 900, 60, c[8] & 0x20);
  185218:	9009883a 	mov	r4,r18
  18521c:	01415c04 	movi	r5,1392
  185220:	0187dd80 	call	187dd8 <__mulsi3>
  185224:	1027883a 	mov	r19,r2
  185228:	11014104 	addi	r4,r2,1284
  18522c:	80800203 	ldbu	r2,8(r16)
  185230:	05000f04 	movi	r20,60
  185234:	e109883a 	add	r4,fp,r4
  185238:	1080080c 	andi	r2,r2,32
  18523c:	d8800015 	stw	r2,0(sp)
  185240:	01416804 	movi	r5,1440
  185244:	0180e104 	movi	r6,900
  185248:	a00f883a 	mov	r7,r20
  18524c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 2 * 8], 1440, 900, 75, c[8] & 0x10);
  185250:	80800203 	ldbu	r2,8(r16)
  185254:	99014704 	addi	r4,r19,1308
  185258:	e109883a 	add	r4,fp,r4
  18525c:	1080040c 	andi	r2,r2,16
  185260:	d8800015 	stw	r2,0(sp)
  185264:	01416804 	movi	r5,1440
  185268:	0180e104 	movi	r6,900
  18526c:	01c012c4 	movi	r7,75
  185270:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 2 * 8], 1440, 900, 85, c[8] & 0x08);
  185274:	80800203 	ldbu	r2,8(r16)
  185278:	99014d04 	addi	r4,r19,1332
  18527c:	e109883a 	add	r4,fp,r4
  185280:	1080020c 	andi	r2,r2,8
  185284:	d8800015 	stw	r2,0(sp)
  185288:	01416804 	movi	r5,1440
  18528c:	0180e104 	movi	r6,900
  185290:	01c01544 	movi	r7,85
  185294:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[5 + 2 * 8], 1400, 1050, 60, c[8] & 0x04);
  185298:	81c00203 	ldbu	r7,8(r16)
  18529c:	9a015304 	addi	r8,r19,1356
  1852a0:	99815404 	addi	r6,r19,1360
  1852a4:	39c0010c 	andi	r7,r7,4
  1852a8:	99415504 	addi	r5,r19,1364
  1852ac:	99015604 	addi	r4,r19,1368
  1852b0:	98815704 	addi	r2,r19,1372
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
  1852b4:	e211883a 	add	r8,fp,r8
  1852b8:	9cc15804 	addi	r19,r19,1376
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  1852bc:	38000f26 	beq	r7,zero,1852fc <edid_decode_v14+0x1be4>
		et->valid = 1;
  1852c0:	01c00044 	movi	r7,1
  1852c4:	41c00015 	stw	r7,0(r8)
		et->width = x;
  1852c8:	e18d883a 	add	r6,fp,r6
  1852cc:	02015e04 	movi	r8,1400
  1852d0:	32000015 	stw	r8,0(r6)
		et->height = y;
  1852d4:	e14b883a 	add	r5,fp,r5
  1852d8:	01810684 	movi	r6,1050
  1852dc:	29800015 	stw	r6,0(r5)
		et->refresh = r;
  1852e0:	e109883a 	add	r4,fp,r4
  1852e4:	25000015 	stw	r20,0(r4)
		et->interlaced = 0;
  1852e8:	e085883a 	add	r2,fp,r2
  1852ec:	10000015 	stw	zero,0(r2)
		et->rb = 1;
  1852f0:	e4e7883a 	add	r19,fp,r19
  1852f4:	99c00015 	stw	r7,0(r19)
  1852f8:	00000b06 	br	185328 <edid_decode_v14+0x1c10>
	} else {
		et->valid = 0;
  1852fc:	40000015 	stw	zero,0(r8)
		et->width = 0;
  185300:	e18d883a 	add	r6,fp,r6
  185304:	30000015 	stw	zero,0(r6)
		et->height = 0;
  185308:	e14b883a 	add	r5,fp,r5
  18530c:	28000015 	stw	zero,0(r5)
		et->refresh = 0;
  185310:	e109883a 	add	r4,fp,r4
  185314:	20000015 	stw	zero,0(r4)
		et->interlaced = 0;
  185318:	e085883a 	add	r2,fp,r2
  18531c:	10000015 	stw	zero,0(r2)
		et->rb = 0;
  185320:	e4e7883a 	add	r19,fp,r19
  185324:	98000015 	stw	zero,0(r19)
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 2 * 8], 1400, 1050, 60, c[8] & 0x02);
  185328:	9009883a 	mov	r4,r18
  18532c:	01415c04 	movi	r5,1392
  185330:	0187dd80 	call	187dd8 <__mulsi3>
  185334:	1027883a 	mov	r19,r2
  185338:	11015904 	addi	r4,r2,1380
  18533c:	80800203 	ldbu	r2,8(r16)
  185340:	05000f04 	movi	r20,60
  185344:	e109883a 	add	r4,fp,r4
  185348:	1080008c 	andi	r2,r2,2
  18534c:	d8800015 	stw	r2,0(sp)
  185350:	01415e04 	movi	r5,1400
  185354:	01810684 	movi	r6,1050
  185358:	a00f883a 	mov	r7,r20
  18535c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 2 * 8], 1400, 1050, 75, c[8] & 0x01);
  185360:	80800203 	ldbu	r2,8(r16)
  185364:	99015f04 	addi	r4,r19,1404
  185368:	e109883a 	add	r4,fp,r4
  18536c:	1080004c 	andi	r2,r2,1
  185370:	d8800015 	stw	r2,0(sp)
  185374:	01415e04 	movi	r5,1400
  185378:	01810684 	movi	r6,1050
  18537c:	01c012c4 	movi	r7,75
  185380:	01814700 	call	181470 <eb_establish_timing>

                eb_establish_timing(&edid->descriptors[i].timing_3[0 + 3 * 8], 1400, 1050, 85, c[9] & 0x80);
  185384:	80800243 	ldbu	r2,9(r16)
  185388:	023fe004 	movi	r8,-128
  18538c:	99016504 	addi	r4,r19,1428
  185390:	4084703a 	and	r2,r8,r2
  185394:	d8800015 	stw	r2,0(sp)
  185398:	e109883a 	add	r4,fp,r4
  18539c:	01415e04 	movi	r5,1400
  1853a0:	01810684 	movi	r6,1050
  1853a4:	01c01544 	movi	r7,85
  1853a8:	da000315 	stw	r8,12(sp)
  1853ac:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 3 * 8], 1680, 1050, 60, c[9] & 0x40);
  1853b0:	80800243 	ldbu	r2,9(r16)
  1853b4:	99016b04 	addi	r4,r19,1452
  1853b8:	e109883a 	add	r4,fp,r4
  1853bc:	1080100c 	andi	r2,r2,64
  1853c0:	d8800015 	stw	r2,0(sp)
  1853c4:	0141a404 	movi	r5,1680
  1853c8:	01810684 	movi	r6,1050
  1853cc:	a00f883a 	mov	r7,r20
  1853d0:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 3 * 8], 1680, 1050, 60, c[9] & 0x20);
  1853d4:	80800243 	ldbu	r2,9(r16)
  1853d8:	99017104 	addi	r4,r19,1476
  1853dc:	e109883a 	add	r4,fp,r4
  1853e0:	1080080c 	andi	r2,r2,32
  1853e4:	d8800015 	stw	r2,0(sp)
  1853e8:	0141a404 	movi	r5,1680
  1853ec:	01810684 	movi	r6,1050
  1853f0:	a00f883a 	mov	r7,r20
  1853f4:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 3 * 8], 1680, 1050, 75, c[9] & 0x10);
  1853f8:	80800243 	ldbu	r2,9(r16)
  1853fc:	99017704 	addi	r4,r19,1500
  185400:	e109883a 	add	r4,fp,r4
  185404:	1080040c 	andi	r2,r2,16
  185408:	d8800015 	stw	r2,0(sp)
  18540c:	0141a404 	movi	r5,1680
  185410:	01810684 	movi	r6,1050
  185414:	01c012c4 	movi	r7,75
  185418:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 3 * 8], 1680, 1050, 85, c[9] & 0x08);
  18541c:	81400243 	ldbu	r5,9(r16)
  185420:	99017d04 	addi	r4,r19,1524
  185424:	e109883a 	add	r4,fp,r4
  185428:	2940020c 	andi	r5,r5,8
  18542c:	d9400015 	stw	r5,0(sp)
  185430:	01810684 	movi	r6,1050
  185434:	0141a404 	movi	r5,1680
  185438:	01c01544 	movi	r7,85
  18543c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 3 * 8], 1600, 1200, 60, c[9] & 0x04);
  185440:	81400243 	ldbu	r5,9(r16)
  185444:	05412c04 	movi	r21,1200
  185448:	99018304 	addi	r4,r19,1548
  18544c:	2940010c 	andi	r5,r5,4
  185450:	d9400015 	stw	r5,0(sp)
  185454:	e109883a 	add	r4,fp,r4
  185458:	01419004 	movi	r5,1600
  18545c:	a80d883a 	mov	r6,r21
  185460:	a00f883a 	mov	r7,r20
  185464:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 3 * 8], 1600, 1200, 65, c[9] & 0x02);
  185468:	81400243 	ldbu	r5,9(r16)
  18546c:	99018904 	addi	r4,r19,1572
  185470:	e109883a 	add	r4,fp,r4
  185474:	2940008c 	andi	r5,r5,2
  185478:	d9400015 	stw	r5,0(sp)
  18547c:	a80d883a 	mov	r6,r21
  185480:	01419004 	movi	r5,1600
  185484:	01c01044 	movi	r7,65
  185488:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 3 * 8], 1600, 1200, 70, c[9] & 0x01);
  18548c:	81400243 	ldbu	r5,9(r16)
  185490:	99018f04 	addi	r4,r19,1596
  185494:	e109883a 	add	r4,fp,r4
  185498:	2940004c 	andi	r5,r5,1
  18549c:	d9400015 	stw	r5,0(sp)
  1854a0:	a80d883a 	mov	r6,r21
  1854a4:	01419004 	movi	r5,1600
  1854a8:	01c01184 	movi	r7,70
  1854ac:	01814700 	call	181470 <eb_establish_timing>

               	eb_establish_timing(&edid->descriptors[i].timing_3[0 + 4 * 8], 1600, 1200, 75, c[10] & 0x80);
  1854b0:	da000317 	ldw	r8,12(sp)
  1854b4:	80800283 	ldbu	r2,10(r16)
  1854b8:	99019504 	addi	r4,r19,1620
  1854bc:	e109883a 	add	r4,fp,r4
  1854c0:	4084703a 	and	r2,r8,r2
  1854c4:	d8800015 	stw	r2,0(sp)
  1854c8:	01419004 	movi	r5,1600
  1854cc:	a80d883a 	mov	r6,r21
  1854d0:	01c012c4 	movi	r7,75
  1854d4:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 4 * 8], 1600, 1200, 85, c[10] & 0x40);
  1854d8:	80800283 	ldbu	r2,10(r16)
  1854dc:	99019b04 	addi	r4,r19,1644
  1854e0:	e109883a 	add	r4,fp,r4
  1854e4:	1080100c 	andi	r2,r2,64
  1854e8:	d8800015 	stw	r2,0(sp)
  1854ec:	01419004 	movi	r5,1600
  1854f0:	a80d883a 	mov	r6,r21
  1854f4:	01c01544 	movi	r7,85
  1854f8:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 4 * 8], 1792, 1344, 60, c[10] & 0x20);
  1854fc:	80800283 	ldbu	r2,10(r16)
  185500:	9901a104 	addi	r4,r19,1668
  185504:	e109883a 	add	r4,fp,r4
  185508:	1080080c 	andi	r2,r2,32
  18550c:	d8800015 	stw	r2,0(sp)
  185510:	0141c004 	movi	r5,1792
  185514:	01815004 	movi	r6,1344
  185518:	a00f883a 	mov	r7,r20
  18551c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 4 * 8], 1792, 1344, 75, c[10] & 0x10);
  185520:	80800283 	ldbu	r2,10(r16)
  185524:	9901a704 	addi	r4,r19,1692
  185528:	e109883a 	add	r4,fp,r4
  18552c:	1080040c 	andi	r2,r2,16
  185530:	d8800015 	stw	r2,0(sp)
  185534:	0141c004 	movi	r5,1792
  185538:	01815004 	movi	r6,1344
  18553c:	01c012c4 	movi	r7,75
  185540:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 4 * 8], 1856, 1392, 60, c[10] & 0x08);
  185544:	80800283 	ldbu	r2,10(r16)
  185548:	9901ad04 	addi	r4,r19,1716
  18554c:	e109883a 	add	r4,fp,r4
  185550:	1080020c 	andi	r2,r2,8
  185554:	d8800015 	stw	r2,0(sp)
  185558:	0141d004 	movi	r5,1856
  18555c:	01815c04 	movi	r6,1392
  185560:	a00f883a 	mov	r7,r20
  185564:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 4 * 8], 1856, 1392, 75, c[10] & 0x04);
  185568:	80800283 	ldbu	r2,10(r16)
  18556c:	9901b304 	addi	r4,r19,1740
  185570:	e109883a 	add	r4,fp,r4
  185574:	1080010c 	andi	r2,r2,4
  185578:	d8800015 	stw	r2,0(sp)
  18557c:	0141d004 	movi	r5,1856
  185580:	01815c04 	movi	r6,1392
  185584:	01c012c4 	movi	r7,75
  185588:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[6 + 4 * 8], 1920, 1200, 60, c[10] & 0x02);
  18558c:	82000283 	ldbu	r8,10(r16)
  185590:	99c1b904 	addi	r7,r19,1764
  185594:	9981ba04 	addi	r6,r19,1768
  185598:	4200008c 	andi	r8,r8,2
  18559c:	9941bb04 	addi	r5,r19,1772
  1855a0:	9901bc04 	addi	r4,r19,1776
  1855a4:	9881bd04 	addi	r2,r19,1780
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
  1855a8:	e1cf883a 	add	r7,fp,r7
  1855ac:	9cc1be04 	addi	r19,r19,1784
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
  1855b0:	40000e26 	beq	r8,zero,1855ec <edid_decode_v14+0x1ed4>
		et->valid = 1;
  1855b4:	02000044 	movi	r8,1
  1855b8:	3a000015 	stw	r8,0(r7)
		et->width = x;
  1855bc:	e18d883a 	add	r6,fp,r6
  1855c0:	01c1e004 	movi	r7,1920
  1855c4:	31c00015 	stw	r7,0(r6)
		et->height = y;
  1855c8:	e14b883a 	add	r5,fp,r5
  1855cc:	2d400015 	stw	r21,0(r5)
		et->refresh = r;
  1855d0:	e109883a 	add	r4,fp,r4
  1855d4:	25000015 	stw	r20,0(r4)
		et->interlaced = 0;
  1855d8:	e085883a 	add	r2,fp,r2
  1855dc:	10000015 	stw	zero,0(r2)
		et->rb = 1;
  1855e0:	e4e7883a 	add	r19,fp,r19
  1855e4:	9a000015 	stw	r8,0(r19)
  1855e8:	00000b06 	br	185618 <edid_decode_v14+0x1f00>
	} else {
		et->valid = 0;
  1855ec:	38000015 	stw	zero,0(r7)
		et->width = 0;
  1855f0:	e18d883a 	add	r6,fp,r6
  1855f4:	30000015 	stw	zero,0(r6)
		et->height = 0;
  1855f8:	e14b883a 	add	r5,fp,r5
  1855fc:	28000015 	stw	zero,0(r5)
		et->refresh = 0;
  185600:	e109883a 	add	r4,fp,r4
  185604:	20000015 	stw	zero,0(r4)
		et->interlaced = 0;
  185608:	e085883a 	add	r2,fp,r2
  18560c:	10000015 	stw	zero,0(r2)
		et->rb = 0;
  185610:	e4e7883a 	add	r19,fp,r19
  185614:	98000015 	stw	zero,0(r19)
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 4 * 8], 1920, 1200, 60, c[10] & 0x01);
  185618:	9009883a 	mov	r4,r18
  18561c:	01415c04 	movi	r5,1392
  185620:	0187dd80 	call	187dd8 <__mulsi3>
  185624:	1027883a 	mov	r19,r2
  185628:	1101bf04 	addi	r4,r2,1788
  18562c:	80800283 	ldbu	r2,10(r16)
  185630:	e109883a 	add	r4,fp,r4
  185634:	0141e004 	movi	r5,1920
  185638:	1080004c 	andi	r2,r2,1
  18563c:	d8800015 	stw	r2,0(sp)
  185640:	01812c04 	movi	r6,1200
  185644:	01c00f04 	movi	r7,60
  185648:	01814700 	call	181470 <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 5 * 8], 1920, 1200, 75, c[11] & 0x80);
  18564c:	808002c3 	ldbu	r2,11(r16)
  185650:	9901c504 	addi	r4,r19,1812
  185654:	e109883a 	add	r4,fp,r4
  185658:	1080200c 	andi	r2,r2,128
  18565c:	d8800015 	stw	r2,0(sp)
  185660:	0141e004 	movi	r5,1920
  185664:	01812c04 	movi	r6,1200
  185668:	01c012c4 	movi	r7,75
  18566c:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 5 * 8], 1920, 1200, 85, c[11] & 0x40);
  185670:	808002c3 	ldbu	r2,11(r16)
  185674:	9901cb04 	addi	r4,r19,1836
  185678:	e109883a 	add	r4,fp,r4
  18567c:	1080100c 	andi	r2,r2,64
  185680:	d8800015 	stw	r2,0(sp)
  185684:	0141e004 	movi	r5,1920
  185688:	01812c04 	movi	r6,1200
  18568c:	01c01544 	movi	r7,85
  185690:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 5 * 8], 1920, 1440, 65, c[11] & 0x20);
  185694:	808002c3 	ldbu	r2,11(r16)
  185698:	9901d104 	addi	r4,r19,1860
  18569c:	e109883a 	add	r4,fp,r4
  1856a0:	1080080c 	andi	r2,r2,32
  1856a4:	d8800015 	stw	r2,0(sp)
  1856a8:	0141e004 	movi	r5,1920
  1856ac:	01816804 	movi	r6,1440
  1856b0:	01c01044 	movi	r7,65
  1856b4:	01814700 	call	181470 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 5 * 8], 1920, 1440, 75, c[11] & 0x10);
  1856b8:	808002c3 	ldbu	r2,11(r16)
  1856bc:	9901d704 	addi	r4,r19,1884
  1856c0:	e109883a 	add	r4,fp,r4
  1856c4:	1080040c 	andi	r2,r2,16
  1856c8:	d8800015 	stw	r2,0(sp)
  1856cc:	0141e004 	movi	r5,1920
  1856d0:	01816804 	movi	r6,1440
  1856d4:	01c012c4 	movi	r7,75
  1856d8:	01814700 	call	181470 <eb_establish_timing>
  1856dc:	d8c00117 	ldw	r3,4(sp)

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {
  1856e0:	94800044 	addi	r18,r18,1
  1856e4:	18ffffc4 	addi	r3,r3,-1
  1856e8:	d8c00115 	stw	r3,4(sp)
  1856ec:	183a431e 	bne	r3,zero,183ffc <__alt_data_end+0xfff83ffc>
    }

    // extension flag & checksum
    c = &edid_bin[0x7e];

    edid->extensions = *c;
  1856f0:	88801f83 	ldbu	r2,126(r17)
  1856f4:	e0860915 	stw	r2,6180(fp)

    if (edid->extensions != 0)
  1856f8:	10000626 	beq	r2,zero,185714 <edid_decode_v14+0x1ffc>
    	edid_decode_extensions(edid, edid_bin);
  1856fc:	e009883a 	mov	r4,fp
  185700:	880b883a 	mov	r5,r17
  185704:	01836940 	call	183694 <edid_decode_extensions>

    return 0;
  185708:	0005883a 	mov	r2,zero
  18570c:	00000106 	br	185714 <edid_decode_v14+0x1ffc>
    u8 checksum = 0;
    int i = 0, s = 0;

    // header
    if (memcmp(c, header, 8) != 0)
        return -1;
  185710:	00bfffc4 	movi	r2,-1

    if (edid->extensions != 0)
    	edid_decode_extensions(edid, edid_bin);

    return 0;
}
  185714:	dfc00d17 	ldw	ra,52(sp)
  185718:	df000c17 	ldw	fp,48(sp)
  18571c:	ddc00b17 	ldw	r23,44(sp)
  185720:	dd800a17 	ldw	r22,40(sp)
  185724:	dd400917 	ldw	r21,36(sp)
  185728:	dd000817 	ldw	r20,32(sp)
  18572c:	dcc00717 	ldw	r19,28(sp)
  185730:	dc800617 	ldw	r18,24(sp)
  185734:	dc400517 	ldw	r17,20(sp)
  185738:	dc000417 	ldw	r16,16(sp)
  18573c:	dec00e04 	addi	sp,sp,56
  185740:	f800283a 	ret

00185744 <edid_print_v14>:

void edid_print_v14(struct base_edid *edid)
{
  185744:	deffee04 	addi	sp,sp,-72
  185748:	dc000815 	stw	r16,32(sp)
  18574c:	2021883a 	mov	r16,r4
	int i;

	printf("Base EDID Information ...\n\n");
  185750:	010006b4 	movhi	r4,26
  185754:	21351e04 	addi	r4,r4,-11144

    return 0;
}

void edid_print_v14(struct base_edid *edid)
{
  185758:	dfc01115 	stw	ra,68(sp)
  18575c:	df001015 	stw	fp,64(sp)
  185760:	ddc00f15 	stw	r23,60(sp)
  185764:	dd800e15 	stw	r22,56(sp)
  185768:	dd400d15 	stw	r21,52(sp)
  18576c:	dd000c15 	stw	r20,48(sp)
  185770:	dcc00b15 	stw	r19,44(sp)
  185774:	dc800a15 	stw	r18,40(sp)
  185778:	dc400915 	stw	r17,36(sp)
	int i;

	printf("Base EDID Information ...\n\n");
  18577c:	018920c0 	call	18920c <puts>
	printf("vendor id    : %s\n", edid->id_mfg);
  185780:	010006b4 	movhi	r4,26
  185784:	21352504 	addi	r4,r4,-11116
  185788:	800b883a 	mov	r5,r16
  18578c:	01891080 	call	189108 <printf>
	printf("product code : %04x\n", edid->id_prod);
  185790:	81400117 	ldw	r5,4(r16)
  185794:	010006b4 	movhi	r4,26
  185798:	21352a04 	addi	r4,r4,-11096
  18579c:	01891080 	call	189108 <printf>
	printf("serial       : %08x\n", edid->id_sn);
  1857a0:	81400217 	ldw	r5,8(r16)
  1857a4:	010006b4 	movhi	r4,26
  1857a8:	21353004 	addi	r4,r4,-11072
  1857ac:	01891080 	call	189108 <printf>
	printf("mfg date     : year %04d week %02d\n", edid->mfg_year, edid->mfg_week);
  1857b0:	81400417 	ldw	r5,16(r16)
  1857b4:	81800317 	ldw	r6,12(r16)
  1857b8:	010006b4 	movhi	r4,26
  1857bc:	21353604 	addi	r4,r4,-11048
  1857c0:	01891080 	call	189108 <printf>

	if (edid->model_year > 0)
  1857c4:	81400517 	ldw	r5,20(r16)
  1857c8:	0140030e 	bge	zero,r5,1857d8 <edid_print_v14+0x94>
		printf("model year   : %04d\n", edid->model_year);
  1857cc:	010006b4 	movhi	r4,26
  1857d0:	21353f04 	addi	r4,r4,-11012
  1857d4:	01891080 	call	189108 <printf>

	printf("EDID version : %d.%d\n", edid->ver_mj, edid->ver_mn);
  1857d8:	81400617 	ldw	r5,24(r16)
  1857dc:	81800717 	ldw	r6,28(r16)
  1857e0:	010006b4 	movhi	r4,26
  1857e4:	21354504 	addi	r4,r4,-10988
  1857e8:	01891080 	call	189108 <printf>
	printf("extensions   : %d\n", edid->extensions);
  1857ec:	81460917 	ldw	r5,6180(r16)
  1857f0:	010006b4 	movhi	r4,26
  1857f4:	21354b04 	addi	r4,r4,-10964
  1857f8:	01891080 	call	189108 <printf>

	if (edid->input.digital_if != 0) {
  1857fc:	80800817 	ldw	r2,32(r16)
  185800:	10004b26 	beq	r2,zero,185930 <edid_print_v14+0x1ec>
		printf("\ndigital input interface ...\n");
  185804:	010006b4 	movhi	r4,26
  185808:	21355004 	addi	r4,r4,-10944
  18580c:	018920c0 	call	18920c <puts>

		switch (edid->input.digital.depth) {
  185810:	81400917 	ldw	r5,36(r16)
  185814:	00c00144 	movi	r3,5
  185818:	28bfffc4 	addi	r2,r5,-1
  18581c:	18801f36 	bltu	r3,r2,18589c <edid_print_v14+0x158>
  185820:	100490ba 	slli	r2,r2,2
  185824:	00c00634 	movhi	r3,24
  185828:	18d60e04 	addi	r3,r3,22584
  18582c:	10c5883a 	add	r2,r2,r3
  185830:	10800017 	ldw	r2,0(r2)
  185834:	1000683a 	jmp	r2
  185838:	00185850 	cmplti	zero,zero,24929
  18583c:	0018585c 	xori	zero,zero,24929
  185840:	0018586c 	andhi	zero,zero,24929
  185844:	00185878 	rdprs	zero,zero,24929
  185848:	00185884 	movi	zero,24930
  18584c:	00185890 	cmplti	zero,zero,24930
		case 1:
			printf("  color depth : 6 bpp\n");
  185850:	010006b4 	movhi	r4,26
  185854:	21355804 	addi	r4,r4,-10912
  185858:	00000206 	br	185864 <edid_print_v14+0x120>
			break;
		case 2:
			printf("  color depth : 8 bpp\n");
  18585c:	010006b4 	movhi	r4,26
  185860:	21355e04 	addi	r4,r4,-10888
  185864:	018920c0 	call	18920c <puts>
			break;
  185868:	00000f06 	br	1858a8 <edid_print_v14+0x164>
		case 3:
			printf("  color depth : 10 bpp\n");
  18586c:	010006b4 	movhi	r4,26
  185870:	21356404 	addi	r4,r4,-10864
  185874:	003ffb06 	br	185864 <__alt_data_end+0xfff85864>
			break;
		case 4:
			printf("  color depth : 12 bpp\n");
  185878:	010006b4 	movhi	r4,26
  18587c:	21356a04 	addi	r4,r4,-10840
  185880:	003ff806 	br	185864 <__alt_data_end+0xfff85864>
			break;
		case 5:
			printf("  color depth : 14 bpp\n");
  185884:	010006b4 	movhi	r4,26
  185888:	21357004 	addi	r4,r4,-10816
  18588c:	003ff506 	br	185864 <__alt_data_end+0xfff85864>
			break;
		case 6:
			printf("  color depth : 16 bpp\n");
  185890:	010006b4 	movhi	r4,26
  185894:	21357604 	addi	r4,r4,-10792
  185898:	003ff206 	br	185864 <__alt_data_end+0xfff85864>
			break;
		default:
			printf("  color depth : undefined (%d)\n", edid->input.digital.depth);
  18589c:	010006b4 	movhi	r4,26
  1858a0:	21357c04 	addi	r4,r4,-10768
  1858a4:	01891080 	call	189108 <printf>
			break;
		}

		switch (edid->input.digital.interface) {
  1858a8:	81400a17 	ldw	r5,40(r16)
  1858ac:	00c00104 	movi	r3,4
  1858b0:	28bfffc4 	addi	r2,r5,-1
  1858b4:	18801b36 	bltu	r3,r2,185924 <edid_print_v14+0x1e0>
  1858b8:	100490ba 	slli	r2,r2,2
  1858bc:	00c00634 	movhi	r3,24
  1858c0:	18d63404 	addi	r3,r3,22736
  1858c4:	10c5883a 	add	r2,r2,r3
  1858c8:	10800017 	ldw	r2,0(r2)
  1858cc:	1000683a 	jmp	r2
  1858d0:	001858e4 	muli	zero,zero,24931
  1858d4:	001858f0 	cmpltui	zero,zero,24931
  1858d8:	00185900 	call	18590 <__alt_mem_sram-0x167a70>
  1858dc:	0018590c 	andi	zero,zero,24932
  1858e0:	00185918 	cmpnei	zero,zero,24932
		case 1:
			printf("  interface   : DVI\n");
  1858e4:	010006b4 	movhi	r4,26
  1858e8:	21358404 	addi	r4,r4,-10736
  1858ec:	00000206 	br	1858f8 <edid_print_v14+0x1b4>
			break;
		case 2:
			printf("  interface   : HDMI-a\n");
  1858f0:	010006b4 	movhi	r4,26
  1858f4:	21358904 	addi	r4,r4,-10716
  1858f8:	018920c0 	call	18920c <puts>
			break;
  1858fc:	00004106 	br	185a04 <edid_print_v14+0x2c0>
		case 3:
			printf("  interface   : HDMI-b\n");
  185900:	010006b4 	movhi	r4,26
  185904:	21358f04 	addi	r4,r4,-10692
  185908:	003ffb06 	br	1858f8 <__alt_data_end+0xfff858f8>
			break;
		case 4:
			printf("  interface   : MDDI\n");
  18590c:	010006b4 	movhi	r4,26
  185910:	21359504 	addi	r4,r4,-10668
  185914:	003ff806 	br	1858f8 <__alt_data_end+0xfff858f8>
			break;
		case 5:
			printf("  interface   : DisplayPort\n");
  185918:	010006b4 	movhi	r4,26
  18591c:	21359b04 	addi	r4,r4,-10644
  185920:	003ff506 	br	1858f8 <__alt_data_end+0xfff858f8>
			break;
		default:
			printf("  interface   : undefined (%d)\n", edid->input.digital.interface);
  185924:	010006b4 	movhi	r4,26
  185928:	2135a204 	addi	r4,r4,-10616
  18592c:	00003406 	br	185a00 <edid_print_v14+0x2bc>
			break;
		}

	} else {
		printf("\nanalog input interface ...\n");
  185930:	010006b4 	movhi	r4,26
  185934:	2135aa04 	addi	r4,r4,-10584
  185938:	018920c0 	call	18920c <puts>

		switch (edid->input.analog.level) {
  18593c:	80800917 	ldw	r2,36(r16)
  185940:	04400044 	movi	r17,1
  185944:	14400c26 	beq	r2,r17,185978 <edid_print_v14+0x234>
  185948:	88800416 	blt	r17,r2,18595c <edid_print_v14+0x218>
  18594c:	1000101e 	bne	r2,zero,185990 <edid_print_v14+0x24c>
		case VIL_0P700_0P300_1P000:
			printf("  signal level    : 0.700 : 0.300 : 1.000 Vpp\n");
  185950:	010006b4 	movhi	r4,26
  185954:	2135b104 	addi	r4,r4,-10556
  185958:	00000c06 	br	18598c <edid_print_v14+0x248>
		}

	} else {
		printf("\nanalog input interface ...\n");

		switch (edid->input.analog.level) {
  18595c:	00c00084 	movi	r3,2
  185960:	10c00826 	beq	r2,r3,185984 <edid_print_v14+0x240>
  185964:	00c000c4 	movi	r3,3
  185968:	10c0091e 	bne	r2,r3,185990 <edid_print_v14+0x24c>
			break;
		case VIL_1P000_0P400_1P400:
			printf("  signal level    : 1.000 : 0.400 : 1.400 Vpp\n");
			break;
		case VIL_0P700_0P000_0P700:
			printf("  signal level    : 0.700 : 0.000 : 0.700 Vpp\n");
  18596c:	010006b4 	movhi	r4,26
  185970:	2135d504 	addi	r4,r4,-10412
  185974:	00000506 	br	18598c <edid_print_v14+0x248>
		switch (edid->input.analog.level) {
		case VIL_0P700_0P300_1P000:
			printf("  signal level    : 0.700 : 0.300 : 1.000 Vpp\n");
			break;
		case VIL_0P714_0P286_1P000:
			printf("  signal level    : 0.714 : 0.286 : 1.000 Vpp\n");
  185978:	010006b4 	movhi	r4,26
  18597c:	2135bd04 	addi	r4,r4,-10508
  185980:	00000206 	br	18598c <edid_print_v14+0x248>
			break;
		case VIL_1P000_0P400_1P400:
			printf("  signal level    : 1.000 : 0.400 : 1.400 Vpp\n");
  185984:	010006b4 	movhi	r4,26
  185988:	2135c904 	addi	r4,r4,-10460
			break;
		case VIL_0P700_0P000_0P700:
			printf("  signal level    : 0.700 : 0.000 : 0.700 Vpp\n");
  18598c:	018920c0 	call	18920c <puts>
			break;
		}

		switch (edid->input.analog.setup) {
  185990:	80800a17 	ldw	r2,40(r16)
  185994:	10000426 	beq	r2,zero,1859a8 <edid_print_v14+0x264>
  185998:	1440061e 	bne	r2,r17,1859b4 <edid_print_v14+0x270>
		case VIS_BLANK_LEVEL_EQ_BLACK_LEVEL:
			printf("  video setup     : blank level = black level\n");
			break;
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
  18599c:	010006b4 	movhi	r4,26
  1859a0:	2135ed04 	addi	r4,r4,-10316
  1859a4:	00000206 	br	1859b0 <edid_print_v14+0x26c>
			break;
		}

		switch (edid->input.analog.setup) {
		case VIS_BLANK_LEVEL_EQ_BLACK_LEVEL:
			printf("  video setup     : blank level = black level\n");
  1859a8:	010006b4 	movhi	r4,26
  1859ac:	2135e104 	addi	r4,r4,-10364
			break;
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
  1859b0:	018920c0 	call	18920c <puts>
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
  1859b4:	81400b17 	ldw	r5,44(r16)
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
  1859b8:	010006b4 	movhi	r4,26
  1859bc:	2135fb04 	addi	r4,r4,-10260
  1859c0:	280cd07a 	srli	r6,r5,1
  1859c4:	280ed0ba 	srli	r7,r5,2
  1859c8:	2940004c 	andi	r5,r5,1
  1859cc:	3180004c 	andi	r6,r6,1
  1859d0:	39c0004c 	andi	r7,r7,1
  1859d4:	01891080 	call	189108 <printf>
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_H_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_G_VIDEO) ? 1 : 0);

		printf("  vsync serration : %s\n", (edid->input.analog.serrations & VISR_VSYNC) ? "supported" : "not supported");
  1859d8:	80800c17 	ldw	r2,48(r16)
  1859dc:	1080004c 	andi	r2,r2,1
  1859e0:	1000031e 	bne	r2,zero,1859f0 <edid_print_v14+0x2ac>
  1859e4:	014006b4 	movhi	r5,26
  1859e8:	29751704 	addi	r5,r5,-11172
  1859ec:	00000206 	br	1859f8 <edid_print_v14+0x2b4>
  1859f0:	014006b4 	movhi	r5,26
  1859f4:	29751804 	addi	r5,r5,-11168
  1859f8:	010006b4 	movhi	r4,26
  1859fc:	21361204 	addi	r4,r4,-10168
  185a00:	01891080 	call	189108 <printf>
	}

	if (edid->screen.size_defined) {
  185a04:	80800d17 	ldw	r2,52(r16)
  185a08:	10000626 	beq	r2,zero,185a24 <edid_print_v14+0x2e0>
		printf("\nscreen size  : horizontal) %d (cm)  vertical) %d (cm)\n", edid->screen.size.horizontal, edid->screen.size.vertical);
  185a0c:	81400f17 	ldw	r5,60(r16)
  185a10:	81801017 	ldw	r6,64(r16)
  185a14:	010006b4 	movhi	r4,26
  185a18:	21361804 	addi	r4,r4,-10144
  185a1c:	01891080 	call	189108 <printf>
  185a20:	00001106 	br	185a68 <edid_print_v14+0x324>
	} else if (edid->screen.aspect_defined == 1) {
  185a24:	80800e17 	ldw	r2,56(r16)
  185a28:	00c00044 	movi	r3,1
  185a2c:	10c0051e 	bne	r2,r3,185a44 <edid_print_v14+0x300>
		printf("\naspect ratio : landscape) %.2f\n", edid->screen.aspect.landscape);
  185a30:	81000f17 	ldw	r4,60(r16)
  185a34:	0188c900 	call	188c90 <__extendsfdf2>
  185a38:	010006b4 	movhi	r4,26
  185a3c:	21362604 	addi	r4,r4,-10088
  185a40:	00000606 	br	185a5c <edid_print_v14+0x318>
	} else if (edid->screen.aspect_defined == 2) {
  185a44:	00c00084 	movi	r3,2
  185a48:	10c0071e 	bne	r2,r3,185a68 <edid_print_v14+0x324>
		printf("\naspect ratio : portrait) %.2f\n", edid->screen.aspect.portrait);
  185a4c:	81001017 	ldw	r4,64(r16)
  185a50:	0188c900 	call	188c90 <__extendsfdf2>
  185a54:	010006b4 	movhi	r4,26
  185a58:	21362f04 	addi	r4,r4,-10052
  185a5c:	100b883a 	mov	r5,r2
  185a60:	180d883a 	mov	r6,r3
  185a64:	01891080 	call	189108 <printf>
	}

	printf("\ngamma        : %.2f\n", edid->gamma);
  185a68:	81001117 	ldw	r4,68(r16)
  185a6c:	0188c900 	call	188c90 <__extendsfdf2>
  185a70:	010006b4 	movhi	r4,26
  185a74:	21363704 	addi	r4,r4,-10020
  185a78:	100b883a 	mov	r5,r2
  185a7c:	180d883a 	mov	r6,r3
  185a80:	01891080 	call	189108 <printf>

	printf("\nfeatures ...\n");
  185a84:	010006b4 	movhi	r4,26
  185a88:	21363d04 	addi	r4,r4,-9996
  185a8c:	018920c0 	call	18920c <puts>
	printf("  [PM] standby mode                     : %s\n", (edid->feature & FS_PM_STANDBY) ? "yes" : "no");
  185a90:	80801217 	ldw	r2,72(r16)
  185a94:	1080004c 	andi	r2,r2,1
  185a98:	1000031e 	bne	r2,zero,185aa8 <edid_print_v14+0x364>
  185a9c:	014006b4 	movhi	r5,26
  185aa0:	296f5f04 	addi	r5,r5,-17028
  185aa4:	00000206 	br	185ab0 <edid_print_v14+0x36c>
  185aa8:	014006b4 	movhi	r5,26
  185aac:	296f5e04 	addi	r5,r5,-17032
  185ab0:	010006b4 	movhi	r4,26
  185ab4:	21364104 	addi	r4,r4,-9980
  185ab8:	01891080 	call	189108 <printf>
	printf("  [PM] suspend mode                     : %s\n", (edid->feature & FS_PM_SUSPEND) ? "yes" : "no");
  185abc:	80801217 	ldw	r2,72(r16)
  185ac0:	1080008c 	andi	r2,r2,2
  185ac4:	1000031e 	bne	r2,zero,185ad4 <edid_print_v14+0x390>
  185ac8:	014006b4 	movhi	r5,26
  185acc:	296f5f04 	addi	r5,r5,-17028
  185ad0:	00000206 	br	185adc <edid_print_v14+0x398>
  185ad4:	014006b4 	movhi	r5,26
  185ad8:	296f5e04 	addi	r5,r5,-17032
  185adc:	010006b4 	movhi	r4,26
  185ae0:	21364d04 	addi	r4,r4,-9932
  185ae4:	01891080 	call	189108 <printf>
	printf("  [PM] active off                       : %s\n", (edid->feature & FS_PM_ACTIVE_OFF) ? "yes" : "no");
  185ae8:	80801217 	ldw	r2,72(r16)
  185aec:	1080010c 	andi	r2,r2,4
  185af0:	1000031e 	bne	r2,zero,185b00 <edid_print_v14+0x3bc>
  185af4:	014006b4 	movhi	r5,26
  185af8:	296f5f04 	addi	r5,r5,-17028
  185afc:	00000206 	br	185b08 <edid_print_v14+0x3c4>
  185b00:	014006b4 	movhi	r5,26
  185b04:	296f5e04 	addi	r5,r5,-17032
  185b08:	010006b4 	movhi	r4,26
  185b0c:	21365904 	addi	r4,r4,-9884
  185b10:	01891080 	call	189108 <printf>

	printf("  [DI] supported color encoding formats : ");
  185b14:	010006b4 	movhi	r4,26
  185b18:	21366504 	addi	r4,r4,-9836
  185b1c:	01891080 	call	189108 <printf>
	if (edid->feature & FS_CEF_RGB444)
  185b20:	80801217 	ldw	r2,72(r16)
  185b24:	1080100c 	andi	r2,r2,64
  185b28:	10000326 	beq	r2,zero,185b38 <edid_print_v14+0x3f4>
		printf("RGB_4:4:4 ");
  185b2c:	010006b4 	movhi	r4,26
  185b30:	21367004 	addi	r4,r4,-9792
  185b34:	01891080 	call	189108 <printf>
	if (edid->feature & FS_CEF_YCBCR444)
  185b38:	80801217 	ldw	r2,72(r16)
  185b3c:	1080200c 	andi	r2,r2,128
  185b40:	10000326 	beq	r2,zero,185b50 <edid_print_v14+0x40c>
		printf("YCbCr_4:4:4 ");
  185b44:	010006b4 	movhi	r4,26
  185b48:	21367304 	addi	r4,r4,-9780
  185b4c:	01891080 	call	189108 <printf>
	if (edid->feature & FS_CEF_YCBCR422)
  185b50:	80801217 	ldw	r2,72(r16)
  185b54:	1080400c 	andi	r2,r2,256
  185b58:	10000326 	beq	r2,zero,185b68 <edid_print_v14+0x424>
		printf("YCbCr_4:2:2 ");
  185b5c:	010006b4 	movhi	r4,26
  185b60:	21367704 	addi	r4,r4,-9764
  185b64:	01891080 	call	189108 <printf>
	printf("\n");
  185b68:	01000284 	movi	r4,10
  185b6c:	018914c0 	call	18914c <putchar>

	if (edid->feature & FS_DCT_MONO_GRAY)
  185b70:	80801217 	ldw	r2,72(r16)
  185b74:	1080020c 	andi	r2,r2,8
  185b78:	10000326 	beq	r2,zero,185b88 <edid_print_v14+0x444>
		printf("  [AI] display color type               : monochrome or grayscale display\n");
  185b7c:	010006b4 	movhi	r4,26
  185b80:	21367b04 	addi	r4,r4,-9748
  185b84:	018920c0 	call	18920c <puts>
	if (edid->feature & FS_DCT_RGB)
  185b88:	80801217 	ldw	r2,72(r16)
  185b8c:	1080040c 	andi	r2,r2,16
  185b90:	10000326 	beq	r2,zero,185ba0 <edid_print_v14+0x45c>
		printf("  [AI] display color type               : RGB\n");
  185b94:	010006b4 	movhi	r4,26
  185b98:	21368e04 	addi	r4,r4,-9672
  185b9c:	018920c0 	call	18920c <puts>
	if (edid->feature & FS_DCT_NON_RGB)
  185ba0:	80801217 	ldw	r2,72(r16)
  185ba4:	1080080c 	andi	r2,r2,32
  185ba8:	10000326 	beq	r2,zero,185bb8 <edid_print_v14+0x474>
		printf("  [AI] display color type               : non-RGB\n");
  185bac:	010006b4 	movhi	r4,26
  185bb0:	21369a04 	addi	r4,r4,-9624
  185bb4:	018920c0 	call	18920c <puts>

	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
  185bb8:	80801217 	ldw	r2,72(r16)
  185bbc:	1080800c 	andi	r2,r2,512
  185bc0:	1000031e 	bne	r2,zero,185bd0 <edid_print_v14+0x48c>
  185bc4:	014006b4 	movhi	r5,26
  185bc8:	296f5f04 	addi	r5,r5,-17028
  185bcc:	00000206 	br	185bd8 <edid_print_v14+0x494>
  185bd0:	014006b4 	movhi	r5,26
  185bd4:	296f5e04 	addi	r5,r5,-17032
  185bd8:	010006b4 	movhi	r4,26
  185bdc:	2136a704 	addi	r4,r4,-9572
  185be0:	01891080 	call	189108 <printf>
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
  185be4:	80801217 	ldw	r2,72(r16)
  185be8:	1081000c 	andi	r2,r2,1024
  185bec:	1000031e 	bne	r2,zero,185bfc <edid_print_v14+0x4b8>
  185bf0:	014006b4 	movhi	r5,26
  185bf4:	296f5f04 	addi	r5,r5,-17028
  185bf8:	00000206 	br	185c04 <edid_print_v14+0x4c0>
  185bfc:	014006b4 	movhi	r5,26
  185c00:	296f5e04 	addi	r5,r5,-17032
  185c04:	010006b4 	movhi	r4,26
  185c08:	2136b304 	addi	r4,r4,-9524
  185c0c:	01891080 	call	189108 <printf>
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");
  185c10:	80801217 	ldw	r2,72(r16)
  185c14:	1082000c 	andi	r2,r2,2048
  185c18:	1000031e 	bne	r2,zero,185c28 <edid_print_v14+0x4e4>
  185c1c:	014006b4 	movhi	r5,26
  185c20:	296f5f04 	addi	r5,r5,-17028
  185c24:	00000206 	br	185c30 <edid_print_v14+0x4ec>
  185c28:	014006b4 	movhi	r5,26
  185c2c:	296f5e04 	addi	r5,r5,-17032
  185c30:	010006b4 	movhi	r4,26
  185c34:	2136bf04 	addi	r4,r4,-9476
  185c38:	01891080 	call	189108 <printf>

	printf("\nestablished timing ...\n");
  185c3c:	010006b4 	movhi	r4,26
  185c40:	2136cb04 	addi	r4,r4,-9428
  185c44:	018920c0 	call	18920c <puts>
  185c48:	85801b04 	addi	r22,r16,108
  185c4c:	85401c04 	addi	r21,r16,112
  185c50:	85001d04 	addi	r20,r16,116
  185c54:	84c01e04 	addi	r19,r16,120
  185c58:	84801f04 	addi	r18,r16,124
	for (i = 0; i < 17; ++i) {
  185c5c:	0023883a 	mov	r17,zero
  185c60:	05c00444 	movi	r23,17
		if (edid->timing_1_2[i].valid)
  185c64:	b0800017 	ldw	r2,0(r22)
  185c68:	10001026 	beq	r2,zero,185cac <edid_print_v14+0x568>
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
  185c6c:	90800017 	ldw	r2,0(r18)
  185c70:	a9800017 	ldw	r6,0(r21)
  185c74:	a1c00017 	ldw	r7,0(r20)
  185c78:	98c00017 	ldw	r3,0(r19)
  185c7c:	1000031e 	bne	r2,zero,185c8c <edid_print_v14+0x548>
  185c80:	008006b4 	movhi	r2,26
  185c84:	10b19a04 	addi	r2,r2,-14744
  185c88:	00000206 	br	185c94 <edid_print_v14+0x550>
  185c8c:	008006b4 	movhi	r2,26
  185c90:	10b51b04 	addi	r2,r2,-11156
  185c94:	010006b4 	movhi	r4,26
  185c98:	d8c00015 	stw	r3,0(sp)
  185c9c:	d8800115 	stw	r2,4(sp)
  185ca0:	2136d104 	addi	r4,r4,-9404
  185ca4:	880b883a 	mov	r5,r17
  185ca8:	01891080 	call	189108 <printf>
	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");

	printf("\nestablished timing ...\n");
	for (i = 0; i < 17; ++i) {
  185cac:	8c400044 	addi	r17,r17,1
  185cb0:	b5800604 	addi	r22,r22,24
  185cb4:	ad400604 	addi	r21,r21,24
  185cb8:	a5000604 	addi	r20,r20,24
  185cbc:	9cc00604 	addi	r19,r19,24
  185cc0:	94800604 	addi	r18,r18,24
  185cc4:	8dffe71e 	bne	r17,r23,185c64 <__alt_data_end+0xfff85c64>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
  185cc8:	010006b4 	movhi	r4,26
  185ccc:	2136da04 	addi	r4,r4,-9368
  185cd0:	018920c0 	call	18920c <puts>
  185cd4:	85008304 	addi	r20,r16,524
  185cd8:	84c08104 	addi	r19,r16,516
  185cdc:	84808204 	addi	r18,r16,520
	for (i = 0; i < 8; ++i) {
  185ce0:	0023883a 	mov	r17,zero
		if (edid->standard_timings[i].refresh_rate) {
  185ce4:	a1c00017 	ldw	r7,0(r20)
  185ce8:	38001d26 	beq	r7,zero,185d60 <edid_print_v14+0x61c>
			printf("  [%02d] %03d @ %02d Hz ", i, edid->standard_timings[i].horizontal, edid->standard_timings[i].refresh_rate);
  185cec:	99800017 	ldw	r6,0(r19)
  185cf0:	010006b4 	movhi	r4,26
  185cf4:	2136e004 	addi	r4,r4,-9344
  185cf8:	880b883a 	mov	r5,r17
  185cfc:	01891080 	call	189108 <printf>
			switch (edid->standard_timings[i].aspect_ratio) {
  185d00:	90800017 	ldw	r2,0(r18)
  185d04:	00c00044 	movi	r3,1
  185d08:	10c00c26 	beq	r2,r3,185d3c <edid_print_v14+0x5f8>
  185d0c:	18800416 	blt	r3,r2,185d20 <edid_print_v14+0x5dc>
  185d10:	1000111e 	bne	r2,zero,185d58 <edid_print_v14+0x614>
			case ST_AR_16_10:
				printf("16:10\n");
  185d14:	010006b4 	movhi	r4,26
  185d18:	2136e704 	addi	r4,r4,-9316
  185d1c:	00000906 	br	185d44 <edid_print_v14+0x600>

	printf("\nstandard timing ...\n");
	for (i = 0; i < 8; ++i) {
		if (edid->standard_timings[i].refresh_rate) {
			printf("  [%02d] %03d @ %02d Hz ", i, edid->standard_timings[i].horizontal, edid->standard_timings[i].refresh_rate);
			switch (edid->standard_timings[i].aspect_ratio) {
  185d20:	00c00084 	movi	r3,2
  185d24:	10c00926 	beq	r2,r3,185d4c <edid_print_v14+0x608>
  185d28:	00c000c4 	movi	r3,3
  185d2c:	10c00a1e 	bne	r2,r3,185d58 <edid_print_v14+0x614>
				break;
			case ST_AR_5_4:
				printf("5:4\n");
				break;
			case ST_AR_16_9:
				printf("16:9\n");
  185d30:	010006b4 	movhi	r4,26
  185d34:	2136eb04 	addi	r4,r4,-9300
  185d38:	00000206 	br	185d44 <edid_print_v14+0x600>
			switch (edid->standard_timings[i].aspect_ratio) {
			case ST_AR_16_10:
				printf("16:10\n");
				break;
			case ST_AR_4_3:
				printf("4:3\n");
  185d3c:	010006b4 	movhi	r4,26
  185d40:	2136e904 	addi	r4,r4,-9308
  185d44:	018920c0 	call	18920c <puts>
				break;
  185d48:	00000506 	br	185d60 <edid_print_v14+0x61c>
			case ST_AR_5_4:
				printf("5:4\n");
  185d4c:	010006b4 	movhi	r4,26
  185d50:	2136ea04 	addi	r4,r4,-9304
  185d54:	003ffb06 	br	185d44 <__alt_data_end+0xfff85d44>
				break;
			case ST_AR_16_9:
				printf("16:9\n");
				break;
			default:
				printf("\n");
  185d58:	01000284 	movi	r4,10
  185d5c:	018914c0 	call	18914c <putchar>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
	for (i = 0; i < 8; ++i) {
  185d60:	8c400044 	addi	r17,r17,1
  185d64:	00800204 	movi	r2,8
  185d68:	a5000304 	addi	r20,r20,12
  185d6c:	9cc00304 	addi	r19,r19,12
  185d70:	94800304 	addi	r18,r18,12
  185d74:	88bfdb1e 	bne	r17,r2,185ce4 <__alt_data_end+0xfff85ce4>
				break;
			}
		}
	}

	printf("\ndescriptors ...\n");
  185d78:	010006b4 	movhi	r4,26
  185d7c:	2136ed04 	addi	r4,r4,-9292
  185d80:	018920c0 	call	18920c <puts>
  185d84:	85009b04 	addi	r20,r16,620
  185d88:	87009e04 	addi	fp,r16,632
  185d8c:	85c09f04 	addi	r23,r16,636
  185d90:	8580a004 	addi	r22,r16,640
  185d94:	8540a104 	addi	r21,r16,644
  185d98:	84c0a204 	addi	r19,r16,648
  185d9c:	8440aa04 	addi	r17,r16,680
  185da0:	8480a904 	addi	r18,r16,676
	for (i = 0; i < 4; ++i) {
  185da4:	d8000315 	stw	zero,12(sp)
    	if (edid->descriptors[i].type == DT_DETAILED_TIMING) {
  185da8:	88bfef17 	ldw	r2,-68(r17)
  185dac:	1000c11e 	bne	r2,zero,1860b4 <edid_print_v14+0x970>
    		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
  185db0:	d9400317 	ldw	r5,12(sp)
  185db4:	010006b4 	movhi	r4,26
  185db8:	21342604 	addi	r4,r4,-12136
  185dbc:	01891080 	call	189108 <printf>

    		printf("      pixel clock   : %d (Hz)\n", edid->descriptors[i].detailed_timing.pixel_clock);
  185dc0:	a1400017 	ldw	r5,0(r20)
  185dc4:	010006b4 	movhi	r4,26
  185dc8:	21343104 	addi	r4,r4,-12092
  185dcc:	01891080 	call	189108 <printf>
    		printf("      h addressible : %d (pixels)\n", edid->descriptors[i].detailed_timing.width);
  185dd0:	897ff217 	ldw	r5,-56(r17)
  185dd4:	010006b4 	movhi	r4,26
  185dd8:	21343904 	addi	r4,r4,-12060
  185ddc:	01891080 	call	189108 <printf>
    		printf("        blank       : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank);
  185de0:	e1400017 	ldw	r5,0(fp)
  185de4:	010006b4 	movhi	r4,26
  185de8:	21344204 	addi	r4,r4,-12024
  185dec:	01891080 	call	189108 <printf>
    		printf("        fp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_fp);
  185df0:	b1400017 	ldw	r5,0(r22)
  185df4:	010006b4 	movhi	r4,26
  185df8:	21344b04 	addi	r4,r4,-11988
  185dfc:	01891080 	call	189108 <printf>
    		printf("        sync        : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_sync);
  185e00:	99400017 	ldw	r5,0(r19)
  185e04:	010006b4 	movhi	r4,26
  185e08:	21345404 	addi	r4,r4,-11952
  185e0c:	01891080 	call	189108 <printf>
    		printf("        bp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank - edid->descriptors[i].detailed_timing.h_fp - edid->descriptors[i].detailed_timing.h_sync);
  185e10:	b1400017 	ldw	r5,0(r22)
  185e14:	e0800017 	ldw	r2,0(fp)
  185e18:	010006b4 	movhi	r4,26
  185e1c:	21345d04 	addi	r4,r4,-11916
  185e20:	1145c83a 	sub	r2,r2,r5
  185e24:	99400017 	ldw	r5,0(r19)
  185e28:	114bc83a 	sub	r5,r2,r5
  185e2c:	01891080 	call	189108 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.h_size);
  185e30:	897ffa17 	ldw	r5,-24(r17)
  185e34:	010006b4 	movhi	r4,26
  185e38:	21346604 	addi	r4,r4,-11880
  185e3c:	01891080 	call	189108 <printf>
    		printf("      v addressible : %d (lines)\n", edid->descriptors[i].detailed_timing.height);
  185e40:	897ff317 	ldw	r5,-52(r17)
  185e44:	010006b4 	movhi	r4,26
  185e48:	21346e04 	addi	r4,r4,-11848
  185e4c:	01891080 	call	189108 <printf>
    		printf("        blank       : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank);
  185e50:	b9400017 	ldw	r5,0(r23)
  185e54:	010006b4 	movhi	r4,26
  185e58:	21347704 	addi	r4,r4,-11812
  185e5c:	01891080 	call	189108 <printf>
    		printf("        fp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_fp);
  185e60:	a9400017 	ldw	r5,0(r21)
  185e64:	010006b4 	movhi	r4,26
  185e68:	21348004 	addi	r4,r4,-11776
  185e6c:	01891080 	call	189108 <printf>
    		printf("        sync        : %d (lines)\n", edid->descriptors[i].detailed_timing.v_sync);
  185e70:	897ff917 	ldw	r5,-28(r17)
  185e74:	010006b4 	movhi	r4,26
  185e78:	21348904 	addi	r4,r4,-11740
  185e7c:	01891080 	call	189108 <printf>
    		printf("        bp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank - edid->descriptors[i].detailed_timing.v_fp - edid->descriptors[i].detailed_timing.v_sync);
  185e80:	a9400017 	ldw	r5,0(r21)
  185e84:	b8800017 	ldw	r2,0(r23)
  185e88:	010006b4 	movhi	r4,26
  185e8c:	21349204 	addi	r4,r4,-11704
  185e90:	1145c83a 	sub	r2,r2,r5
  185e94:	897ff917 	ldw	r5,-28(r17)
  185e98:	114bc83a 	sub	r5,r2,r5
  185e9c:	01891080 	call	189108 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.v_size);
  185ea0:	897ffb17 	ldw	r5,-20(r17)
  185ea4:	010006b4 	movhi	r4,26
  185ea8:	21346604 	addi	r4,r4,-11880
  185eac:	01891080 	call	189108 <printf>
    		printf("      border (L&R)  : %d (pixels)\n", edid->descriptors[i].detailed_timing.border_lr);
  185eb0:	897ffc17 	ldw	r5,-16(r17)
  185eb4:	010006b4 	movhi	r4,26
  185eb8:	21349b04 	addi	r4,r4,-11668
  185ebc:	01891080 	call	189108 <printf>
    		printf("      border (T&B)  : %d (lines)\n", edid->descriptors[i].detailed_timing.border_tb);
  185ec0:	897ffd17 	ldw	r5,-12(r17)
  185ec4:	010006b4 	movhi	r4,26
  185ec8:	2134a404 	addi	r4,r4,-11632
  185ecc:	01891080 	call	189108 <printf>
    		printf("      interlaced    : %d\n", edid->descriptors[i].detailed_timing.interlaced);
  185ed0:	897ffe17 	ldw	r5,-8(r17)
  185ed4:	010006b4 	movhi	r4,26
  185ed8:	2134ad04 	addi	r4,r4,-11596
  185edc:	01891080 	call	189108 <printf>

    		if (edid->descriptors[i].detailed_timing.stereo == STEREO_NONE) {
  185ee0:	90800017 	ldw	r2,0(r18)
  185ee4:	1000041e 	bne	r2,zero,185ef8 <edid_print_v14+0x7b4>
    			printf("      stereo        : none\n");
  185ee8:	010006b4 	movhi	r4,26
  185eec:	2134b404 	addi	r4,r4,-11568
  185ef0:	018920c0 	call	18920c <puts>
  185ef4:	00002906 	br	185f9c <edid_print_v14+0x858>
    		} else {
        		printf("      stereo        : ");
  185ef8:	010006b4 	movhi	r4,26
  185efc:	2134bb04 	addi	r4,r4,-11540
  185f00:	01891080 	call	189108 <printf>

        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
  185f04:	90800017 	ldw	r2,0(r18)
  185f08:	1080008c 	andi	r2,r2,2
  185f0c:	10000326 	beq	r2,zero,185f1c <edid_print_v14+0x7d8>
            		printf("field_seq_right ");
  185f10:	010006b4 	movhi	r4,26
  185f14:	2134c104 	addi	r4,r4,-11516
  185f18:	01891080 	call	189108 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
  185f1c:	90800017 	ldw	r2,0(r18)
  185f20:	1080010c 	andi	r2,r2,4
  185f24:	10000326 	beq	r2,zero,185f34 <edid_print_v14+0x7f0>
            		printf("field_seq_left ");
  185f28:	010006b4 	movhi	r4,26
  185f2c:	2134c604 	addi	r4,r4,-11496
  185f30:	01891080 	call	189108 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
  185f34:	90800017 	ldw	r2,0(r18)
  185f38:	1080020c 	andi	r2,r2,8
  185f3c:	10000326 	beq	r2,zero,185f4c <edid_print_v14+0x808>
            		printf("2way_interleave_right ");
  185f40:	010006b4 	movhi	r4,26
  185f44:	2134ca04 	addi	r4,r4,-11480
  185f48:	01891080 	call	189108 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
  185f4c:	90800017 	ldw	r2,0(r18)
  185f50:	1080040c 	andi	r2,r2,16
  185f54:	10000326 	beq	r2,zero,185f64 <edid_print_v14+0x820>
            		printf("2way_interleave_left ");
  185f58:	010006b4 	movhi	r4,26
  185f5c:	2134d004 	addi	r4,r4,-11456
  185f60:	01891080 	call	189108 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_4WAY_INTERLEAVE)
  185f64:	90800017 	ldw	r2,0(r18)
  185f68:	1080080c 	andi	r2,r2,32
  185f6c:	10000326 	beq	r2,zero,185f7c <edid_print_v14+0x838>
            		printf("4way_interleave ");
  185f70:	010006b4 	movhi	r4,26
  185f74:	2134d604 	addi	r4,r4,-11432
  185f78:	01891080 	call	189108 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
  185f7c:	90800017 	ldw	r2,0(r18)
  185f80:	1080100c 	andi	r2,r2,64
  185f84:	10000326 	beq	r2,zero,185f94 <edid_print_v14+0x850>
            		printf("side-by-side ");
  185f88:	010006b4 	movhi	r4,26
  185f8c:	2134db04 	addi	r4,r4,-11412
  185f90:	01891080 	call	189108 <printf>

        		printf("\n");
  185f94:	01000284 	movi	r4,10
  185f98:	018914c0 	call	18914c <putchar>
    		}

    		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC) {
  185f9c:	88800017 	ldw	r2,0(r17)
  185fa0:	10c0004c 	andi	r3,r2,1
  185fa4:	18002126 	beq	r3,zero,18602c <edid_print_v14+0x8e8>

    			printf("      analog sync   : composite");
  185fa8:	010006b4 	movhi	r4,26
  185fac:	2134df04 	addi	r4,r4,-11396
  185fb0:	01891080 	call	189108 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC)
  185fb4:	88800017 	ldw	r2,0(r17)
  185fb8:	1080004c 	andi	r2,r2,1
  185fbc:	10000326 	beq	r2,zero,185fcc <edid_print_v14+0x888>
            		printf(" bipolar");
  185fc0:	010006b4 	movhi	r4,26
  185fc4:	2134e704 	addi	r4,r4,-11364
  185fc8:	01891080 	call	189108 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION) {
  185fcc:	88800017 	ldw	r2,0(r17)
  185fd0:	1080010c 	andi	r2,r2,4
  185fd4:	10000f26 	beq	r2,zero,186014 <edid_print_v14+0x8d0>
            		printf(" with_serrations");
  185fd8:	010006b4 	movhi	r4,26
  185fdc:	2134ea04 	addi	r4,r4,-11352
  185fe0:	01891080 	call	189108 <printf>
        			if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_G)
  185fe4:	88800017 	ldw	r2,0(r17)
  185fe8:	1080020c 	andi	r2,r2,8
  185fec:	10000326 	beq	r2,zero,185ffc <edid_print_v14+0x8b8>
						printf(" syn_on_green");
  185ff0:	010006b4 	movhi	r4,26
  185ff4:	2134ef04 	addi	r4,r4,-11332
  185ff8:	01891080 	call	189108 <printf>
					if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_RGB)
  185ffc:	88800017 	ldw	r2,0(r17)
  186000:	1080040c 	andi	r2,r2,16
  186004:	10000626 	beq	r2,zero,186020 <edid_print_v14+0x8dc>
						printf(" syn_on_rgb");
  186008:	010006b4 	movhi	r4,26
  18600c:	2134f304 	addi	r4,r4,-11316
  186010:	00000206 	br	18601c <edid_print_v14+0x8d8>
        		} else {
            		printf(" without_serrations");
  186014:	010006b4 	movhi	r4,26
  186018:	2134f604 	addi	r4,r4,-11304
  18601c:	01891080 	call	189108 <printf>
        		}

				printf("\n");
  186020:	01000284 	movi	r4,10
  186024:	018914c0 	call	18914c <putchar>
  186028:	00010b06 	br	186458 <edid_print_v14+0xd14>

    		} else if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SYNC) {
  18602c:	10c0080c 	andi	r3,r2,32
  186030:	18000926 	beq	r3,zero,186058 <edid_print_v14+0x914>

    			printf("      digital sync  : composite");
  186034:	010006b4 	movhi	r4,26
  186038:	2134fb04 	addi	r4,r4,-11284
  18603c:	01891080 	call	189108 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SERRATION)
  186040:	88800017 	ldw	r2,0(r17)
  186044:	1080100c 	andi	r2,r2,64
  186048:	103ff226 	beq	r2,zero,186014 <__alt_data_end+0xfff86014>
            		printf(" with_serrations");
  18604c:	010006b4 	movhi	r4,26
  186050:	2134ea04 	addi	r4,r4,-11352
  186054:	003ff106 	br	18601c <__alt_data_end+0xfff8601c>
        		else
        			printf(" without_serrations");

        		printf("\n");

    		} else if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_SYNC) {
  186058:	1080200c 	andi	r2,r2,128
  18605c:	1000fe26 	beq	r2,zero,186458 <edid_print_v14+0xd14>

    			printf("      digital sync  : seperate");
  186060:	010006b4 	movhi	r4,26
  186064:	21350304 	addi	r4,r4,-11252
  186068:	01891080 	call	189108 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_VSYNC_N)
  18606c:	88800017 	ldw	r2,0(r17)
  186070:	1080400c 	andi	r2,r2,256
  186074:	10000326 	beq	r2,zero,186084 <edid_print_v14+0x940>
					printf(" vsync_n");
  186078:	010006b4 	movhi	r4,26
  18607c:	21350b04 	addi	r4,r4,-11220
  186080:	00000206 	br	18608c <edid_print_v14+0x948>
				else
					printf(" vsync_p");
  186084:	010006b4 	movhi	r4,26
  186088:	21350e04 	addi	r4,r4,-11208
  18608c:	01891080 	call	189108 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_HSYNC_N)
  186090:	88800017 	ldw	r2,0(r17)
  186094:	1081000c 	andi	r2,r2,1024
  186098:	10000326 	beq	r2,zero,1860a8 <edid_print_v14+0x964>
					printf(" hsync_n");
  18609c:	010006b4 	movhi	r4,26
  1860a0:	21351104 	addi	r4,r4,-11196
  1860a4:	003fdd06 	br	18601c <__alt_data_end+0xfff8601c>
				else
					printf(" hsync_p");
  1860a8:	010006b4 	movhi	r4,26
  1860ac:	21351404 	addi	r4,r4,-11184
  1860b0:	003fda06 	br	18601c <__alt_data_end+0xfff8601c>

        		printf("\n");
    		}

    	} else if (edid->descriptors[i].type == DT_DISPLAY_DESCRIPTOR) {
  1860b4:	00c00044 	movi	r3,1
  1860b8:	10c0e71e 	bne	r2,r3,186458 <edid_print_v14+0xd14>

    		printf("\n  [%d] DD -- display descriptor\n", i);
  1860bc:	d9400317 	ldw	r5,12(sp)
  1860c0:	010006b4 	movhi	r4,26
  1860c4:	2136f204 	addi	r4,r4,-9272
  1860c8:	01891080 	call	189108 <printf>

        	switch (edid->descriptors[i].tag) {  // tag
  1860cc:	88bff017 	ldw	r2,-64(r17)
  1860d0:	00c00204 	movi	r3,8
  1860d4:	10bfc244 	addi	r2,r2,-247
  1860d8:	1880df36 	bltu	r3,r2,186458 <edid_print_v14+0xd14>
  1860dc:	100490ba 	slli	r2,r2,2
  1860e0:	00c00634 	movhi	r3,24
  1860e4:	18d83d04 	addi	r3,r3,24820
  1860e8:	10c5883a 	add	r2,r2,r3
  1860ec:	10800017 	ldw	r2,0(r2)
  1860f0:	1000683a 	jmp	r2
  1860f4:	001863c4 	movi	zero,24975
  1860f8:	001863b4 	movhi	zero,24974
  1860fc:	001863a8 	cmpgeui	zero,zero,24974
  186100:	001862e4 	muli	zero,zero,24971
  186104:	00186274 	movhi	zero,24969
  186108:	00186260 	cmpeqi	zero,zero,24969
  18610c:	00186124 	muli	zero,zero,24964
  186110:	00186260 	cmpeqi	zero,zero,24969
  186114:	00186118 	cmpnei	zero,zero,24964
            case DTAG_PRODUCT_SERIAL:
            	printf("      product serial : %s\n", edid->descriptors[i].serial);
  186118:	010006b4 	movhi	r4,26
  18611c:	2136fb04 	addi	r4,r4,-9236
  186120:	00005106 	br	186268 <edid_print_v14+0xb24>
            	printf("      data string : %s\n", edid->descriptors[i].string);
                break;
            case DTAG_RANGE_LIMIT:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;

        		printf("      range limits and additional timing ...\n");
  186124:	010006b4 	movhi	r4,26
  186128:	21370804 	addi	r4,r4,-9184
  18612c:	018920c0 	call	18920c <puts>

        		printf("      horizonatal rate minimum : %d (kHz)\n", edid->descriptors[i].range_limits.h_min);
  186130:	b9400017 	ldw	r5,0(r23)
  186134:	010006b4 	movhi	r4,26
  186138:	21371404 	addi	r4,r4,-9136
  18613c:	01891080 	call	189108 <printf>
        		printf("      horizontal rate maximum  : %d (KHz)\n", edid->descriptors[i].range_limits.h_max);
  186140:	b1400017 	ldw	r5,0(r22)
  186144:	010006b4 	movhi	r4,26
  186148:	21371f04 	addi	r4,r4,-9092
  18614c:	01891080 	call	189108 <printf>

        		switch (edid->descriptors[i].range_limits.h_offset) {
  186150:	88bff217 	ldw	r2,-56(r17)
  186154:	00c00044 	movi	r3,1
  186158:	10c00626 	beq	r2,r3,186174 <edid_print_v14+0xa30>
  18615c:	00c00084 	movi	r3,2
  186160:	10c00726 	beq	r2,r3,186180 <edid_print_v14+0xa3c>
  186164:	1000091e 	bne	r2,zero,18618c <edid_print_v14+0xa48>
            	case HRO_ZERO:
            		printf("      horizontal rate offset   : no offset\n");
  186168:	010006b4 	movhi	r4,26
  18616c:	21372a04 	addi	r4,r4,-9048
  186170:	00000506 	br	186188 <edid_print_v14+0xa44>
            		break;
            	case HRO_MAX_255_MIN_ZERO:
            		printf("      horizontal rate offset   : max)+255kHz\n");
  186174:	010006b4 	movhi	r4,26
  186178:	21373504 	addi	r4,r4,-9004
  18617c:	00000206 	br	186188 <edid_print_v14+0xa44>
            		break;
            	case HRO_MAX_255_MIN_255:
            		printf("      horizontal rate offset   : max)+255kHz min)+255kHz\n");
  186180:	010006b4 	movhi	r4,26
  186184:	21374104 	addi	r4,r4,-8956
  186188:	018920c0 	call	18920c <puts>
            		break;
            	}

        		printf("      vertical rate minimum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_min);
  18618c:	897ff317 	ldw	r5,-52(r17)
  186190:	010006b4 	movhi	r4,26
  186194:	21375004 	addi	r4,r4,-8896
  186198:	01891080 	call	189108 <printf>
        		printf("      vertical rate maximum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_max);
  18619c:	e1400017 	ldw	r5,0(fp)
  1861a0:	010006b4 	movhi	r4,26
  1861a4:	21375b04 	addi	r4,r4,-8852
  1861a8:	01891080 	call	189108 <printf>

        		switch (edid->descriptors[i].range_limits.v_offset) {
  1861ac:	a0800017 	ldw	r2,0(r20)
  1861b0:	00c00044 	movi	r3,1
  1861b4:	10c00626 	beq	r2,r3,1861d0 <edid_print_v14+0xa8c>
  1861b8:	00c00084 	movi	r3,2
  1861bc:	10c00726 	beq	r2,r3,1861dc <edid_print_v14+0xa98>
  1861c0:	1000091e 	bne	r2,zero,1861e8 <edid_print_v14+0xaa4>
            	case VRO_ZERO:
            		printf("      vertical rate offset     : no offset\n");
  1861c4:	010006b4 	movhi	r4,26
  1861c8:	21376604 	addi	r4,r4,-8808
  1861cc:	00000506 	br	1861e4 <edid_print_v14+0xaa0>
            		break;
            	case VRO_MAX_255_MIN_ZERO:
            		printf("      vertical rate offset     : max)+255Hz\n");
  1861d0:	010006b4 	movhi	r4,26
  1861d4:	21377104 	addi	r4,r4,-8764
  1861d8:	00000206 	br	1861e4 <edid_print_v14+0xaa0>
            		break;
            	case VRO_MAX_255_MIN_255:
            		printf("      vertical rate offset     : max)+255Hz && min)+255Hz\n");
  1861dc:	010006b4 	movhi	r4,26
  1861e0:	21377c04 	addi	r4,r4,-8720
  1861e4:	018920c0 	call	18920c <puts>
            		break;
            	}

        		printf("      pixel clock maximum      : %d (MHz)\n", edid->descriptors[i].range_limits.p_max);
  1861e8:	a9400017 	ldw	r5,0(r21)
  1861ec:	010006b4 	movhi	r4,26
  1861f0:	21378b04 	addi	r4,r4,-8660
  1861f4:	01891080 	call	189108 <printf>

                // additional timing support flags
            	if (edid->descriptors[i].range_limits.timing_flags == 0) {
  1861f8:	98800017 	ldw	r2,0(r19)
  1861fc:	1000031e 	bne	r2,zero,18620c <edid_print_v14+0xac8>
            		printf("      additional timing flags  : none\n");
  186200:	010006b4 	movhi	r4,26
  186204:	21379604 	addi	r4,r4,-8616
  186208:	00006c06 	br	1863bc <edid_print_v14+0xc78>
            	} else {
            		printf("      additional timing flags  : ");
  18620c:	010006b4 	movhi	r4,26
  186210:	2137a004 	addi	r4,r4,-8576
  186214:	01891080 	call	189108 <printf>

            		if (edid->descriptors[i].range_limits.timing_flags & TF_DEFAULT_GTF)
                		printf("default_GTF ");
            		if (edid->descriptors[i].range_limits.timing_flags & TF_RANGE_LIMITS)
  186218:	98800017 	ldw	r2,0(r19)
  18621c:	1080004c 	andi	r2,r2,1
  186220:	10000326 	beq	r2,zero,186230 <edid_print_v14+0xaec>
                		printf("none ");
  186224:	010006b4 	movhi	r4,26
  186228:	2137a904 	addi	r4,r4,-8540
  18622c:	01891080 	call	189108 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_SECOND_GTF)
  186230:	98800017 	ldw	r2,0(r19)
  186234:	1080008c 	andi	r2,r2,2
  186238:	10000326 	beq	r2,zero,186248 <edid_print_v14+0xb04>
                		printf("second_GTF ");
  18623c:	010006b4 	movhi	r4,26
  186240:	2137ab04 	addi	r4,r4,-8532
  186244:	01891080 	call	189108 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_CVT)
  186248:	98800017 	ldw	r2,0(r19)
  18624c:	1080010c 	andi	r2,r2,4
  186250:	103f7326 	beq	r2,zero,186020 <__alt_data_end+0xfff86020>
                		printf("CVT ");
  186254:	010006b4 	movhi	r4,26
  186258:	2137ae04 	addi	r4,r4,-8520
  18625c:	003f6f06 	br	18601c <__alt_data_end+0xfff8601c>
            	}

                break;

            case DTAG_PRODUCT_NAME:
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
  186260:	010006b4 	movhi	r4,26
  186264:	21370204 	addi	r4,r4,-9208
  186268:	a00b883a 	mov	r5,r20
  18626c:	01891080 	call	189108 <printf>
                break;
  186270:	00007906 	br	186458 <edid_print_v14+0xd14>
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");
  186274:	010006b4 	movhi	r4,26
  186278:	2137b004 	addi	r4,r4,-8512
  18627c:	018920c0 	call	18920c <puts>

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
  186280:	89bff217 	ldw	r6,-56(r17)
  186284:	89fff317 	ldw	r7,-52(r17)
  186288:	e1000017 	ldw	r4,0(fp)
  18628c:	d9800615 	stw	r6,24(sp)
  186290:	d9c00715 	stw	r7,28(sp)
  186294:	0188c900 	call	188c90 <__extendsfdf2>
  186298:	d8c00115 	stw	r3,4(sp)
  18629c:	d8800015 	stw	r2,0(sp)
  1862a0:	a1400017 	ldw	r5,0(r20)
  1862a4:	d9800617 	ldw	r6,24(sp)
  1862a8:	d9c00717 	ldw	r7,28(sp)
  1862ac:	010006b4 	movhi	r4,26
  1862b0:	2137b604 	addi	r4,r4,-8488
  1862b4:	01891080 	call	189108 <printf>
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
  1862b8:	99000017 	ldw	r4,0(r19)
  1862bc:	0188c900 	call	188c90 <__extendsfdf2>
  1862c0:	d8800015 	stw	r2,0(sp)
  1862c4:	d8c00115 	stw	r3,4(sp)
  1862c8:	b9400017 	ldw	r5,0(r23)
  1862cc:	b1800017 	ldw	r6,0(r22)
  1862d0:	a9c00017 	ldw	r7,0(r21)
  1862d4:	010006b4 	movhi	r4,26
  1862d8:	2137c404 	addi	r4,r4,-8432
  1862dc:	01891080 	call	189108 <printf>
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
					edid->descriptors[i].white_point[1].y,
					edid->descriptors[i].white_point[1].gamma);

                break;
  1862e0:	00005d06 	br	186458 <edid_print_v14+0xd14>

            case DTAG_STANDARD_TIMING:
            {
            	int j;

            	printf("      extra standard timing ...\n");
  1862e4:	010006b4 	movhi	r4,26
  1862e8:	2137d204 	addi	r4,r4,-8376
  1862ec:	018920c0 	call	18920c <puts>
  1862f0:	88c00404 	addi	r3,r17,16
  1862f4:	d8c00415 	stw	r3,16(sp)
  1862f8:	00c00244 	movi	r3,9
  1862fc:	d8c00515 	stw	r3,20(sp)

            	for (j = 0; j < 6; ++j) {
            		if (edid->descriptors[i].extra_standard_timings[j].refresh_rate) {
  186300:	d8c00417 	ldw	r3,16(sp)
  186304:	19c00017 	ldw	r7,0(r3)
  186308:	38001e26 	beq	r7,zero,186384 <edid_print_v14+0xc40>
            			printf("  [%02d] %03d @ %02d Hz ", j + 9, edid->descriptors[i].extra_standard_timings[j].horizontal, edid->descriptors[i].extra_standard_timings[j].refresh_rate);
  18630c:	19bffe17 	ldw	r6,-8(r3)
  186310:	d9400517 	ldw	r5,20(sp)
  186314:	010006b4 	movhi	r4,26
  186318:	2136e004 	addi	r4,r4,-9344
  18631c:	01891080 	call	189108 <printf>
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
  186320:	d8c00417 	ldw	r3,16(sp)
  186324:	18bfff17 	ldw	r2,-4(r3)
  186328:	00c00044 	movi	r3,1
  18632c:	10c00c26 	beq	r2,r3,186360 <edid_print_v14+0xc1c>
  186330:	18800416 	blt	r3,r2,186344 <edid_print_v14+0xc00>
  186334:	1000111e 	bne	r2,zero,18637c <edid_print_v14+0xc38>
            			case ST_AR_16_10:
            				printf("16:10\n");
  186338:	010006b4 	movhi	r4,26
  18633c:	2136e704 	addi	r4,r4,-9316
  186340:	00000906 	br	186368 <edid_print_v14+0xc24>
            	printf("      extra standard timing ...\n");

            	for (j = 0; j < 6; ++j) {
            		if (edid->descriptors[i].extra_standard_timings[j].refresh_rate) {
            			printf("  [%02d] %03d @ %02d Hz ", j + 9, edid->descriptors[i].extra_standard_timings[j].horizontal, edid->descriptors[i].extra_standard_timings[j].refresh_rate);
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
  186344:	00c00084 	movi	r3,2
  186348:	10c00926 	beq	r2,r3,186370 <edid_print_v14+0xc2c>
  18634c:	00c000c4 	movi	r3,3
  186350:	10c00a1e 	bne	r2,r3,18637c <edid_print_v14+0xc38>
            				break;
            			case ST_AR_5_4:
            				printf("5:4\n");
            				break;
            			case ST_AR_16_9:
            				printf("16:9\n");
  186354:	010006b4 	movhi	r4,26
  186358:	2136eb04 	addi	r4,r4,-9300
  18635c:	00000206 	br	186368 <edid_print_v14+0xc24>
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
            			case ST_AR_16_10:
            				printf("16:10\n");
            				break;
            			case ST_AR_4_3:
            				printf("4:3\n");
  186360:	010006b4 	movhi	r4,26
  186364:	2136e904 	addi	r4,r4,-9308
  186368:	018920c0 	call	18920c <puts>
            				break;
  18636c:	00000506 	br	186384 <edid_print_v14+0xc40>
            			case ST_AR_5_4:
            				printf("5:4\n");
  186370:	010006b4 	movhi	r4,26
  186374:	2136ea04 	addi	r4,r4,-9304
  186378:	003ffb06 	br	186368 <__alt_data_end+0xfff86368>
            				break;
            			case ST_AR_16_9:
            				printf("16:9\n");
            				break;
            			default:
            				printf("\n");
  18637c:	01000284 	movi	r4,10
  186380:	018914c0 	call	18914c <putchar>
  186384:	d8c00417 	ldw	r3,16(sp)
            {
            	int j;

            	printf("      extra standard timing ...\n");

            	for (j = 0; j < 6; ++j) {
  186388:	008003c4 	movi	r2,15
  18638c:	18c00304 	addi	r3,r3,12
  186390:	d8c00415 	stw	r3,16(sp)
  186394:	d8c00517 	ldw	r3,20(sp)
  186398:	18c00044 	addi	r3,r3,1
  18639c:	d8c00515 	stw	r3,20(sp)
  1863a0:	18bfd71e 	bne	r3,r2,186300 <__alt_data_end+0xfff86300>
  1863a4:	00002c06 	br	186458 <edid_print_v14+0xd14>
                break;
            }

            case DTAG_DCM_DATA:
            	// display color management data
            	printf("      DCM -- display color management data ... (skipped)\n");
  1863a8:	010006b4 	movhi	r4,26
  1863ac:	2137da04 	addi	r4,r4,-8344
  1863b0:	00000206 	br	1863bc <edid_print_v14+0xc78>
            	break;

            case DTAG_CVT_TIMING:
            	printf("      CVT -- coordinated video timing ... (skipped)\n");
  1863b4:	010006b4 	movhi	r4,26
  1863b8:	2137e904 	addi	r4,r4,-8284
  1863bc:	018920c0 	call	18920c <puts>
                break;
  1863c0:	00002506 	br	186458 <edid_print_v14+0xd14>
            case DTAG_ESTABLISHED_TIMING_III:
            {
            	int j ;

            	printf("      established timing 3 ...\n");
  1863c4:	010006b4 	movhi	r4,26
  1863c8:	2137f604 	addi	r4,r4,-8232
  1863cc:	018920c0 	call	18920c <puts>
  1863d0:	88c02b04 	addi	r3,r17,172
  1863d4:	8a009104 	addi	r8,r17,580

            	for (j = 0; j < 17; ++j) {
            		if (edid->descriptors[i].timing_3[j].valid)
  1863d8:	18800017 	ldw	r2,0(r3)
  1863dc:	10001c26 	beq	r2,zero,186450 <edid_print_v14+0xd0c>
            			printf("  [%02d] %03d x %03d @ %02d Hz %s %s\n", i, edid->descriptors[i].timing_3[j].width, edid->descriptors[i].timing_3[j].height, edid->descriptors[i].timing_3[j].refresh, edid->descriptors[i].timing_3[j].interlaced ? "I" : " ", edid->descriptors[i].timing_3[j].rb ? "RB" : " ");
  1863e0:	18800417 	ldw	r2,16(r3)
  1863e4:	19800117 	ldw	r6,4(r3)
  1863e8:	19c00217 	ldw	r7,8(r3)
  1863ec:	19400317 	ldw	r5,12(r3)
  1863f0:	1000031e 	bne	r2,zero,186400 <edid_print_v14+0xcbc>
  1863f4:	010006b4 	movhi	r4,26
  1863f8:	21319a04 	addi	r4,r4,-14744
  1863fc:	00000206 	br	186408 <edid_print_v14+0xcc4>
  186400:	010006b4 	movhi	r4,26
  186404:	21351c04 	addi	r4,r4,-11152
  186408:	18800517 	ldw	r2,20(r3)
  18640c:	1000031e 	bne	r2,zero,18641c <edid_print_v14+0xcd8>
  186410:	008006b4 	movhi	r2,26
  186414:	10b19a04 	addi	r2,r2,-14744
  186418:	00000206 	br	186424 <edid_print_v14+0xce0>
  18641c:	008006b4 	movhi	r2,26
  186420:	10b51d04 	addi	r2,r2,-11148
  186424:	d9400015 	stw	r5,0(sp)
  186428:	d9400317 	ldw	r5,12(sp)
  18642c:	d9000115 	stw	r4,4(sp)
  186430:	010006b4 	movhi	r4,26
  186434:	d8800215 	stw	r2,8(sp)
  186438:	2137fe04 	addi	r4,r4,-8200
  18643c:	d8c00615 	stw	r3,24(sp)
  186440:	da000715 	stw	r8,28(sp)
  186444:	01891080 	call	189108 <printf>
  186448:	da000717 	ldw	r8,28(sp)
  18644c:	d8c00617 	ldw	r3,24(sp)
  186450:	18c00604 	addi	r3,r3,24
            {
            	int j ;

            	printf("      established timing 3 ...\n");

            	for (j = 0; j < 17; ++j) {
  186454:	1a3fe01e 	bne	r3,r8,1863d8 <__alt_data_end+0xfff863d8>
			}
		}
	}

	printf("\ndescriptors ...\n");
	for (i = 0; i < 4; ++i) {
  186458:	d8800317 	ldw	r2,12(sp)
  18645c:	a5015c04 	addi	r20,r20,1392
  186460:	e7015c04 	addi	fp,fp,1392
  186464:	10800044 	addi	r2,r2,1
  186468:	d8800315 	stw	r2,12(sp)
  18646c:	d8c00317 	ldw	r3,12(sp)
  186470:	00800104 	movi	r2,4
  186474:	bdc15c04 	addi	r23,r23,1392
  186478:	b5815c04 	addi	r22,r22,1392
  18647c:	ad415c04 	addi	r21,r21,1392
  186480:	9cc15c04 	addi	r19,r19,1392
  186484:	8c415c04 	addi	r17,r17,1392
  186488:	94815c04 	addi	r18,r18,1392
  18648c:	18be461e 	bne	r3,r2,185da8 <__alt_data_end+0xfff85da8>
  186490:	84860b04 	addi	r18,r16,6188
  186494:	0023883a 	mov	r17,zero
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
		switch (edid->ext_data[i].ext_tag) {
  186498:	05000084 	movi	r20,2
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
  18649c:	04c00204 	movi	r19,8
		switch (edid->ext_data[i].ext_tag) {
  1864a0:	90800017 	ldw	r2,0(r18)
  1864a4:	1500031e 	bne	r2,r20,1864b4 <edid_print_v14+0xd70>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
  1864a8:	8009883a 	mov	r4,r16
  1864ac:	880b883a 	mov	r5,r17
  1864b0:	01824140 	call	182414 <edid_print_cea>
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
  1864b4:	8c400044 	addi	r17,r17,1
  1864b8:	94816f04 	addi	r18,r18,1468
  1864bc:	8cfff81e 	bne	r17,r19,1864a0 <__alt_data_end+0xfff864a0>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
			break;
		}
	}
}
  1864c0:	dfc01117 	ldw	ra,68(sp)
  1864c4:	df001017 	ldw	fp,64(sp)
  1864c8:	ddc00f17 	ldw	r23,60(sp)
  1864cc:	dd800e17 	ldw	r22,56(sp)
  1864d0:	dd400d17 	ldw	r21,52(sp)
  1864d4:	dd000c17 	ldw	r20,48(sp)
  1864d8:	dcc00b17 	ldw	r19,44(sp)
  1864dc:	dc800a17 	ldw	r18,40(sp)
  1864e0:	dc400917 	ldw	r17,36(sp)
  1864e4:	dc000817 	ldw	r16,32(sp)
  1864e8:	dec01204 	addi	sp,sp,72
  1864ec:	f800283a 	ret

001864f0 <reg_read>:
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
  1864f0:	defffb04 	addi	sp,sp,-20
	alt_u8 * regv = (alt_u8 *)data;

	adv7513_i2c_bffr.byte_arry[0] = reg & 0xff;
  1864f4:	d1670085 	stb	r5,-25598(gp)
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
  1864f8:	dc400215 	stw	r17,8(sp)
  1864fc:	2023883a 	mov	r17,r4
	alt_u8 * regv = (alt_u8 *)data;

	adv7513_i2c_bffr.byte_arry[0] = reg & 0xff;

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  186500:	21000003 	ldbu	r4,0(r4)
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
  186504:	dc000115 	stw	r16,4(sp)
	alt_u8 * regv = (alt_u8 *)data;

	adv7513_i2c_bffr.byte_arry[0] = reg & 0xff;

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  186508:	04000044 	movi	r16,1
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
  18650c:	dc800315 	stw	r18,12(sp)
	alt_u8 * regv = (alt_u8 *)data;

	adv7513_i2c_bffr.byte_arry[0] = reg & 0xff;

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  186510:	d8000015 	stw	zero,0(sp)
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
  186514:	3025883a 	mov	r18,r6
	alt_u8 * regv = (alt_u8 *)data;

	adv7513_i2c_bffr.byte_arry[0] = reg & 0xff;

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  186518:	d1670084 	addi	r5,gp,-25598
  18651c:	800d883a 	mov	r6,r16
  186520:	800f883a 	mov	r7,r16
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
  186524:	dfc00415 	stw	ra,16(sp)
	alt_u8 * regv = (alt_u8 *)data;

	adv7513_i2c_bffr.byte_arry[0] = reg & 0xff;

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,0))	{
  186528:	01875f80 	call	1875f8 <i2c_xtn_write>
  18652c:	10000226 	beq	r2,zero,186538 <reg_read+0x48>
		return -1;
  186530:	00bfffc4 	movi	r2,-1
  186534:	00000a06 	br	186560 <reg_read+0x70>
	}

	if(i2c_xtn_read(ec->slave_addr,adv7513_i2c_bffr.byte_arry,1,1,1))	{
  186538:	89000003 	ldbu	r4,0(r17)
  18653c:	dc000015 	stw	r16,0(sp)
  186540:	d1670084 	addi	r5,gp,-25598
  186544:	800d883a 	mov	r6,r16
  186548:	800f883a 	mov	r7,r16
  18654c:	01876e00 	call	1876e0 <i2c_xtn_read>
  186550:	103ff71e 	bne	r2,zero,186530 <__alt_data_end+0xfff86530>
		return -1;
	}

	*regv = adv7513_i2c_bffr.byte_arry[0];
  186554:	d0a70083 	ldbu	r2,-25598(gp)
  186558:	90800005 	stb	r2,0(r18)

	return 0;
  18655c:	0005883a 	mov	r2,zero
}
  186560:	dfc00417 	ldw	ra,16(sp)
  186564:	dc800317 	ldw	r18,12(sp)
  186568:	dc400217 	ldw	r17,8(sp)
  18656c:	dc000117 	ldw	r16,4(sp)
  186570:	dec00504 	addi	sp,sp,20
  186574:	f800283a 	ret

00186578 <reg_write>:

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
	adv7513_i2c_bffr.val = ((data & 0xff) << 8) + (reg & 0xff);
  186578:	300c923a 	slli	r6,r6,8
  18657c:	29403fcc 	andi	r5,r5,255

	return 0;
}

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
  186580:	defffe04 	addi	sp,sp,-8
	adv7513_i2c_bffr.val = ((data & 0xff) << 8) + (reg & 0xff);
  186584:	314b883a 	add	r5,r6,r5
  186588:	d167008d 	sth	r5,-25598(gp)

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,2,1,1))	{
  18658c:	21000003 	ldbu	r4,0(r4)
  186590:	01c00044 	movi	r7,1
  186594:	d9c00015 	stw	r7,0(sp)
  186598:	d1670084 	addi	r5,gp,-25598
  18659c:	01800084 	movi	r6,2

	return 0;
}

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
  1865a0:	dfc00115 	stw	ra,4(sp)
	adv7513_i2c_bffr.val = ((data & 0xff) << 8) + (reg & 0xff);

	if(i2c_xtn_write(ec->slave_addr,adv7513_i2c_bffr.byte_arry,2,1,1))	{
  1865a4:	01875f80 	call	1875f8 <i2c_xtn_write>
  1865a8:	1004c03a 	cmpne	r2,r2,zero
		return -1;
	}

	return 0;
}
  1865ac:	0085c83a 	sub	r2,zero,r2
  1865b0:	dfc00117 	ldw	ra,4(sp)
  1865b4:	dec00204 	addi	sp,sp,8
  1865b8:	f800283a 	ret

001865bc <reg_update_bits>:

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
  1865bc:	defffa04 	addi	sp,sp,-24
  1865c0:	dc400215 	stw	r17,8(sp)
  1865c4:	3023883a 	mov	r17,r6
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
  1865c8:	d80d883a 	mov	r6,sp

	return 0;
}

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
  1865cc:	dcc00415 	stw	r19,16(sp)
  1865d0:	dc800315 	stw	r18,12(sp)
  1865d4:	dc000115 	stw	r16,4(sp)
  1865d8:	dfc00515 	stw	ra,20(sp)
  1865dc:	2027883a 	mov	r19,r4
  1865e0:	2825883a 	mov	r18,r5
  1865e4:	3821883a 	mov	r16,r7
	alt_u8 regv = 0;
  1865e8:	d8000005 	stb	zero,0(sp)

	if(reg_read(ec,reg,&regv) < 0)
  1865ec:	01864f00 	call	1864f0 <reg_read>
  1865f0:	10000d16 	blt	r2,zero,186628 <reg_update_bits+0x6c>
		return -1;

	regv &= ~((alt_u8)mask);
  1865f4:	d8800003 	ldbu	r2,0(sp)
  1865f8:	044c303a 	nor	r6,zero,r17

	regv |= ((alt_u8)data & (alt_u8)mask);
  1865fc:	8c20703a 	and	r16,r17,r16
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
		return -1;

	regv &= ~((alt_u8)mask);
  186600:	3084703a 	and	r2,r6,r2

	regv |= ((alt_u8)data & (alt_u8)mask);
  186604:	140cb03a 	or	r6,r2,r16
  186608:	d9800005 	stb	r6,0(sp)

	if(reg_write(ec,reg,regv))
  18660c:	9809883a 	mov	r4,r19
  186610:	900b883a 	mov	r5,r18
  186614:	31803fcc 	andi	r6,r6,255
  186618:	01865780 	call	186578 <reg_write>
  18661c:	1004c03a 	cmpne	r2,r2,zero
  186620:	0085c83a 	sub	r2,zero,r2
  186624:	00000106 	br	18662c <reg_update_bits+0x70>
int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
		return -1;
  186628:	00bfffc4 	movi	r2,-1

	if(reg_write(ec,reg,regv))
		return -1;

	return 0;
}
  18662c:	dfc00517 	ldw	ra,20(sp)
  186630:	dcc00417 	ldw	r19,16(sp)
  186634:	dc800317 	ldw	r18,12(sp)
  186638:	dc400217 	ldw	r17,8(sp)
  18663c:	dc000117 	ldw	r16,4(sp)
  186640:	dec00604 	addi	sp,sp,24
  186644:	f800283a 	ret

00186648 <reg_or_bits>:

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
  186648:	defffb04 	addi	sp,sp,-20
  18664c:	dc800315 	stw	r18,12(sp)
  186650:	3025883a 	mov	r18,r6
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
  186654:	d80d883a 	mov	r6,sp

	return 0;
}

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
  186658:	dc400215 	stw	r17,8(sp)
  18665c:	dc000115 	stw	r16,4(sp)
  186660:	dfc00415 	stw	ra,16(sp)
  186664:	2023883a 	mov	r17,r4
  186668:	2821883a 	mov	r16,r5
	alt_u8 regv = 0;
  18666c:	d8000005 	stb	zero,0(sp)

	if(reg_read(ec,reg,&regv) < 0)
  186670:	01864f00 	call	1864f0 <reg_read>
  186674:	10000a16 	blt	r2,zero,1866a0 <reg_or_bits+0x58>
		return -1;

	regv |= (alt_u8)data;
  186678:	d8800003 	ldbu	r2,0(sp)


	if(reg_write(ec,reg,regv))
  18667c:	8809883a 	mov	r4,r17
  186680:	800b883a 	mov	r5,r16
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
		return -1;

	regv |= (alt_u8)data;
  186684:	908cb03a 	or	r6,r18,r2
  186688:	d9800005 	stb	r6,0(sp)


	if(reg_write(ec,reg,regv))
  18668c:	31803fcc 	andi	r6,r6,255
  186690:	01865780 	call	186578 <reg_write>
  186694:	1004c03a 	cmpne	r2,r2,zero
  186698:	0085c83a 	sub	r2,zero,r2
  18669c:	00000106 	br	1866a4 <reg_or_bits+0x5c>
int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
		return -1;
  1866a0:	00bfffc4 	movi	r2,-1

	if(reg_write(ec,reg,regv))
		return -1;

	return 0;
}
  1866a4:	dfc00417 	ldw	ra,16(sp)
  1866a8:	dc800317 	ldw	r18,12(sp)
  1866ac:	dc400217 	ldw	r17,8(sp)
  1866b0:	dc000117 	ldw	r16,4(sp)
  1866b4:	dec00504 	addi	sp,sp,20
  1866b8:	f800283a 	ret

001866bc <reg_clear_bits>:

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
  1866bc:	defffb04 	addi	sp,sp,-20
  1866c0:	dc000115 	stw	r16,4(sp)
  1866c4:	3021883a 	mov	r16,r6
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
  1866c8:	d80d883a 	mov	r6,sp

	return 0;
}

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
  1866cc:	dc800315 	stw	r18,12(sp)
  1866d0:	dc400215 	stw	r17,8(sp)
  1866d4:	dfc00415 	stw	ra,16(sp)
  1866d8:	2025883a 	mov	r18,r4
  1866dc:	2823883a 	mov	r17,r5
	alt_u8 regv = 0;
  1866e0:	d8000005 	stb	zero,0(sp)

	if(reg_read(ec,reg,&regv) < 0)
  1866e4:	01864f00 	call	1864f0 <reg_read>
  1866e8:	10000b16 	blt	r2,zero,186718 <reg_clear_bits+0x5c>
		return -1;

	regv &= ~((alt_u8)mask);
  1866ec:	d8800003 	ldbu	r2,0(sp)
  1866f0:	040c303a 	nor	r6,zero,r16


	if(reg_write(ec,reg,regv))
  1866f4:	9009883a 	mov	r4,r18
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
		return -1;

	regv &= ~((alt_u8)mask);
  1866f8:	308c703a 	and	r6,r6,r2
  1866fc:	d9800005 	stb	r6,0(sp)


	if(reg_write(ec,reg,regv))
  186700:	880b883a 	mov	r5,r17
  186704:	31803fcc 	andi	r6,r6,255
  186708:	01865780 	call	186578 <reg_write>
  18670c:	1004c03a 	cmpne	r2,r2,zero
  186710:	0085c83a 	sub	r2,zero,r2
  186714:	00000106 	br	18671c <reg_clear_bits+0x60>
int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
	alt_u8 regv = 0;

	if(reg_read(ec,reg,&regv) < 0)
		return -1;
  186718:	00bfffc4 	movi	r2,-1

	if(reg_write(ec,reg,regv))
		return -1;

	return 0;
}
  18671c:	dfc00417 	ldw	ra,16(sp)
  186720:	dc800317 	ldw	r18,12(sp)
  186724:	dc400217 	ldw	r17,8(sp)
  186728:	dc000117 	ldw	r16,4(sp)
  18672c:	dec00504 	addi	sp,sp,20
  186730:	f800283a 	ret

00186734 <aud_codec_write_reg>:
#include "sys/alt_stdio.h"
#include "ch.h"


I2C_RES	aud_codec_write_reg(alt_u8 addr, alt_u16 val)	{
	aud_codec_i2c_bffr.val			=	((addr & AUD_CODEC_ADDR_MSK) << AUD_CODEC_ADDR_OFFSET) + \
  186734:	21003fcc 	andi	r4,r4,255
  186738:	2008927a 	slli	r4,r4,9
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "ch.h"


I2C_RES	aud_codec_write_reg(alt_u8 addr, alt_u16 val)	{
  18673c:	defffc04 	addi	sp,sp,-16
	aud_codec_i2c_bffr.val			=	((addr & AUD_CODEC_ADDR_MSK) << AUD_CODEC_ADDR_OFFSET) + \
  186740:	29407fcc 	andi	r5,r5,511
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "ch.h"


I2C_RES	aud_codec_write_reg(alt_u8 addr, alt_u16 val)	{
  186744:	dc400215 	stw	r17,8(sp)
  186748:	dc000115 	stw	r16,4(sp)
	aud_codec_i2c_bffr.val			=	((addr & AUD_CODEC_ADDR_MSK) << AUD_CODEC_ADDR_OFFSET) + \
  18674c:	214b883a 	add	r5,r4,r5
										((val & AUD_CODEC_DATA_MSK)  << AUD_CODEC_DATA_OFFSET);

	byte_rev_i2c_arry(aud_codec_i2c_bffr.byte_arry,2);
  186750:	d4670004 	addi	r17,gp,-25600
  186754:	04000084 	movi	r16,2
  186758:	8809883a 	mov	r4,r17
#include "sys/alt_stdio.h"
#include "ch.h"


I2C_RES	aud_codec_write_reg(alt_u8 addr, alt_u16 val)	{
	aud_codec_i2c_bffr.val			=	((addr & AUD_CODEC_ADDR_MSK) << AUD_CODEC_ADDR_OFFSET) + \
  18675c:	d167000d 	sth	r5,-25600(gp)
										((val & AUD_CODEC_DATA_MSK)  << AUD_CODEC_DATA_OFFSET);

	byte_rev_i2c_arry(aud_codec_i2c_bffr.byte_arry,2);
  186760:	800b883a 	mov	r5,r16
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "ch.h"


I2C_RES	aud_codec_write_reg(alt_u8 addr, alt_u16 val)	{
  186764:	dfc00315 	stw	ra,12(sp)
	aud_codec_i2c_bffr.val			=	((addr & AUD_CODEC_ADDR_MSK) << AUD_CODEC_ADDR_OFFSET) + \
										((val & AUD_CODEC_DATA_MSK)  << AUD_CODEC_DATA_OFFSET);

	byte_rev_i2c_arry(aud_codec_i2c_bffr.byte_arry,2);
  186768:	01877dc0 	call	1877dc <byte_rev_i2c_arry>

	//alt_printf("[aud_codec_write_reg] addr : 0x%x, val : 0x%x\n",addr,val);
	//alt_printf("[aud_codec_write_reg] byte_arry[0] : 0x%x\n",aud_codec_i2c_bffr.byte_arry[0]);
	//alt_printf("[aud_codec_write_reg] byte_arry[1] : 0x%x\n",aud_codec_i2c_bffr.byte_arry[1]);

	return i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,2,1,1);
  18676c:	01c00044 	movi	r7,1
  186770:	d9c00015 	stw	r7,0(sp)
  186774:	01000d04 	movi	r4,52
  186778:	880b883a 	mov	r5,r17
  18677c:	800d883a 	mov	r6,r16
  186780:	01875f80 	call	1875f8 <i2c_xtn_write>

}
  186784:	dfc00317 	ldw	ra,12(sp)
  186788:	dc400217 	ldw	r17,8(sp)
  18678c:	dc000117 	ldw	r16,4(sp)
  186790:	dec00404 	addi	sp,sp,16
  186794:	f800283a 	ret

00186798 <aud_codec_read_reg>:

I2C_RES	aud_codec_read_reg(alt_u8 addr)	{
  186798:	defffd04 	addi	sp,sp,-12
	aud_codec_i2c_bffr.byte_arry[0]	=	(addr & AUD_CODEC_ADDR_MSK) << 1;
  18679c:	21003fcc 	andi	r4,r4,255

	return i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,2,1,1);

}

I2C_RES	aud_codec_read_reg(alt_u8 addr)	{
  1867a0:	dc000115 	stw	r16,4(sp)
	aud_codec_i2c_bffr.byte_arry[0]	=	(addr & AUD_CODEC_ADDR_MSK) << 1;
  1867a4:	2109883a 	add	r4,r4,r4

	if(i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,1,1,0))	{
  1867a8:	04000044 	movi	r16,1
	return i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,2,1,1);

}

I2C_RES	aud_codec_read_reg(alt_u8 addr)	{
	aud_codec_i2c_bffr.byte_arry[0]	=	(addr & AUD_CODEC_ADDR_MSK) << 1;
  1867ac:	d1270005 	stb	r4,-25600(gp)

	if(i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,1,1,0))	{
  1867b0:	d8000015 	stw	zero,0(sp)
  1867b4:	01000d04 	movi	r4,52
  1867b8:	d1670004 	addi	r5,gp,-25600
  1867bc:	800d883a 	mov	r6,r16
  1867c0:	800f883a 	mov	r7,r16

	return i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,2,1,1);

}

I2C_RES	aud_codec_read_reg(alt_u8 addr)	{
  1867c4:	dfc00215 	stw	ra,8(sp)
	aud_codec_i2c_bffr.byte_arry[0]	=	(addr & AUD_CODEC_ADDR_MSK) << 1;

	if(i2c_xtn_write(AUD_CODEC_I2C_WRITE_ADDR,aud_codec_i2c_bffr.byte_arry,1,1,0))	{
  1867c8:	01875f80 	call	1875f8 <i2c_xtn_write>
  1867cc:	10000226 	beq	r2,zero,1867d8 <aud_codec_read_reg+0x40>
		return I2C_ERROR;
  1867d0:	00800104 	movi	r2,4
  1867d4:	00000a06 	br	186800 <aud_codec_read_reg+0x68>
	}

	if(i2c_xtn_read(AUD_CODEC_I2C_READ_ADDR,aud_codec_i2c_bffr.byte_arry,2,1,1))	{
  1867d8:	dc000015 	stw	r16,0(sp)
  1867dc:	01000d44 	movi	r4,53
  1867e0:	d1670004 	addi	r5,gp,-25600
  1867e4:	01800084 	movi	r6,2
  1867e8:	800f883a 	mov	r7,r16
  1867ec:	01876e00 	call	1876e0 <i2c_xtn_read>
  1867f0:	103ff71e 	bne	r2,zero,1867d0 <__alt_data_end+0xfff867d0>
		return I2C_ERROR;
	}

	aud_codec_i2c_bffr.val	=	aud_codec_i2c_bffr.val	&	AUD_CODEC_DATA_MSK;
  1867f4:	d0e7000b 	ldhu	r3,-25600(gp)
  1867f8:	18c07fcc 	andi	r3,r3,511
  1867fc:	d0e7000d 	sth	r3,-25600(gp)

	return I2C_OK;
}
  186800:	dfc00217 	ldw	ra,8(sp)
  186804:	dc000117 	ldw	r16,4(sp)
  186808:	dec00304 	addi	sp,sp,12
  18680c:	f800283a 	ret

00186810 <aud_codec_reset>:


void aud_codec_reset()	{
  186810:	deffff04 	addi	sp,sp,-4
	if(aud_codec_write_reg(AUD_CODEC_RESET_IDX,0))	{
  186814:	010003c4 	movi	r4,15
  186818:	000b883a 	mov	r5,zero

	return I2C_OK;
}


void aud_codec_reset()	{
  18681c:	dfc00015 	stw	ra,0(sp)
	if(aud_codec_write_reg(AUD_CODEC_RESET_IDX,0))	{
  186820:	01867340 	call	186734 <aud_codec_write_reg>
  186824:	10000526 	beq	r2,zero,18683c <aud_codec_reset+0x2c>
		alt_printf("[aud_codec_reset] Error in I2C\n");
  186828:	010006b4 	movhi	r4,26
  18682c:	2139e704 	addi	r4,r4,-6244
	}
}
  186830:	dfc00017 	ldw	ra,0(sp)
  186834:	dec00104 	addi	sp,sp,4
}


void aud_codec_reset()	{
	if(aud_codec_write_reg(AUD_CODEC_RESET_IDX,0))	{
		alt_printf("[aud_codec_reset] Error in I2C\n");
  186838:	0196b2c1 	jmpi	196b2c <alt_printf>
	}
}
  18683c:	dfc00017 	ldw	ra,0(sp)
  186840:	dec00104 	addi	sp,sp,4
  186844:	f800283a 	ret

00186848 <aud_codec_dump_regs>:

	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);

}

void aud_codec_dump_regs(){
  186848:	defffc04 	addi	sp,sp,-16
	alt_u8 i;

	alt_printf("CODEC Regs - \r\n");
  18684c:	010006b4 	movhi	r4,26

	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);

}

void aud_codec_dump_regs(){
  186850:	dc400215 	stw	r17,8(sp)
	alt_u8 i;

	alt_printf("CODEC Regs - \r\n");
  186854:	2139ef04 	addi	r4,r4,-6212

	for(i=0; i<10; i++){
		switch(i) {
  186858:	04400634 	movhi	r17,24

	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);

}

void aud_codec_dump_regs(){
  18685c:	dc000115 	stw	r16,4(sp)
  186860:	dfc00315 	stw	ra,12(sp)
	alt_u8 i;

	alt_printf("CODEC Regs - \r\n");

	for(i=0; i<10; i++){
  186864:	0021883a 	mov	r16,zero
}

void aud_codec_dump_regs(){
	alt_u8 i;

	alt_printf("CODEC Regs - \r\n");
  186868:	0196b2c0 	call	196b2c <alt_printf>

	for(i=0; i<10; i++){
		switch(i) {
  18686c:	8c5a2404 	addi	r17,r17,26768
  186870:	80bfffc4 	addi	r2,r16,-1
  186874:	10803fcc 	andi	r2,r2,255
  186878:	00c00204 	movi	r3,8
  18687c:	18800d36 	bltu	r3,r2,1868b4 <aud_codec_dump_regs+0x6c>
  186880:	100490ba 	slli	r2,r2,2
  186884:	1445883a 	add	r2,r2,r17
  186888:	10800017 	ldw	r2,0(r2)
  18688c:	1000683a 	jmp	r2
  186890:	00186924 	muli	zero,zero,24996
  186894:	00186998 	cmpnei	zero,zero,24998
  186898:	001869f0 	cmpltui	zero,zero,24999
  18689c:	00186a4c 	andi	zero,zero,25001
  1868a0:	00186b1c 	xori	zero,zero,25004
  1868a4:	00186ba4 	muli	zero,zero,25006
  1868a8:	00186c8c 	andi	zero,zero,25010
  1868ac:	00186d48 	cmpgei	zero,zero,25013
  1868b0:	00186de8 	cmpgeui	zero,zero,25015
			case AUD_CODEC_LEFT_LINE_IN_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  1868b4:	0009883a 	mov	r4,zero
  1868b8:	01867980 	call	186798 <aud_codec_read_reg>
  1868bc:	10000426 	beq	r2,zero,1868d0 <aud_codec_dump_regs+0x88>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  1868c0:	010006b4 	movhi	r4,26
  1868c4:	2139f304 	addi	r4,r4,-6196
  1868c8:	000b883a 	mov	r5,zero
  1868cc:	0001a606 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] LEFT_LINE_IN REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  1868d0:	d1a7000b 	ldhu	r6,-25600(gp)
  1868d4:	010006b4 	movhi	r4,26
  1868d8:	213a0304 	addi	r4,r4,-6132
  1868dc:	000b883a 	mov	r5,zero
  1868e0:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLRIN BOTH : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LRIN_BOTH_OFFST,AUD_CODEC_LRIN_BOTH_MSK));
  1868e4:	d167000b 	ldhu	r5,-25600(gp)
  1868e8:	010006b4 	movhi	r4,26
  1868ec:	213a0c04 	addi	r4,r4,-6096
  1868f0:	280ad23a 	srli	r5,r5,8
  1868f4:	2940004c 	andi	r5,r5,1
  1868f8:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLIN MUTE  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LIN_MUTE_OFFST,AUD_CODEC_LIN_MUTE_MSK));
  1868fc:	d167000b 	ldhu	r5,-25600(gp)
  186900:	010006b4 	movhi	r4,26
  186904:	213a1104 	addi	r4,r4,-6076
  186908:	280ad1fa 	srli	r5,r5,7
  18690c:	2940004c 	andi	r5,r5,1
  186910:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLIN VOL   : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LINVOL_OFFST,AUD_CODEC_LINVOL_MSK));
  186914:	010006b4 	movhi	r4,26
  186918:	d167000b 	ldhu	r5,-25600(gp)
  18691c:	213a1604 	addi	r4,r4,-6056
  186920:	00001b06 	br	186990 <aud_codec_dump_regs+0x148>
				continue;
			}

			case AUD_CODEC_RIGHT_LINE_IN_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186924:	01000044 	movi	r4,1
  186928:	01867980 	call	186798 <aud_codec_read_reg>
  18692c:	10000426 	beq	r2,zero,186940 <aud_codec_dump_regs+0xf8>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186930:	010006b4 	movhi	r4,26
  186934:	2139f304 	addi	r4,r4,-6196
  186938:	01400044 	movi	r5,1
  18693c:	00018a06 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] RIGHT_LINE_IN REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186940:	d1a7000b 	ldhu	r6,-25600(gp)
  186944:	010006b4 	movhi	r4,26
  186948:	213a1b04 	addi	r4,r4,-6036
  18694c:	01400044 	movi	r5,1
  186950:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tRLIN BOTH : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_RLIN_BOTH_OFFST,AUD_CODEC_RLIN_BOTH_MSK));
  186954:	d167000b 	ldhu	r5,-25600(gp)
  186958:	010006b4 	movhi	r4,26
  18695c:	213a2404 	addi	r4,r4,-6000
  186960:	280ad23a 	srli	r5,r5,8
  186964:	2940004c 	andi	r5,r5,1
  186968:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tRIN MUTE  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_RIN_MUTE_OFFST,AUD_CODEC_RIN_MUTE_MSK));
  18696c:	d167000b 	ldhu	r5,-25600(gp)
  186970:	010006b4 	movhi	r4,26
  186974:	213a2904 	addi	r4,r4,-5980
  186978:	280ad1fa 	srli	r5,r5,7
  18697c:	2940004c 	andi	r5,r5,1
  186980:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tRIN VOL   : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_RINVOL_OFFST,AUD_CODEC_RINVOL_MSK));
  186984:	d167000b 	ldhu	r5,-25600(gp)
  186988:	010006b4 	movhi	r4,26
  18698c:	213a2e04 	addi	r4,r4,-5960
  186990:	29400fcc 	andi	r5,r5,63
  186994:	00012406 	br	186e28 <aud_codec_dump_regs+0x5e0>
				continue;
			}

			case AUD_CODEC_LEFT_HP_OUT_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186998:	01000084 	movi	r4,2
  18699c:	01867980 	call	186798 <aud_codec_read_reg>
  1869a0:	10000426 	beq	r2,zero,1869b4 <aud_codec_dump_regs+0x16c>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  1869a4:	010006b4 	movhi	r4,26
  1869a8:	2139f304 	addi	r4,r4,-6196
  1869ac:	01400084 	movi	r5,2
  1869b0:	00016d06 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] LEFT_HP_OUT REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  1869b4:	d1a7000b 	ldhu	r6,-25600(gp)
  1869b8:	010006b4 	movhi	r4,26
  1869bc:	213a3304 	addi	r4,r4,-5940
  1869c0:	01400084 	movi	r5,2
  1869c4:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLRHP BOTH : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LRHP_BOTH_OFFST,AUD_CODEC_LRHP_BOTH_MSK));
  1869c8:	d167000b 	ldhu	r5,-25600(gp)
  1869cc:	010006b4 	movhi	r4,26
  1869d0:	213a3b04 	addi	r4,r4,-5908
  1869d4:	280ad23a 	srli	r5,r5,8
  1869d8:	2940004c 	andi	r5,r5,1
  1869dc:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLHPVOL    : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LHPVOL_OFFST,AUD_CODEC_LHPVOL_MSK));
  1869e0:	010006b4 	movhi	r4,26
  1869e4:	d167000b 	ldhu	r5,-25600(gp)
  1869e8:	213a4004 	addi	r4,r4,-5888
  1869ec:	00001506 	br	186a44 <aud_codec_dump_regs+0x1fc>
				continue;
			}

			case AUD_CODEC_RIGHT_HP_OUT_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  1869f0:	010000c4 	movi	r4,3
  1869f4:	01867980 	call	186798 <aud_codec_read_reg>
  1869f8:	10000426 	beq	r2,zero,186a0c <aud_codec_dump_regs+0x1c4>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  1869fc:	010006b4 	movhi	r4,26
  186a00:	2139f304 	addi	r4,r4,-6196
  186a04:	014000c4 	movi	r5,3
  186a08:	00015706 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] RIGHT_HP_OUT REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186a0c:	d1a7000b 	ldhu	r6,-25600(gp)
  186a10:	010006b4 	movhi	r4,26
  186a14:	213a4504 	addi	r4,r4,-5868
  186a18:	014000c4 	movi	r5,3
  186a1c:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tRLHP BOTH : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_RLHP_BOTH_OFFST,AUD_CODEC_RLHP_BOTH_MSK));
  186a20:	d167000b 	ldhu	r5,-25600(gp)
  186a24:	010006b4 	movhi	r4,26
  186a28:	213a4e04 	addi	r4,r4,-5832
  186a2c:	280ad23a 	srli	r5,r5,8
  186a30:	2940004c 	andi	r5,r5,1
  186a34:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tRHPVOL    : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_RHPVOL_OFFST,AUD_CODEC_RHPVOL_MSK));
  186a38:	d167000b 	ldhu	r5,-25600(gp)
  186a3c:	010006b4 	movhi	r4,26
  186a40:	213a5304 	addi	r4,r4,-5812
  186a44:	29401fcc 	andi	r5,r5,127
  186a48:	0000f706 	br	186e28 <aud_codec_dump_regs+0x5e0>
				continue;
			}

			case AUD_CODEC_ANALOG_AUD_PATH_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186a4c:	01000104 	movi	r4,4
  186a50:	01867980 	call	186798 <aud_codec_read_reg>
  186a54:	10000426 	beq	r2,zero,186a68 <aud_codec_dump_regs+0x220>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186a58:	010006b4 	movhi	r4,26
  186a5c:	2139f304 	addi	r4,r4,-6196
  186a60:	01400104 	movi	r5,4
  186a64:	00014006 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] ANALOG_AUDIO_PATH REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186a68:	d1a7000b 	ldhu	r6,-25600(gp)
  186a6c:	010006b4 	movhi	r4,26
  186a70:	213a5804 	addi	r4,r4,-5792
  186a74:	01400104 	movi	r5,4
  186a78:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tSIDE ATT  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_SIDE_ATT_OFFST,AUD_CODEC_SIDE_ATT_MSK));
  186a7c:	d167000b 	ldhu	r5,-25600(gp)
  186a80:	010006b4 	movhi	r4,26
  186a84:	213a6204 	addi	r4,r4,-5752
  186a88:	280ad1ba 	srli	r5,r5,6
  186a8c:	294000cc 	andi	r5,r5,3
  186a90:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tSIDE TONE : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_SIDE_TONE_OFFST,AUD_CODEC_SIDE_TONE_MSK));
  186a94:	d167000b 	ldhu	r5,-25600(gp)
  186a98:	010006b4 	movhi	r4,26
  186a9c:	213a6704 	addi	r4,r4,-5732
  186aa0:	280ad17a 	srli	r5,r5,5
  186aa4:	2940004c 	andi	r5,r5,1
  186aa8:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tDAC SEL   : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_DAC_SEL_OFFST,AUD_CODEC_DAC_SEL_MSK));
  186aac:	d167000b 	ldhu	r5,-25600(gp)
  186ab0:	010006b4 	movhi	r4,26
  186ab4:	213a6c04 	addi	r4,r4,-5712
  186ab8:	280ad13a 	srli	r5,r5,4
  186abc:	2940004c 	andi	r5,r5,1
  186ac0:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tBYPASS    : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_BYPASS_OFFST,AUD_CODEC_BYPASS_MSK));
  186ac4:	d167000b 	ldhu	r5,-25600(gp)
  186ac8:	010006b4 	movhi	r4,26
  186acc:	213a7104 	addi	r4,r4,-5692
  186ad0:	280ad0fa 	srli	r5,r5,3
  186ad4:	2940004c 	andi	r5,r5,1
  186ad8:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tINSEL     : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_INSEL_OFFST,AUD_CODEC_INSEL_MSK));
  186adc:	d167000b 	ldhu	r5,-25600(gp)
  186ae0:	010006b4 	movhi	r4,26
  186ae4:	213a7604 	addi	r4,r4,-5672
  186ae8:	280ad0ba 	srli	r5,r5,2
  186aec:	2940004c 	andi	r5,r5,1
  186af0:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tMUTE MIC  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_MUTE_MIC_OFFST,AUD_CODEC_MUTE_MIC_MSK));
  186af4:	d167000b 	ldhu	r5,-25600(gp)
  186af8:	010006b4 	movhi	r4,26
  186afc:	213a7b04 	addi	r4,r4,-5652
  186b00:	280ad07a 	srli	r5,r5,1
  186b04:	2940004c 	andi	r5,r5,1
  186b08:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tMIC BOOST  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_MIC_BOOST_OFFST,AUD_CODEC_MIC_BOOST_MSK));
  186b0c:	010006b4 	movhi	r4,26
  186b10:	d167000b 	ldhu	r5,-25600(gp)
  186b14:	213a8004 	addi	r4,r4,-5632
  186b18:	0000c206 	br	186e24 <aud_codec_dump_regs+0x5dc>
				continue;
			}

			case AUD_CODEC_DIGITAL_AUD_PATH_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186b1c:	01000144 	movi	r4,5
  186b20:	01867980 	call	186798 <aud_codec_read_reg>
  186b24:	10000426 	beq	r2,zero,186b38 <aud_codec_dump_regs+0x2f0>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186b28:	010006b4 	movhi	r4,26
  186b2c:	2139f304 	addi	r4,r4,-6196
  186b30:	01400144 	movi	r5,5
  186b34:	00010c06 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] DIGITAL_AUDIO_PATH REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186b38:	d1a7000b 	ldhu	r6,-25600(gp)
  186b3c:	010006b4 	movhi	r4,26
  186b40:	213a8604 	addi	r4,r4,-5608
  186b44:	01400144 	movi	r5,5
  186b48:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tHPOR      : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_HPOR_OFFST,AUD_CODEC_HPOR_MSK));
  186b4c:	d167000b 	ldhu	r5,-25600(gp)
  186b50:	010006b4 	movhi	r4,26
  186b54:	213a9004 	addi	r4,r4,-5568
  186b58:	280ad13a 	srli	r5,r5,4
  186b5c:	2940004c 	andi	r5,r5,1
  186b60:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tDAC MUTE  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_DAC_MU_OFFST,AUD_CODEC_DAC_MU_MSK));
  186b64:	d167000b 	ldhu	r5,-25600(gp)
  186b68:	010006b4 	movhi	r4,26
  186b6c:	213a9504 	addi	r4,r4,-5548
  186b70:	280ad0fa 	srli	r5,r5,3
  186b74:	2940004c 	andi	r5,r5,1
  186b78:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tDE-EMPH   : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_DEEMPH_OFFST,AUD_CODEC_DEEMPH_MSK));
  186b7c:	d167000b 	ldhu	r5,-25600(gp)
  186b80:	010006b4 	movhi	r4,26
  186b84:	213a9a04 	addi	r4,r4,-5528
  186b88:	280ad07a 	srli	r5,r5,1
  186b8c:	294000cc 	andi	r5,r5,3
  186b90:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tADC HPD   : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_ADC_HPD_OFFST,AUD_CODEC_ADC_HPD_MSK));
  186b94:	010006b4 	movhi	r4,26
  186b98:	d167000b 	ldhu	r5,-25600(gp)
  186b9c:	213a9f04 	addi	r4,r4,-5508
  186ba0:	0000a006 	br	186e24 <aud_codec_dump_regs+0x5dc>
				continue;
			}

			case AUD_CODEC_POWER_DOWN_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186ba4:	01000184 	movi	r4,6
  186ba8:	01867980 	call	186798 <aud_codec_read_reg>
  186bac:	10000426 	beq	r2,zero,186bc0 <aud_codec_dump_regs+0x378>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186bb0:	010006b4 	movhi	r4,26
  186bb4:	2139f304 	addi	r4,r4,-6196
  186bb8:	01400184 	movi	r5,6
  186bbc:	0000ea06 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] POWER_DOWN REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186bc0:	d1a7000b 	ldhu	r6,-25600(gp)
  186bc4:	010006b4 	movhi	r4,26
  186bc8:	213aa404 	addi	r4,r4,-5488
  186bcc:	01400184 	movi	r5,6
  186bd0:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tPWR OFF   : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_PWROFF_OFFST,AUD_CODEC_PWROFF_MSK));
  186bd4:	d167000b 	ldhu	r5,-25600(gp)
  186bd8:	010006b4 	movhi	r4,26
  186bdc:	213aac04 	addi	r4,r4,-5456
  186be0:	280ad1fa 	srli	r5,r5,7
  186be4:	2940004c 	andi	r5,r5,1
  186be8:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tCLK OUTPD : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_CLKOUTPD_OFFST,AUD_CODEC_CLKOUTPD_MSK));
  186bec:	d167000b 	ldhu	r5,-25600(gp)
  186bf0:	010006b4 	movhi	r4,26
  186bf4:	213ab104 	addi	r4,r4,-5436
  186bf8:	280ad1ba 	srli	r5,r5,6
  186bfc:	2940004c 	andi	r5,r5,1
  186c00:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tOSCPD     : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_OSCPD_OFFST,AUD_CODEC_OSCPD_MSK));
  186c04:	d167000b 	ldhu	r5,-25600(gp)
  186c08:	010006b4 	movhi	r4,26
  186c0c:	213ab604 	addi	r4,r4,-5416
  186c10:	280ad17a 	srli	r5,r5,5
  186c14:	2940004c 	andi	r5,r5,1
  186c18:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tOUTPD     : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK));
  186c1c:	d167000b 	ldhu	r5,-25600(gp)
  186c20:	010006b4 	movhi	r4,26
  186c24:	213abb04 	addi	r4,r4,-5396
  186c28:	280ad13a 	srli	r5,r5,4
  186c2c:	2940004c 	andi	r5,r5,1
  186c30:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tDACPD     : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_DACPD_OFFST,AUD_CODEC_DACPD_MSK));
  186c34:	d167000b 	ldhu	r5,-25600(gp)
  186c38:	010006b4 	movhi	r4,26
  186c3c:	213ac004 	addi	r4,r4,-5376
  186c40:	280ad0fa 	srli	r5,r5,3
  186c44:	2940004c 	andi	r5,r5,1
  186c48:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tADCPD     : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_ADCPD_OFFST,AUD_CODEC_ADCPD_MSK));
  186c4c:	d167000b 	ldhu	r5,-25600(gp)
  186c50:	010006b4 	movhi	r4,26
  186c54:	213ac504 	addi	r4,r4,-5356
  186c58:	280ad0ba 	srli	r5,r5,2
  186c5c:	2940004c 	andi	r5,r5,1
  186c60:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tMICPD     : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_MICPD_OFFST,AUD_CODEC_MICPD_MSK));
  186c64:	d167000b 	ldhu	r5,-25600(gp)
  186c68:	010006b4 	movhi	r4,26
  186c6c:	213aca04 	addi	r4,r4,-5336
  186c70:	280ad07a 	srli	r5,r5,1
  186c74:	2940004c 	andi	r5,r5,1
  186c78:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLINEINPD  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LINEINPD_OFFST,AUD_CODEC_LINEINPD_MSK));
  186c7c:	010006b4 	movhi	r4,26
  186c80:	d167000b 	ldhu	r5,-25600(gp)
  186c84:	213acf04 	addi	r4,r4,-5316
  186c88:	00006606 	br	186e24 <aud_codec_dump_regs+0x5dc>
				continue;
			}

			case AUD_CODEC_DIGITAL_AUD_IF_FMT_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186c8c:	010001c4 	movi	r4,7
  186c90:	01867980 	call	186798 <aud_codec_read_reg>
  186c94:	10000426 	beq	r2,zero,186ca8 <aud_codec_dump_regs+0x460>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186c98:	010006b4 	movhi	r4,26
  186c9c:	2139f304 	addi	r4,r4,-6196
  186ca0:	014001c4 	movi	r5,7
  186ca4:	0000b006 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] DIGITAL_AUD_INTF_FMT REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186ca8:	d1a7000b 	ldhu	r6,-25600(gp)
  186cac:	010006b4 	movhi	r4,26
  186cb0:	213ad404 	addi	r4,r4,-5296
  186cb4:	014001c4 	movi	r5,7
  186cb8:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tBCLK INV  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_BCLK_INV_OFFST,AUD_CODEC_BCLK_INV_MSK));
  186cbc:	d167000b 	ldhu	r5,-25600(gp)
  186cc0:	010006b4 	movhi	r4,26
  186cc4:	213adf04 	addi	r4,r4,-5252
  186cc8:	280ad1fa 	srli	r5,r5,7
  186ccc:	2940004c 	andi	r5,r5,1
  186cd0:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tMS        : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_MS_OFFST,AUD_CODEC_MS_MSK));
  186cd4:	d167000b 	ldhu	r5,-25600(gp)
  186cd8:	010006b4 	movhi	r4,26
  186cdc:	213ae404 	addi	r4,r4,-5232
  186ce0:	280ad1ba 	srli	r5,r5,6
  186ce4:	2940004c 	andi	r5,r5,1
  186ce8:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLRSWAP    : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LRSWAP_OFFST,AUD_CODEC_LRSWAP_MSK));
  186cec:	d167000b 	ldhu	r5,-25600(gp)
  186cf0:	010006b4 	movhi	r4,26
  186cf4:	213ae904 	addi	r4,r4,-5212
  186cf8:	280ad17a 	srli	r5,r5,5
  186cfc:	2940004c 	andi	r5,r5,1
  186d00:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tLRP       : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_LRP_OFFST,AUD_CODEC_LRP_MSK));
  186d04:	d167000b 	ldhu	r5,-25600(gp)
  186d08:	010006b4 	movhi	r4,26
  186d0c:	213aee04 	addi	r4,r4,-5192
  186d10:	280ad13a 	srli	r5,r5,4
  186d14:	2940004c 	andi	r5,r5,1
  186d18:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tIWL       : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_IWL_OFFST,AUD_CODEC_IWL_MSK));
  186d1c:	d167000b 	ldhu	r5,-25600(gp)
  186d20:	010006b4 	movhi	r4,26
  186d24:	213af304 	addi	r4,r4,-5172
  186d28:	280ad0ba 	srli	r5,r5,2
  186d2c:	294000cc 	andi	r5,r5,3
  186d30:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tFORMAT    : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_FORMAT_OFFST,AUD_CODEC_FORMAT_MSK));
  186d34:	d167000b 	ldhu	r5,-25600(gp)
  186d38:	010006b4 	movhi	r4,26
  186d3c:	213af804 	addi	r4,r4,-5152
  186d40:	294000cc 	andi	r5,r5,3
  186d44:	00003806 	br	186e28 <aud_codec_dump_regs+0x5e0>
				continue;
			}

			case AUD_CODEC_SAMPLING_CTRL_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186d48:	01000204 	movi	r4,8
  186d4c:	01867980 	call	186798 <aud_codec_read_reg>
  186d50:	10000426 	beq	r2,zero,186d64 <aud_codec_dump_regs+0x51c>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186d54:	010006b4 	movhi	r4,26
  186d58:	2139f304 	addi	r4,r4,-6196
  186d5c:	01400204 	movi	r5,8
  186d60:	00008106 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] SAMPLING_CNTRL REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186d64:	d1a7000b 	ldhu	r6,-25600(gp)
  186d68:	010006b4 	movhi	r4,26
  186d6c:	213afd04 	addi	r4,r4,-5132
  186d70:	01400204 	movi	r5,8
  186d74:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tCLKO DIV2 : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_CLKO_DIV2_OFFST,AUD_CODEC_CLKO_DIV2_MSK));
  186d78:	d167000b 	ldhu	r5,-25600(gp)
  186d7c:	010006b4 	movhi	r4,26
  186d80:	213b0604 	addi	r4,r4,-5096
  186d84:	280ad1fa 	srli	r5,r5,7
  186d88:	2940004c 	andi	r5,r5,1
  186d8c:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tCLKI DIV2 : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_CLKI_DIV2_OFFST,AUD_CODEC_CLKI_DIV2_MSK));
  186d90:	d167000b 	ldhu	r5,-25600(gp)
  186d94:	010006b4 	movhi	r4,26
  186d98:	213b0b04 	addi	r4,r4,-5076
  186d9c:	280ad1ba 	srli	r5,r5,6
  186da0:	2940004c 	andi	r5,r5,1
  186da4:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tSR        : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_SR_OFFST,AUD_CODEC_SR_MSK));
  186da8:	d167000b 	ldhu	r5,-25600(gp)
  186dac:	010006b4 	movhi	r4,26
  186db0:	213b1004 	addi	r4,r4,-5056
  186db4:	280ad0ba 	srli	r5,r5,2
  186db8:	294003cc 	andi	r5,r5,15
  186dbc:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tBOSR      : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_BOSR_OFFST,AUD_CODEC_BOSR_MSK));
  186dc0:	d167000b 	ldhu	r5,-25600(gp)
  186dc4:	010006b4 	movhi	r4,26
  186dc8:	213b1504 	addi	r4,r4,-5036
  186dcc:	280ad07a 	srli	r5,r5,1
  186dd0:	2940004c 	andi	r5,r5,1
  186dd4:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tUSB/NORM  : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_USB_NORM_OFFST,AUD_CODEC_USB_NORM_MSK));
  186dd8:	010006b4 	movhi	r4,26
  186ddc:	d167000b 	ldhu	r5,-25600(gp)
  186de0:	213b1a04 	addi	r4,r4,-5016
  186de4:	00000f06 	br	186e24 <aud_codec_dump_regs+0x5dc>
				continue;
			}

			case AUD_CODEC_ACTIVE_CTRL_REG_IDX: {
				if(aud_codec_read_reg(i))	{
  186de8:	01000244 	movi	r4,9
  186dec:	01867980 	call	186798 <aud_codec_read_reg>
  186df0:	10000426 	beq	r2,zero,186e04 <aud_codec_dump_regs+0x5bc>
					alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186df4:	010006b4 	movhi	r4,26
  186df8:	2139f304 	addi	r4,r4,-6196
  186dfc:	01400244 	movi	r5,9
  186e00:	00005906 	br	186f68 <aud_codec_dump_regs+0x720>
					return;
				}
				alt_printf("[0x%x] SAMPLING_CNTRL REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186e04:	d1a7000b 	ldhu	r6,-25600(gp)
  186e08:	010006b4 	movhi	r4,26
  186e0c:	213afd04 	addi	r4,r4,-5132
  186e10:	01400244 	movi	r5,9
  186e14:	0196b2c0 	call	196b2c <alt_printf>
				alt_printf("\tACTIVE    : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK));
  186e18:	d167000b 	ldhu	r5,-25600(gp)
  186e1c:	010006b4 	movhi	r4,26
  186e20:	213b1f04 	addi	r4,r4,-4996
  186e24:	2940004c 	andi	r5,r5,1
  186e28:	0196b2c0 	call	196b2c <alt_printf>
void aud_codec_dump_regs(){
	alt_u8 i;

	alt_printf("CODEC Regs - \r\n");

	for(i=0; i<10; i++){
  186e2c:	80800044 	addi	r2,r16,1
  186e30:	1021883a 	mov	r16,r2
  186e34:	00c00284 	movi	r3,10
  186e38:	10803fcc 	andi	r2,r2,255
  186e3c:	10fe8c1e 	bne	r2,r3,186870 <__alt_data_end+0xfff86870>
  186e40:	040003c4 	movi	r16,15
			}
		}
	}

	for(i=0xf; i<0x13; i++){
			switch(i) {
  186e44:	81403fcc 	andi	r5,r16,255
  186e48:	00800444 	movi	r2,17
  186e4c:	28802b26 	beq	r5,r2,186efc <aud_codec_dump_regs+0x6b4>
  186e50:	00800484 	movi	r2,18
  186e54:	28803d26 	beq	r5,r2,186f4c <aud_codec_dump_regs+0x704>
  186e58:	00800404 	movi	r2,16
  186e5c:	28800d26 	beq	r5,r2,186e94 <aud_codec_dump_regs+0x64c>
				case AUD_CODEC_RESET_REG_IDX: {
					if(aud_codec_read_reg(i))	{
  186e60:	010003c4 	movi	r4,15
  186e64:	01867980 	call	186798 <aud_codec_read_reg>
  186e68:	10000426 	beq	r2,zero,186e7c <aud_codec_dump_regs+0x634>
						alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186e6c:	010006b4 	movhi	r4,26
  186e70:	2139f304 	addi	r4,r4,-6196
  186e74:	014003c4 	movi	r5,15
  186e78:	00003b06 	br	186f68 <aud_codec_dump_regs+0x720>
						return;
					}
					alt_printf("[0x%x] AUD_CODEC_RESET REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186e7c:	d1a7000b 	ldhu	r6,-25600(gp)
  186e80:	010006b4 	movhi	r4,26
  186e84:	213b2404 	addi	r4,r4,-4976
  186e88:	014003c4 	movi	r5,15
  186e8c:	0196b2c0 	call	196b2c <alt_printf>
					continue;
  186e90:	00004f06 	br	186fd0 <aud_codec_dump_regs+0x788>
				}

				case AUD_CODEC_ALC_CNTRL_1_REG_IDX: {
					if(aud_codec_read_reg(i))	{
  186e94:	2809883a 	mov	r4,r5
  186e98:	d9400015 	stw	r5,0(sp)
  186e9c:	01867980 	call	186798 <aud_codec_read_reg>
  186ea0:	d9400017 	ldw	r5,0(sp)
  186ea4:	10002e1e 	bne	r2,zero,186f60 <aud_codec_dump_regs+0x718>
						alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
						return;
					}
					alt_printf("[0x%x] AUD_CODEC_ALC_CNTRL_1 REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186ea8:	d1a7000b 	ldhu	r6,-25600(gp)
  186eac:	010006b4 	movhi	r4,26
  186eb0:	213b2d04 	addi	r4,r4,-4940
  186eb4:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tALCL : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_ALCL_OFFST,AUD_CODEC_ALCL_MSK));
  186eb8:	d167000b 	ldhu	r5,-25600(gp)
  186ebc:	010006b4 	movhi	r4,26
  186ec0:	213b3804 	addi	r4,r4,-4896
  186ec4:	294003cc 	andi	r5,r5,15
  186ec8:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tMAXGAIN : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_MAXGAIN_OFFST,AUD_CODEC_MAXGAIN_MSK));
  186ecc:	d167000b 	ldhu	r5,-25600(gp)
  186ed0:	010006b4 	movhi	r4,26
  186ed4:	213b3c04 	addi	r4,r4,-4880
  186ed8:	280ad13a 	srli	r5,r5,4
  186edc:	294001cc 	andi	r5,r5,7
  186ee0:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tALCSEL : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_ALCSEL_OFFST,AUD_CODEC_ALCSEL_MSK));
  186ee4:	d167000b 	ldhu	r5,-25600(gp)
  186ee8:	010006b4 	movhi	r4,26
  186eec:	213b4104 	addi	r4,r4,-4860
  186ef0:	280ad1fa 	srli	r5,r5,7
  186ef4:	294000cc 	andi	r5,r5,3
  186ef8:	00003406 	br	186fcc <aud_codec_dump_regs+0x784>
					continue;
				}

				case AUD_CODEC_ALC_CNTRL_2_REG_IDX: {
					if(aud_codec_read_reg(i))	{
  186efc:	2809883a 	mov	r4,r5
  186f00:	d9400015 	stw	r5,0(sp)
  186f04:	01867980 	call	186798 <aud_codec_read_reg>
  186f08:	d9400017 	ldw	r5,0(sp)
  186f0c:	1000141e 	bne	r2,zero,186f60 <aud_codec_dump_regs+0x718>
						alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
						return;
					}
					alt_printf("[0x%x] AUD_CODEC_ALC_CNTRL_2 REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186f10:	d1a7000b 	ldhu	r6,-25600(gp)
  186f14:	010006b4 	movhi	r4,26
  186f18:	213b4604 	addi	r4,r4,-4840
  186f1c:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tATK : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_ATK_OFFST,AUD_CODEC_ATK_MSK));
  186f20:	d167000b 	ldhu	r5,-25600(gp)
  186f24:	010006b4 	movhi	r4,26
  186f28:	213b5104 	addi	r4,r4,-4796
  186f2c:	294003cc 	andi	r5,r5,15
  186f30:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tDCY : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_DCY_OFFST,AUD_CODEC_DCY_MSK));
  186f34:	d167000b 	ldhu	r5,-25600(gp)
  186f38:	010006b4 	movhi	r4,26
  186f3c:	213b5504 	addi	r4,r4,-4780
  186f40:	280ad13a 	srli	r5,r5,4
  186f44:	294003cc 	andi	r5,r5,15
  186f48:	00002006 	br	186fcc <aud_codec_dump_regs+0x784>
					continue;
				}

				case AUD_CODEC_NOISE_GATE_REG_IDX: {
					if(aud_codec_read_reg(i))	{
  186f4c:	2809883a 	mov	r4,r5
  186f50:	d9400015 	stw	r5,0(sp)
  186f54:	01867980 	call	186798 <aud_codec_read_reg>
  186f58:	d9400017 	ldw	r5,0(sp)
  186f5c:	10000726 	beq	r2,zero,186f7c <aud_codec_dump_regs+0x734>
						alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186f60:	010006b4 	movhi	r4,26
  186f64:	2139f304 	addi	r4,r4,-6196
			}
		}
	}

	return;
}
  186f68:	dfc00317 	ldw	ra,12(sp)
  186f6c:	dc400217 	ldw	r17,8(sp)
  186f70:	dc000117 	ldw	r16,4(sp)
  186f74:	dec00404 	addi	sp,sp,16
					continue;
				}

				case AUD_CODEC_NOISE_GATE_REG_IDX: {
					if(aud_codec_read_reg(i))	{
						alt_printf("[aud_codec_dump_regs] ERROR in reading codec register 0x%x\r\n",i);
  186f78:	0196b2c1 	jmpi	196b2c <alt_printf>
						return;
					}
					alt_printf("[0x%x] AUD_CODEC_NOISE_GATE REG - 0x%x\r\n",i,aud_codec_i2c_bffr.val);
  186f7c:	d1a7000b 	ldhu	r6,-25600(gp)
  186f80:	010006b4 	movhi	r4,26
  186f84:	213b5904 	addi	r4,r4,-4764
  186f88:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tNGAT : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_NGAT_OFFST,AUD_CODEC_NGAT_MSK));
  186f8c:	d167000b 	ldhu	r5,-25600(gp)
  186f90:	010006b4 	movhi	r4,26
  186f94:	213b6404 	addi	r4,r4,-4720
  186f98:	2940004c 	andi	r5,r5,1
  186f9c:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tNGG : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_NGG_OFFST,AUD_CODEC_NGAT_MSK));
  186fa0:	d167000b 	ldhu	r5,-25600(gp)
  186fa4:	010006b4 	movhi	r4,26
  186fa8:	213b6804 	addi	r4,r4,-4704
  186fac:	280ad07a 	srli	r5,r5,1
  186fb0:	2940004c 	andi	r5,r5,1
  186fb4:	0196b2c0 	call	196b2c <alt_printf>
					alt_printf("\tNGTH : 0x%x\r\n",AUD_CODEC_EXTRACT_FIELD(AUD_CODEC_NGTH_OFFST,AUD_CODEC_NGTH_MSK));
  186fb8:	d167000b 	ldhu	r5,-25600(gp)
  186fbc:	010006b4 	movhi	r4,26
  186fc0:	213b6c04 	addi	r4,r4,-4688
  186fc4:	280ad0fa 	srli	r5,r5,3
  186fc8:	294007cc 	andi	r5,r5,31
  186fcc:	0196b2c0 	call	196b2c <alt_printf>
				continue;
			}
		}
	}

	for(i=0xf; i<0x13; i++){
  186fd0:	80800044 	addi	r2,r16,1
  186fd4:	1021883a 	mov	r16,r2
  186fd8:	00c004c4 	movi	r3,19
  186fdc:	10803fcc 	andi	r2,r2,255
  186fe0:	10ff981e 	bne	r2,r3,186e44 <__alt_data_end+0xfff86e44>
			}
		}
	}

	return;
}
  186fe4:	dfc00317 	ldw	ra,12(sp)
  186fe8:	dc400217 	ldw	r17,8(sp)
  186fec:	dc000117 	ldw	r16,4(sp)
  186ff0:	dec00404 	addi	sp,sp,16
  186ff4:	f800283a 	ret

00186ff8 <aud_codec_update_field>:

void aud_codec_update_field(alt_u16 val, alt_u8 idx, alt_u8 offset, alt_u8 msk)	{
  186ff8:	defffb04 	addi	sp,sp,-20
  186ffc:	dc400115 	stw	r17,4(sp)
	if(aud_codec_read_reg(idx))	{
  187000:	2c403fcc 	andi	r17,r5,255
	}

	return;
}

void aud_codec_update_field(alt_u16 val, alt_u8 idx, alt_u8 offset, alt_u8 msk)	{
  187004:	dcc00315 	stw	r19,12(sp)
  187008:	2027883a 	mov	r19,r4
	if(aud_codec_read_reg(idx))	{
  18700c:	8809883a 	mov	r4,r17
	}

	return;
}

void aud_codec_update_field(alt_u16 val, alt_u8 idx, alt_u8 offset, alt_u8 msk)	{
  187010:	dc800215 	stw	r18,8(sp)
  187014:	dc000015 	stw	r16,0(sp)
  187018:	dfc00415 	stw	ra,16(sp)
  18701c:	3025883a 	mov	r18,r6
  187020:	3821883a 	mov	r16,r7
	if(aud_codec_read_reg(idx))	{
  187024:	01867980 	call	186798 <aud_codec_read_reg>
  187028:	10000326 	beq	r2,zero,187038 <aud_codec_update_field+0x40>
		alt_printf("[aud_codec_update_field] ERROR in reading codec register 0x%x\r\n",idx);
  18702c:	010006b4 	movhi	r4,26
  187030:	213b7004 	addi	r4,r4,-4672
  187034:	00001006 	br	187078 <aud_codec_update_field+0x80>
		return;
	}

	aud_codec_i2c_bffr.val = AUD_CODEC_UPDATE_FIELD(val,offset,msk);
  187038:	81c03fcc 	andi	r7,r16,255
  18703c:	90803fcc 	andi	r2,r18,255
  187040:	388c983a 	sll	r6,r7,r2
  187044:	d0e7000b 	ldhu	r3,-25600(gp)
  187048:	99ce703a 	and	r7,r19,r7
  18704c:	388e983a 	sll	r7,r7,r2
  187050:	018c303a 	nor	r6,zero,r6
  187054:	30cc703a 	and	r6,r6,r3
  187058:	31cb883a 	add	r5,r6,r7
  18705c:	d167000d 	sth	r5,-25600(gp)

	if(aud_codec_write_reg(idx,aud_codec_i2c_bffr.val))	{
  187060:	8809883a 	mov	r4,r17
  187064:	297fffcc 	andi	r5,r5,65535
  187068:	01867340 	call	186734 <aud_codec_write_reg>
  18706c:	10000a26 	beq	r2,zero,187098 <aud_codec_update_field+0xa0>
		alt_printf("[aud_codec_update_field] ERROR in writing to codec register 0x%x\r\n",idx);
  187070:	010006b4 	movhi	r4,26
  187074:	213b8004 	addi	r4,r4,-4608
  187078:	880b883a 	mov	r5,r17
		return;
	}

	return;
}
  18707c:	dfc00417 	ldw	ra,16(sp)
  187080:	dcc00317 	ldw	r19,12(sp)
  187084:	dc800217 	ldw	r18,8(sp)
  187088:	dc400117 	ldw	r17,4(sp)
  18708c:	dc000017 	ldw	r16,0(sp)
  187090:	dec00504 	addi	sp,sp,20
	}

	aud_codec_i2c_bffr.val = AUD_CODEC_UPDATE_FIELD(val,offset,msk);

	if(aud_codec_write_reg(idx,aud_codec_i2c_bffr.val))	{
		alt_printf("[aud_codec_update_field] ERROR in writing to codec register 0x%x\r\n",idx);
  187094:	0196b2c1 	jmpi	196b2c <alt_printf>
		return;
	}

	return;
}
  187098:	dfc00417 	ldw	ra,16(sp)
  18709c:	dcc00317 	ldw	r19,12(sp)
  1870a0:	dc800217 	ldw	r18,8(sp)
  1870a4:	dc400117 	ldw	r17,4(sp)
  1870a8:	dc000017 	ldw	r16,0(sp)
  1870ac:	dec00504 	addi	sp,sp,20
  1870b0:	f800283a 	ret

001870b4 <aud_codec_update_iwl>:

void aud_codec_update_iwl(BPS_T val)	{
	aud_codec_update_field(val,AUD_CODEC_IWL_IDX,AUD_CODEC_IWL_OFFST,AUD_CODEC_IWL_MSK);
  1870b4:	213fffcc 	andi	r4,r4,65535
  1870b8:	014001c4 	movi	r5,7
  1870bc:	01800084 	movi	r6,2
  1870c0:	01c000c4 	movi	r7,3
  1870c4:	0186ff81 	jmpi	186ff8 <aud_codec_update_field>

001870c8 <aud_codec_init>:
	if(aud_codec_write_reg(AUD_CODEC_RESET_IDX,0))	{
		alt_printf("[aud_codec_reset] Error in I2C\n");
	}
}

void aud_codec_init(BPS_T bps)	{
  1870c8:	defffa04 	addi	sp,sp,-24
  1870cc:	dfc00515 	stw	ra,20(sp)
  1870d0:	dd000415 	stw	r20,16(sp)
  1870d4:	dcc00315 	stw	r19,12(sp)
	aud_codec_reset();

	aud_codec_update_field(0,AUD_CODEC_PWROFF_IDX,AUD_CODEC_PWROFF_OFFST,AUD_CODEC_PWROFF_MSK);
  1870d8:	050001c4 	movi	r20,7
  1870dc:	04c00184 	movi	r19,6
	if(aud_codec_write_reg(AUD_CODEC_RESET_IDX,0))	{
		alt_printf("[aud_codec_reset] Error in I2C\n");
	}
}

void aud_codec_init(BPS_T bps)	{
  1870e0:	dc800215 	stw	r18,8(sp)
  1870e4:	dc400115 	stw	r17,4(sp)
  1870e8:	dc000015 	stw	r16,0(sp)
  1870ec:	2023883a 	mov	r17,r4
	aud_codec_reset();

	aud_codec_update_field(0,AUD_CODEC_PWROFF_IDX,AUD_CODEC_PWROFF_OFFST,AUD_CODEC_PWROFF_MSK);
  1870f0:	04000044 	movi	r16,1
		alt_printf("[aud_codec_reset] Error in I2C\n");
	}
}

void aud_codec_init(BPS_T bps)	{
	aud_codec_reset();
  1870f4:	01868100 	call	186810 <aud_codec_reset>

	aud_codec_update_field(0,AUD_CODEC_PWROFF_IDX,AUD_CODEC_PWROFF_OFFST,AUD_CODEC_PWROFF_MSK);
  1870f8:	980b883a 	mov	r5,r19
  1870fc:	a00d883a 	mov	r6,r20
  187100:	800f883a 	mov	r7,r16
  187104:	0009883a 	mov	r4,zero
  187108:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(0,AUD_CODEC_LINEINPD_IDX,AUD_CODEC_LINEINPD_OFFST,AUD_CODEC_LINEINPD_MSK);
  18710c:	980b883a 	mov	r5,r19
  187110:	800f883a 	mov	r7,r16
  187114:	000d883a 	mov	r6,zero
  187118:	0009883a 	mov	r4,zero
  18711c:	0186ff80 	call	186ff8 <aud_codec_update_field>

	/* Configure misc settings */
	aud_codec_update_iwl(bps);
  187120:	8809883a 	mov	r4,r17
  187124:	01870b40 	call	1870b4 <aud_codec_update_iwl>
	aud_codec_update_field(1,AUD_CODEC_LRP_IDX,AUD_CODEC_LRP_OFFST,AUD_CODEC_LRP_MSK);
  187128:	04400104 	movi	r17,4
  18712c:	8009883a 	mov	r4,r16
  187130:	a00b883a 	mov	r5,r20
  187134:	880d883a 	mov	r6,r17
  187138:	800f883a 	mov	r7,r16
  18713c:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(3,AUD_CODEC_FORMAT_IDX,AUD_CODEC_FORMAT_OFFST,AUD_CODEC_FORMAT_MSK);
  187140:	048000c4 	movi	r18,3
  187144:	9009883a 	mov	r4,r18
  187148:	a00b883a 	mov	r5,r20
  18714c:	900f883a 	mov	r7,r18
  187150:	000d883a 	mov	r6,zero
  187154:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(1,AUD_CODEC_USB_NORM_IDX,AUD_CODEC_USB_NORM_OFFST,AUD_CODEC_USB_NORM_MSK);
  187158:	8009883a 	mov	r4,r16
  18715c:	800f883a 	mov	r7,r16
  187160:	01400204 	movi	r5,8
  187164:	000d883a 	mov	r6,zero
  187168:	0186ff80 	call	186ff8 <aud_codec_update_field>

	aud_codec_update_field(1,AUD_CODEC_DAC_SEL_IDX,AUD_CODEC_DAC_SEL_OFFST,AUD_CODEC_DAC_SEL_MSK);
  18716c:	8009883a 	mov	r4,r16
  187170:	880b883a 	mov	r5,r17
  187174:	880d883a 	mov	r6,r17
  187178:	800f883a 	mov	r7,r16
  18717c:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(0,AUD_CODEC_BYPASS_IDX,AUD_CODEC_BYPASS_OFFST,AUD_CODEC_BYPASS_MSK);
  187180:	880b883a 	mov	r5,r17
  187184:	900d883a 	mov	r6,r18
  187188:	800f883a 	mov	r7,r16
  18718c:	0009883a 	mov	r4,zero
  187190:	0186ff80 	call	186ff8 <aud_codec_update_field>

	aud_codec_update_field(0,AUD_CODEC_DAC_MU_IDX,AUD_CODEC_DAC_MU_OFFST,AUD_CODEC_DAC_MU_MSK);
  187194:	900d883a 	mov	r6,r18
  187198:	800f883a 	mov	r7,r16
  18719c:	0009883a 	mov	r4,zero
  1871a0:	01400144 	movi	r5,5
  1871a4:	0186ff80 	call	186ff8 <aud_codec_update_field>

	/* Activate */
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  1871a8:	8009883a 	mov	r4,r16
  1871ac:	800f883a 	mov	r7,r16
  1871b0:	01400244 	movi	r5,9
  1871b4:	000d883a 	mov	r6,zero
  1871b8:	0186ff80 	call	186ff8 <aud_codec_update_field>

	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  1871bc:	0009883a 	mov	r4,zero
  1871c0:	980b883a 	mov	r5,r19
  1871c4:	880d883a 	mov	r6,r17
  1871c8:	800f883a 	mov	r7,r16

}
  1871cc:	dfc00517 	ldw	ra,20(sp)
  1871d0:	dd000417 	ldw	r20,16(sp)
  1871d4:	dcc00317 	ldw	r19,12(sp)
  1871d8:	dc800217 	ldw	r18,8(sp)
  1871dc:	dc400117 	ldw	r17,4(sp)
  1871e0:	dc000017 	ldw	r16,0(sp)
  1871e4:	dec00604 	addi	sp,sp,24
	aud_codec_update_field(0,AUD_CODEC_DAC_MU_IDX,AUD_CODEC_DAC_MU_OFFST,AUD_CODEC_DAC_MU_MSK);

	/* Activate */
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);

	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  1871e8:	0186ff81 	jmpi	186ff8 <aud_codec_update_field>

001871ec <init_acortex>:
#include "../../aud_codec/aud_codec.h"
#include "ch.h"
#include "sys/alt_stdio.h"


void init_acortex(BPS_T bps)	{
  1871ec:	defffe04 	addi	sp,sp,-8
  1871f0:	dc000015 	stw	r16,0(sp)
  1871f4:	2021883a 	mov	r16,r4
	configure_i2c_clk(255);
  1871f8:	01003fc4 	movi	r4,255
#include "../../aud_codec/aud_codec.h"
#include "ch.h"
#include "sys/alt_stdio.h"


void init_acortex(BPS_T bps)	{
  1871fc:	dfc00115 	stw	ra,4(sp)
	configure_i2c_clk(255);
  187200:	01875c00 	call	1875c0 <configure_i2c_clk>

	configure_drvr_bclk_div(BCLK_DIV_10MHZ);
  187204:	01000284 	movi	r4,10
  187208:	01878f80 	call	1878f8 <configure_drvr_bclk_div>
	configure_drvr_bps(bps);
  18720c:	8009883a 	mov	r4,r16
}
  187210:	dfc00117 	ldw	ra,4(sp)
  187214:	dc000017 	ldw	r16,0(sp)
  187218:	dec00204 	addi	sp,sp,8

void init_acortex(BPS_T bps)	{
	configure_i2c_clk(255);

	configure_drvr_bclk_div(BCLK_DIV_10MHZ);
	configure_drvr_bps(bps);
  18721c:	01878c81 	jmpi	1878c8 <configure_drvr_bps>

00187220 <enable_audio_path>:
}

void enable_audio_path(FS_T fs, BPS_T bps)	{
  187220:	defff604 	addi	sp,sp,-40
  187224:	dd800615 	stw	r22,24(sp)
  187228:	dc000015 	stw	r16,0(sp)
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  18722c:	05800244 	movi	r22,9
  187230:	04000044 	movi	r16,1

	configure_drvr_bclk_div(BCLK_DIV_10MHZ);
	configure_drvr_bps(bps);
}

void enable_audio_path(FS_T fs, BPS_T bps)	{
  187234:	df000815 	stw	fp,32(sp)
  187238:	dc400115 	stw	r17,4(sp)
  18723c:	2839883a 	mov	fp,r5
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  187240:	800f883a 	mov	r7,r16
  187244:	b00b883a 	mov	r5,r22

	configure_drvr_bclk_div(BCLK_DIV_10MHZ);
	configure_drvr_bps(bps);
}

void enable_audio_path(FS_T fs, BPS_T bps)	{
  187248:	2023883a 	mov	r17,r4
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  18724c:	000d883a 	mov	r6,zero
  187250:	0009883a 	mov	r4,zero

	configure_drvr_bclk_div(BCLK_DIV_10MHZ);
	configure_drvr_bps(bps);
}

void enable_audio_path(FS_T fs, BPS_T bps)	{
  187254:	dfc00915 	stw	ra,36(sp)
  187258:	ddc00715 	stw	r23,28(sp)
  18725c:	dd400515 	stw	r21,20(sp)
  187260:	dd000415 	stw	r20,16(sp)
  187264:	dcc00315 	stw	r19,12(sp)
  187268:	dc800215 	stw	r18,8(sp)
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
	aud_codec_update_field(1,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  18726c:	05400104 	movi	r21,4
	configure_drvr_bps(bps);
}

void enable_audio_path(FS_T fs, BPS_T bps)	{
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  187270:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(1,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  187274:	04800184 	movi	r18,6
  187278:	8009883a 	mov	r4,r16
  18727c:	900b883a 	mov	r5,r18
  187280:	a80d883a 	mov	r6,r21
  187284:	800f883a 	mov	r7,r16
  187288:	0186ff80 	call	186ff8 <aud_codec_update_field>

	/* Make configurations */
	aud_codec_update_field(0,AUD_CODEC_LIN_MUTE_IDX,AUD_CODEC_LIN_MUTE_OFFST,AUD_CODEC_LIN_MUTE_MSK);
  18728c:	050001c4 	movi	r20,7
  187290:	a00d883a 	mov	r6,r20
  187294:	800f883a 	mov	r7,r16
  187298:	0009883a 	mov	r4,zero
  18729c:	000b883a 	mov	r5,zero
  1872a0:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(0,AUD_CODEC_RIN_MUTE_IDX,AUD_CODEC_RIN_MUTE_OFFST,AUD_CODEC_RIN_MUTE_MSK);
  1872a4:	800b883a 	mov	r5,r16
  1872a8:	a00d883a 	mov	r6,r20
  1872ac:	800f883a 	mov	r7,r16
  1872b0:	0009883a 	mov	r4,zero
  1872b4:	0186ff80 	call	186ff8 <aud_codec_update_field>

	aud_codec_update_field(bps,AUD_CODEC_IWL_IDX,AUD_CODEC_IWL_OFFST,AUD_CODEC_IWL_MSK);
  1872b8:	04c00084 	movi	r19,2
  1872bc:	05c000c4 	movi	r23,3
  1872c0:	a00b883a 	mov	r5,r20
  1872c4:	980d883a 	mov	r6,r19
  1872c8:	b80f883a 	mov	r7,r23
  1872cc:	e13fffcc 	andi	r4,fp,65535
  1872d0:	0186ff80 	call	186ff8 <aud_codec_update_field>
	configure_drvr_bps(bps);
  1872d4:	e009883a 	mov	r4,fp
  1872d8:	01878c80 	call	1878c8 <configure_drvr_bps>

	aud_codec_update_field(fs2bosr_lookup[fs],AUD_CODEC_BOSR_IDX,AUD_CODEC_BOSR_OFFST,AUD_CODEC_BOSR_MSK);
  1872dc:	8c63883a 	add	r17,r17,r17
  1872e0:	008006b4 	movhi	r2,26
  1872e4:	8c63883a 	add	r17,r17,r17
  1872e8:	10bba104 	addi	r2,r2,-4476
  1872ec:	1445883a 	add	r2,r2,r17
  1872f0:	1100000b 	ldhu	r4,0(r2)
  1872f4:	05000204 	movi	r20,8
  1872f8:	a00b883a 	mov	r5,r20
  1872fc:	800d883a 	mov	r6,r16
  187300:	800f883a 	mov	r7,r16
  187304:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(fs2sr_lookup[fs],AUD_CODEC_SR_IDX,AUD_CODEC_SR_OFFST,AUD_CODEC_SR_MSK);
  187308:	008006b4 	movhi	r2,26
  18730c:	10bba704 	addi	r2,r2,-4452
  187310:	1445883a 	add	r2,r2,r17
  187314:	1100000b 	ldhu	r4,0(r2)
  187318:	a00b883a 	mov	r5,r20
  18731c:	980d883a 	mov	r6,r19
  187320:	01c003c4 	movi	r7,15
  187324:	0186ff80 	call	186ff8 <aud_codec_update_field>

	configure_drvr_fs_div(fs2fs_div_lookup[fs]);
  187328:	008006b4 	movhi	r2,26
  18732c:	10bbad04 	addi	r2,r2,-4428
  187330:	1463883a 	add	r17,r2,r17
  187334:	89000017 	ldw	r4,0(r17)
  187338:	01878ec0 	call	1878ec <configure_drvr_fs_div>

	aud_codec_update_field(0,AUD_CODEC_ADCPD_IDX,AUD_CODEC_ADCPD_OFFST,AUD_CODEC_ADCPD_MSK);
  18733c:	900b883a 	mov	r5,r18
  187340:	980d883a 	mov	r6,r19
  187344:	800f883a 	mov	r7,r16
  187348:	0009883a 	mov	r4,zero
  18734c:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(0,AUD_CODEC_DACPD_IDX,AUD_CODEC_DACPD_OFFST,AUD_CODEC_DACPD_MSK);
  187350:	900b883a 	mov	r5,r18
  187354:	b80d883a 	mov	r6,r23
  187358:	800f883a 	mov	r7,r16
  18735c:	0009883a 	mov	r4,zero
  187360:	0186ff80 	call	186ff8 <aud_codec_update_field>

	/* Activate Codec */
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  187364:	8009883a 	mov	r4,r16
  187368:	b00b883a 	mov	r5,r22
  18736c:	800f883a 	mov	r7,r16
  187370:	000d883a 	mov	r6,zero
  187374:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  187378:	0009883a 	mov	r4,zero
  18737c:	900b883a 	mov	r5,r18
  187380:	a80d883a 	mov	r6,r21
  187384:	800f883a 	mov	r7,r16

}
  187388:	dfc00917 	ldw	ra,36(sp)
  18738c:	df000817 	ldw	fp,32(sp)
  187390:	ddc00717 	ldw	r23,28(sp)
  187394:	dd800617 	ldw	r22,24(sp)
  187398:	dd400517 	ldw	r21,20(sp)
  18739c:	dd000417 	ldw	r20,16(sp)
  1873a0:	dcc00317 	ldw	r19,12(sp)
  1873a4:	dc800217 	ldw	r18,8(sp)
  1873a8:	dc400117 	ldw	r17,4(sp)
  1873ac:	dc000017 	ldw	r16,0(sp)
  1873b0:	dec00a04 	addi	sp,sp,40
	aud_codec_update_field(0,AUD_CODEC_ADCPD_IDX,AUD_CODEC_ADCPD_OFFST,AUD_CODEC_ADCPD_MSK);
	aud_codec_update_field(0,AUD_CODEC_DACPD_IDX,AUD_CODEC_DACPD_OFFST,AUD_CODEC_DACPD_MSK);

	/* Activate Codec */
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  1873b4:	0186ff81 	jmpi	186ff8 <aud_codec_update_field>

001873b8 <disable_audio_path>:

}

void disable_audio_path()	{
  1873b8:	defffa04 	addi	sp,sp,-24
  1873bc:	dcc00315 	stw	r19,12(sp)
  1873c0:	dc000015 	stw	r16,0(sp)
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  1873c4:	04c00244 	movi	r19,9
  1873c8:	04000044 	movi	r16,1
  1873cc:	980b883a 	mov	r5,r19
  1873d0:	800f883a 	mov	r7,r16
  1873d4:	0009883a 	mov	r4,zero
  1873d8:	000d883a 	mov	r6,zero
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);

}

void disable_audio_path()	{
  1873dc:	dfc00515 	stw	ra,20(sp)
  1873e0:	dd000415 	stw	r20,16(sp)
  1873e4:	dc800215 	stw	r18,8(sp)
  1873e8:	dc400115 	stw	r17,4(sp)
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
	aud_codec_update_field(1,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  1873ec:	04800104 	movi	r18,4

}

void disable_audio_path()	{
	/* De-Activate Codec */
	aud_codec_update_field(0,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  1873f0:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(1,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  1873f4:	04400184 	movi	r17,6
  1873f8:	8009883a 	mov	r4,r16
  1873fc:	880b883a 	mov	r5,r17
  187400:	900d883a 	mov	r6,r18
  187404:	800f883a 	mov	r7,r16
  187408:	0186ff80 	call	186ff8 <aud_codec_update_field>

	/* Make configurations */
	aud_codec_update_field(1,AUD_CODEC_LIN_MUTE_IDX,AUD_CODEC_LIN_MUTE_OFFST,AUD_CODEC_LIN_MUTE_MSK);
  18740c:	050001c4 	movi	r20,7
  187410:	8009883a 	mov	r4,r16
  187414:	a00d883a 	mov	r6,r20
  187418:	800f883a 	mov	r7,r16
  18741c:	000b883a 	mov	r5,zero
  187420:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(1,AUD_CODEC_RIN_MUTE_IDX,AUD_CODEC_RIN_MUTE_OFFST,AUD_CODEC_RIN_MUTE_MSK);
  187424:	8009883a 	mov	r4,r16
  187428:	800b883a 	mov	r5,r16
  18742c:	a00d883a 	mov	r6,r20
  187430:	800f883a 	mov	r7,r16
  187434:	0186ff80 	call	186ff8 <aud_codec_update_field>

	aud_codec_update_field(1,AUD_CODEC_ADCPD_IDX,AUD_CODEC_ADCPD_OFFST,AUD_CODEC_ADCPD_MSK);
  187438:	8009883a 	mov	r4,r16
  18743c:	880b883a 	mov	r5,r17
  187440:	800f883a 	mov	r7,r16
  187444:	01800084 	movi	r6,2
  187448:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(1,AUD_CODEC_DACPD_IDX,AUD_CODEC_DACPD_OFFST,AUD_CODEC_DACPD_MSK);
  18744c:	8009883a 	mov	r4,r16
  187450:	880b883a 	mov	r5,r17
  187454:	800f883a 	mov	r7,r16
  187458:	018000c4 	movi	r6,3
  18745c:	0186ff80 	call	186ff8 <aud_codec_update_field>

	/* Activate Codec */
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
  187460:	8009883a 	mov	r4,r16
  187464:	980b883a 	mov	r5,r19
  187468:	800f883a 	mov	r7,r16
  18746c:	000d883a 	mov	r6,zero
  187470:	0186ff80 	call	186ff8 <aud_codec_update_field>
	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  187474:	0009883a 	mov	r4,zero
  187478:	880b883a 	mov	r5,r17
  18747c:	900d883a 	mov	r6,r18
  187480:	800f883a 	mov	r7,r16

}
  187484:	dfc00517 	ldw	ra,20(sp)
  187488:	dd000417 	ldw	r20,16(sp)
  18748c:	dcc00317 	ldw	r19,12(sp)
  187490:	dc800217 	ldw	r18,8(sp)
  187494:	dc400117 	ldw	r17,4(sp)
  187498:	dc000017 	ldw	r16,0(sp)
  18749c:	dec00604 	addi	sp,sp,24
	aud_codec_update_field(1,AUD_CODEC_ADCPD_IDX,AUD_CODEC_ADCPD_OFFST,AUD_CODEC_ADCPD_MSK);
	aud_codec_update_field(1,AUD_CODEC_DACPD_IDX,AUD_CODEC_DACPD_OFFST,AUD_CODEC_DACPD_MSK);

	/* Activate Codec */
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);
  1874a0:	0186ff81 	jmpi	186ff8 <aud_codec_update_field>

001874a4 <pcm_cap>:

}

void pcm_cap(FS_T fs, BPS_T bps)	{
  1874a4:	defefc04 	addi	sp,sp,-1040
  1874a8:	dfc10315 	stw	ra,1036(sp)
	alt_u32 lbffr[PCM_BFFR_NUM_SAMPLES];
	alt_u32 rbffr[PCM_BFFR_NUM_SAMPLES];
	alt_u32 i;


	disable_adc_drvr();
  1874ac:	d9410015 	stw	r5,1024(sp)
	aud_codec_update_field(1,AUD_CODEC_ACTIVE_IDX,AUD_CODEC_ACTIVE_OFFST,AUD_CODEC_ACTIVE_MSK);
	aud_codec_update_field(0,AUD_CODEC_OUTPD_IDX,AUD_CODEC_OUTPD_OFFST,AUD_CODEC_OUTPD_MSK);

}

void pcm_cap(FS_T fs, BPS_T bps)	{
  1874b0:	dc010115 	stw	r16,1028(sp)
  1874b4:	dc410215 	stw	r17,1032(sp)
  1874b8:	2021883a 	mov	r16,r4
	alt_u32 lbffr[PCM_BFFR_NUM_SAMPLES];
	alt_u32 rbffr[PCM_BFFR_NUM_SAMPLES];
	alt_u32 i;


	disable_adc_drvr();
  1874bc:	018789c0 	call	18789c <disable_adc_drvr>
	disable_audio_path();
  1874c0:	01873b80 	call	1873b8 <disable_audio_path>

	update_acache_mode(PCM_BFFR_MODE_CAPTURE);
  1874c4:	01000044 	movi	r4,1
  1874c8:	01878180 	call	187818 <update_acache_mode>

	enable_audio_path(fs,bps);
  1874cc:	d9410017 	ldw	r5,1024(sp)
  1874d0:	8009883a 	mov	r4,r16
	enable_adc_drvr();

	do {
		chThdSleepMilliseconds(1);
	}while(((IORD_PCM_BFFR_STATUS>>PCM_BFFR_CAP_DONE_OFFSET) & PCM_BFFR_CAP_DONE_MSK) == 0);
  1874d4:	04080404 	movi	r16,8208
	disable_adc_drvr();
	disable_audio_path();

	update_acache_mode(PCM_BFFR_MODE_CAPTURE);

	enable_audio_path(fs,bps);
  1874d8:	01872200 	call	187220 <enable_audio_path>
	enable_adc_drvr();
  1874dc:	01878b40 	call	1878b4 <enable_adc_drvr>

	do {
		chThdSleepMilliseconds(1);
  1874e0:	01000044 	movi	r4,1
  1874e4:	0195ca40 	call	195ca4 <chThdSleep>
	}while(((IORD_PCM_BFFR_STATUS>>PCM_BFFR_CAP_DONE_OFFSET) & PCM_BFFR_CAP_DONE_MSK) == 0);
  1874e8:	80800037 	ldwio	r2,0(r16)
  1874ec:	1080004c 	andi	r2,r2,1
  1874f0:	103ffb26 	beq	r2,zero,1874e0 <__alt_data_end+0xfff874e0>

	dump_acache_cap_data(lbffr, rbffr);
  1874f4:	d9008004 	addi	r4,sp,512
  1874f8:	d80b883a 	mov	r5,sp
  1874fc:	01878280 	call	187828 <dump_acache_cap_data>

	for(i=0;i<PCM_BFFR_NUM_SAMPLES;i++)	{
  187500:	0021883a 	mov	r16,zero
  187504:	04402004 	movi	r17,128
  187508:	8405883a 	add	r2,r16,r16
  18750c:	d8c08004 	addi	r3,sp,512
  187510:	1085883a 	add	r2,r2,r2
  187514:	1885883a 	add	r2,r3,r2
		printf("[pcm_cap] LBFFR[0x%x] - 0x%x\r\n",i,lbffr[i]);
  187518:	11800017 	ldw	r6,0(r2)
  18751c:	010006b4 	movhi	r4,26
  187520:	800b883a 	mov	r5,r16
  187524:	213b9104 	addi	r4,r4,-4540
		chThdSleepMilliseconds(1);
	}while(((IORD_PCM_BFFR_STATUS>>PCM_BFFR_CAP_DONE_OFFSET) & PCM_BFFR_CAP_DONE_MSK) == 0);

	dump_acache_cap_data(lbffr, rbffr);

	for(i=0;i<PCM_BFFR_NUM_SAMPLES;i++)	{
  187528:	84000044 	addi	r16,r16,1
		printf("[pcm_cap] LBFFR[0x%x] - 0x%x\r\n",i,lbffr[i]);
  18752c:	01891080 	call	189108 <printf>
		chThdSleepMilliseconds(1);
	}while(((IORD_PCM_BFFR_STATUS>>PCM_BFFR_CAP_DONE_OFFSET) & PCM_BFFR_CAP_DONE_MSK) == 0);

	dump_acache_cap_data(lbffr, rbffr);

	for(i=0;i<PCM_BFFR_NUM_SAMPLES;i++)	{
  187530:	847ff51e 	bne	r16,r17,187508 <__alt_data_end+0xfff87508>
		printf("[pcm_cap] LBFFR[0x%x] - 0x%x\r\n",i,lbffr[i]);
	}

	alt_printf("\r\n");
  187534:	010006b4 	movhi	r4,26
  187538:	213a8f04 	addi	r4,r4,-5572
  18753c:	0196b2c0 	call	196b2c <alt_printf>

	for(i=0;i<PCM_BFFR_NUM_SAMPLES;i++)	{
  187540:	0021883a 	mov	r16,zero
  187544:	04402004 	movi	r17,128
  187548:	8405883a 	add	r2,r16,r16
  18754c:	1085883a 	add	r2,r2,r2
  187550:	d885883a 	add	r2,sp,r2
		printf("[pcm_cap] RBFFR[0x%x] - 0x%x\r\n",i,rbffr[i]);
  187554:	11800017 	ldw	r6,0(r2)
  187558:	010006b4 	movhi	r4,26
  18755c:	800b883a 	mov	r5,r16
  187560:	213b9904 	addi	r4,r4,-4508
		printf("[pcm_cap] LBFFR[0x%x] - 0x%x\r\n",i,lbffr[i]);
	}

	alt_printf("\r\n");

	for(i=0;i<PCM_BFFR_NUM_SAMPLES;i++)	{
  187564:	84000044 	addi	r16,r16,1
		printf("[pcm_cap] RBFFR[0x%x] - 0x%x\r\n",i,rbffr[i]);
  187568:	01891080 	call	189108 <printf>
		printf("[pcm_cap] LBFFR[0x%x] - 0x%x\r\n",i,lbffr[i]);
	}

	alt_printf("\r\n");

	for(i=0;i<PCM_BFFR_NUM_SAMPLES;i++)	{
  18756c:	847ff61e 	bne	r16,r17,187548 <__alt_data_end+0xfff87548>
		printf("[pcm_cap] RBFFR[0x%x] - 0x%x\r\n",i,rbffr[i]);
	}

	alt_printf("\r\n");
  187570:	010006b4 	movhi	r4,26
  187574:	213a8f04 	addi	r4,r4,-5572
  187578:	0196b2c0 	call	196b2c <alt_printf>

	disable_adc_drvr();
  18757c:	018789c0 	call	18789c <disable_adc_drvr>
	disable_audio_path();
  187580:	01873b80 	call	1873b8 <disable_audio_path>

}
  187584:	dfc10317 	ldw	ra,1036(sp)
  187588:	dc410217 	ldw	r17,1032(sp)
  18758c:	dc010117 	ldw	r16,1028(sp)
  187590:	dec10404 	addi	sp,sp,1040
  187594:	f800283a 	ret

00187598 <get_i2c_status>:


I2C_RES	get_i2c_status()	{
	alt_u32 status;

	status = IORD_I2C_STATUS;
  187598:	00800c04 	movi	r2,48
  18759c:	10800037 	ldwio	r2,0(r2)

	if(status & I2C_NACK_DET_MSK)
  1875a0:	10c0008c 	andi	r3,r2,2
  1875a4:	1800041e 	bne	r3,zero,1875b8 <get_i2c_status+0x20>
		return I2C_NACK_DETECTED;
	else if(status & I2C_BUSY_MSK)
		return I2C_BUSY;
	else
		return I2C_IDLE;
  1875a8:	00c000c4 	movi	r3,3
  1875ac:	1080004c 	andi	r2,r2,1
  1875b0:	1885c83a 	sub	r2,r3,r2
  1875b4:	f800283a 	ret
	alt_u32 status;

	status = IORD_I2C_STATUS;

	if(status & I2C_NACK_DET_MSK)
		return I2C_NACK_DETECTED;
  1875b8:	00800044 	movi	r2,1
	else if(status & I2C_BUSY_MSK)
		return I2C_BUSY;
	else
		return I2C_IDLE;
}
  1875bc:	f800283a 	ret

001875c0 <configure_i2c_clk>:

void 	configure_i2c_clk(alt_u8 clk_val)	{
	IOWR_I2C_CLK_DIV(clk_val & I2C_CLK_DIV_MSK);
  1875c0:	21003fcc 	andi	r4,r4,255
  1875c4:	00800404 	movi	r2,16
  1875c8:	11000035 	stwio	r4,0(r2)
  1875cc:	f800283a 	ret

001875d0 <get_i2c_clk>:
}

alt_u8 	get_i2c_clk()	{
	return IORD_I2C_CLK_DIV & I2C_CLK_DIV_MSK;
}
  1875d0:	00800404 	movi	r2,16
  1875d4:	10800037 	ldwio	r2,0(r2)
  1875d8:	f800283a 	ret

001875dc <configure_i2c_addr>:

void 	configure_i2c_addr(alt_u8 addr_val)	{
	IOWR_I2C_ADDR(addr_val & I2C_ADDR_MSK);
  1875dc:	21003fcc 	andi	r4,r4,255
  1875e0:	0005883a 	mov	r2,zero
  1875e4:	11000035 	stwio	r4,0(r2)
  1875e8:	f800283a 	ret

001875ec <get_i2c_addr>:
}

alt_u8 	get_i2c_addr()	{
	return	IORD_I2C_ADDR & I2C_ADDR_MSK;
}
  1875ec:	0005883a 	mov	r2,zero
  1875f0:	10800037 	ldwio	r2,0(r2)
  1875f4:	f800283a 	ret

001875f8 <i2c_xtn_write>:

I2C_RES	i2c_xtn_write(alt_u8 addr, alt_u8 *data, alt_u8 num_bytes, alt_u8 start, alt_u8 stop)	{
  1875f8:	defffe04 	addi	sp,sp,-8
  1875fc:	dc000015 	stw	r16,0(sp)
  187600:	3011883a 	mov	r8,r6
  187604:	dfc00115 	stw	ra,4(sp)
	alt_u32 i,fsm;

	if(num_bytes > I2C_MAX_XTN_LEN)	{
  187608:	31803fcc 	andi	r6,r6,255
  18760c:	04000104 	movi	r16,4

alt_u8 	get_i2c_addr()	{
	return	IORD_I2C_ADDR & I2C_ADDR_MSK;
}

I2C_RES	i2c_xtn_write(alt_u8 addr, alt_u8 *data, alt_u8 num_bytes, alt_u8 start, alt_u8 stop)	{
  187610:	d8c00217 	ldw	r3,8(sp)
	alt_u32 i,fsm;

	if(num_bytes > I2C_MAX_XTN_LEN)	{
  187614:	8180072e 	bgeu	r16,r6,187634 <i2c_xtn_write+0x3c>
		alt_printf("[i2c_xtn_write] ERROR num_bytes(0x%x) > I2C_MAX_XTN_LEN(0x%x)\r\n",num_bytes,I2C_MAX_XTN_LEN);
  187618:	010006b4 	movhi	r4,26
  18761c:	300b883a 	mov	r5,r6
  187620:	213bb304 	addi	r4,r4,-4404
  187624:	800d883a 	mov	r6,r16
  187628:	0196b2c0 	call	196b2c <alt_printf>
		return I2C_ERROR;
  18762c:	8005883a 	mov	r2,r16
  187630:	00002706 	br	1876d0 <i2c_xtn_write+0xd8>
alt_u8 	get_i2c_clk()	{
	return IORD_I2C_CLK_DIV & I2C_CLK_DIV_MSK;
}

void 	configure_i2c_addr(alt_u8 addr_val)	{
	IOWR_I2C_ADDR(addr_val & I2C_ADDR_MSK);
  187634:	21003fcc 	andi	r4,r4,255
  187638:	0005883a 	mov	r2,zero
  18763c:	11000035 	stwio	r4,0(r2)
		return I2C_ERROR;
	}

	configure_i2c_addr(addr);

	for(i=0; i<num_bytes;i++)	{
  187640:	0009883a 	mov	r4,zero
  187644:	40803fcc 	andi	r2,r8,255
  187648:	2080062e 	bgeu	r4,r2,187664 <i2c_xtn_write+0x6c>
  18764c:	2911883a 	add	r8,r5,r4
		IOWR_I2C_DATA_CACHE(i,data[i]);
  187650:	200c913a 	slli	r6,r4,4
  187654:	42000003 	ldbu	r8,0(r8)
  187658:	32001435 	stwio	r8,80(r6)
		return I2C_ERROR;
	}

	configure_i2c_addr(addr);

	for(i=0; i<num_bytes;i++)	{
  18765c:	21000044 	addi	r4,r4,1
  187660:	003ff906 	br	187648 <__alt_data_end+0xfff87648>
	//alt_printf("[i2c_xtn_write] Bffr[0] : 0x%x\n",IORD_I2C_DATA_CACHE(0));
	//alt_printf("[i2c_xtn_write] Bffr[1] : 0x%x\n",IORD_I2C_DATA_CACHE(1));
	//alt_printf("[i2c_xtn_write] Bffr[2] : 0x%x\n",IORD_I2C_DATA_CACHE(2));
	//alt_printf("[i2c_xtn_write] Bffr[3] : 0x%x\n",IORD_I2C_DATA_CACHE(3));

	IOWR_I2C_CONFIG((num_bytes << I2C_NUM_BYTES_OFFSET) + I2C_INIT_MSK + ((stop & 0x1) << 1) + (start & 0x1));
  187664:	1004923a 	slli	r2,r2,8
  187668:	39c0004c 	andi	r7,r7,1
  18766c:	11000104 	addi	r4,r2,4
  187670:	1880004c 	andi	r2,r3,1
  187674:	1085883a 	add	r2,r2,r2
  187678:	2085883a 	add	r2,r4,r2
  18767c:	11c5883a 	add	r2,r2,r7
  187680:	00c00804 	movi	r3,32
  187684:	18800035 	stwio	r2,0(r3)

	fsm = 0xfffff;

	while(IORD_I2C_STATUS & I2C_BUSY_MSK){
  187688:	04000c04 	movi	r16,48
  18768c:	00c00c04 	movi	r3,48
  187690:	80800037 	ldwio	r2,0(r16)
  187694:	1080004c 	andi	r2,r2,1
  187698:	10000326 	beq	r2,zero,1876a8 <i2c_xtn_write+0xb0>
		chThdSleepMilliseconds(1);	//wait for I2C driver to be free
  18769c:	01000044 	movi	r4,1
  1876a0:	0195ca40 	call	195ca4 <chThdSleep>
  1876a4:	003ff906 	br	18768c <__alt_data_end+0xfff8768c>
		//	alt_printf("[i2c_xtn_write] FSM : 0x%x\n",fsm);
		//	alt_printf("[i2c_xtn_write] STATUS : 0x%x\n",IORD_I2C_STATUS);
		//}
	}

	if(IORD_I2C_STATUS	&	I2C_NACK_DET_MSK){
  1876a8:	18800037 	ldwio	r2,0(r3)
  1876ac:	1080008c 	andi	r2,r2,2
  1876b0:	10000626 	beq	r2,zero,1876cc <i2c_xtn_write+0xd4>
		alt_printf("[i2c_xtn_write] NACK Detected : 0x%x\r\n",IORD_I2C_STATUS);
  1876b4:	19400037 	ldwio	r5,0(r3)
  1876b8:	010006b4 	movhi	r4,26
  1876bc:	213bc304 	addi	r4,r4,-4340
  1876c0:	0196b2c0 	call	196b2c <alt_printf>
		return I2C_NACK_DETECTED;
  1876c4:	00800044 	movi	r2,1
  1876c8:	00000106 	br	1876d0 <i2c_xtn_write+0xd8>
	}

	return I2C_OK;
  1876cc:	0005883a 	mov	r2,zero
}
  1876d0:	dfc00117 	ldw	ra,4(sp)
  1876d4:	dc000017 	ldw	r16,0(sp)
  1876d8:	dec00204 	addi	sp,sp,8
  1876dc:	f800283a 	ret

001876e0 <i2c_xtn_read>:


I2C_RES	i2c_xtn_read(alt_u8 addr, alt_u8 *bffr, alt_u8 num_bytes, alt_u8 start, alt_u8 stop)	{
  1876e0:	defffc04 	addi	sp,sp,-16
  1876e4:	dc800215 	stw	r18,8(sp)
  1876e8:	dc000015 	stw	r16,0(sp)
  1876ec:	2825883a 	mov	r18,r5
  1876f0:	dfc00315 	stw	ra,12(sp)
  1876f4:	dc400115 	stw	r17,4(sp)
	alt_u32 i;

	if(num_bytes > I2C_MAX_XTN_LEN)	{
  1876f8:	31403fcc 	andi	r5,r6,255
  1876fc:	04000104 	movi	r16,4

	return I2C_OK;
}


I2C_RES	i2c_xtn_read(alt_u8 addr, alt_u8 *bffr, alt_u8 num_bytes, alt_u8 start, alt_u8 stop)	{
  187700:	da000417 	ldw	r8,16(sp)
	alt_u32 i;

	if(num_bytes > I2C_MAX_XTN_LEN)	{
  187704:	8140062e 	bgeu	r16,r5,187720 <i2c_xtn_read+0x40>
		alt_printf("[i2c_xtn_write] ERROR num_bytes(0x%x) > I2C_MAX_XTN_LEN(0x%x)\r\n",num_bytes,I2C_MAX_XTN_LEN);
  187708:	010006b4 	movhi	r4,26
  18770c:	213bb304 	addi	r4,r4,-4404
  187710:	800d883a 	mov	r6,r16
  187714:	0196b2c0 	call	196b2c <alt_printf>
		return I2C_ERROR;
  187718:	8005883a 	mov	r2,r16
  18771c:	00002906 	br	1877c4 <i2c_xtn_read+0xe4>
	}

	addr = addr | 0x1;	//Make sure LSB is set
  187720:	21000054 	ori	r4,r4,1
  187724:	3023883a 	mov	r17,r6
alt_u8 	get_i2c_clk()	{
	return IORD_I2C_CLK_DIV & I2C_CLK_DIV_MSK;
}

void 	configure_i2c_addr(alt_u8 addr_val)	{
	IOWR_I2C_ADDR(addr_val & I2C_ADDR_MSK);
  187728:	21003fcc 	andi	r4,r4,255
  18772c:	0005883a 	mov	r2,zero
  187730:	11000035 	stwio	r4,0(r2)

	addr = addr | 0x1;	//Make sure LSB is set

	configure_i2c_addr(addr);

	IOWR_I2C_CONFIG((num_bytes << I2C_NUM_BYTES_OFFSET) + I2C_RD_N_WR_MSK + I2C_INIT_MSK + ((stop & 0x1) << 1) + (start & 0x1));
  187734:	2806923a 	slli	r3,r5,8
  187738:	4080004c 	andi	r2,r8,1
  18773c:	1085883a 	add	r2,r2,r2
  187740:	18c00304 	addi	r3,r3,12
  187744:	1887883a 	add	r3,r3,r2
  187748:	39c0004c 	andi	r7,r7,1
  18774c:	19c7883a 	add	r3,r3,r7
  187750:	00800804 	movi	r2,32
  187754:	10c00035 	stwio	r3,0(r2)

	while(IORD_I2C_STATUS & I2C_BUSY_MSK){
  187758:	04000c04 	movi	r16,48
  18775c:	00c00c04 	movi	r3,48
  187760:	80800037 	ldwio	r2,0(r16)
  187764:	1080004c 	andi	r2,r2,1
  187768:	10000326 	beq	r2,zero,187778 <i2c_xtn_read+0x98>
		chThdSleepMilliseconds(1);	//wait for I2C driver to be free
  18776c:	01000044 	movi	r4,1
  187770:	0195ca40 	call	195ca4 <chThdSleep>
  187774:	003ff906 	br	18775c <__alt_data_end+0xfff8775c>
	}

	if(IORD_I2C_STATUS	&	I2C_NACK_DET_MSK){
  187778:	18800037 	ldwio	r2,0(r3)
  18777c:	1080008c 	andi	r2,r2,2
  187780:	10000626 	beq	r2,zero,18779c <i2c_xtn_read+0xbc>
		alt_printf("[i2c_xtn_read] NACK Detected : 0x%x\r\n",IORD_I2C_STATUS);
  187784:	19400037 	ldwio	r5,0(r3)
  187788:	010006b4 	movhi	r4,26
  18778c:	213bcd04 	addi	r4,r4,-4300
  187790:	0196b2c0 	call	196b2c <alt_printf>
		return I2C_NACK_DETECTED;
  187794:	00800044 	movi	r2,1
  187798:	00000a06 	br	1877c4 <i2c_xtn_read+0xe4>
  18779c:	0005883a 	mov	r2,zero
	}

	for(i=0; i<num_bytes;i++)	{
  1877a0:	8c403fcc 	andi	r17,r17,255
  1877a4:	1440062e 	bgeu	r2,r17,1877c0 <i2c_xtn_read+0xe0>
		//alt_printf("[i2c_xtn_read] Cache[0x%x] : 0x%x\n",i,IORD_I2C_DATA_CACHE(i));
		bffr[i]	=	IORD_I2C_DATA_CACHE(i)	&	0xff;
  1877a8:	1006913a 	slli	r3,r2,4
  1877ac:	19001437 	ldwio	r4,80(r3)
  1877b0:	9087883a 	add	r3,r18,r2
  1877b4:	19000005 	stb	r4,0(r3)
	if(IORD_I2C_STATUS	&	I2C_NACK_DET_MSK){
		alt_printf("[i2c_xtn_read] NACK Detected : 0x%x\r\n",IORD_I2C_STATUS);
		return I2C_NACK_DETECTED;
	}

	for(i=0; i<num_bytes;i++)	{
  1877b8:	10800044 	addi	r2,r2,1
  1877bc:	003ff906 	br	1877a4 <__alt_data_end+0xfff877a4>
		//alt_printf("[i2c_xtn_read] Cache[0x%x] : 0x%x\n",i,IORD_I2C_DATA_CACHE(i));
		bffr[i]	=	IORD_I2C_DATA_CACHE(i)	&	0xff;
	}

	return I2C_OK;
  1877c0:	0005883a 	mov	r2,zero
}
  1877c4:	dfc00317 	ldw	ra,12(sp)
  1877c8:	dc800217 	ldw	r18,8(sp)
  1877cc:	dc400117 	ldw	r17,4(sp)
  1877d0:	dc000017 	ldw	r16,0(sp)
  1877d4:	dec00404 	addi	sp,sp,16
  1877d8:	f800283a 	ret

001877dc <byte_rev_i2c_arry>:

void	byte_rev_i2c_arry(alt_u8 *bffr,alt_u32 size)	{
	alt_u8	temp;
	alt_u16 i;

	for(i=0;i<(size>>1);i++)	{
  1877dc:	280ed07a 	srli	r7,r5,1
  1877e0:	0007883a 	mov	r3,zero
  1877e4:	297fffc4 	addi	r5,r5,-1
  1877e8:	18bfffcc 	andi	r2,r3,65535
  1877ec:	11c0092e 	bgeu	r2,r7,187814 <byte_rev_i2c_arry+0x38>
		temp = bffr[i];
  1877f0:	208d883a 	add	r6,r4,r2
		bffr[i] = bffr[size-i-1];
  1877f4:	2885c83a 	sub	r2,r5,r2
  1877f8:	2085883a 	add	r2,r4,r2
  1877fc:	12400003 	ldbu	r9,0(r2)
void	byte_rev_i2c_arry(alt_u8 *bffr,alt_u32 size)	{
	alt_u8	temp;
	alt_u16 i;

	for(i=0;i<(size>>1);i++)	{
		temp = bffr[i];
  187800:	32000003 	ldbu	r8,0(r6)

void	byte_rev_i2c_arry(alt_u8 *bffr,alt_u32 size)	{
	alt_u8	temp;
	alt_u16 i;

	for(i=0;i<(size>>1);i++)	{
  187804:	18c00044 	addi	r3,r3,1
		temp = bffr[i];
		bffr[i] = bffr[size-i-1];
  187808:	32400005 	stb	r9,0(r6)
		bffr[size-i-1] = temp;
  18780c:	12000005 	stb	r8,0(r2)
  187810:	003ff506 	br	1877e8 <__alt_data_end+0xfff877e8>
	}
}
  187814:	f800283a 	ret

00187818 <update_acache_mode>:
#include "alt_types.h"
#include "sys/alt_stdio.h"


void update_acache_mode(PCM_BFFR_MODE_T mode)	{
	IOWR_PCM_BFFR_CONTROL(mode & PCM_BFFR_MODE_MSK);
  187818:	2100004c 	andi	r4,r4,1
  18781c:	00880004 	movi	r2,8192
  187820:	11000035 	stwio	r4,0(r2)
  187824:	f800283a 	ret

00187828 <dump_acache_cap_data>:
}

void dump_acache_cap_data(alt_u32 *lbffr, alt_u32 *rbffr)	{
	alt_u32	i;

	for(i=0; i<PCM_BFFR_NUM_SAMPLES; i++)	{
  187828:	0005883a 	mov	r2,zero
		IOWR_PCM_BFFR_CAP_ADDR(i);
  18782c:	01c80804 	movi	r7,8224
		lbffr[i]	=	IORD_PCM_BFFR_CAP_DATA;
  187830:	01880c04 	movi	r6,8240
}

void dump_acache_cap_data(alt_u32 *lbffr, alt_u32 *rbffr)	{
	alt_u32	i;

	for(i=0; i<PCM_BFFR_NUM_SAMPLES; i++)	{
  187834:	02002004 	movi	r8,128
		IOWR_PCM_BFFR_CAP_ADDR(i);
  187838:	38800035 	stwio	r2,0(r7)
		lbffr[i]	=	IORD_PCM_BFFR_CAP_DATA;
  18783c:	32800037 	ldwio	r10,0(r6)
  187840:	1087883a 	add	r3,r2,r2
  187844:	18c7883a 	add	r3,r3,r3
  187848:	20d3883a 	add	r9,r4,r3
  18784c:	4a800015 	stw	r10,0(r9)
  187850:	12402004 	addi	r9,r2,128

		IOWR_PCM_BFFR_CAP_ADDR(i+PCM_BFFR_NUM_SAMPLES);
  187854:	3a400035 	stwio	r9,0(r7)
		rbffr[i]	=	IORD_PCM_BFFR_CAP_DATA;
  187858:	32400037 	ldwio	r9,0(r6)
  18785c:	28c7883a 	add	r3,r5,r3
  187860:	1a400015 	stw	r9,0(r3)
}

void dump_acache_cap_data(alt_u32 *lbffr, alt_u32 *rbffr)	{
	alt_u32	i;

	for(i=0; i<PCM_BFFR_NUM_SAMPLES; i++)	{
  187864:	10800044 	addi	r2,r2,1
  187868:	123ff31e 	bne	r2,r8,187838 <__alt_data_end+0xfff87838>
		lbffr[i]	=	IORD_PCM_BFFR_CAP_DATA;

		IOWR_PCM_BFFR_CAP_ADDR(i+PCM_BFFR_NUM_SAMPLES);
		rbffr[i]	=	IORD_PCM_BFFR_CAP_DATA;
	}
}
  18786c:	f800283a 	ret

00187870 <disable_dac_drvr>:
#include "alt_types.h"
#include "sys/alt_stdio.h"


void disable_dac_drvr()	{
	IOWR_SSM2603_DRVR_CONFIG(IORD_SSM2603_DRVR_CONFIG	&	~SSM2603_DRVR_DAC_EN_MSK);
  187870:	00c40004 	movi	r3,4096
  187874:	19000037 	ldwio	r4,0(r3)
  187878:	00bfff84 	movi	r2,-2
  18787c:	2084703a 	and	r2,r4,r2
  187880:	18800035 	stwio	r2,0(r3)
  187884:	f800283a 	ret

00187888 <enable_dac_drvr>:
}

void enable_dac_drvr()	{
	IOWR_SSM2603_DRVR_CONFIG(IORD_SSM2603_DRVR_CONFIG	|	SSM2603_DRVR_DAC_EN_MSK);
  187888:	00c40004 	movi	r3,4096
  18788c:	18800037 	ldwio	r2,0(r3)
  187890:	10800054 	ori	r2,r2,1
  187894:	18800035 	stwio	r2,0(r3)
  187898:	f800283a 	ret

0018789c <disable_adc_drvr>:
}

void disable_adc_drvr()	{
	IOWR_SSM2603_DRVR_CONFIG(IORD_SSM2603_DRVR_CONFIG	&	~SSM2603_DRVR_ADC_EN_MSK);
  18789c:	00c40004 	movi	r3,4096
  1878a0:	19000037 	ldwio	r4,0(r3)
  1878a4:	00bfff44 	movi	r2,-3
  1878a8:	2084703a 	and	r2,r4,r2
  1878ac:	18800035 	stwio	r2,0(r3)
  1878b0:	f800283a 	ret

001878b4 <enable_adc_drvr>:
}

void enable_adc_drvr()	{
	IOWR_SSM2603_DRVR_CONFIG(IORD_SSM2603_DRVR_CONFIG	|	SSM2603_DRVR_ADC_EN_MSK);
  1878b4:	00c40004 	movi	r3,4096
  1878b8:	18800037 	ldwio	r2,0(r3)
  1878bc:	10800094 	ori	r2,r2,2
  1878c0:	18800035 	stwio	r2,0(r3)
  1878c4:	f800283a 	ret

001878c8 <configure_drvr_bps>:
}

void configure_drvr_bps(BPS_T val)	{
	IOWR_SSM2603_DRVR_CONFIG((IORD_SSM2603_DRVR_CONFIG & ~SSM2603_DRVR_BPS_MSK) | (val << SSM2603_DRVR_BPS_OFFSET));
  1878c8:	00c40004 	movi	r3,4096
  1878cc:	19400037 	ldwio	r5,0(r3)
  1878d0:	00bffcc4 	movi	r2,-13
  1878d4:	2109883a 	add	r4,r4,r4
  1878d8:	2884703a 	and	r2,r5,r2
  1878dc:	2109883a 	add	r4,r4,r4
  1878e0:	1108b03a 	or	r4,r2,r4
  1878e4:	19000035 	stwio	r4,0(r3)
  1878e8:	f800283a 	ret

001878ec <configure_drvr_fs_div>:
}

void configure_drvr_fs_div(FS_DIV_T val)	{
	IOWR_SSM2603_DRVR_FS_VAL(val);
  1878ec:	00840c04 	movi	r2,4144
  1878f0:	11000035 	stwio	r4,0(r2)
  1878f4:	f800283a 	ret

001878f8 <configure_drvr_bclk_div>:
}

void configure_drvr_bclk_div(BCLK_DIV_T val)	{
	IOWR_SSM2603_DRVR_BCLK_DIV(val);
  1878f8:	00840804 	movi	r2,4128
  1878fc:	11000035 	stwio	r4,0(r2)
  187900:	f800283a 	ret

00187904 <dump_drvr_regs>:
}

void dump_drvr_regs()	{
  187904:	deffff04 	addi	sp,sp,-4
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_CONFIG_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_CONFIG);
  187908:	00840004 	movi	r2,4096

void configure_drvr_bclk_div(BCLK_DIV_T val)	{
	IOWR_SSM2603_DRVR_BCLK_DIV(val);
}

void dump_drvr_regs()	{
  18790c:	dfc00015 	stw	ra,0(sp)
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_CONFIG_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_CONFIG);
  187910:	11400037 	ldwio	r5,0(r2)
  187914:	010006b4 	movhi	r4,26
  187918:	213bd704 	addi	r4,r4,-4260
  18791c:	0196b2c0 	call	196b2c <alt_printf>
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_STATUS_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_STATUS);
  187920:	00840404 	movi	r2,4112
  187924:	11400037 	ldwio	r5,0(r2)
  187928:	010006b4 	movhi	r4,26
  18792c:	213be404 	addi	r4,r4,-4208
  187930:	0196b2c0 	call	196b2c <alt_printf>
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_BCLK_DIV_REG : 0x%x\r\n",IORD_SSM2603_DRVR_BCLK_DIV);
  187934:	00840804 	movi	r2,4128
  187938:	11400037 	ldwio	r5,0(r2)
  18793c:	010006b4 	movhi	r4,26
  187940:	213bf104 	addi	r4,r4,-4156
  187944:	0196b2c0 	call	196b2c <alt_printf>
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_FS_VAL_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_FS_VAL);
  187948:	00840c04 	movi	r2,4144
  18794c:	11400037 	ldwio	r5,0(r2)
  187950:	010006b4 	movhi	r4,26
  187954:	213bfe04 	addi	r4,r4,-4104
}
  187958:	dfc00017 	ldw	ra,0(sp)
  18795c:	dec00104 	addi	sp,sp,4

void dump_drvr_regs()	{
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_CONFIG_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_CONFIG);
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_STATUS_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_STATUS);
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_BCLK_DIV_REG : 0x%x\r\n",IORD_SSM2603_DRVR_BCLK_DIV);
	alt_printf("[dump_drvr_regs] SSM2603_DRVR_FS_VAL_REG   : 0x%x\r\n",IORD_SSM2603_DRVR_FS_VAL);
  187960:	0196b2c1 	jmpi	196b2c <alt_printf>

00187964 <init_cortex>:
*/

#include "cortex.h"

void init_cortex()	{
	IOWR_RESET_CNTRL(0x0);
  187964:	00800134 	movhi	r2,4
  187968:	10000035 	stwio	zero,0(r2)
	IOWR_RESET_CNTRL(0x1f);
  18796c:	00c007c4 	movi	r3,31
  187970:	10c00035 	stwio	r3,0(r2)

	init_acortex();
  187974:	01871ec1 	jmpi	1871ec <init_acortex>

00187978 <disable_fgyrus>:
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "system.h"

void disable_fgyrus(){
	IOWR_FGYRUS_CTRL(IORD_FGYRUS_CTRL & ~FGYRUS_EN_MSK);
  187978:	00c00074 	movhi	r3,1
  18797c:	19000037 	ldwio	r4,0(r3)
  187980:	00bfff84 	movi	r2,-2
  187984:	2084703a 	and	r2,r4,r2
  187988:	18800035 	stwio	r2,0(r3)
  18798c:	f800283a 	ret

00187990 <enable_fgyrus>:
}

void enable_fgyrus(){
	IOWR_FGYRUS_CTRL((IORD_FGYRUS_CTRL & ~FGYRUS_EN_MSK) + FGYRUS_EN_MSK);
  187990:	00c00074 	movhi	r3,1
  187994:	18800037 	ldwio	r2,0(r3)
  187998:	10800054 	ori	r2,r2,1
  18799c:	18800035 	stwio	r2,0(r3)
  1879a0:	f800283a 	ret

001879a4 <update_fgyrus_mode>:
}

void update_fgyrus_mode(FGYRUS_MODE_T mode){
	IOWR_FGYRUS_CTRL((IORD_FGYRUS_CTRL & ~FGYRUS_MODE_MSK) + mode);
  1879a4:	00c00074 	movhi	r3,1
  1879a8:	19400037 	ldwio	r5,0(r3)
  1879ac:	00bfff44 	movi	r2,-3
  1879b0:	2884703a 	and	r2,r5,r2
  1879b4:	1109883a 	add	r4,r2,r4
  1879b8:	19000035 	stwio	r4,0(r3)
  1879bc:	f800283a 	ret

001879c0 <get_fgyrus_mode>:
}

FGYRUS_MODE_T get_fgyrus_mode(){
	return IORD_FGYRUS_CTRL & FGYRUS_MODE_MSK;
  1879c0:	00800074 	movhi	r2,1
  1879c4:	10800037 	ldwio	r2,0(r2)
}
  1879c8:	1080008c 	andi	r2,r2,2
  1879cc:	f800283a 	ret

001879d0 <get_fgyrus_status>:

FGYRUS_STATUS_T get_fgyrus_status(){
	alt_u32 reg	=	IORD_FGYRUS_STATUS;
  1879d0:	00800074 	movhi	r2,1
  1879d4:	10800404 	addi	r2,r2,16
  1879d8:	10800037 	ldwio	r2,0(r2)

	if(reg & FGYRUS_BUT_OFLW_MSK)	return FGYRUS_BUT_OFLW;
  1879dc:	10c0010c 	andi	r3,r2,4
  1879e0:	1800081e 	bne	r3,zero,187a04 <get_fgyrus_status+0x34>
	if(reg & FGYRUS_BUT_UFLW_MSK)	return FGYRUS_BUT_UFLW;
  1879e4:	10c0008c 	andi	r3,r2,2
  1879e8:	1800081e 	bne	r3,zero,187a0c <get_fgyrus_status+0x3c>
	if(reg & FGYRUS_BUSY_MSK)		return FGYRUS_BUSY;
  1879ec:	10c0004c 	andi	r3,r2,1
  1879f0:	1800081e 	bne	r3,zero,187a14 <get_fgyrus_status+0x44>
	if(reg & FGYRUS_FFT_DONE_MSK)	return FGYRUS_FFT_DONE;
  1879f4:	1080020c 	andi	r2,r2,8
	return FGYRUS_IDLE;
  1879f8:	1004c03a 	cmpne	r2,r2,zero
  1879fc:	100490ba 	slli	r2,r2,2
  187a00:	f800283a 	ret
}

FGYRUS_STATUS_T get_fgyrus_status(){
	alt_u32 reg	=	IORD_FGYRUS_STATUS;

	if(reg & FGYRUS_BUT_OFLW_MSK)	return FGYRUS_BUT_OFLW;
  187a04:	008000c4 	movi	r2,3
  187a08:	f800283a 	ret
	if(reg & FGYRUS_BUT_UFLW_MSK)	return FGYRUS_BUT_UFLW;
  187a0c:	00800084 	movi	r2,2
  187a10:	f800283a 	ret
	if(reg & FGYRUS_BUSY_MSK)		return FGYRUS_BUSY;
  187a14:	00800044 	movi	r2,1
	if(reg & FGYRUS_FFT_DONE_MSK)	return FGYRUS_FFT_DONE;
	return FGYRUS_IDLE;
}
  187a18:	f800283a 	ret

00187a1c <dump_fgyrus_win_ram>:

void dump_fgyrus_win_ram(alt_u32* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_WIN_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_WIN_RAM_BASE+(i<<4)));
  187a1c:	01c00074 	movhi	r7,1
	if(reg & FGYRUS_BUSY_MSK)		return FGYRUS_BUSY;
	if(reg & FGYRUS_FFT_DONE_MSK)	return FGYRUS_FFT_DONE;
	return FGYRUS_IDLE;
}

void dump_fgyrus_win_ram(alt_u32* bffr){
  187a20:	0005883a 	mov	r2,zero
	alt_u16 i;

	for(i=0; i<FGYRUS_WIN_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_WIN_RAM_BASE+(i<<4)));
  187a24:	39d00004 	addi	r7,r7,16384
}

void dump_fgyrus_win_ram(alt_u32* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_WIN_RAM_SIZE; i++)
  187a28:	01402004 	movi	r5,128
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_WIN_RAM_BASE+(i<<4)));
  187a2c:	1006913a 	slli	r3,r2,4
  187a30:	19c7883a 	add	r3,r3,r7
  187a34:	19800037 	ldwio	r6,0(r3)
  187a38:	1087883a 	add	r3,r2,r2
  187a3c:	18c7883a 	add	r3,r3,r3
  187a40:	20c7883a 	add	r3,r4,r3
  187a44:	19800015 	stw	r6,0(r3)
  187a48:	10800044 	addi	r2,r2,1
}

void dump_fgyrus_win_ram(alt_u32* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_WIN_RAM_SIZE; i++)
  187a4c:	117ff71e 	bne	r2,r5,187a2c <__alt_data_end+0xfff87a2c>
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_WIN_RAM_BASE+(i<<4)));
}
  187a50:	f800283a 	ret

00187a54 <dump_fgyrus_twdl_ram>:

void dump_fgyrus_twdl_ram(alt_u32* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_TWDL_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_TWDL_RAM_BASE+(i<<4)));
  187a54:	01c00074 	movhi	r7,1

	for(i=0; i<FGYRUS_WIN_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_WIN_RAM_BASE+(i<<4)));
}

void dump_fgyrus_twdl_ram(alt_u32* bffr){
  187a58:	0005883a 	mov	r2,zero
	alt_u16 i;

	for(i=0; i<FGYRUS_TWDL_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_TWDL_RAM_BASE+(i<<4)));
  187a5c:	39c80004 	addi	r7,r7,8192
}

void dump_fgyrus_twdl_ram(alt_u32* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_TWDL_RAM_SIZE; i++)
  187a60:	01402004 	movi	r5,128
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_TWDL_RAM_BASE+(i<<4)));
  187a64:	1006913a 	slli	r3,r2,4
  187a68:	19c7883a 	add	r3,r3,r7
  187a6c:	19800037 	ldwio	r6,0(r3)
  187a70:	1087883a 	add	r3,r2,r2
  187a74:	18c7883a 	add	r3,r3,r3
  187a78:	20c7883a 	add	r3,r4,r3
  187a7c:	19800015 	stw	r6,0(r3)
  187a80:	10800044 	addi	r2,r2,1
}

void dump_fgyrus_twdl_ram(alt_u32* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_TWDL_RAM_SIZE; i++)
  187a84:	117ff71e 	bne	r2,r5,187a64 <__alt_data_end+0xfff87a64>
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_TWDL_RAM_BASE+(i<<4)));

}
  187a88:	f800283a 	ret

00187a8c <dump_fgyrus_cordic_ram>:

void dump_fgyrus_cordic_ram(alt_u16* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_CORDIC_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_CORDIC_RAM_BASE+(i<<4)));
  187a8c:	01c00074 	movhi	r7,1
	for(i=0; i<FGYRUS_TWDL_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_TWDL_RAM_BASE+(i<<4)));

}

void dump_fgyrus_cordic_ram(alt_u16* bffr){
  187a90:	0005883a 	mov	r2,zero
	alt_u16 i;

	for(i=0; i<FGYRUS_CORDIC_RAM_SIZE; i++)
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_CORDIC_RAM_BASE+(i<<4)));
  187a94:	39cc0004 	addi	r7,r7,12288
}

void dump_fgyrus_cordic_ram(alt_u16* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_CORDIC_RAM_SIZE; i++)
  187a98:	01404004 	movi	r5,256
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_CORDIC_RAM_BASE+(i<<4)));
  187a9c:	1006913a 	slli	r3,r2,4
  187aa0:	19c7883a 	add	r3,r3,r7
  187aa4:	19800037 	ldwio	r6,0(r3)
  187aa8:	1087883a 	add	r3,r2,r2
  187aac:	20c7883a 	add	r3,r4,r3
  187ab0:	1980000d 	sth	r6,0(r3)
  187ab4:	10800044 	addi	r2,r2,1
}

void dump_fgyrus_cordic_ram(alt_u16* bffr){
	alt_u16 i;

	for(i=0; i<FGYRUS_CORDIC_RAM_SIZE; i++)
  187ab8:	117ff81e 	bne	r2,r5,187a9c <__alt_data_end+0xfff87a9c>
		bffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_CORDIC_RAM_BASE+(i<<4)));

}
  187abc:	f800283a 	ret

00187ac0 <dump_fgyrus_fft_cache>:
void dump_fgyrus_fft_cache(alt_u32* lbffr, alt_u32*rbffr, alt_u8 num){
	alt_u16 i;
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));
  187ac0:	02000074 	movhi	r8,1
 */
void dump_fgyrus_fft_cache(alt_u32* lbffr, alt_u32*rbffr, alt_u8 num){
	alt_u16 i;
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
  187ac4:	0007883a 	mov	r3,zero
  187ac8:	31803fcc 	andi	r6,r6,255
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));
  187acc:	42040004 	addi	r8,r8,4096
 */
void dump_fgyrus_fft_cache(alt_u32* lbffr, alt_u32*rbffr, alt_u8 num){
	alt_u16 i;
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
  187ad0:	19ffffcc 	andi	r7,r3,65535
  187ad4:	1804913a 	slli	r2,r3,4
  187ad8:	3980072e 	bgeu	r7,r6,187af8 <dump_fgyrus_fft_cache+0x38>
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));
  187adc:	10bfffcc 	andi	r2,r2,65535
  187ae0:	1205883a 	add	r2,r2,r8
  187ae4:	10800037 	ldwio	r2,0(r2)
  187ae8:	20800015 	stw	r2,0(r4)
 */
void dump_fgyrus_fft_cache(alt_u32* lbffr, alt_u32*rbffr, alt_u8 num){
	alt_u16 i;
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
  187aec:	18c00044 	addi	r3,r3,1
  187af0:	21000104 	addi	r4,r4,4
  187af4:	003ff606 	br	187ad0 <__alt_data_end+0xfff87ad0>
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));

	for(i=0, offset=0x800; i<num; i++, offset=offset+0x10)	//read RChannel FFT data
		rbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));
  187af8:	01c00074 	movhi	r7,1
 */
void dump_fgyrus_fft_cache(alt_u32* lbffr, alt_u32*rbffr, alt_u8 num){
	alt_u16 i;
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
  187afc:	0007883a 	mov	r3,zero
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));

	for(i=0, offset=0x800; i<num; i++, offset=offset+0x10)	//read RChannel FFT data
		rbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));
  187b00:	39c40004 	addi	r7,r7,4096
  187b04:	18802004 	addi	r2,r3,128
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));

	for(i=0, offset=0x800; i<num; i++, offset=offset+0x10)	//read RChannel FFT data
  187b08:	193fffcc 	andi	r4,r3,65535
  187b0c:	1004913a 	slli	r2,r2,4
  187b10:	2180072e 	bgeu	r4,r6,187b30 <dump_fgyrus_fft_cache+0x70>
		rbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));
  187b14:	10bfffcc 	andi	r2,r2,65535
  187b18:	11c5883a 	add	r2,r2,r7
  187b1c:	10800037 	ldwio	r2,0(r2)
  187b20:	28800015 	stw	r2,0(r5)
	alt_u16 offset;

	for(i=0, offset=0x000; i<num; i++, offset=offset+0x10)	//read LChannel FFT data
		lbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));

	for(i=0, offset=0x800; i<num; i++, offset=offset+0x10)	//read RChannel FFT data
  187b24:	18c00044 	addi	r3,r3,1
  187b28:	29400104 	addi	r5,r5,4
  187b2c:	003ff506 	br	187b04 <__alt_data_end+0xfff87b04>
		rbffr[i] = IORD_32DIRECT(CORTEX_BASE, (FGYRUS_FFT_CACHE_BASE+ offset));

}
  187b30:	f800283a 	ret

00187b34 <check_sys_mem_intf_errors>:
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "system.h"
#include "sys_mem_intf.h"

void check_sys_mem_intf_errors()	{
  187b34:	defffd04 	addi	sp,sp,-12
	alt_u32	reg;

	reg = IORD_SYS_MEM_ARB_STATUS_REG;
  187b38:	008000b4 	movhi	r2,2
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "system.h"
#include "sys_mem_intf.h"

void check_sys_mem_intf_errors()	{
  187b3c:	dfc00215 	stw	ra,8(sp)
  187b40:	dc400115 	stw	r17,4(sp)
  187b44:	dc000015 	stw	r16,0(sp)
	alt_u32	reg;

	reg = IORD_SYS_MEM_ARB_STATUS_REG;
  187b48:	14000037 	ldwio	r16,0(r2)

	if(reg & SYS_MEM_ARB_EGR_BFFR_0_UNDERFLOW_MSK)	{
  187b4c:	8080004c 	andi	r2,r16,1
  187b50:	10000326 	beq	r2,zero,187b60 <check_sys_mem_intf_errors+0x2c>
		alt_printf("[check_sys_mem_intf_errors] EGR_BFFR_0_UNDERFLOW Detected!\r\n");
  187b54:	010006b4 	movhi	r4,26
  187b58:	213c0b04 	addi	r4,r4,-4052
  187b5c:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_EGR_BFFR_0_OVERFLOW_MSK)	{
  187b60:	8440008c 	andi	r17,r16,2
  187b64:	88000326 	beq	r17,zero,187b74 <check_sys_mem_intf_errors+0x40>
			alt_printf("[check_sys_mem_intf_errors] EGR_BFFR_0_OVERFLOW Detected!\r\n");
  187b68:	010006b4 	movhi	r4,26
  187b6c:	213c1b04 	addi	r4,r4,-3988
  187b70:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_EGR_BFFR_1_UNDERFLOW_MSK)	{
  187b74:	8080010c 	andi	r2,r16,4
  187b78:	10000326 	beq	r2,zero,187b88 <check_sys_mem_intf_errors+0x54>
		alt_printf("[check_sys_mem_intf_errors] EGR_BFFR_1_UNDERFLOW Detected!\r\n");
  187b7c:	010006b4 	movhi	r4,26
  187b80:	213c2a04 	addi	r4,r4,-3928
  187b84:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_EGR_BFFR_0_OVERFLOW_MSK)	{
  187b88:	88000326 	beq	r17,zero,187b98 <check_sys_mem_intf_errors+0x64>
			alt_printf("[check_sys_mem_intf_errors] EGR_BFFR_1_OVERFLOW Detected!\r\n");
  187b8c:	010006b4 	movhi	r4,26
  187b90:	213c3a04 	addi	r4,r4,-3864
  187b94:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_INGR_BFFR_0_UNDERFLOW_MSK)	{
  187b98:	8080040c 	andi	r2,r16,16
  187b9c:	10000326 	beq	r2,zero,187bac <check_sys_mem_intf_errors+0x78>
		alt_printf("[check_sys_mem_intf_errors] INGR_BFFR_0_UNDERFLOW Detected!\r\n");
  187ba0:	010006b4 	movhi	r4,26
  187ba4:	213c4904 	addi	r4,r4,-3804
  187ba8:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_INGR_BFFR_0_OVERFLOW_MSK)	{
  187bac:	8440080c 	andi	r17,r16,32
  187bb0:	88000326 	beq	r17,zero,187bc0 <check_sys_mem_intf_errors+0x8c>
			alt_printf("[check_sys_mem_intf_errors] INGR_BFFR_0_OVERFLOW Detected!\r\n");
  187bb4:	010006b4 	movhi	r4,26
  187bb8:	213c5904 	addi	r4,r4,-3740
  187bbc:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_INGR_BFFR_1_UNDERFLOW_MSK)	{
  187bc0:	8400100c 	andi	r16,r16,64
  187bc4:	80000326 	beq	r16,zero,187bd4 <check_sys_mem_intf_errors+0xa0>
		alt_printf("[check_sys_mem_intf_errors] INGR_BFFR_1_UNDERFLOW Detected!\r\n");
  187bc8:	010006b4 	movhi	r4,26
  187bcc:	213c6904 	addi	r4,r4,-3676
  187bd0:	0196b2c0 	call	196b2c <alt_printf>
	}

	if(reg & SYS_MEM_ARB_INGR_BFFR_0_OVERFLOW_MSK)	{
  187bd4:	88000726 	beq	r17,zero,187bf4 <check_sys_mem_intf_errors+0xc0>
			alt_printf("[check_sys_mem_intf_errors] INGR_BFFR_1_OVERFLOW Detected!\r\n");
  187bd8:	010006b4 	movhi	r4,26
  187bdc:	213c7904 	addi	r4,r4,-3612
	}

	return;
}
  187be0:	dfc00217 	ldw	ra,8(sp)
  187be4:	dc400117 	ldw	r17,4(sp)
  187be8:	dc000017 	ldw	r16,0(sp)
  187bec:	dec00304 	addi	sp,sp,12
	if(reg & SYS_MEM_ARB_INGR_BFFR_1_UNDERFLOW_MSK)	{
		alt_printf("[check_sys_mem_intf_errors] INGR_BFFR_1_UNDERFLOW Detected!\r\n");
	}

	if(reg & SYS_MEM_ARB_INGR_BFFR_0_OVERFLOW_MSK)	{
			alt_printf("[check_sys_mem_intf_errors] INGR_BFFR_1_OVERFLOW Detected!\r\n");
  187bf0:	0196b2c1 	jmpi	196b2c <alt_printf>
	}

	return;
}
  187bf4:	dfc00217 	ldw	ra,8(sp)
  187bf8:	dc400117 	ldw	r17,4(sp)
  187bfc:	dc000017 	ldw	r16,0(sp)
  187c00:	dec00304 	addi	sp,sp,12
  187c04:	f800283a 	ret

00187c08 <configure_sys_mem_intf_part>:


void configure_sys_mem_intf_part(alt_u8 part_num, alt_u32 start_addr, alt_u32 end_addr)	{
	if(part_num >= SYS_MEM_INTF_PART_MNGR_SIZE)	{
  187c08:	20803fcc 	andi	r2,r4,255
  187c0c:	00c007c4 	movi	r3,31

	return;
}


void configure_sys_mem_intf_part(alt_u8 part_num, alt_u32 start_addr, alt_u32 end_addr)	{
  187c10:	300f883a 	mov	r7,r6
	if(part_num >= SYS_MEM_INTF_PART_MNGR_SIZE)	{
  187c14:	1880052e 	bgeu	r3,r2,187c2c <configure_sys_mem_intf_part+0x24>
		alt_printf("[configure_sys_mem_intf_part] ERROR part_num 0x%x exceeds table size 0x%x",part_num,SYS_MEM_INTF_PART_MNGR_SIZE);
  187c18:	010006b4 	movhi	r4,26
  187c1c:	213c8904 	addi	r4,r4,-3548
  187c20:	100b883a 	mov	r5,r2
  187c24:	01800804 	movi	r6,32
  187c28:	00000a06 	br	187c54 <configure_sys_mem_intf_part+0x4c>
		return;
	}

	if(start_addr > SYS_MEM_INTF_PART_MAX_ADDR)	{
  187c2c:	01840034 	movhi	r6,4096
  187c30:	31bfffc4 	addi	r6,r6,-1
  187c34:	3140032e 	bgeu	r6,r5,187c44 <configure_sys_mem_intf_part+0x3c>
		alt_printf("[configure_sys_mem_intf_part] ERROR start_addr 0x%x exceeds max addr 0x%x",start_addr,SYS_MEM_INTF_PART_MAX_ADDR);
  187c38:	010006b4 	movhi	r4,26
  187c3c:	213c9c04 	addi	r4,r4,-3472
  187c40:	00000406 	br	187c54 <configure_sys_mem_intf_part+0x4c>
		return;
	}

	if(end_addr > SYS_MEM_INTF_PART_MAX_ADDR)	{
  187c44:	31c0042e 	bgeu	r6,r7,187c58 <configure_sys_mem_intf_part+0x50>
		alt_printf("[configure_sys_mem_intf_part] ERROR end_addr 0x%x exceeds max addr 0x%x",end_addr,SYS_MEM_INTF_PART_MAX_ADDR);
  187c48:	010006b4 	movhi	r4,26
  187c4c:	213caf04 	addi	r4,r4,-3396
  187c50:	380b883a 	mov	r5,r7
  187c54:	0196b2c1 	jmpi	196b2c <alt_printf>
		return;
	}

	IOWR_32DIRECT(CORTEX_BASE, (SYS_MEM_INTF_PART_MNGR_START_BASE+(part_num<<4)), start_addr);
  187c58:	1004913a 	slli	r2,r2,4
  187c5c:	00c000b4 	movhi	r3,2
  187c60:	18c40004 	addi	r3,r3,4096
  187c64:	10c7883a 	add	r3,r2,r3
  187c68:	19400035 	stwio	r5,0(r3)
	IOWR_32DIRECT(CORTEX_BASE, (SYS_MEM_INTF_PART_MNGR_END_BASE+(part_num<<4)), end_addr);
  187c6c:	00c000b4 	movhi	r3,2
  187c70:	18c48004 	addi	r3,r3,4608
  187c74:	10c5883a 	add	r2,r2,r3
  187c78:	11c00035 	stwio	r7,0(r2)
  187c7c:	f800283a 	ret

00187c80 <init_ledos>:
*/

#include "ledos.h"


void init_ledos(BPS_T bps)	{
  187c80:	defffe04 	addi	sp,sp,-8
  187c84:	dfc00115 	stw	ra,4(sp)
  187c88:	dc000015 	stw	r16,0(sp)
  187c8c:	2021883a 	mov	r16,r4
	init_cortex(bps);
  187c90:	01879640 	call	187964 <init_cortex>
	aud_codec_init(bps);
  187c94:	8009883a 	mov	r4,r16
  187c98:	01870c80 	call	1870c8 <aud_codec_init>
	adv7513_init();
}
  187c9c:	dfc00117 	ldw	ra,4(sp)
  187ca0:	dc000017 	ldw	r16,0(sp)
  187ca4:	dec00204 	addi	sp,sp,8


void init_ledos(BPS_T bps)	{
	init_cortex(bps);
	aud_codec_init(bps);
	adv7513_init();
  187ca8:	018135c1 	jmpi	18135c <adv7513_init>

00187cac <udivmodsi4>:
  187cac:	2900182e 	bgeu	r5,r4,187d10 <udivmodsi4+0x64>
  187cb0:	28001716 	blt	r5,zero,187d10 <udivmodsi4+0x64>
  187cb4:	00800804 	movi	r2,32
  187cb8:	00c00044 	movi	r3,1
  187cbc:	00000206 	br	187cc8 <udivmodsi4+0x1c>
  187cc0:	10001126 	beq	r2,zero,187d08 <udivmodsi4+0x5c>
  187cc4:	28000516 	blt	r5,zero,187cdc <udivmodsi4+0x30>
  187cc8:	294b883a 	add	r5,r5,r5
  187ccc:	10bfffc4 	addi	r2,r2,-1
  187cd0:	18c7883a 	add	r3,r3,r3
  187cd4:	293ffa36 	bltu	r5,r4,187cc0 <__alt_data_end+0xfff87cc0>
  187cd8:	18000b26 	beq	r3,zero,187d08 <udivmodsi4+0x5c>
  187cdc:	0005883a 	mov	r2,zero
  187ce0:	21400236 	bltu	r4,r5,187cec <udivmodsi4+0x40>
  187ce4:	2149c83a 	sub	r4,r4,r5
  187ce8:	10c4b03a 	or	r2,r2,r3
  187cec:	1806d07a 	srli	r3,r3,1
  187cf0:	280ad07a 	srli	r5,r5,1
  187cf4:	183ffa1e 	bne	r3,zero,187ce0 <__alt_data_end+0xfff87ce0>
  187cf8:	3000011e 	bne	r6,zero,187d00 <udivmodsi4+0x54>
  187cfc:	f800283a 	ret
  187d00:	2005883a 	mov	r2,r4
  187d04:	f800283a 	ret
  187d08:	0005883a 	mov	r2,zero
  187d0c:	003ffa06 	br	187cf8 <__alt_data_end+0xfff87cf8>
  187d10:	00c00044 	movi	r3,1
  187d14:	003ff106 	br	187cdc <__alt_data_end+0xfff87cdc>

00187d18 <__divsi3>:
  187d18:	defffe04 	addi	sp,sp,-8
  187d1c:	dfc00115 	stw	ra,4(sp)
  187d20:	dc000015 	stw	r16,0(sp)
  187d24:	20000b16 	blt	r4,zero,187d54 <__divsi3+0x3c>
  187d28:	0021883a 	mov	r16,zero
  187d2c:	28000c16 	blt	r5,zero,187d60 <__divsi3+0x48>
  187d30:	000d883a 	mov	r6,zero
  187d34:	0187cac0 	call	187cac <udivmodsi4>
  187d38:	0407c83a 	sub	r3,zero,r16
  187d3c:	1884f03a 	xor	r2,r3,r2
  187d40:	1405883a 	add	r2,r2,r16
  187d44:	dfc00117 	ldw	ra,4(sp)
  187d48:	dc000017 	ldw	r16,0(sp)
  187d4c:	dec00204 	addi	sp,sp,8
  187d50:	f800283a 	ret
  187d54:	0109c83a 	sub	r4,zero,r4
  187d58:	04000044 	movi	r16,1
  187d5c:	283ff40e 	bge	r5,zero,187d30 <__alt_data_end+0xfff87d30>
  187d60:	014bc83a 	sub	r5,zero,r5
  187d64:	8400005c 	xori	r16,r16,1
  187d68:	003ff106 	br	187d30 <__alt_data_end+0xfff87d30>

00187d6c <__modsi3>:
  187d6c:	defffd04 	addi	sp,sp,-12
  187d70:	dfc00215 	stw	ra,8(sp)
  187d74:	dc400115 	stw	r17,4(sp)
  187d78:	dc000015 	stw	r16,0(sp)
  187d7c:	20000c16 	blt	r4,zero,187db0 <__modsi3+0x44>
  187d80:	0023883a 	mov	r17,zero
  187d84:	0021883a 	mov	r16,zero
  187d88:	28000d16 	blt	r5,zero,187dc0 <__modsi3+0x54>
  187d8c:	01800044 	movi	r6,1
  187d90:	0187cac0 	call	187cac <udivmodsi4>
  187d94:	1404f03a 	xor	r2,r2,r16
  187d98:	8885883a 	add	r2,r17,r2
  187d9c:	dfc00217 	ldw	ra,8(sp)
  187da0:	dc400117 	ldw	r17,4(sp)
  187da4:	dc000017 	ldw	r16,0(sp)
  187da8:	dec00304 	addi	sp,sp,12
  187dac:	f800283a 	ret
  187db0:	0109c83a 	sub	r4,zero,r4
  187db4:	04400044 	movi	r17,1
  187db8:	043fffc4 	movi	r16,-1
  187dbc:	283ff30e 	bge	r5,zero,187d8c <__alt_data_end+0xfff87d8c>
  187dc0:	014bc83a 	sub	r5,zero,r5
  187dc4:	003ff106 	br	187d8c <__alt_data_end+0xfff87d8c>

00187dc8 <__udivsi3>:
  187dc8:	000d883a 	mov	r6,zero
  187dcc:	0187cac1 	jmpi	187cac <udivmodsi4>

00187dd0 <__umodsi3>:
  187dd0:	01800044 	movi	r6,1
  187dd4:	0187cac1 	jmpi	187cac <udivmodsi4>

00187dd8 <__mulsi3>:
  187dd8:	0005883a 	mov	r2,zero
  187ddc:	20000726 	beq	r4,zero,187dfc <__mulsi3+0x24>
  187de0:	20c0004c 	andi	r3,r4,1
  187de4:	2008d07a 	srli	r4,r4,1
  187de8:	18000126 	beq	r3,zero,187df0 <__mulsi3+0x18>
  187dec:	1145883a 	add	r2,r2,r5
  187df0:	294b883a 	add	r5,r5,r5
  187df4:	203ffa1e 	bne	r4,zero,187de0 <__alt_data_end+0xfff87de0>
  187df8:	f800283a 	ret
  187dfc:	f800283a 	ret

00187e00 <__addsf3>:
  187e00:	defffc04 	addi	sp,sp,-16
  187e04:	2004d7fa 	srli	r2,r4,31
  187e08:	280ed5fa 	srli	r7,r5,23
  187e0c:	dc000015 	stw	r16,0(sp)
  187e10:	01802034 	movhi	r6,128
  187e14:	2020d5fa 	srli	r16,r4,23
  187e18:	31bfffc4 	addi	r6,r6,-1
  187e1c:	2810d7fa 	srli	r8,r5,31
  187e20:	3108703a 	and	r4,r6,r4
  187e24:	dc800215 	stw	r18,8(sp)
  187e28:	314c703a 	and	r6,r6,r5
  187e2c:	84003fcc 	andi	r16,r16,255
  187e30:	200690fa 	slli	r3,r4,3
  187e34:	dfc00315 	stw	ra,12(sp)
  187e38:	39003fcc 	andi	r4,r7,255
  187e3c:	dc400115 	stw	r17,4(sp)
  187e40:	14803fcc 	andi	r18,r2,255
  187e44:	300c90fa 	slli	r6,r6,3
  187e48:	810bc83a 	sub	r5,r16,r4
  187e4c:	92004826 	beq	r18,r8,187f70 <__addsf3+0x170>
  187e50:	01406c0e 	bge	zero,r5,188004 <__addsf3+0x204>
  187e54:	20001e1e 	bne	r4,zero,187ed0 <__addsf3+0xd0>
  187e58:	3000611e 	bne	r6,zero,187fe0 <__addsf3+0x1e0>
  187e5c:	188001cc 	andi	r2,r3,7
  187e60:	10000426 	beq	r2,zero,187e74 <__addsf3+0x74>
  187e64:	190003cc 	andi	r4,r3,15
  187e68:	00800104 	movi	r2,4
  187e6c:	20800126 	beq	r4,r2,187e74 <__addsf3+0x74>
  187e70:	18c00104 	addi	r3,r3,4
  187e74:	1901002c 	andhi	r4,r3,1024
  187e78:	9005883a 	mov	r2,r18
  187e7c:	20003426 	beq	r4,zero,187f50 <__addsf3+0x150>
  187e80:	81400044 	addi	r5,r16,1
  187e84:	01003fc4 	movi	r4,255
  187e88:	29006926 	beq	r5,r4,188030 <__addsf3+0x230>
  187e8c:	180691ba 	slli	r3,r3,6
  187e90:	1808d27a 	srli	r4,r3,9
  187e94:	29403fcc 	andi	r5,r5,255
  187e98:	280a95fa 	slli	r5,r5,23
  187e9c:	10803fcc 	andi	r2,r2,255
  187ea0:	00c02034 	movhi	r3,128
  187ea4:	100497fa 	slli	r2,r2,31
  187ea8:	18ffffc4 	addi	r3,r3,-1
  187eac:	20c6703a 	and	r3,r4,r3
  187eb0:	1946b03a 	or	r3,r3,r5
  187eb4:	1884b03a 	or	r2,r3,r2
  187eb8:	dfc00317 	ldw	ra,12(sp)
  187ebc:	dc800217 	ldw	r18,8(sp)
  187ec0:	dc400117 	ldw	r17,4(sp)
  187ec4:	dc000017 	ldw	r16,0(sp)
  187ec8:	dec00404 	addi	sp,sp,16
  187ecc:	f800283a 	ret
  187ed0:	00803fc4 	movi	r2,255
  187ed4:	80bfe126 	beq	r16,r2,187e5c <__alt_data_end+0xfff87e5c>
  187ed8:	31810034 	orhi	r6,r6,1024
  187edc:	008006c4 	movi	r2,27
  187ee0:	11405b0e 	bge	r2,r5,188050 <__addsf3+0x250>
  187ee4:	01400044 	movi	r5,1
  187ee8:	1947c83a 	sub	r3,r3,r5
  187eec:	1881002c 	andhi	r2,r3,1024
  187ef0:	10001426 	beq	r2,zero,187f44 <__addsf3+0x144>
  187ef4:	04410034 	movhi	r17,1024
  187ef8:	8c7fffc4 	addi	r17,r17,-1
  187efc:	1c62703a 	and	r17,r3,r17
  187f00:	8809883a 	mov	r4,r17
  187f04:	0188da00 	call	188da0 <__clzsi2>
  187f08:	10bffec4 	addi	r2,r2,-5
  187f0c:	88a2983a 	sll	r17,r17,r2
  187f10:	14004a16 	blt	r2,r16,18803c <__addsf3+0x23c>
  187f14:	140bc83a 	sub	r5,r2,r16
  187f18:	00c007c4 	movi	r3,31
  187f1c:	1947c83a 	sub	r3,r3,r5
  187f20:	88c6983a 	sll	r3,r17,r3
  187f24:	29400044 	addi	r5,r5,1
  187f28:	8962d83a 	srl	r17,r17,r5
  187f2c:	1806c03a 	cmpne	r3,r3,zero
  187f30:	0021883a 	mov	r16,zero
  187f34:	1c46b03a 	or	r3,r3,r17
  187f38:	003fc806 	br	187e5c <__alt_data_end+0xfff87e5c>
  187f3c:	1000e526 	beq	r2,zero,1882d4 <__addsf3+0x4d4>
  187f40:	1007883a 	mov	r3,r2
  187f44:	188001cc 	andi	r2,r3,7
  187f48:	103fc61e 	bne	r2,zero,187e64 <__alt_data_end+0xfff87e64>
  187f4c:	9005883a 	mov	r2,r18
  187f50:	01003fc4 	movi	r4,255
  187f54:	1806d0fa 	srli	r3,r3,3
  187f58:	81001a26 	beq	r16,r4,187fc4 <__addsf3+0x1c4>
  187f5c:	01002034 	movhi	r4,128
  187f60:	213fffc4 	addi	r4,r4,-1
  187f64:	800b883a 	mov	r5,r16
  187f68:	1908703a 	and	r4,r3,r4
  187f6c:	003fc906 	br	187e94 <__alt_data_end+0xfff87e94>
  187f70:	01403e0e 	bge	zero,r5,18806c <__addsf3+0x26c>
  187f74:	20001e26 	beq	r4,zero,187ff0 <__addsf3+0x1f0>
  187f78:	01003fc4 	movi	r4,255
  187f7c:	813fb726 	beq	r16,r4,187e5c <__alt_data_end+0xfff87e5c>
  187f80:	31810034 	orhi	r6,r6,1024
  187f84:	010006c4 	movi	r4,27
  187f88:	2140570e 	bge	r4,r5,1880e8 <__addsf3+0x2e8>
  187f8c:	01400044 	movi	r5,1
  187f90:	1947883a 	add	r3,r3,r5
  187f94:	1901002c 	andhi	r4,r3,1024
  187f98:	203fea26 	beq	r4,zero,187f44 <__alt_data_end+0xfff87f44>
  187f9c:	84000044 	addi	r16,r16,1
  187fa0:	01003fc4 	movi	r4,255
  187fa4:	81007526 	beq	r16,r4,18817c <__addsf3+0x37c>
  187fa8:	00bf0034 	movhi	r2,64512
  187fac:	10bfffc4 	addi	r2,r2,-1
  187fb0:	1900004c 	andi	r4,r3,1
  187fb4:	1886703a 	and	r3,r3,r2
  187fb8:	1806d07a 	srli	r3,r3,1
  187fbc:	1906b03a 	or	r3,r3,r4
  187fc0:	003fa606 	br	187e5c <__alt_data_end+0xfff87e5c>
  187fc4:	18001a26 	beq	r3,zero,188030 <__addsf3+0x230>
  187fc8:	19001034 	orhi	r4,r3,64
  187fcc:	00c02034 	movhi	r3,128
  187fd0:	18ffffc4 	addi	r3,r3,-1
  187fd4:	017fffc4 	movi	r5,-1
  187fd8:	20c8703a 	and	r4,r4,r3
  187fdc:	003fad06 	br	187e94 <__alt_data_end+0xfff87e94>
  187fe0:	297fffc4 	addi	r5,r5,-1
  187fe4:	28002c1e 	bne	r5,zero,188098 <__addsf3+0x298>
  187fe8:	1987c83a 	sub	r3,r3,r6
  187fec:	003fbf06 	br	187eec <__alt_data_end+0xfff87eec>
  187ff0:	303f9a26 	beq	r6,zero,187e5c <__alt_data_end+0xfff87e5c>
  187ff4:	297fffc4 	addi	r5,r5,-1
  187ff8:	28004b1e 	bne	r5,zero,188128 <__addsf3+0x328>
  187ffc:	1987883a 	add	r3,r3,r6
  188000:	003fe406 	br	187f94 <__alt_data_end+0xfff87f94>
  188004:	2800271e 	bne	r5,zero,1880a4 <__addsf3+0x2a4>
  188008:	80800044 	addi	r2,r16,1
  18800c:	10803fcc 	andi	r2,r2,255
  188010:	01000044 	movi	r4,1
  188014:	2080520e 	bge	r4,r2,188160 <__addsf3+0x360>
  188018:	19a3c83a 	sub	r17,r3,r6
  18801c:	8881002c 	andhi	r2,r17,1024
  188020:	10002c26 	beq	r2,zero,1880d4 <__addsf3+0x2d4>
  188024:	30e3c83a 	sub	r17,r6,r3
  188028:	4025883a 	mov	r18,r8
  18802c:	003fb406 	br	187f00 <__alt_data_end+0xfff87f00>
  188030:	017fffc4 	movi	r5,-1
  188034:	0009883a 	mov	r4,zero
  188038:	003f9606 	br	187e94 <__alt_data_end+0xfff87e94>
  18803c:	00ff0034 	movhi	r3,64512
  188040:	18ffffc4 	addi	r3,r3,-1
  188044:	80a1c83a 	sub	r16,r16,r2
  188048:	88c6703a 	and	r3,r17,r3
  18804c:	003f8306 	br	187e5c <__alt_data_end+0xfff87e5c>
  188050:	00800804 	movi	r2,32
  188054:	1145c83a 	sub	r2,r2,r5
  188058:	3084983a 	sll	r2,r6,r2
  18805c:	314cd83a 	srl	r6,r6,r5
  188060:	100ac03a 	cmpne	r5,r2,zero
  188064:	298ab03a 	or	r5,r5,r6
  188068:	003f9f06 	br	187ee8 <__alt_data_end+0xfff87ee8>
  18806c:	2800451e 	bne	r5,zero,188184 <__addsf3+0x384>
  188070:	81000044 	addi	r4,r16,1
  188074:	21c03fcc 	andi	r7,r4,255
  188078:	01400044 	movi	r5,1
  18807c:	29c02d0e 	bge	r5,r7,188134 <__addsf3+0x334>
  188080:	01403fc4 	movi	r5,255
  188084:	21403c26 	beq	r4,r5,188178 <__addsf3+0x378>
  188088:	30c7883a 	add	r3,r6,r3
  18808c:	1806d07a 	srli	r3,r3,1
  188090:	2021883a 	mov	r16,r4
  188094:	003f7106 	br	187e5c <__alt_data_end+0xfff87e5c>
  188098:	00803fc4 	movi	r2,255
  18809c:	80bf8f1e 	bne	r16,r2,187edc <__alt_data_end+0xfff87edc>
  1880a0:	003f6e06 	br	187e5c <__alt_data_end+0xfff87e5c>
  1880a4:	80001726 	beq	r16,zero,188104 <__addsf3+0x304>
  1880a8:	00803fc4 	movi	r2,255
  1880ac:	20801a26 	beq	r4,r2,188118 <__addsf3+0x318>
  1880b0:	014bc83a 	sub	r5,zero,r5
  1880b4:	18c10034 	orhi	r3,r3,1024
  1880b8:	008006c4 	movi	r2,27
  1880bc:	1140430e 	bge	r2,r5,1881cc <__addsf3+0x3cc>
  1880c0:	00c00044 	movi	r3,1
  1880c4:	30c7c83a 	sub	r3,r6,r3
  1880c8:	2021883a 	mov	r16,r4
  1880cc:	4025883a 	mov	r18,r8
  1880d0:	003f8606 	br	187eec <__alt_data_end+0xfff87eec>
  1880d4:	883f8a1e 	bne	r17,zero,187f00 <__alt_data_end+0xfff87f00>
  1880d8:	0007883a 	mov	r3,zero
  1880dc:	0005883a 	mov	r2,zero
  1880e0:	0021883a 	mov	r16,zero
  1880e4:	003f9a06 	br	187f50 <__alt_data_end+0xfff87f50>
  1880e8:	01000804 	movi	r4,32
  1880ec:	2149c83a 	sub	r4,r4,r5
  1880f0:	3108983a 	sll	r4,r6,r4
  1880f4:	314cd83a 	srl	r6,r6,r5
  1880f8:	200ac03a 	cmpne	r5,r4,zero
  1880fc:	298ab03a 	or	r5,r5,r6
  188100:	003fa306 	br	187f90 <__alt_data_end+0xfff87f90>
  188104:	18000426 	beq	r3,zero,188118 <__addsf3+0x318>
  188108:	014a303a 	nor	r5,zero,r5
  18810c:	283fed26 	beq	r5,zero,1880c4 <__alt_data_end+0xfff880c4>
  188110:	00803fc4 	movi	r2,255
  188114:	20bfe81e 	bne	r4,r2,1880b8 <__alt_data_end+0xfff880b8>
  188118:	3007883a 	mov	r3,r6
  18811c:	2021883a 	mov	r16,r4
  188120:	4025883a 	mov	r18,r8
  188124:	003f4d06 	br	187e5c <__alt_data_end+0xfff87e5c>
  188128:	01003fc4 	movi	r4,255
  18812c:	813f951e 	bne	r16,r4,187f84 <__alt_data_end+0xfff87f84>
  188130:	003f4a06 	br	187e5c <__alt_data_end+0xfff87e5c>
  188134:	8000471e 	bne	r16,zero,188254 <__addsf3+0x454>
  188138:	18006126 	beq	r3,zero,1882c0 <__addsf3+0x4c0>
  18813c:	303f4726 	beq	r6,zero,187e5c <__alt_data_end+0xfff87e5c>
  188140:	1987883a 	add	r3,r3,r6
  188144:	1881002c 	andhi	r2,r3,1024
  188148:	103f7e26 	beq	r2,zero,187f44 <__alt_data_end+0xfff87f44>
  18814c:	00bf0034 	movhi	r2,64512
  188150:	10bfffc4 	addi	r2,r2,-1
  188154:	2821883a 	mov	r16,r5
  188158:	1886703a 	and	r3,r3,r2
  18815c:	003f3f06 	br	187e5c <__alt_data_end+0xfff87e5c>
  188160:	8000141e 	bne	r16,zero,1881b4 <__addsf3+0x3b4>
  188164:	1800311e 	bne	r3,zero,18822c <__addsf3+0x42c>
  188168:	30004626 	beq	r6,zero,188284 <__addsf3+0x484>
  18816c:	3007883a 	mov	r3,r6
  188170:	4025883a 	mov	r18,r8
  188174:	003f3906 	br	187e5c <__alt_data_end+0xfff87e5c>
  188178:	2021883a 	mov	r16,r4
  18817c:	0007883a 	mov	r3,zero
  188180:	003f7306 	br	187f50 <__alt_data_end+0xfff87f50>
  188184:	8000181e 	bne	r16,zero,1881e8 <__addsf3+0x3e8>
  188188:	18002f26 	beq	r3,zero,188248 <__addsf3+0x448>
  18818c:	014a303a 	nor	r5,zero,r5
  188190:	28000526 	beq	r5,zero,1881a8 <__addsf3+0x3a8>
  188194:	01c03fc4 	movi	r7,255
  188198:	21c02b26 	beq	r4,r7,188248 <__addsf3+0x448>
  18819c:	01c006c4 	movi	r7,27
  1881a0:	3940400e 	bge	r7,r5,1882a4 <__addsf3+0x4a4>
  1881a4:	00c00044 	movi	r3,1
  1881a8:	1987883a 	add	r3,r3,r6
  1881ac:	2021883a 	mov	r16,r4
  1881b0:	003f7806 	br	187f94 <__alt_data_end+0xfff87f94>
  1881b4:	1800111e 	bne	r3,zero,1881fc <__addsf3+0x3fc>
  1881b8:	30003526 	beq	r6,zero,188290 <__addsf3+0x490>
  1881bc:	3007883a 	mov	r3,r6
  1881c0:	4025883a 	mov	r18,r8
  1881c4:	04003fc4 	movi	r16,255
  1881c8:	003f2406 	br	187e5c <__alt_data_end+0xfff87e5c>
  1881cc:	00800804 	movi	r2,32
  1881d0:	1145c83a 	sub	r2,r2,r5
  1881d4:	1884983a 	sll	r2,r3,r2
  1881d8:	194ad83a 	srl	r5,r3,r5
  1881dc:	1006c03a 	cmpne	r3,r2,zero
  1881e0:	1946b03a 	or	r3,r3,r5
  1881e4:	003fb706 	br	1880c4 <__alt_data_end+0xfff880c4>
  1881e8:	01c03fc4 	movi	r7,255
  1881ec:	21c01626 	beq	r4,r7,188248 <__addsf3+0x448>
  1881f0:	014bc83a 	sub	r5,zero,r5
  1881f4:	18c10034 	orhi	r3,r3,1024
  1881f8:	003fe806 	br	18819c <__alt_data_end+0xfff8819c>
  1881fc:	30001f26 	beq	r6,zero,18827c <__addsf3+0x47c>
  188200:	1806d0fa 	srli	r3,r3,3
  188204:	1880102c 	andhi	r2,r3,64
  188208:	10000526 	beq	r2,zero,188220 <__addsf3+0x420>
  18820c:	300cd0fa 	srli	r6,r6,3
  188210:	3080102c 	andhi	r2,r6,64
  188214:	1000021e 	bne	r2,zero,188220 <__addsf3+0x420>
  188218:	3007883a 	mov	r3,r6
  18821c:	4025883a 	mov	r18,r8
  188220:	180690fa 	slli	r3,r3,3
  188224:	04003fc4 	movi	r16,255
  188228:	003f0c06 	br	187e5c <__alt_data_end+0xfff87e5c>
  18822c:	303f0b26 	beq	r6,zero,187e5c <__alt_data_end+0xfff87e5c>
  188230:	1985c83a 	sub	r2,r3,r6
  188234:	1101002c 	andhi	r4,r2,1024
  188238:	203f4026 	beq	r4,zero,187f3c <__alt_data_end+0xfff87f3c>
  18823c:	30c7c83a 	sub	r3,r6,r3
  188240:	4025883a 	mov	r18,r8
  188244:	003f0506 	br	187e5c <__alt_data_end+0xfff87e5c>
  188248:	3007883a 	mov	r3,r6
  18824c:	2021883a 	mov	r16,r4
  188250:	003f0206 	br	187e5c <__alt_data_end+0xfff87e5c>
  188254:	18001c26 	beq	r3,zero,1882c8 <__addsf3+0x4c8>
  188258:	30000826 	beq	r6,zero,18827c <__addsf3+0x47c>
  18825c:	1806d0fa 	srli	r3,r3,3
  188260:	1880102c 	andhi	r2,r3,64
  188264:	103fee26 	beq	r2,zero,188220 <__alt_data_end+0xfff88220>
  188268:	300cd0fa 	srli	r6,r6,3
  18826c:	3080102c 	andhi	r2,r6,64
  188270:	103feb1e 	bne	r2,zero,188220 <__alt_data_end+0xfff88220>
  188274:	3007883a 	mov	r3,r6
  188278:	003fe906 	br	188220 <__alt_data_end+0xfff88220>
  18827c:	04003fc4 	movi	r16,255
  188280:	003ef606 	br	187e5c <__alt_data_end+0xfff87e5c>
  188284:	8007883a 	mov	r3,r16
  188288:	0005883a 	mov	r2,zero
  18828c:	003f3006 	br	187f50 <__alt_data_end+0xfff87f50>
  188290:	00c10034 	movhi	r3,1024
  188294:	0005883a 	mov	r2,zero
  188298:	18fffe04 	addi	r3,r3,-8
  18829c:	04003fc4 	movi	r16,255
  1882a0:	003f2b06 	br	187f50 <__alt_data_end+0xfff87f50>
  1882a4:	01c00804 	movi	r7,32
  1882a8:	394fc83a 	sub	r7,r7,r5
  1882ac:	19ce983a 	sll	r7,r3,r7
  1882b0:	194ad83a 	srl	r5,r3,r5
  1882b4:	3806c03a 	cmpne	r3,r7,zero
  1882b8:	1946b03a 	or	r3,r3,r5
  1882bc:	003fba06 	br	1881a8 <__alt_data_end+0xfff881a8>
  1882c0:	3007883a 	mov	r3,r6
  1882c4:	003ee506 	br	187e5c <__alt_data_end+0xfff87e5c>
  1882c8:	3007883a 	mov	r3,r6
  1882cc:	04003fc4 	movi	r16,255
  1882d0:	003ee206 	br	187e5c <__alt_data_end+0xfff87e5c>
  1882d4:	0007883a 	mov	r3,zero
  1882d8:	0005883a 	mov	r2,zero
  1882dc:	003f1c06 	br	187f50 <__alt_data_end+0xfff87f50>

001882e0 <__divsf3>:
  1882e0:	defff504 	addi	sp,sp,-44
  1882e4:	dd000515 	stw	r20,20(sp)
  1882e8:	2028d5fa 	srli	r20,r4,23
  1882ec:	dd400615 	stw	r21,24(sp)
  1882f0:	202ad7fa 	srli	r21,r4,31
  1882f4:	00c02034 	movhi	r3,128
  1882f8:	dcc00415 	stw	r19,16(sp)
  1882fc:	dc800315 	stw	r18,12(sp)
  188300:	18ffffc4 	addi	r3,r3,-1
  188304:	dfc00a15 	stw	ra,40(sp)
  188308:	df000915 	stw	fp,36(sp)
  18830c:	ddc00815 	stw	r23,32(sp)
  188310:	dd800715 	stw	r22,28(sp)
  188314:	dc400215 	stw	r17,8(sp)
  188318:	dc000115 	stw	r16,4(sp)
  18831c:	a5003fcc 	andi	r20,r20,255
  188320:	1924703a 	and	r18,r3,r4
  188324:	acc03fcc 	andi	r19,r21,255
  188328:	a0004d26 	beq	r20,zero,188460 <__divsf3+0x180>
  18832c:	00803fc4 	movi	r2,255
  188330:	a0802e26 	beq	r20,r2,1883ec <__divsf3+0x10c>
  188334:	91002034 	orhi	r4,r18,128
  188338:	202490fa 	slli	r18,r4,3
  18833c:	a53fe044 	addi	r20,r20,-127
  188340:	0021883a 	mov	r16,zero
  188344:	002f883a 	mov	r23,zero
  188348:	2804d5fa 	srli	r2,r5,23
  18834c:	282cd7fa 	srli	r22,r5,31
  188350:	00c02034 	movhi	r3,128
  188354:	18ffffc4 	addi	r3,r3,-1
  188358:	10803fcc 	andi	r2,r2,255
  18835c:	1962703a 	and	r17,r3,r5
  188360:	b7003fcc 	andi	fp,r22,255
  188364:	10004526 	beq	r2,zero,18847c <__divsf3+0x19c>
  188368:	00c03fc4 	movi	r3,255
  18836c:	10c04026 	beq	r2,r3,188470 <__divsf3+0x190>
  188370:	88c02034 	orhi	r3,r17,128
  188374:	182290fa 	slli	r17,r3,3
  188378:	10bfe044 	addi	r2,r2,-127
  18837c:	0009883a 	mov	r4,zero
  188380:	2420b03a 	or	r16,r4,r16
  188384:	802090ba 	slli	r16,r16,2
  188388:	01c00674 	movhi	r7,25
  18838c:	39e0eb04 	addi	r7,r7,-31828
  188390:	81e1883a 	add	r16,r16,r7
  188394:	80c00017 	ldw	r3,0(r16)
  188398:	ad8af03a 	xor	r5,r21,r22
  18839c:	280d883a 	mov	r6,r5
  1883a0:	a085c83a 	sub	r2,r20,r2
  1883a4:	29403fcc 	andi	r5,r5,255
  1883a8:	1800683a 	jmp	r3
  1883ac:	001885b8 	rdprs	zero,zero,25110
  1883b0:	00188560 	cmpeqi	zero,zero,25109
  1883b4:	00188584 	movi	zero,25110
  1883b8:	0018854c 	andi	zero,zero,25109
  1883bc:	00188584 	movi	zero,25110
  1883c0:	001883fc 	xorhi	zero,zero,25103
  1883c4:	00188584 	movi	zero,25110
  1883c8:	0018854c 	andi	zero,zero,25109
  1883cc:	00188560 	cmpeqi	zero,zero,25109
  1883d0:	00188560 	cmpeqi	zero,zero,25109
  1883d4:	001883fc 	xorhi	zero,zero,25103
  1883d8:	0018854c 	andi	zero,zero,25109
  1883dc:	00188650 	cmplti	zero,zero,25113
  1883e0:	00188650 	cmplti	zero,zero,25113
  1883e4:	00188650 	cmplti	zero,zero,25113
  1883e8:	00188590 	cmplti	zero,zero,25110
  1883ec:	9000531e 	bne	r18,zero,18853c <__divsf3+0x25c>
  1883f0:	04000204 	movi	r16,8
  1883f4:	05c00084 	movi	r23,2
  1883f8:	003fd306 	br	188348 <__alt_data_end+0xfff88348>
  1883fc:	00c02034 	movhi	r3,128
  188400:	000d883a 	mov	r6,zero
  188404:	18ffffc4 	addi	r3,r3,-1
  188408:	013fffc4 	movi	r4,-1
  18840c:	21003fcc 	andi	r4,r4,255
  188410:	200895fa 	slli	r4,r4,23
  188414:	30803fcc 	andi	r2,r6,255
  188418:	01802034 	movhi	r6,128
  18841c:	31bfffc4 	addi	r6,r6,-1
  188420:	100497fa 	slli	r2,r2,31
  188424:	1986703a 	and	r3,r3,r6
  188428:	1906b03a 	or	r3,r3,r4
  18842c:	1884b03a 	or	r2,r3,r2
  188430:	dfc00a17 	ldw	ra,40(sp)
  188434:	df000917 	ldw	fp,36(sp)
  188438:	ddc00817 	ldw	r23,32(sp)
  18843c:	dd800717 	ldw	r22,28(sp)
  188440:	dd400617 	ldw	r21,24(sp)
  188444:	dd000517 	ldw	r20,20(sp)
  188448:	dcc00417 	ldw	r19,16(sp)
  18844c:	dc800317 	ldw	r18,12(sp)
  188450:	dc400217 	ldw	r17,8(sp)
  188454:	dc000117 	ldw	r16,4(sp)
  188458:	dec00b04 	addi	sp,sp,44
  18845c:	f800283a 	ret
  188460:	90002b1e 	bne	r18,zero,188510 <__divsf3+0x230>
  188464:	04000104 	movi	r16,4
  188468:	05c00044 	movi	r23,1
  18846c:	003fb606 	br	188348 <__alt_data_end+0xfff88348>
  188470:	8800251e 	bne	r17,zero,188508 <__divsf3+0x228>
  188474:	01000084 	movi	r4,2
  188478:	00000206 	br	188484 <__divsf3+0x1a4>
  18847c:	88001a1e 	bne	r17,zero,1884e8 <__divsf3+0x208>
  188480:	01000044 	movi	r4,1
  188484:	2420b03a 	or	r16,r4,r16
  188488:	802090ba 	slli	r16,r16,2
  18848c:	00c00674 	movhi	r3,25
  188490:	18e12a04 	addi	r3,r3,-31576
  188494:	80e1883a 	add	r16,r16,r3
  188498:	80c00017 	ldw	r3,0(r16)
  18849c:	ad8af03a 	xor	r5,r21,r22
  1884a0:	a085c83a 	sub	r2,r20,r2
  1884a4:	1800683a 	jmp	r3
  1884a8:	00188560 	cmpeqi	zero,zero,25109
  1884ac:	00188560 	cmpeqi	zero,zero,25109
  1884b0:	001886b0 	cmpltui	zero,zero,25114
  1884b4:	00188548 	cmpgei	zero,zero,25109
  1884b8:	001886b0 	cmpltui	zero,zero,25114
  1884bc:	001883fc 	xorhi	zero,zero,25103
  1884c0:	001886b0 	cmpltui	zero,zero,25114
  1884c4:	00188548 	cmpgei	zero,zero,25109
  1884c8:	00188560 	cmpeqi	zero,zero,25109
  1884cc:	00188560 	cmpeqi	zero,zero,25109
  1884d0:	001883fc 	xorhi	zero,zero,25103
  1884d4:	00188548 	cmpgei	zero,zero,25109
  1884d8:	00188650 	cmplti	zero,zero,25113
  1884dc:	00188650 	cmplti	zero,zero,25113
  1884e0:	00188650 	cmplti	zero,zero,25113
  1884e4:	0018867c 	xorhi	zero,zero,25113
  1884e8:	8809883a 	mov	r4,r17
  1884ec:	0188da00 	call	188da0 <__clzsi2>
  1884f0:	10fffec4 	addi	r3,r2,-5
  1884f4:	88e2983a 	sll	r17,r17,r3
  1884f8:	00ffe284 	movi	r3,-118
  1884fc:	1885c83a 	sub	r2,r3,r2
  188500:	0009883a 	mov	r4,zero
  188504:	003f9e06 	br	188380 <__alt_data_end+0xfff88380>
  188508:	010000c4 	movi	r4,3
  18850c:	003f9c06 	br	188380 <__alt_data_end+0xfff88380>
  188510:	9009883a 	mov	r4,r18
  188514:	d9400015 	stw	r5,0(sp)
  188518:	0188da00 	call	188da0 <__clzsi2>
  18851c:	10fffec4 	addi	r3,r2,-5
  188520:	053fe284 	movi	r20,-118
  188524:	90e4983a 	sll	r18,r18,r3
  188528:	a0a9c83a 	sub	r20,r20,r2
  18852c:	0021883a 	mov	r16,zero
  188530:	002f883a 	mov	r23,zero
  188534:	d9400017 	ldw	r5,0(sp)
  188538:	003f8306 	br	188348 <__alt_data_end+0xfff88348>
  18853c:	04000304 	movi	r16,12
  188540:	05c000c4 	movi	r23,3
  188544:	003f8006 	br	188348 <__alt_data_end+0xfff88348>
  188548:	0023883a 	mov	r17,zero
  18854c:	e027883a 	mov	r19,fp
  188550:	202f883a 	mov	r23,r4
  188554:	00c00084 	movi	r3,2
  188558:	980b883a 	mov	r5,r19
  18855c:	b8c0501e 	bne	r23,r3,1886a0 <__divsf3+0x3c0>
  188560:	2980004c 	andi	r6,r5,1
  188564:	013fffc4 	movi	r4,-1
  188568:	0007883a 	mov	r3,zero
  18856c:	003fa706 	br	18840c <__alt_data_end+0xfff8840c>
  188570:	013fe084 	movi	r4,-126
  188574:	2089c83a 	sub	r4,r4,r2
  188578:	00c006c4 	movi	r3,27
  18857c:	1900500e 	bge	r3,r4,1886c0 <__divsf3+0x3e0>
  188580:	9980004c 	andi	r6,r19,1
  188584:	0009883a 	mov	r4,zero
  188588:	0007883a 	mov	r3,zero
  18858c:	003f9f06 	br	18840c <__alt_data_end+0xfff8840c>
  188590:	9080102c 	andhi	r2,r18,64
  188594:	10000226 	beq	r2,zero,1885a0 <__divsf3+0x2c0>
  188598:	8880102c 	andhi	r2,r17,64
  18859c:	10003a26 	beq	r2,zero,188688 <__divsf3+0x3a8>
  1885a0:	00802034 	movhi	r2,128
  1885a4:	90c01034 	orhi	r3,r18,64
  1885a8:	10bfffc4 	addi	r2,r2,-1
  1885ac:	a80d883a 	mov	r6,r21
  1885b0:	1886703a 	and	r3,r3,r2
  1885b4:	003f9406 	br	188408 <__alt_data_end+0xfff88408>
  1885b8:	9006917a 	slli	r3,r18,5
  1885bc:	8822917a 	slli	r17,r17,5
  1885c0:	1c402936 	bltu	r3,r17,188668 <__divsf3+0x388>
  1885c4:	1c47c83a 	sub	r3,r3,r17
  1885c8:	2827883a 	mov	r19,r5
  1885cc:	01800684 	movi	r6,26
  1885d0:	01000044 	movi	r4,1
  1885d4:	180f883a 	mov	r7,r3
  1885d8:	2109883a 	add	r4,r4,r4
  1885dc:	18c7883a 	add	r3,r3,r3
  1885e0:	38000116 	blt	r7,zero,1885e8 <__divsf3+0x308>
  1885e4:	1c400236 	bltu	r3,r17,1885f0 <__divsf3+0x310>
  1885e8:	1c47c83a 	sub	r3,r3,r17
  1885ec:	21000054 	ori	r4,r4,1
  1885f0:	31bfffc4 	addi	r6,r6,-1
  1885f4:	303ff71e 	bne	r6,zero,1885d4 <__alt_data_end+0xfff885d4>
  1885f8:	1806c03a 	cmpne	r3,r3,zero
  1885fc:	1922b03a 	or	r17,r3,r4
  188600:	11001fc4 	addi	r4,r2,127
  188604:	013fda0e 	bge	zero,r4,188570 <__alt_data_end+0xfff88570>
  188608:	88c001cc 	andi	r3,r17,7
  18860c:	18000426 	beq	r3,zero,188620 <__divsf3+0x340>
  188610:	894003cc 	andi	r5,r17,15
  188614:	00c00104 	movi	r3,4
  188618:	28c00126 	beq	r5,r3,188620 <__divsf3+0x340>
  18861c:	88e3883a 	add	r17,r17,r3
  188620:	88c2002c 	andhi	r3,r17,2048
  188624:	18000426 	beq	r3,zero,188638 <__divsf3+0x358>
  188628:	11002004 	addi	r4,r2,128
  18862c:	00be0034 	movhi	r2,63488
  188630:	10bfffc4 	addi	r2,r2,-1
  188634:	88a2703a 	and	r17,r17,r2
  188638:	00803f84 	movi	r2,254
  18863c:	1100060e 	bge	r2,r4,188658 <__divsf3+0x378>
  188640:	9980004c 	andi	r6,r19,1
  188644:	013fffc4 	movi	r4,-1
  188648:	0007883a 	mov	r3,zero
  18864c:	003f6f06 	br	18840c <__alt_data_end+0xfff8840c>
  188650:	9023883a 	mov	r17,r18
  188654:	003fbf06 	br	188554 <__alt_data_end+0xfff88554>
  188658:	880691ba 	slli	r3,r17,6
  18865c:	9980004c 	andi	r6,r19,1
  188660:	1806d27a 	srli	r3,r3,9
  188664:	003f6906 	br	18840c <__alt_data_end+0xfff8840c>
  188668:	10bfffc4 	addi	r2,r2,-1
  18866c:	2827883a 	mov	r19,r5
  188670:	018006c4 	movi	r6,27
  188674:	0009883a 	mov	r4,zero
  188678:	003fd606 	br	1885d4 <__alt_data_end+0xfff885d4>
  18867c:	9080102c 	andhi	r2,r18,64
  188680:	0023883a 	mov	r17,zero
  188684:	103fc626 	beq	r2,zero,1885a0 <__alt_data_end+0xfff885a0>
  188688:	00802034 	movhi	r2,128
  18868c:	88c01034 	orhi	r3,r17,64
  188690:	10bfffc4 	addi	r2,r2,-1
  188694:	b00d883a 	mov	r6,r22
  188698:	1886703a 	and	r3,r3,r2
  18869c:	003f5a06 	br	188408 <__alt_data_end+0xfff88408>
  1886a0:	00c000c4 	movi	r3,3
  1886a4:	b8c01c26 	beq	r23,r3,188718 <__divsf3+0x438>
  1886a8:	00c00044 	movi	r3,1
  1886ac:	b8ffd41e 	bne	r23,r3,188600 <__alt_data_end+0xfff88600>
  1886b0:	2980004c 	andi	r6,r5,1
  1886b4:	0009883a 	mov	r4,zero
  1886b8:	0007883a 	mov	r3,zero
  1886bc:	003f5306 	br	18840c <__alt_data_end+0xfff8840c>
  1886c0:	10802784 	addi	r2,r2,158
  1886c4:	8884983a 	sll	r2,r17,r2
  1886c8:	8908d83a 	srl	r4,r17,r4
  1886cc:	1022c03a 	cmpne	r17,r2,zero
  1886d0:	8908b03a 	or	r4,r17,r4
  1886d4:	208001cc 	andi	r2,r4,7
  1886d8:	10000426 	beq	r2,zero,1886ec <__divsf3+0x40c>
  1886dc:	20c003cc 	andi	r3,r4,15
  1886e0:	00800104 	movi	r2,4
  1886e4:	18800126 	beq	r3,r2,1886ec <__divsf3+0x40c>
  1886e8:	2089883a 	add	r4,r4,r2
  1886ec:	2081002c 	andhi	r2,r4,1024
  1886f0:	10000426 	beq	r2,zero,188704 <__divsf3+0x424>
  1886f4:	9980004c 	andi	r6,r19,1
  1886f8:	01000044 	movi	r4,1
  1886fc:	0007883a 	mov	r3,zero
  188700:	003f4206 	br	18840c <__alt_data_end+0xfff8840c>
  188704:	200691ba 	slli	r3,r4,6
  188708:	9980004c 	andi	r6,r19,1
  18870c:	0009883a 	mov	r4,zero
  188710:	1806d27a 	srli	r3,r3,9
  188714:	003f3d06 	br	18840c <__alt_data_end+0xfff8840c>
  188718:	00802034 	movhi	r2,128
  18871c:	88c01034 	orhi	r3,r17,64
  188720:	10bfffc4 	addi	r2,r2,-1
  188724:	9980004c 	andi	r6,r19,1
  188728:	1886703a 	and	r3,r3,r2
  18872c:	003f3606 	br	188408 <__alt_data_end+0xfff88408>

00188730 <__mulsf3>:
  188730:	defff504 	addi	sp,sp,-44
  188734:	dc400215 	stw	r17,8(sp)
  188738:	2022d5fa 	srli	r17,r4,23
  18873c:	dd400615 	stw	r21,24(sp)
  188740:	202ad7fa 	srli	r21,r4,31
  188744:	dc000115 	stw	r16,4(sp)
  188748:	04002034 	movhi	r16,128
  18874c:	df000915 	stw	fp,36(sp)
  188750:	dd000515 	stw	r20,20(sp)
  188754:	843fffc4 	addi	r16,r16,-1
  188758:	dfc00a15 	stw	ra,40(sp)
  18875c:	ddc00815 	stw	r23,32(sp)
  188760:	dd800715 	stw	r22,28(sp)
  188764:	dcc00415 	stw	r19,16(sp)
  188768:	dc800315 	stw	r18,12(sp)
  18876c:	8c403fcc 	andi	r17,r17,255
  188770:	8120703a 	and	r16,r16,r4
  188774:	a829883a 	mov	r20,r21
  188778:	af003fcc 	andi	fp,r21,255
  18877c:	88005026 	beq	r17,zero,1888c0 <__mulsf3+0x190>
  188780:	00803fc4 	movi	r2,255
  188784:	88802f26 	beq	r17,r2,188844 <__mulsf3+0x114>
  188788:	84002034 	orhi	r16,r16,128
  18878c:	802090fa 	slli	r16,r16,3
  188790:	8c7fe044 	addi	r17,r17,-127
  188794:	0025883a 	mov	r18,zero
  188798:	002f883a 	mov	r23,zero
  18879c:	2804d5fa 	srli	r2,r5,23
  1887a0:	282cd7fa 	srli	r22,r5,31
  1887a4:	01002034 	movhi	r4,128
  1887a8:	213fffc4 	addi	r4,r4,-1
  1887ac:	10803fcc 	andi	r2,r2,255
  1887b0:	2166703a 	and	r19,r4,r5
  1887b4:	b1803fcc 	andi	r6,r22,255
  1887b8:	10004926 	beq	r2,zero,1888e0 <__mulsf3+0x1b0>
  1887bc:	00c03fc4 	movi	r3,255
  1887c0:	10c04326 	beq	r2,r3,1888d0 <__mulsf3+0x1a0>
  1887c4:	99402034 	orhi	r5,r19,128
  1887c8:	282690fa 	slli	r19,r5,3
  1887cc:	10bfe044 	addi	r2,r2,-127
  1887d0:	000b883a 	mov	r5,zero
  1887d4:	88a3883a 	add	r17,r17,r2
  1887d8:	2c86b03a 	or	r3,r5,r18
  1887dc:	008003c4 	movi	r2,15
  1887e0:	adaaf03a 	xor	r21,r21,r22
  1887e4:	8c800044 	addi	r18,r17,1
  1887e8:	10c06536 	bltu	r2,r3,188980 <__mulsf3+0x250>
  1887ec:	180690ba 	slli	r3,r3,2
  1887f0:	01000674 	movhi	r4,25
  1887f4:	21220104 	addi	r4,r4,-30716
  1887f8:	1907883a 	add	r3,r3,r4
  1887fc:	18800017 	ldw	r2,0(r3)
  188800:	1000683a 	jmp	r2
  188804:	00188980 	call	18898 <__alt_mem_sram-0x167768>
  188808:	00188a78 	rdprs	zero,zero,25129
  18880c:	00188a78 	rdprs	zero,zero,25129
  188810:	00188a88 	cmpgei	zero,zero,25130
  188814:	00188854 	movui	zero,25121
  188818:	00188854 	movui	zero,25121
  18881c:	0018896c 	andhi	zero,zero,25125
  188820:	00188a88 	cmpgei	zero,zero,25130
  188824:	00188854 	movui	zero,25121
  188828:	0018896c 	andhi	zero,zero,25125
  18882c:	00188854 	movui	zero,25121
  188830:	00188a88 	cmpgei	zero,zero,25130
  188834:	00188858 	cmpnei	zero,zero,25121
  188838:	00188858 	cmpnei	zero,zero,25121
  18883c:	00188858 	cmpnei	zero,zero,25121
  188840:	00188a98 	cmpnei	zero,zero,25130
  188844:	8000311e 	bne	r16,zero,18890c <__mulsf3+0x1dc>
  188848:	04800204 	movi	r18,8
  18884c:	05c00084 	movi	r23,2
  188850:	003fd206 	br	18879c <__alt_data_end+0xfff8879c>
  188854:	a839883a 	mov	fp,r21
  188858:	00800084 	movi	r2,2
  18885c:	b880231e 	bne	r23,r2,1888ec <__mulsf3+0x1bc>
  188860:	e500004c 	andi	r20,fp,1
  188864:	00ffffc4 	movi	r3,-1
  188868:	0009883a 	mov	r4,zero
  18886c:	18c03fcc 	andi	r3,r3,255
  188870:	180695fa 	slli	r3,r3,23
  188874:	a0803fcc 	andi	r2,r20,255
  188878:	04002034 	movhi	r16,128
  18887c:	100497fa 	slli	r2,r2,31
  188880:	843fffc4 	addi	r16,r16,-1
  188884:	2420703a 	and	r16,r4,r16
  188888:	80e0b03a 	or	r16,r16,r3
  18888c:	8084b03a 	or	r2,r16,r2
  188890:	dfc00a17 	ldw	ra,40(sp)
  188894:	df000917 	ldw	fp,36(sp)
  188898:	ddc00817 	ldw	r23,32(sp)
  18889c:	dd800717 	ldw	r22,28(sp)
  1888a0:	dd400617 	ldw	r21,24(sp)
  1888a4:	dd000517 	ldw	r20,20(sp)
  1888a8:	dcc00417 	ldw	r19,16(sp)
  1888ac:	dc800317 	ldw	r18,12(sp)
  1888b0:	dc400217 	ldw	r17,8(sp)
  1888b4:	dc000117 	ldw	r16,4(sp)
  1888b8:	dec00b04 	addi	sp,sp,44
  1888bc:	f800283a 	ret
  1888c0:	8000151e 	bne	r16,zero,188918 <__mulsf3+0x1e8>
  1888c4:	04800104 	movi	r18,4
  1888c8:	05c00044 	movi	r23,1
  1888cc:	003fb306 	br	18879c <__alt_data_end+0xfff8879c>
  1888d0:	980b003a 	cmpeq	r5,r19,zero
  1888d4:	00c000c4 	movi	r3,3
  1888d8:	194bc83a 	sub	r5,r3,r5
  1888dc:	003fbd06 	br	1887d4 <__alt_data_end+0xfff887d4>
  1888e0:	9800181e 	bne	r19,zero,188944 <__mulsf3+0x214>
  1888e4:	01400044 	movi	r5,1
  1888e8:	003fba06 	br	1887d4 <__alt_data_end+0xfff887d4>
  1888ec:	008000c4 	movi	r2,3
  1888f0:	b8809d26 	beq	r23,r2,188b68 <__mulsf3+0x438>
  1888f4:	00800044 	movi	r2,1
  1888f8:	b880821e 	bne	r23,r2,188b04 <__mulsf3+0x3d4>
  1888fc:	e0a8703a 	and	r20,fp,r2
  188900:	0007883a 	mov	r3,zero
  188904:	0009883a 	mov	r4,zero
  188908:	003fd806 	br	18886c <__alt_data_end+0xfff8886c>
  18890c:	04800304 	movi	r18,12
  188910:	05c000c4 	movi	r23,3
  188914:	003fa106 	br	18879c <__alt_data_end+0xfff8879c>
  188918:	8009883a 	mov	r4,r16
  18891c:	d9400015 	stw	r5,0(sp)
  188920:	0188da00 	call	188da0 <__clzsi2>
  188924:	10fffec4 	addi	r3,r2,-5
  188928:	047fe284 	movi	r17,-118
  18892c:	80e0983a 	sll	r16,r16,r3
  188930:	88a3c83a 	sub	r17,r17,r2
  188934:	0025883a 	mov	r18,zero
  188938:	002f883a 	mov	r23,zero
  18893c:	d9400017 	ldw	r5,0(sp)
  188940:	003f9606 	br	18879c <__alt_data_end+0xfff8879c>
  188944:	9809883a 	mov	r4,r19
  188948:	d9800015 	stw	r6,0(sp)
  18894c:	0188da00 	call	188da0 <__clzsi2>
  188950:	10fffec4 	addi	r3,r2,-5
  188954:	98e6983a 	sll	r19,r19,r3
  188958:	00ffe284 	movi	r3,-118
  18895c:	1885c83a 	sub	r2,r3,r2
  188960:	000b883a 	mov	r5,zero
  188964:	d9800017 	ldw	r6,0(sp)
  188968:	003f9a06 	br	1887d4 <__alt_data_end+0xfff887d4>
  18896c:	01002034 	movhi	r4,128
  188970:	0029883a 	mov	r20,zero
  188974:	213fffc4 	addi	r4,r4,-1
  188978:	00ffffc4 	movi	r3,-1
  18897c:	003fbb06 	br	18886c <__alt_data_end+0xfff8886c>
  188980:	802ed43a 	srli	r23,r16,16
  188984:	982cd43a 	srli	r22,r19,16
  188988:	843fffcc 	andi	r16,r16,65535
  18898c:	9cffffcc 	andi	r19,r19,65535
  188990:	9809883a 	mov	r4,r19
  188994:	800b883a 	mov	r5,r16
  188998:	0187dd80 	call	187dd8 <__mulsi3>
  18899c:	9809883a 	mov	r4,r19
  1889a0:	b80b883a 	mov	r5,r23
  1889a4:	1029883a 	mov	r20,r2
  1889a8:	0187dd80 	call	187dd8 <__mulsi3>
  1889ac:	b80b883a 	mov	r5,r23
  1889b0:	b009883a 	mov	r4,r22
  1889b4:	1027883a 	mov	r19,r2
  1889b8:	0187dd80 	call	187dd8 <__mulsi3>
  1889bc:	b009883a 	mov	r4,r22
  1889c0:	800b883a 	mov	r5,r16
  1889c4:	102f883a 	mov	r23,r2
  1889c8:	0187dd80 	call	187dd8 <__mulsi3>
  1889cc:	a008d43a 	srli	r4,r20,16
  1889d0:	9885883a 	add	r2,r19,r2
  1889d4:	1107883a 	add	r3,r2,r4
  1889d8:	1cc0022e 	bgeu	r3,r19,1889e4 <__mulsf3+0x2b4>
  1889dc:	00800074 	movhi	r2,1
  1889e0:	b8af883a 	add	r23,r23,r2
  1889e4:	1820943a 	slli	r16,r3,16
  1889e8:	a53fffcc 	andi	r20,r20,65535
  1889ec:	1806d43a 	srli	r3,r3,16
  1889f0:	8529883a 	add	r20,r16,r20
  1889f4:	a02091ba 	slli	r16,r20,6
  1889f8:	b8c7883a 	add	r3,r23,r3
  1889fc:	a028d6ba 	srli	r20,r20,26
  188a00:	180691ba 	slli	r3,r3,6
  188a04:	8020c03a 	cmpne	r16,r16,zero
  188a08:	8520b03a 	or	r16,r16,r20
  188a0c:	80e0b03a 	or	r16,r16,r3
  188a10:	8082002c 	andhi	r2,r16,2048
  188a14:	10000426 	beq	r2,zero,188a28 <__mulsf3+0x2f8>
  188a18:	8004d07a 	srli	r2,r16,1
  188a1c:	8400004c 	andi	r16,r16,1
  188a20:	9023883a 	mov	r17,r18
  188a24:	80a0b03a 	or	r16,r16,r2
  188a28:	88c01fc4 	addi	r3,r17,127
  188a2c:	00c02d0e 	bge	zero,r3,188ae4 <__mulsf3+0x3b4>
  188a30:	808001cc 	andi	r2,r16,7
  188a34:	10000426 	beq	r2,zero,188a48 <__mulsf3+0x318>
  188a38:	810003cc 	andi	r4,r16,15
  188a3c:	00800104 	movi	r2,4
  188a40:	20800126 	beq	r4,r2,188a48 <__mulsf3+0x318>
  188a44:	80a1883a 	add	r16,r16,r2
  188a48:	8082002c 	andhi	r2,r16,2048
  188a4c:	10000426 	beq	r2,zero,188a60 <__mulsf3+0x330>
  188a50:	00be0034 	movhi	r2,63488
  188a54:	10bfffc4 	addi	r2,r2,-1
  188a58:	88c02004 	addi	r3,r17,128
  188a5c:	80a0703a 	and	r16,r16,r2
  188a60:	00803f84 	movi	r2,254
  188a64:	10c01b0e 	bge	r2,r3,188ad4 <__mulsf3+0x3a4>
  188a68:	ad00004c 	andi	r20,r21,1
  188a6c:	00ffffc4 	movi	r3,-1
  188a70:	0009883a 	mov	r4,zero
  188a74:	003f7d06 	br	18886c <__alt_data_end+0xfff8886c>
  188a78:	9821883a 	mov	r16,r19
  188a7c:	a839883a 	mov	fp,r21
  188a80:	282f883a 	mov	r23,r5
  188a84:	003f7406 	br	188858 <__alt_data_end+0xfff88858>
  188a88:	9821883a 	mov	r16,r19
  188a8c:	3039883a 	mov	fp,r6
  188a90:	282f883a 	mov	r23,r5
  188a94:	003f7006 	br	188858 <__alt_data_end+0xfff88858>
  188a98:	8080102c 	andhi	r2,r16,64
  188a9c:	10000826 	beq	r2,zero,188ac0 <__mulsf3+0x390>
  188aa0:	9880102c 	andhi	r2,r19,64
  188aa4:	1000061e 	bne	r2,zero,188ac0 <__mulsf3+0x390>
  188aa8:	00802034 	movhi	r2,128
  188aac:	99001034 	orhi	r4,r19,64
  188ab0:	10bfffc4 	addi	r2,r2,-1
  188ab4:	b029883a 	mov	r20,r22
  188ab8:	2088703a 	and	r4,r4,r2
  188abc:	003fae06 	br	188978 <__alt_data_end+0xfff88978>
  188ac0:	00802034 	movhi	r2,128
  188ac4:	81001034 	orhi	r4,r16,64
  188ac8:	10bfffc4 	addi	r2,r2,-1
  188acc:	2088703a 	and	r4,r4,r2
  188ad0:	003fa906 	br	188978 <__alt_data_end+0xfff88978>
  188ad4:	802091ba 	slli	r16,r16,6
  188ad8:	ad00004c 	andi	r20,r21,1
  188adc:	8008d27a 	srli	r4,r16,9
  188ae0:	003f6206 	br	18886c <__alt_data_end+0xfff8886c>
  188ae4:	00ffe084 	movi	r3,-126
  188ae8:	1c47c83a 	sub	r3,r3,r17
  188aec:	008006c4 	movi	r2,27
  188af0:	10c0070e 	bge	r2,r3,188b10 <__mulsf3+0x3e0>
  188af4:	ad00004c 	andi	r20,r21,1
  188af8:	0007883a 	mov	r3,zero
  188afc:	0009883a 	mov	r4,zero
  188b00:	003f5a06 	br	18886c <__alt_data_end+0xfff8886c>
  188b04:	9023883a 	mov	r17,r18
  188b08:	e02b883a 	mov	r21,fp
  188b0c:	003fc606 	br	188a28 <__alt_data_end+0xfff88a28>
  188b10:	88802784 	addi	r2,r17,158
  188b14:	8084983a 	sll	r2,r16,r2
  188b18:	80e0d83a 	srl	r16,r16,r3
  188b1c:	1004c03a 	cmpne	r2,r2,zero
  188b20:	1404b03a 	or	r2,r2,r16
  188b24:	10c001cc 	andi	r3,r2,7
  188b28:	18000426 	beq	r3,zero,188b3c <__mulsf3+0x40c>
  188b2c:	110003cc 	andi	r4,r2,15
  188b30:	00c00104 	movi	r3,4
  188b34:	20c00126 	beq	r4,r3,188b3c <__mulsf3+0x40c>
  188b38:	10c5883a 	add	r2,r2,r3
  188b3c:	10c1002c 	andhi	r3,r2,1024
  188b40:	18000426 	beq	r3,zero,188b54 <__mulsf3+0x424>
  188b44:	ad00004c 	andi	r20,r21,1
  188b48:	00c00044 	movi	r3,1
  188b4c:	0009883a 	mov	r4,zero
  188b50:	003f4606 	br	18886c <__alt_data_end+0xfff8886c>
  188b54:	100491ba 	slli	r2,r2,6
  188b58:	ad00004c 	andi	r20,r21,1
  188b5c:	0007883a 	mov	r3,zero
  188b60:	1008d27a 	srli	r4,r2,9
  188b64:	003f4106 	br	18886c <__alt_data_end+0xfff8886c>
  188b68:	00802034 	movhi	r2,128
  188b6c:	81001034 	orhi	r4,r16,64
  188b70:	10bfffc4 	addi	r2,r2,-1
  188b74:	e500004c 	andi	r20,fp,1
  188b78:	2088703a 	and	r4,r4,r2
  188b7c:	003f7e06 	br	188978 <__alt_data_end+0xfff88978>

00188b80 <__floatunsisf>:
  188b80:	defffe04 	addi	sp,sp,-8
  188b84:	dc000015 	stw	r16,0(sp)
  188b88:	dfc00115 	stw	ra,4(sp)
  188b8c:	2021883a 	mov	r16,r4
  188b90:	20002626 	beq	r4,zero,188c2c <__floatunsisf+0xac>
  188b94:	0188da00 	call	188da0 <__clzsi2>
  188b98:	00c02784 	movi	r3,158
  188b9c:	1887c83a 	sub	r3,r3,r2
  188ba0:	01002584 	movi	r4,150
  188ba4:	20c00816 	blt	r4,r3,188bc8 <__floatunsisf+0x48>
  188ba8:	01000204 	movi	r4,8
  188bac:	2080340e 	bge	r4,r2,188c80 <__floatunsisf+0x100>
  188bb0:	10bffe04 	addi	r2,r2,-8
  188bb4:	8088983a 	sll	r4,r16,r2
  188bb8:	00802034 	movhi	r2,128
  188bbc:	10bfffc4 	addi	r2,r2,-1
  188bc0:	2088703a 	and	r4,r4,r2
  188bc4:	00001b06 	br	188c34 <__floatunsisf+0xb4>
  188bc8:	01002644 	movi	r4,153
  188bcc:	20c02316 	blt	r4,r3,188c5c <__floatunsisf+0xdc>
  188bd0:	01000144 	movi	r4,5
  188bd4:	2080020e 	bge	r4,r2,188be0 <__floatunsisf+0x60>
  188bd8:	113ffec4 	addi	r4,r2,-5
  188bdc:	8120983a 	sll	r16,r16,r4
  188be0:	017f0034 	movhi	r5,64512
  188be4:	297fffc4 	addi	r5,r5,-1
  188be8:	810001cc 	andi	r4,r16,7
  188bec:	814a703a 	and	r5,r16,r5
  188bf0:	20000426 	beq	r4,zero,188c04 <__floatunsisf+0x84>
  188bf4:	840003cc 	andi	r16,r16,15
  188bf8:	01000104 	movi	r4,4
  188bfc:	81000126 	beq	r16,r4,188c04 <__floatunsisf+0x84>
  188c00:	290b883a 	add	r5,r5,r4
  188c04:	2901002c 	andhi	r4,r5,1024
  188c08:	20000526 	beq	r4,zero,188c20 <__floatunsisf+0xa0>
  188c0c:	00c027c4 	movi	r3,159
  188c10:	1887c83a 	sub	r3,r3,r2
  188c14:	00bf0034 	movhi	r2,64512
  188c18:	10bfffc4 	addi	r2,r2,-1
  188c1c:	288a703a 	and	r5,r5,r2
  188c20:	280891ba 	slli	r4,r5,6
  188c24:	2008d27a 	srli	r4,r4,9
  188c28:	00000206 	br	188c34 <__floatunsisf+0xb4>
  188c2c:	0007883a 	mov	r3,zero
  188c30:	0009883a 	mov	r4,zero
  188c34:	18c03fcc 	andi	r3,r3,255
  188c38:	180695fa 	slli	r3,r3,23
  188c3c:	00802034 	movhi	r2,128
  188c40:	10bfffc4 	addi	r2,r2,-1
  188c44:	2084703a 	and	r2,r4,r2
  188c48:	10c4b03a 	or	r2,r2,r3
  188c4c:	dfc00117 	ldw	ra,4(sp)
  188c50:	dc000017 	ldw	r16,0(sp)
  188c54:	dec00204 	addi	sp,sp,8
  188c58:	f800283a 	ret
  188c5c:	01400144 	movi	r5,5
  188c60:	110006c4 	addi	r4,r2,27
  188c64:	8108983a 	sll	r4,r16,r4
  188c68:	288dc83a 	sub	r6,r5,r2
  188c6c:	81a0d83a 	srl	r16,r16,r6
  188c70:	2008c03a 	cmpne	r4,r4,zero
  188c74:	2420b03a 	or	r16,r4,r16
  188c78:	28bfd90e 	bge	r5,r2,188be0 <__alt_data_end+0xfff88be0>
  188c7c:	003fd606 	br	188bd8 <__alt_data_end+0xfff88bd8>
  188c80:	01402034 	movhi	r5,128
  188c84:	297fffc4 	addi	r5,r5,-1
  188c88:	8148703a 	and	r4,r16,r5
  188c8c:	003fe906 	br	188c34 <__alt_data_end+0xfff88c34>

00188c90 <__extendsfdf2>:
  188c90:	200ad5fa 	srli	r5,r4,23
  188c94:	defffd04 	addi	sp,sp,-12
  188c98:	dc400115 	stw	r17,4(sp)
  188c9c:	29403fcc 	andi	r5,r5,255
  188ca0:	29800044 	addi	r6,r5,1
  188ca4:	04402034 	movhi	r17,128
  188ca8:	dc000015 	stw	r16,0(sp)
  188cac:	8c7fffc4 	addi	r17,r17,-1
  188cb0:	dfc00215 	stw	ra,8(sp)
  188cb4:	31803fcc 	andi	r6,r6,255
  188cb8:	00800044 	movi	r2,1
  188cbc:	8922703a 	and	r17,r17,r4
  188cc0:	2020d7fa 	srli	r16,r4,31
  188cc4:	1180110e 	bge	r2,r6,188d0c <__extendsfdf2+0x7c>
  188cc8:	880ed0fa 	srli	r7,r17,3
  188ccc:	8822977a 	slli	r17,r17,29
  188cd0:	2940e004 	addi	r5,r5,896
  188cd4:	2941ffcc 	andi	r5,r5,2047
  188cd8:	280c953a 	slli	r6,r5,20
  188cdc:	01400434 	movhi	r5,16
  188ce0:	800697fa 	slli	r3,r16,31
  188ce4:	297fffc4 	addi	r5,r5,-1
  188ce8:	394a703a 	and	r5,r7,r5
  188cec:	298ab03a 	or	r5,r5,r6
  188cf0:	8805883a 	mov	r2,r17
  188cf4:	28c6b03a 	or	r3,r5,r3
  188cf8:	dfc00217 	ldw	ra,8(sp)
  188cfc:	dc400117 	ldw	r17,4(sp)
  188d00:	dc000017 	ldw	r16,0(sp)
  188d04:	dec00304 	addi	sp,sp,12
  188d08:	f800283a 	ret
  188d0c:	2800111e 	bne	r5,zero,188d54 <__extendsfdf2+0xc4>
  188d10:	88001c26 	beq	r17,zero,188d84 <__extendsfdf2+0xf4>
  188d14:	8809883a 	mov	r4,r17
  188d18:	0188da00 	call	188da0 <__clzsi2>
  188d1c:	00c00284 	movi	r3,10
  188d20:	18801b16 	blt	r3,r2,188d90 <__extendsfdf2+0x100>
  188d24:	01c002c4 	movi	r7,11
  188d28:	388fc83a 	sub	r7,r7,r2
  188d2c:	10c00544 	addi	r3,r2,21
  188d30:	89ced83a 	srl	r7,r17,r7
  188d34:	88e2983a 	sll	r17,r17,r3
  188d38:	0180e244 	movi	r6,905
  188d3c:	308bc83a 	sub	r5,r6,r2
  188d40:	01800434 	movhi	r6,16
  188d44:	31bfffc4 	addi	r6,r6,-1
  188d48:	398e703a 	and	r7,r7,r6
  188d4c:	2941ffcc 	andi	r5,r5,2047
  188d50:	003fe006 	br	188cd4 <__alt_data_end+0xfff88cd4>
  188d54:	88000826 	beq	r17,zero,188d78 <__extendsfdf2+0xe8>
  188d58:	880ed0fa 	srli	r7,r17,3
  188d5c:	00800434 	movhi	r2,16
  188d60:	10bfffc4 	addi	r2,r2,-1
  188d64:	39c00234 	orhi	r7,r7,8
  188d68:	8822977a 	slli	r17,r17,29
  188d6c:	388e703a 	and	r7,r7,r2
  188d70:	0141ffc4 	movi	r5,2047
  188d74:	003fd706 	br	188cd4 <__alt_data_end+0xfff88cd4>
  188d78:	0141ffc4 	movi	r5,2047
  188d7c:	000f883a 	mov	r7,zero
  188d80:	003fd406 	br	188cd4 <__alt_data_end+0xfff88cd4>
  188d84:	000b883a 	mov	r5,zero
  188d88:	000f883a 	mov	r7,zero
  188d8c:	003fd106 	br	188cd4 <__alt_data_end+0xfff88cd4>
  188d90:	11fffd44 	addi	r7,r2,-11
  188d94:	89ce983a 	sll	r7,r17,r7
  188d98:	0023883a 	mov	r17,zero
  188d9c:	003fe606 	br	188d38 <__alt_data_end+0xfff88d38>

00188da0 <__clzsi2>:
  188da0:	00bfffd4 	movui	r2,65535
  188da4:	11000b36 	bltu	r2,r4,188dd4 <__clzsi2+0x34>
  188da8:	00803fc4 	movi	r2,255
  188dac:	1100122e 	bgeu	r2,r4,188df8 <__clzsi2+0x58>
  188db0:	00c00204 	movi	r3,8
  188db4:	01400604 	movi	r5,24
  188db8:	20c8d83a 	srl	r4,r4,r3
  188dbc:	008006b4 	movhi	r2,26
  188dc0:	10bcc104 	addi	r2,r2,-3324
  188dc4:	1109883a 	add	r4,r2,r4
  188dc8:	20800003 	ldbu	r2,0(r4)
  188dcc:	2885c83a 	sub	r2,r5,r2
  188dd0:	f800283a 	ret
  188dd4:	00804034 	movhi	r2,256
  188dd8:	10bfffc4 	addi	r2,r2,-1
  188ddc:	11000336 	bltu	r2,r4,188dec <__clzsi2+0x4c>
  188de0:	00c00404 	movi	r3,16
  188de4:	180b883a 	mov	r5,r3
  188de8:	003ff306 	br	188db8 <__alt_data_end+0xfff88db8>
  188dec:	00c00604 	movi	r3,24
  188df0:	01400204 	movi	r5,8
  188df4:	003ff006 	br	188db8 <__alt_data_end+0xfff88db8>
  188df8:	0007883a 	mov	r3,zero
  188dfc:	01400804 	movi	r5,32
  188e00:	003fed06 	br	188db8 <__alt_data_end+0xfff88db8>

00188e04 <memcmp>:
  188e04:	01c000c4 	movi	r7,3
  188e08:	3980192e 	bgeu	r7,r6,188e70 <memcmp+0x6c>
  188e0c:	2144b03a 	or	r2,r4,r5
  188e10:	11c4703a 	and	r2,r2,r7
  188e14:	10000f26 	beq	r2,zero,188e54 <memcmp+0x50>
  188e18:	20800003 	ldbu	r2,0(r4)
  188e1c:	28c00003 	ldbu	r3,0(r5)
  188e20:	10c0151e 	bne	r2,r3,188e78 <memcmp+0x74>
  188e24:	31bfff84 	addi	r6,r6,-2
  188e28:	01ffffc4 	movi	r7,-1
  188e2c:	00000406 	br	188e40 <memcmp+0x3c>
  188e30:	20800003 	ldbu	r2,0(r4)
  188e34:	28c00003 	ldbu	r3,0(r5)
  188e38:	31bfffc4 	addi	r6,r6,-1
  188e3c:	10c00e1e 	bne	r2,r3,188e78 <memcmp+0x74>
  188e40:	21000044 	addi	r4,r4,1
  188e44:	29400044 	addi	r5,r5,1
  188e48:	31fff91e 	bne	r6,r7,188e30 <__alt_data_end+0xfff88e30>
  188e4c:	0005883a 	mov	r2,zero
  188e50:	f800283a 	ret
  188e54:	20c00017 	ldw	r3,0(r4)
  188e58:	28800017 	ldw	r2,0(r5)
  188e5c:	1880041e 	bne	r3,r2,188e70 <memcmp+0x6c>
  188e60:	31bfff04 	addi	r6,r6,-4
  188e64:	21000104 	addi	r4,r4,4
  188e68:	29400104 	addi	r5,r5,4
  188e6c:	39bff936 	bltu	r7,r6,188e54 <__alt_data_end+0xfff88e54>
  188e70:	303fe91e 	bne	r6,zero,188e18 <__alt_data_end+0xfff88e18>
  188e74:	003ff506 	br	188e4c <__alt_data_end+0xfff88e4c>
  188e78:	10c5c83a 	sub	r2,r2,r3
  188e7c:	f800283a 	ret

00188e80 <memcpy>:
  188e80:	deffff04 	addi	sp,sp,-4
  188e84:	dc000015 	stw	r16,0(sp)
  188e88:	00c003c4 	movi	r3,15
  188e8c:	2005883a 	mov	r2,r4
  188e90:	1980432e 	bgeu	r3,r6,188fa0 <memcpy+0x120>
  188e94:	2146b03a 	or	r3,r4,r5
  188e98:	18c000cc 	andi	r3,r3,3
  188e9c:	1800421e 	bne	r3,zero,188fa8 <memcpy+0x128>
  188ea0:	343ffc04 	addi	r16,r6,-16
  188ea4:	8020d13a 	srli	r16,r16,4
  188ea8:	28c00104 	addi	r3,r5,4
  188eac:	23400104 	addi	r13,r4,4
  188eb0:	801e913a 	slli	r15,r16,4
  188eb4:	2b000204 	addi	r12,r5,8
  188eb8:	22c00204 	addi	r11,r4,8
  188ebc:	7bc00504 	addi	r15,r15,20
  188ec0:	2a800304 	addi	r10,r5,12
  188ec4:	22400304 	addi	r9,r4,12
  188ec8:	2bdf883a 	add	r15,r5,r15
  188ecc:	2811883a 	mov	r8,r5
  188ed0:	200f883a 	mov	r7,r4
  188ed4:	41000017 	ldw	r4,0(r8)
  188ed8:	39c00404 	addi	r7,r7,16
  188edc:	18c00404 	addi	r3,r3,16
  188ee0:	393ffc15 	stw	r4,-16(r7)
  188ee4:	1bbffc17 	ldw	r14,-16(r3)
  188ee8:	6b400404 	addi	r13,r13,16
  188eec:	5ac00404 	addi	r11,r11,16
  188ef0:	6bbffc15 	stw	r14,-16(r13)
  188ef4:	63800017 	ldw	r14,0(r12)
  188ef8:	4a400404 	addi	r9,r9,16
  188efc:	42000404 	addi	r8,r8,16
  188f00:	5bbffc15 	stw	r14,-16(r11)
  188f04:	53800017 	ldw	r14,0(r10)
  188f08:	63000404 	addi	r12,r12,16
  188f0c:	52800404 	addi	r10,r10,16
  188f10:	4bbffc15 	stw	r14,-16(r9)
  188f14:	1bffef1e 	bne	r3,r15,188ed4 <__alt_data_end+0xfff88ed4>
  188f18:	81c00044 	addi	r7,r16,1
  188f1c:	380e913a 	slli	r7,r7,4
  188f20:	310003cc 	andi	r4,r6,15
  188f24:	02c000c4 	movi	r11,3
  188f28:	11c7883a 	add	r3,r2,r7
  188f2c:	29cb883a 	add	r5,r5,r7
  188f30:	59001f2e 	bgeu	r11,r4,188fb0 <memcpy+0x130>
  188f34:	1813883a 	mov	r9,r3
  188f38:	2811883a 	mov	r8,r5
  188f3c:	200f883a 	mov	r7,r4
  188f40:	42800017 	ldw	r10,0(r8)
  188f44:	4a400104 	addi	r9,r9,4
  188f48:	39ffff04 	addi	r7,r7,-4
  188f4c:	4abfff15 	stw	r10,-4(r9)
  188f50:	42000104 	addi	r8,r8,4
  188f54:	59fffa36 	bltu	r11,r7,188f40 <__alt_data_end+0xfff88f40>
  188f58:	213fff04 	addi	r4,r4,-4
  188f5c:	2008d0ba 	srli	r4,r4,2
  188f60:	318000cc 	andi	r6,r6,3
  188f64:	21000044 	addi	r4,r4,1
  188f68:	2109883a 	add	r4,r4,r4
  188f6c:	2109883a 	add	r4,r4,r4
  188f70:	1907883a 	add	r3,r3,r4
  188f74:	290b883a 	add	r5,r5,r4
  188f78:	30000626 	beq	r6,zero,188f94 <memcpy+0x114>
  188f7c:	198d883a 	add	r6,r3,r6
  188f80:	29c00003 	ldbu	r7,0(r5)
  188f84:	18c00044 	addi	r3,r3,1
  188f88:	29400044 	addi	r5,r5,1
  188f8c:	19ffffc5 	stb	r7,-1(r3)
  188f90:	19bffb1e 	bne	r3,r6,188f80 <__alt_data_end+0xfff88f80>
  188f94:	dc000017 	ldw	r16,0(sp)
  188f98:	dec00104 	addi	sp,sp,4
  188f9c:	f800283a 	ret
  188fa0:	2007883a 	mov	r3,r4
  188fa4:	003ff406 	br	188f78 <__alt_data_end+0xfff88f78>
  188fa8:	2007883a 	mov	r3,r4
  188fac:	003ff306 	br	188f7c <__alt_data_end+0xfff88f7c>
  188fb0:	200d883a 	mov	r6,r4
  188fb4:	003ff006 	br	188f78 <__alt_data_end+0xfff88f78>

00188fb8 <memset>:
  188fb8:	20c000cc 	andi	r3,r4,3
  188fbc:	2005883a 	mov	r2,r4
  188fc0:	18004326 	beq	r3,zero,1890d0 <memset+0x118>
  188fc4:	31ffffc4 	addi	r7,r6,-1
  188fc8:	30004026 	beq	r6,zero,1890cc <memset+0x114>
  188fcc:	2813883a 	mov	r9,r5
  188fd0:	200d883a 	mov	r6,r4
  188fd4:	2007883a 	mov	r3,r4
  188fd8:	00000406 	br	188fec <memset+0x34>
  188fdc:	3a3fffc4 	addi	r8,r7,-1
  188fe0:	31800044 	addi	r6,r6,1
  188fe4:	38003926 	beq	r7,zero,1890cc <memset+0x114>
  188fe8:	400f883a 	mov	r7,r8
  188fec:	18c00044 	addi	r3,r3,1
  188ff0:	32400005 	stb	r9,0(r6)
  188ff4:	1a0000cc 	andi	r8,r3,3
  188ff8:	403ff81e 	bne	r8,zero,188fdc <__alt_data_end+0xfff88fdc>
  188ffc:	010000c4 	movi	r4,3
  189000:	21c02d2e 	bgeu	r4,r7,1890b8 <memset+0x100>
  189004:	29803fcc 	andi	r6,r5,255
  189008:	3008923a 	slli	r4,r6,8
  18900c:	218cb03a 	or	r6,r4,r6
  189010:	3008943a 	slli	r4,r6,16
  189014:	218cb03a 	or	r6,r4,r6
  189018:	010003c4 	movi	r4,15
  18901c:	21c0182e 	bgeu	r4,r7,189080 <memset+0xc8>
  189020:	3b3ffc04 	addi	r12,r7,-16
  189024:	6018d13a 	srli	r12,r12,4
  189028:	1a000104 	addi	r8,r3,4
  18902c:	1ac00204 	addi	r11,r3,8
  189030:	6008913a 	slli	r4,r12,4
  189034:	1a800304 	addi	r10,r3,12
  189038:	1813883a 	mov	r9,r3
  18903c:	21000504 	addi	r4,r4,20
  189040:	1909883a 	add	r4,r3,r4
  189044:	49800015 	stw	r6,0(r9)
  189048:	41800015 	stw	r6,0(r8)
  18904c:	59800015 	stw	r6,0(r11)
  189050:	51800015 	stw	r6,0(r10)
  189054:	42000404 	addi	r8,r8,16
  189058:	4a400404 	addi	r9,r9,16
  18905c:	5ac00404 	addi	r11,r11,16
  189060:	52800404 	addi	r10,r10,16
  189064:	413ff71e 	bne	r8,r4,189044 <__alt_data_end+0xfff89044>
  189068:	63000044 	addi	r12,r12,1
  18906c:	6018913a 	slli	r12,r12,4
  189070:	39c003cc 	andi	r7,r7,15
  189074:	010000c4 	movi	r4,3
  189078:	1b07883a 	add	r3,r3,r12
  18907c:	21c00e2e 	bgeu	r4,r7,1890b8 <memset+0x100>
  189080:	1813883a 	mov	r9,r3
  189084:	3811883a 	mov	r8,r7
  189088:	010000c4 	movi	r4,3
  18908c:	49800015 	stw	r6,0(r9)
  189090:	423fff04 	addi	r8,r8,-4
  189094:	4a400104 	addi	r9,r9,4
  189098:	223ffc36 	bltu	r4,r8,18908c <__alt_data_end+0xfff8908c>
  18909c:	393fff04 	addi	r4,r7,-4
  1890a0:	2008d0ba 	srli	r4,r4,2
  1890a4:	39c000cc 	andi	r7,r7,3
  1890a8:	21000044 	addi	r4,r4,1
  1890ac:	2109883a 	add	r4,r4,r4
  1890b0:	2109883a 	add	r4,r4,r4
  1890b4:	1907883a 	add	r3,r3,r4
  1890b8:	38000426 	beq	r7,zero,1890cc <memset+0x114>
  1890bc:	19cf883a 	add	r7,r3,r7
  1890c0:	19400005 	stb	r5,0(r3)
  1890c4:	18c00044 	addi	r3,r3,1
  1890c8:	19fffd1e 	bne	r3,r7,1890c0 <__alt_data_end+0xfff890c0>
  1890cc:	f800283a 	ret
  1890d0:	2007883a 	mov	r3,r4
  1890d4:	300f883a 	mov	r7,r6
  1890d8:	003fc806 	br	188ffc <__alt_data_end+0xfff88ffc>

001890dc <_printf_r>:
  1890dc:	defffd04 	addi	sp,sp,-12
  1890e0:	dfc00015 	stw	ra,0(sp)
  1890e4:	d9800115 	stw	r6,4(sp)
  1890e8:	d9c00215 	stw	r7,8(sp)
  1890ec:	280d883a 	mov	r6,r5
  1890f0:	21400217 	ldw	r5,8(r4)
  1890f4:	d9c00104 	addi	r7,sp,4
  1890f8:	01892b80 	call	1892b8 <___vfprintf_internal_r>
  1890fc:	dfc00017 	ldw	ra,0(sp)
  189100:	dec00304 	addi	sp,sp,12
  189104:	f800283a 	ret

00189108 <printf>:
  189108:	defffc04 	addi	sp,sp,-16
  18910c:	dfc00015 	stw	ra,0(sp)
  189110:	d9400115 	stw	r5,4(sp)
  189114:	d9800215 	stw	r6,8(sp)
  189118:	d9c00315 	stw	r7,12(sp)
  18911c:	008006b4 	movhi	r2,26
  189120:	10846704 	addi	r2,r2,4508
  189124:	10800017 	ldw	r2,0(r2)
  189128:	200b883a 	mov	r5,r4
  18912c:	d9800104 	addi	r6,sp,4
  189130:	11000217 	ldw	r4,8(r2)
  189134:	018b3100 	call	18b310 <__vfprintf_internal>
  189138:	dfc00017 	ldw	ra,0(sp)
  18913c:	dec00404 	addi	sp,sp,16
  189140:	f800283a 	ret

00189144 <_putchar_r>:
  189144:	21800217 	ldw	r6,8(r4)
  189148:	018fc201 	jmpi	18fc20 <_putc_r>

0018914c <putchar>:
  18914c:	008006b4 	movhi	r2,26
  189150:	10846704 	addi	r2,r2,4508
  189154:	200b883a 	mov	r5,r4
  189158:	11000017 	ldw	r4,0(r2)
  18915c:	21800217 	ldw	r6,8(r4)
  189160:	018fc201 	jmpi	18fc20 <_putc_r>

00189164 <_puts_r>:
  189164:	defff604 	addi	sp,sp,-40
  189168:	dc000715 	stw	r16,28(sp)
  18916c:	2021883a 	mov	r16,r4
  189170:	2809883a 	mov	r4,r5
  189174:	dc400815 	stw	r17,32(sp)
  189178:	dfc00915 	stw	ra,36(sp)
  18917c:	2823883a 	mov	r17,r5
  189180:	01892200 	call	189220 <strlen>
  189184:	81400217 	ldw	r5,8(r16)
  189188:	11000044 	addi	r4,r2,1
  18918c:	d8800115 	stw	r2,4(sp)
  189190:	008006b4 	movhi	r2,26
  189194:	2980030b 	ldhu	r6,12(r5)
  189198:	10bc5804 	addi	r2,r2,-3744
  18919c:	d8800215 	stw	r2,8(sp)
  1891a0:	00800044 	movi	r2,1
  1891a4:	d8800315 	stw	r2,12(sp)
  1891a8:	00800084 	movi	r2,2
  1891ac:	d8800515 	stw	r2,20(sp)
  1891b0:	dc400015 	stw	r17,0(sp)
  1891b4:	d9000615 	stw	r4,24(sp)
  1891b8:	dec00415 	stw	sp,16(sp)
  1891bc:	3088000c 	andi	r2,r6,8192
  1891c0:	1000061e 	bne	r2,zero,1891dc <_puts_r+0x78>
  1891c4:	29001917 	ldw	r4,100(r5)
  1891c8:	00b7ffc4 	movi	r2,-8193
  1891cc:	31880014 	ori	r6,r6,8192
  1891d0:	2084703a 	and	r2,r4,r2
  1891d4:	2980030d 	sth	r6,12(r5)
  1891d8:	28801915 	stw	r2,100(r5)
  1891dc:	8009883a 	mov	r4,r16
  1891e0:	d9800404 	addi	r6,sp,16
  1891e4:	018d8ec0 	call	18d8ec <__sfvwrite_r>
  1891e8:	1000061e 	bne	r2,zero,189204 <_puts_r+0xa0>
  1891ec:	00800284 	movi	r2,10
  1891f0:	dfc00917 	ldw	ra,36(sp)
  1891f4:	dc400817 	ldw	r17,32(sp)
  1891f8:	dc000717 	ldw	r16,28(sp)
  1891fc:	dec00a04 	addi	sp,sp,40
  189200:	f800283a 	ret
  189204:	00bfffc4 	movi	r2,-1
  189208:	003ff906 	br	1891f0 <__alt_data_end+0xfff891f0>

0018920c <puts>:
  18920c:	008006b4 	movhi	r2,26
  189210:	10846704 	addi	r2,r2,4508
  189214:	200b883a 	mov	r5,r4
  189218:	11000017 	ldw	r4,0(r2)
  18921c:	01891641 	jmpi	189164 <_puts_r>

00189220 <strlen>:
  189220:	208000cc 	andi	r2,r4,3
  189224:	10002026 	beq	r2,zero,1892a8 <strlen+0x88>
  189228:	20800007 	ldb	r2,0(r4)
  18922c:	10002026 	beq	r2,zero,1892b0 <strlen+0x90>
  189230:	2005883a 	mov	r2,r4
  189234:	00000206 	br	189240 <strlen+0x20>
  189238:	10c00007 	ldb	r3,0(r2)
  18923c:	18001826 	beq	r3,zero,1892a0 <strlen+0x80>
  189240:	10800044 	addi	r2,r2,1
  189244:	10c000cc 	andi	r3,r2,3
  189248:	183ffb1e 	bne	r3,zero,189238 <__alt_data_end+0xfff89238>
  18924c:	10c00017 	ldw	r3,0(r2)
  189250:	01ffbff4 	movhi	r7,65279
  189254:	39ffbfc4 	addi	r7,r7,-257
  189258:	00ca303a 	nor	r5,zero,r3
  18925c:	01a02074 	movhi	r6,32897
  189260:	19c7883a 	add	r3,r3,r7
  189264:	31a02004 	addi	r6,r6,-32640
  189268:	1946703a 	and	r3,r3,r5
  18926c:	1986703a 	and	r3,r3,r6
  189270:	1800091e 	bne	r3,zero,189298 <strlen+0x78>
  189274:	10800104 	addi	r2,r2,4
  189278:	10c00017 	ldw	r3,0(r2)
  18927c:	19cb883a 	add	r5,r3,r7
  189280:	00c6303a 	nor	r3,zero,r3
  189284:	28c6703a 	and	r3,r5,r3
  189288:	1986703a 	and	r3,r3,r6
  18928c:	183ff926 	beq	r3,zero,189274 <__alt_data_end+0xfff89274>
  189290:	00000106 	br	189298 <strlen+0x78>
  189294:	10800044 	addi	r2,r2,1
  189298:	10c00007 	ldb	r3,0(r2)
  18929c:	183ffd1e 	bne	r3,zero,189294 <__alt_data_end+0xfff89294>
  1892a0:	1105c83a 	sub	r2,r2,r4
  1892a4:	f800283a 	ret
  1892a8:	2005883a 	mov	r2,r4
  1892ac:	003fe706 	br	18924c <__alt_data_end+0xfff8924c>
  1892b0:	0005883a 	mov	r2,zero
  1892b4:	f800283a 	ret

001892b8 <___vfprintf_internal_r>:
  1892b8:	deffb604 	addi	sp,sp,-296
  1892bc:	dfc04915 	stw	ra,292(sp)
  1892c0:	ddc04715 	stw	r23,284(sp)
  1892c4:	dd804615 	stw	r22,280(sp)
  1892c8:	202f883a 	mov	r23,r4
  1892cc:	282d883a 	mov	r22,r5
  1892d0:	d9802a15 	stw	r6,168(sp)
  1892d4:	d9c02d15 	stw	r7,180(sp)
  1892d8:	df004815 	stw	fp,288(sp)
  1892dc:	dd404515 	stw	r21,276(sp)
  1892e0:	dd004415 	stw	r20,272(sp)
  1892e4:	dcc04315 	stw	r19,268(sp)
  1892e8:	dc804215 	stw	r18,264(sp)
  1892ec:	dc404115 	stw	r17,260(sp)
  1892f0:	dc004015 	stw	r16,256(sp)
  1892f4:	018dfec0 	call	18dfec <_localeconv_r>
  1892f8:	10800017 	ldw	r2,0(r2)
  1892fc:	1009883a 	mov	r4,r2
  189300:	d8803515 	stw	r2,212(sp)
  189304:	01892200 	call	189220 <strlen>
  189308:	d8803815 	stw	r2,224(sp)
  18930c:	b8000226 	beq	r23,zero,189318 <___vfprintf_internal_r+0x60>
  189310:	b8800e17 	ldw	r2,56(r23)
  189314:	1000e226 	beq	r2,zero,1896a0 <___vfprintf_internal_r+0x3e8>
  189318:	b080030b 	ldhu	r2,12(r22)
  18931c:	10c8000c 	andi	r3,r2,8192
  189320:	1800061e 	bne	r3,zero,18933c <___vfprintf_internal_r+0x84>
  189324:	b1001917 	ldw	r4,100(r22)
  189328:	00f7ffc4 	movi	r3,-8193
  18932c:	10880014 	ori	r2,r2,8192
  189330:	20c6703a 	and	r3,r4,r3
  189334:	b080030d 	sth	r2,12(r22)
  189338:	b0c01915 	stw	r3,100(r22)
  18933c:	10c0020c 	andi	r3,r2,8
  189340:	1800a826 	beq	r3,zero,1895e4 <___vfprintf_internal_r+0x32c>
  189344:	b0c00417 	ldw	r3,16(r22)
  189348:	1800a626 	beq	r3,zero,1895e4 <___vfprintf_internal_r+0x32c>
  18934c:	1080068c 	andi	r2,r2,26
  189350:	00c00284 	movi	r3,10
  189354:	10c0ab26 	beq	r2,r3,189604 <___vfprintf_internal_r+0x34c>
  189358:	d8801e04 	addi	r2,sp,120
  18935c:	d8c01dc4 	addi	r3,sp,119
  189360:	d9000404 	addi	r4,sp,16
  189364:	050006b4 	movhi	r20,26
  189368:	10cbc83a 	sub	r5,r2,r3
  18936c:	a53d10c4 	addi	r20,r20,-3005
  189370:	d8802815 	stw	r2,160(sp)
  189374:	d8c02915 	stw	r3,164(sp)
  189378:	d9001e15 	stw	r4,120(sp)
  18937c:	d8002015 	stw	zero,128(sp)
  189380:	d8001f15 	stw	zero,124(sp)
  189384:	d8003315 	stw	zero,204(sp)
  189388:	d8003715 	stw	zero,220(sp)
  18938c:	d8003915 	stw	zero,228(sp)
  189390:	2011883a 	mov	r8,r4
  189394:	d8003b15 	stw	zero,236(sp)
  189398:	d8003a15 	stw	zero,232(sp)
  18939c:	d8002f15 	stw	zero,188(sp)
  1893a0:	d9403c15 	stw	r5,240(sp)
  1893a4:	d8c02a17 	ldw	r3,168(sp)
  1893a8:	18800007 	ldb	r2,0(r3)
  1893ac:	1001f226 	beq	r2,zero,189b78 <___vfprintf_internal_r+0x8c0>
  1893b0:	00c00944 	movi	r3,37
  1893b4:	dc002a17 	ldw	r16,168(sp)
  1893b8:	10c0021e 	bne	r2,r3,1893c4 <___vfprintf_internal_r+0x10c>
  1893bc:	00001606 	br	189418 <___vfprintf_internal_r+0x160>
  1893c0:	10c08526 	beq	r2,r3,1895d8 <___vfprintf_internal_r+0x320>
  1893c4:	84000044 	addi	r16,r16,1
  1893c8:	80800007 	ldb	r2,0(r16)
  1893cc:	103ffc1e 	bne	r2,zero,1893c0 <__alt_data_end+0xfff893c0>
  1893d0:	d9002a17 	ldw	r4,168(sp)
  1893d4:	8123c83a 	sub	r17,r16,r4
  1893d8:	88000f26 	beq	r17,zero,189418 <___vfprintf_internal_r+0x160>
  1893dc:	d8802a17 	ldw	r2,168(sp)
  1893e0:	d8c02017 	ldw	r3,128(sp)
  1893e4:	44400115 	stw	r17,4(r8)
  1893e8:	40800015 	stw	r2,0(r8)
  1893ec:	d8801f17 	ldw	r2,124(sp)
  1893f0:	1c47883a 	add	r3,r3,r17
  1893f4:	d8c02015 	stw	r3,128(sp)
  1893f8:	10800044 	addi	r2,r2,1
  1893fc:	d8801f15 	stw	r2,124(sp)
  189400:	00c001c4 	movi	r3,7
  189404:	18809416 	blt	r3,r2,189658 <___vfprintf_internal_r+0x3a0>
  189408:	42000204 	addi	r8,r8,8
  18940c:	d8c02f17 	ldw	r3,188(sp)
  189410:	1c47883a 	add	r3,r3,r17
  189414:	d8c02f15 	stw	r3,188(sp)
  189418:	80800007 	ldb	r2,0(r16)
  18941c:	10009526 	beq	r2,zero,189674 <___vfprintf_internal_r+0x3bc>
  189420:	80800044 	addi	r2,r16,1
  189424:	84000047 	ldb	r16,1(r16)
  189428:	0027883a 	mov	r19,zero
  18942c:	0039883a 	mov	fp,zero
  189430:	dcc02b05 	stb	r19,172(sp)
  189434:	d8002785 	stb	zero,158(sp)
  189438:	027fffc4 	movi	r9,-1
  18943c:	d8002e15 	stw	zero,184(sp)
  189440:	04401604 	movi	r17,88
  189444:	04800244 	movi	r18,9
  189448:	da002a15 	stw	r8,168(sp)
  18944c:	e027883a 	mov	r19,fp
  189450:	17000044 	addi	fp,r2,1
  189454:	80bff804 	addi	r2,r16,-32
  189458:	8882ed36 	bltu	r17,r2,18a010 <___vfprintf_internal_r+0xd58>
  18945c:	100490ba 	slli	r2,r2,2
  189460:	01000674 	movhi	r4,25
  189464:	21251d04 	addi	r4,r4,-27532
  189468:	1105883a 	add	r2,r2,r4
  18946c:	10800017 	ldw	r2,0(r2)
  189470:	1000683a 	jmp	r2
  189474:	00189e58 	cmpnei	zero,zero,25209
  189478:	0018a010 	cmplti	zero,zero,25216
  18947c:	0018a010 	cmplti	zero,zero,25216
  189480:	00189e74 	movhi	zero,25209
  189484:	0018a010 	cmplti	zero,zero,25216
  189488:	0018a010 	cmplti	zero,zero,25216
  18948c:	0018a010 	cmplti	zero,zero,25216
  189490:	0018a010 	cmplti	zero,zero,25216
  189494:	0018a010 	cmplti	zero,zero,25216
  189498:	0018a010 	cmplti	zero,zero,25216
  18949c:	00189e84 	movi	zero,25210
  1894a0:	00189eac 	andhi	zero,zero,25210
  1894a4:	0018a010 	cmplti	zero,zero,25216
  1894a8:	001896ac 	andhi	zero,zero,25178
  1894ac:	001896bc 	xorhi	zero,zero,25178
  1894b0:	0018a010 	cmplti	zero,zero,25216
  1894b4:	0018970c 	andi	zero,zero,25180
  1894b8:	0018971c 	xori	zero,zero,25180
  1894bc:	0018971c 	xori	zero,zero,25180
  1894c0:	0018971c 	xori	zero,zero,25180
  1894c4:	0018971c 	xori	zero,zero,25180
  1894c8:	0018971c 	xori	zero,zero,25180
  1894cc:	0018971c 	xori	zero,zero,25180
  1894d0:	0018971c 	xori	zero,zero,25180
  1894d4:	0018971c 	xori	zero,zero,25180
  1894d8:	0018971c 	xori	zero,zero,25180
  1894dc:	0018a010 	cmplti	zero,zero,25216
  1894e0:	0018a010 	cmplti	zero,zero,25216
  1894e4:	0018a010 	cmplti	zero,zero,25216
  1894e8:	0018a010 	cmplti	zero,zero,25216
  1894ec:	0018a010 	cmplti	zero,zero,25216
  1894f0:	0018a010 	cmplti	zero,zero,25216
  1894f4:	0018a010 	cmplti	zero,zero,25216
  1894f8:	0018a010 	cmplti	zero,zero,25216
  1894fc:	0018a010 	cmplti	zero,zero,25216
  189500:	0018a010 	cmplti	zero,zero,25216
  189504:	00189760 	cmpeqi	zero,zero,25181
  189508:	00189b80 	call	189b8 <__alt_mem_sram-0x167648>
  18950c:	0018a010 	cmplti	zero,zero,25216
  189510:	00189b80 	call	189b8 <__alt_mem_sram-0x167648>
  189514:	0018a010 	cmplti	zero,zero,25216
  189518:	0018a010 	cmplti	zero,zero,25216
  18951c:	0018a010 	cmplti	zero,zero,25216
  189520:	0018a010 	cmplti	zero,zero,25216
  189524:	00189c28 	cmpgeui	zero,zero,25200
  189528:	0018a010 	cmplti	zero,zero,25216
  18952c:	0018a010 	cmplti	zero,zero,25216
  189530:	00189c38 	rdprs	zero,zero,25200
  189534:	0018a010 	cmplti	zero,zero,25216
  189538:	0018a010 	cmplti	zero,zero,25216
  18953c:	0018a010 	cmplti	zero,zero,25216
  189540:	0018a010 	cmplti	zero,zero,25216
  189544:	0018a010 	cmplti	zero,zero,25216
  189548:	00189c78 	rdprs	zero,zero,25201
  18954c:	0018a010 	cmplti	zero,zero,25216
  189550:	0018a010 	cmplti	zero,zero,25216
  189554:	00189da4 	muli	zero,zero,25206
  189558:	0018a010 	cmplti	zero,zero,25216
  18955c:	0018a010 	cmplti	zero,zero,25216
  189560:	0018a010 	cmplti	zero,zero,25216
  189564:	0018a010 	cmplti	zero,zero,25216
  189568:	0018a010 	cmplti	zero,zero,25216
  18956c:	0018a010 	cmplti	zero,zero,25216
  189570:	0018a010 	cmplti	zero,zero,25216
  189574:	0018a010 	cmplti	zero,zero,25216
  189578:	0018a010 	cmplti	zero,zero,25216
  18957c:	0018a010 	cmplti	zero,zero,25216
  189580:	00189e0c 	andi	zero,zero,25208
  189584:	00189cf8 	rdprs	zero,zero,25203
  189588:	00189b80 	call	189b8 <__alt_mem_sram-0x167648>
  18958c:	00189b80 	call	189b8 <__alt_mem_sram-0x167648>
  189590:	00189b80 	call	189b8 <__alt_mem_sram-0x167648>
  189594:	00189d3c 	xorhi	zero,zero,25204
  189598:	00189cf8 	rdprs	zero,zero,25203
  18959c:	0018a010 	cmplti	zero,zero,25216
  1895a0:	0018a010 	cmplti	zero,zero,25216
  1895a4:	00189d4c 	andi	zero,zero,25205
  1895a8:	0018a010 	cmplti	zero,zero,25216
  1895ac:	00189d64 	muli	zero,zero,25205
  1895b0:	00189fd4 	movui	zero,25215
  1895b4:	00189cac 	andhi	zero,zero,25202
  1895b8:	00189f88 	cmpgei	zero,zero,25214
  1895bc:	0018a010 	cmplti	zero,zero,25216
  1895c0:	00189ec0 	call	189ec <__alt_mem_sram-0x167614>
  1895c4:	0018a010 	cmplti	zero,zero,25216
  1895c8:	00189f98 	cmpnei	zero,zero,25214
  1895cc:	0018a010 	cmplti	zero,zero,25216
  1895d0:	0018a010 	cmplti	zero,zero,25216
  1895d4:	00189f3c 	xorhi	zero,zero,25212
  1895d8:	d9402a17 	ldw	r5,168(sp)
  1895dc:	8163c83a 	sub	r17,r16,r5
  1895e0:	003f7d06 	br	1893d8 <__alt_data_end+0xfff893d8>
  1895e4:	b809883a 	mov	r4,r23
  1895e8:	b00b883a 	mov	r5,r22
  1895ec:	018b3f00 	call	18b3f0 <__swsetup_r>
  1895f0:	10000c1e 	bne	r2,zero,189624 <___vfprintf_internal_r+0x36c>
  1895f4:	b080030b 	ldhu	r2,12(r22)
  1895f8:	00c00284 	movi	r3,10
  1895fc:	1080068c 	andi	r2,r2,26
  189600:	10ff551e 	bne	r2,r3,189358 <__alt_data_end+0xfff89358>
  189604:	b080038f 	ldh	r2,14(r22)
  189608:	103f5316 	blt	r2,zero,189358 <__alt_data_end+0xfff89358>
  18960c:	d9802a17 	ldw	r6,168(sp)
  189610:	d9c02d17 	ldw	r7,180(sp)
  189614:	b809883a 	mov	r4,r23
  189618:	b00b883a 	mov	r5,r22
  18961c:	018b3340 	call	18b334 <__sbprintf>
  189620:	00000106 	br	189628 <___vfprintf_internal_r+0x370>
  189624:	00bfffc4 	movi	r2,-1
  189628:	dfc04917 	ldw	ra,292(sp)
  18962c:	df004817 	ldw	fp,288(sp)
  189630:	ddc04717 	ldw	r23,284(sp)
  189634:	dd804617 	ldw	r22,280(sp)
  189638:	dd404517 	ldw	r21,276(sp)
  18963c:	dd004417 	ldw	r20,272(sp)
  189640:	dcc04317 	ldw	r19,268(sp)
  189644:	dc804217 	ldw	r18,264(sp)
  189648:	dc404117 	ldw	r17,260(sp)
  18964c:	dc004017 	ldw	r16,256(sp)
  189650:	dec04a04 	addi	sp,sp,296
  189654:	f800283a 	ret
  189658:	b809883a 	mov	r4,r23
  18965c:	b00b883a 	mov	r5,r22
  189660:	d9801e04 	addi	r6,sp,120
  189664:	01906980 	call	190698 <__sprint_r>
  189668:	1000081e 	bne	r2,zero,18968c <___vfprintf_internal_r+0x3d4>
  18966c:	da000404 	addi	r8,sp,16
  189670:	003f6606 	br	18940c <__alt_data_end+0xfff8940c>
  189674:	d8802017 	ldw	r2,128(sp)
  189678:	10000426 	beq	r2,zero,18968c <___vfprintf_internal_r+0x3d4>
  18967c:	b809883a 	mov	r4,r23
  189680:	b00b883a 	mov	r5,r22
  189684:	d9801e04 	addi	r6,sp,120
  189688:	01906980 	call	190698 <__sprint_r>
  18968c:	b080030b 	ldhu	r2,12(r22)
  189690:	1080100c 	andi	r2,r2,64
  189694:	103fe31e 	bne	r2,zero,189624 <__alt_data_end+0xfff89624>
  189698:	d8802f17 	ldw	r2,188(sp)
  18969c:	003fe206 	br	189628 <__alt_data_end+0xfff89628>
  1896a0:	b809883a 	mov	r4,r23
  1896a4:	018d4880 	call	18d488 <__sinit>
  1896a8:	003f1b06 	br	189318 <__alt_data_end+0xfff89318>
  1896ac:	e005883a 	mov	r2,fp
  1896b0:	9cc00114 	ori	r19,r19,4
  1896b4:	e4000007 	ldb	r16,0(fp)
  1896b8:	003f6506 	br	189450 <__alt_data_end+0xfff89450>
  1896bc:	e4000007 	ldb	r16,0(fp)
  1896c0:	01000a84 	movi	r4,42
  1896c4:	e0800044 	addi	r2,fp,1
  1896c8:	8106ff26 	beq	r16,r4,18b2c8 <___vfprintf_internal_r+0x2010>
  1896cc:	857ff404 	addi	r21,r16,-48
  1896d0:	1039883a 	mov	fp,r2
  1896d4:	0013883a 	mov	r9,zero
  1896d8:	957f5e36 	bltu	r18,r21,189454 <__alt_data_end+0xfff89454>
  1896dc:	0009883a 	mov	r4,zero
  1896e0:	01400284 	movi	r5,10
  1896e4:	0187dd80 	call	187dd8 <__mulsi3>
  1896e8:	e4000007 	ldb	r16,0(fp)
  1896ec:	a889883a 	add	r4,r21,r2
  1896f0:	e7000044 	addi	fp,fp,1
  1896f4:	857ff404 	addi	r21,r16,-48
  1896f8:	957ff92e 	bgeu	r18,r21,1896e0 <__alt_data_end+0xfff896e0>
  1896fc:	2013883a 	mov	r9,r4
  189700:	203f540e 	bge	r4,zero,189454 <__alt_data_end+0xfff89454>
  189704:	027fffc4 	movi	r9,-1
  189708:	003f5206 	br	189454 <__alt_data_end+0xfff89454>
  18970c:	9cc02014 	ori	r19,r19,128
  189710:	e005883a 	mov	r2,fp
  189714:	e4000007 	ldb	r16,0(fp)
  189718:	003f4d06 	br	189450 <__alt_data_end+0xfff89450>
  18971c:	857ff404 	addi	r21,r16,-48
  189720:	d8002e15 	stw	zero,184(sp)
  189724:	0009883a 	mov	r4,zero
  189728:	da402c15 	stw	r9,176(sp)
  18972c:	e021883a 	mov	r16,fp
  189730:	01400284 	movi	r5,10
  189734:	0187dd80 	call	187dd8 <__mulsi3>
  189738:	81400007 	ldb	r5,0(r16)
  18973c:	1549883a 	add	r4,r2,r21
  189740:	e7000044 	addi	fp,fp,1
  189744:	2d7ff404 	addi	r21,r5,-48
  189748:	e021883a 	mov	r16,fp
  18974c:	957ff82e 	bgeu	r18,r21,189730 <__alt_data_end+0xfff89730>
  189750:	2821883a 	mov	r16,r5
  189754:	d9002e15 	stw	r4,184(sp)
  189758:	da402c17 	ldw	r9,176(sp)
  18975c:	003f3d06 	br	189454 <__alt_data_end+0xfff89454>
  189760:	da002a17 	ldw	r8,168(sp)
  189764:	df002a15 	stw	fp,168(sp)
  189768:	9839883a 	mov	fp,r19
  18976c:	dcc02b03 	ldbu	r19,172(sp)
  189770:	e7000414 	ori	fp,fp,16
  189774:	e080080c 	andi	r2,fp,32
  189778:	dcc02785 	stb	r19,158(sp)
  18977c:	d8c02d17 	ldw	r3,180(sp)
  189780:	10016526 	beq	r2,zero,189d18 <___vfprintf_internal_r+0xa60>
  189784:	d9002d17 	ldw	r4,180(sp)
  189788:	18800117 	ldw	r2,4(r3)
  18978c:	1c800017 	ldw	r18,0(r3)
  189790:	21000204 	addi	r4,r4,8
  189794:	d9002d15 	stw	r4,180(sp)
  189798:	102b883a 	mov	r21,r2
  18979c:	10044516 	blt	r2,zero,18a8b4 <___vfprintf_internal_r+0x15fc>
  1897a0:	dcc02783 	ldbu	r19,158(sp)
  1897a4:	da403215 	stw	r9,200(sp)
  1897a8:	00800044 	movi	r2,1
  1897ac:	9546b03a 	or	r3,r18,r21
  1897b0:	48000216 	blt	r9,zero,1897bc <___vfprintf_internal_r+0x504>
  1897b4:	013fdfc4 	movi	r4,-129
  1897b8:	e138703a 	and	fp,fp,r4
  1897bc:	1802211e 	bne	r3,zero,18a044 <___vfprintf_internal_r+0xd8c>
  1897c0:	48031326 	beq	r9,zero,18a410 <___vfprintf_internal_r+0x1158>
  1897c4:	10803fcc 	andi	r2,r2,255
  1897c8:	00c00044 	movi	r3,1
  1897cc:	10c24126 	beq	r2,r3,18a0d4 <___vfprintf_internal_r+0xe1c>
  1897d0:	00c00084 	movi	r3,2
  1897d4:	10c33426 	beq	r2,r3,18a4a8 <___vfprintf_internal_r+0x11f0>
  1897d8:	d8c01e04 	addi	r3,sp,120
  1897dc:	9008d0fa 	srli	r4,r18,3
  1897e0:	a80a977a 	slli	r5,r21,29
  1897e4:	a82ad0fa 	srli	r21,r21,3
  1897e8:	948001cc 	andi	r18,r18,7
  1897ec:	90800c04 	addi	r2,r18,48
  1897f0:	18ffffc4 	addi	r3,r3,-1
  1897f4:	2924b03a 	or	r18,r5,r4
  1897f8:	18800005 	stb	r2,0(r3)
  1897fc:	9548b03a 	or	r4,r18,r21
  189800:	203ff61e 	bne	r4,zero,1897dc <__alt_data_end+0xfff897dc>
  189804:	e100004c 	andi	r4,fp,1
  189808:	d8c03115 	stw	r3,196(sp)
  18980c:	2003961e 	bne	r4,zero,18a668 <___vfprintf_internal_r+0x13b0>
  189810:	d8802817 	ldw	r2,160(sp)
  189814:	10e3c83a 	sub	r17,r2,r3
  189818:	8805883a 	mov	r2,r17
  18981c:	8a40010e 	bge	r17,r9,189824 <___vfprintf_internal_r+0x56c>
  189820:	4805883a 	mov	r2,r9
  189824:	d8802b15 	stw	r2,172(sp)
  189828:	d8003415 	stw	zero,208(sp)
  18982c:	98803fcc 	andi	r2,r19,255
  189830:	1080201c 	xori	r2,r2,128
  189834:	10bfe004 	addi	r2,r2,-128
  189838:	10000326 	beq	r2,zero,189848 <___vfprintf_internal_r+0x590>
  18983c:	d8c02b17 	ldw	r3,172(sp)
  189840:	18c00044 	addi	r3,r3,1
  189844:	d8c02b15 	stw	r3,172(sp)
  189848:	e0c0008c 	andi	r3,fp,2
  18984c:	d8c02c15 	stw	r3,176(sp)
  189850:	18000326 	beq	r3,zero,189860 <___vfprintf_internal_r+0x5a8>
  189854:	d8c02b17 	ldw	r3,172(sp)
  189858:	18c00084 	addi	r3,r3,2
  18985c:	d8c02b15 	stw	r3,172(sp)
  189860:	e0c0210c 	andi	r3,fp,132
  189864:	d8c03015 	stw	r3,192(sp)
  189868:	1801f41e 	bne	r3,zero,18a03c <___vfprintf_internal_r+0xd84>
  18986c:	d9002e17 	ldw	r4,184(sp)
  189870:	d8c02b17 	ldw	r3,172(sp)
  189874:	20ebc83a 	sub	r21,r4,r3
  189878:	0541f00e 	bge	zero,r21,18a03c <___vfprintf_internal_r+0xd84>
  18987c:	02400404 	movi	r9,16
  189880:	d8c02017 	ldw	r3,128(sp)
  189884:	d8801f17 	ldw	r2,124(sp)
  189888:	4d45710e 	bge	r9,r21,18ae50 <___vfprintf_internal_r+0x1b98>
  18988c:	014006b4 	movhi	r5,26
  189890:	297d14c4 	addi	r5,r5,-2989
  189894:	d9403615 	stw	r5,216(sp)
  189898:	4827883a 	mov	r19,r9
  18989c:	048001c4 	movi	r18,7
  1898a0:	00000306 	br	1898b0 <___vfprintf_internal_r+0x5f8>
  1898a4:	ad7ffc04 	addi	r21,r21,-16
  1898a8:	42000204 	addi	r8,r8,8
  1898ac:	9d40130e 	bge	r19,r21,1898fc <___vfprintf_internal_r+0x644>
  1898b0:	010006b4 	movhi	r4,26
  1898b4:	18c00404 	addi	r3,r3,16
  1898b8:	10800044 	addi	r2,r2,1
  1898bc:	213d14c4 	addi	r4,r4,-2989
  1898c0:	41000015 	stw	r4,0(r8)
  1898c4:	44c00115 	stw	r19,4(r8)
  1898c8:	d8c02015 	stw	r3,128(sp)
  1898cc:	d8801f15 	stw	r2,124(sp)
  1898d0:	90bff40e 	bge	r18,r2,1898a4 <__alt_data_end+0xfff898a4>
  1898d4:	b809883a 	mov	r4,r23
  1898d8:	b00b883a 	mov	r5,r22
  1898dc:	d9801e04 	addi	r6,sp,120
  1898e0:	01906980 	call	190698 <__sprint_r>
  1898e4:	103f691e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  1898e8:	ad7ffc04 	addi	r21,r21,-16
  1898ec:	d8c02017 	ldw	r3,128(sp)
  1898f0:	d8801f17 	ldw	r2,124(sp)
  1898f4:	da000404 	addi	r8,sp,16
  1898f8:	9d7fed16 	blt	r19,r21,1898b0 <__alt_data_end+0xfff898b0>
  1898fc:	d9403617 	ldw	r5,216(sp)
  189900:	a8c7883a 	add	r3,r21,r3
  189904:	10800044 	addi	r2,r2,1
  189908:	41400015 	stw	r5,0(r8)
  18990c:	45400115 	stw	r21,4(r8)
  189910:	d8c02015 	stw	r3,128(sp)
  189914:	d8801f15 	stw	r2,124(sp)
  189918:	010001c4 	movi	r4,7
  18991c:	20832716 	blt	r4,r2,18a5bc <___vfprintf_internal_r+0x1304>
  189920:	d8802787 	ldb	r2,158(sp)
  189924:	42000204 	addi	r8,r8,8
  189928:	10000c26 	beq	r2,zero,18995c <___vfprintf_internal_r+0x6a4>
  18992c:	d8801f17 	ldw	r2,124(sp)
  189930:	d9002784 	addi	r4,sp,158
  189934:	18c00044 	addi	r3,r3,1
  189938:	10800044 	addi	r2,r2,1
  18993c:	41000015 	stw	r4,0(r8)
  189940:	01000044 	movi	r4,1
  189944:	41000115 	stw	r4,4(r8)
  189948:	d8c02015 	stw	r3,128(sp)
  18994c:	d8801f15 	stw	r2,124(sp)
  189950:	010001c4 	movi	r4,7
  189954:	2082c016 	blt	r4,r2,18a458 <___vfprintf_internal_r+0x11a0>
  189958:	42000204 	addi	r8,r8,8
  18995c:	d8802c17 	ldw	r2,176(sp)
  189960:	10000c26 	beq	r2,zero,189994 <___vfprintf_internal_r+0x6dc>
  189964:	d8801f17 	ldw	r2,124(sp)
  189968:	d9002704 	addi	r4,sp,156
  18996c:	18c00084 	addi	r3,r3,2
  189970:	10800044 	addi	r2,r2,1
  189974:	41000015 	stw	r4,0(r8)
  189978:	01000084 	movi	r4,2
  18997c:	41000115 	stw	r4,4(r8)
  189980:	d8c02015 	stw	r3,128(sp)
  189984:	d8801f15 	stw	r2,124(sp)
  189988:	010001c4 	movi	r4,7
  18998c:	2082ba16 	blt	r4,r2,18a478 <___vfprintf_internal_r+0x11c0>
  189990:	42000204 	addi	r8,r8,8
  189994:	d9003017 	ldw	r4,192(sp)
  189998:	00802004 	movi	r2,128
  18999c:	20821c26 	beq	r4,r2,18a210 <___vfprintf_internal_r+0xf58>
  1899a0:	d9403217 	ldw	r5,200(sp)
  1899a4:	2c67c83a 	sub	r19,r5,r17
  1899a8:	04c0260e 	bge	zero,r19,189a44 <___vfprintf_internal_r+0x78c>
  1899ac:	05400404 	movi	r21,16
  1899b0:	d8801f17 	ldw	r2,124(sp)
  1899b4:	acc46e0e 	bge	r21,r19,18ab70 <___vfprintf_internal_r+0x18b8>
  1899b8:	014006b4 	movhi	r5,26
  1899bc:	297d10c4 	addi	r5,r5,-3005
  1899c0:	d9402c15 	stw	r5,176(sp)
  1899c4:	048001c4 	movi	r18,7
  1899c8:	00000306 	br	1899d8 <___vfprintf_internal_r+0x720>
  1899cc:	9cfffc04 	addi	r19,r19,-16
  1899d0:	42000204 	addi	r8,r8,8
  1899d4:	acc0110e 	bge	r21,r19,189a1c <___vfprintf_internal_r+0x764>
  1899d8:	18c00404 	addi	r3,r3,16
  1899dc:	10800044 	addi	r2,r2,1
  1899e0:	45000015 	stw	r20,0(r8)
  1899e4:	45400115 	stw	r21,4(r8)
  1899e8:	d8c02015 	stw	r3,128(sp)
  1899ec:	d8801f15 	stw	r2,124(sp)
  1899f0:	90bff60e 	bge	r18,r2,1899cc <__alt_data_end+0xfff899cc>
  1899f4:	b809883a 	mov	r4,r23
  1899f8:	b00b883a 	mov	r5,r22
  1899fc:	d9801e04 	addi	r6,sp,120
  189a00:	01906980 	call	190698 <__sprint_r>
  189a04:	103f211e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  189a08:	9cfffc04 	addi	r19,r19,-16
  189a0c:	d8c02017 	ldw	r3,128(sp)
  189a10:	d8801f17 	ldw	r2,124(sp)
  189a14:	da000404 	addi	r8,sp,16
  189a18:	acffef16 	blt	r21,r19,1899d8 <__alt_data_end+0xfff899d8>
  189a1c:	d9002c17 	ldw	r4,176(sp)
  189a20:	1cc7883a 	add	r3,r3,r19
  189a24:	10800044 	addi	r2,r2,1
  189a28:	41000015 	stw	r4,0(r8)
  189a2c:	44c00115 	stw	r19,4(r8)
  189a30:	d8c02015 	stw	r3,128(sp)
  189a34:	d8801f15 	stw	r2,124(sp)
  189a38:	010001c4 	movi	r4,7
  189a3c:	20827e16 	blt	r4,r2,18a438 <___vfprintf_internal_r+0x1180>
  189a40:	42000204 	addi	r8,r8,8
  189a44:	e080400c 	andi	r2,fp,256
  189a48:	1001a81e 	bne	r2,zero,18a0ec <___vfprintf_internal_r+0xe34>
  189a4c:	d8801f17 	ldw	r2,124(sp)
  189a50:	d9403117 	ldw	r5,196(sp)
  189a54:	1c47883a 	add	r3,r3,r17
  189a58:	10800044 	addi	r2,r2,1
  189a5c:	41400015 	stw	r5,0(r8)
  189a60:	44400115 	stw	r17,4(r8)
  189a64:	d8c02015 	stw	r3,128(sp)
  189a68:	d8801f15 	stw	r2,124(sp)
  189a6c:	010001c4 	movi	r4,7
  189a70:	20825916 	blt	r4,r2,18a3d8 <___vfprintf_internal_r+0x1120>
  189a74:	42000204 	addi	r8,r8,8
  189a78:	e080010c 	andi	r2,fp,4
  189a7c:	10003126 	beq	r2,zero,189b44 <___vfprintf_internal_r+0x88c>
  189a80:	d8802e17 	ldw	r2,184(sp)
  189a84:	d9002b17 	ldw	r4,172(sp)
  189a88:	1121c83a 	sub	r16,r2,r4
  189a8c:	04002d0e 	bge	zero,r16,189b44 <___vfprintf_internal_r+0x88c>
  189a90:	04400404 	movi	r17,16
  189a94:	d8801f17 	ldw	r2,124(sp)
  189a98:	8c053f0e 	bge	r17,r16,18af98 <___vfprintf_internal_r+0x1ce0>
  189a9c:	010006b4 	movhi	r4,26
  189aa0:	213d14c4 	addi	r4,r4,-2989
  189aa4:	d9003615 	stw	r4,216(sp)
  189aa8:	048001c4 	movi	r18,7
  189aac:	00000306 	br	189abc <___vfprintf_internal_r+0x804>
  189ab0:	843ffc04 	addi	r16,r16,-16
  189ab4:	42000204 	addi	r8,r8,8
  189ab8:	8c00130e 	bge	r17,r16,189b08 <___vfprintf_internal_r+0x850>
  189abc:	014006b4 	movhi	r5,26
  189ac0:	18c00404 	addi	r3,r3,16
  189ac4:	10800044 	addi	r2,r2,1
  189ac8:	297d14c4 	addi	r5,r5,-2989
  189acc:	41400015 	stw	r5,0(r8)
  189ad0:	44400115 	stw	r17,4(r8)
  189ad4:	d8c02015 	stw	r3,128(sp)
  189ad8:	d8801f15 	stw	r2,124(sp)
  189adc:	90bff40e 	bge	r18,r2,189ab0 <__alt_data_end+0xfff89ab0>
  189ae0:	b809883a 	mov	r4,r23
  189ae4:	b00b883a 	mov	r5,r22
  189ae8:	d9801e04 	addi	r6,sp,120
  189aec:	01906980 	call	190698 <__sprint_r>
  189af0:	103ee61e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  189af4:	843ffc04 	addi	r16,r16,-16
  189af8:	d8c02017 	ldw	r3,128(sp)
  189afc:	d8801f17 	ldw	r2,124(sp)
  189b00:	da000404 	addi	r8,sp,16
  189b04:	8c3fed16 	blt	r17,r16,189abc <__alt_data_end+0xfff89abc>
  189b08:	d9003617 	ldw	r4,216(sp)
  189b0c:	1c07883a 	add	r3,r3,r16
  189b10:	10800044 	addi	r2,r2,1
  189b14:	41000015 	stw	r4,0(r8)
  189b18:	44000115 	stw	r16,4(r8)
  189b1c:	d8c02015 	stw	r3,128(sp)
  189b20:	d8801f15 	stw	r2,124(sp)
  189b24:	010001c4 	movi	r4,7
  189b28:	2080060e 	bge	r4,r2,189b44 <___vfprintf_internal_r+0x88c>
  189b2c:	b809883a 	mov	r4,r23
  189b30:	b00b883a 	mov	r5,r22
  189b34:	d9801e04 	addi	r6,sp,120
  189b38:	01906980 	call	190698 <__sprint_r>
  189b3c:	103ed31e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  189b40:	d8c02017 	ldw	r3,128(sp)
  189b44:	df002b17 	ldw	fp,172(sp)
  189b48:	d9402e17 	ldw	r5,184(sp)
  189b4c:	e140010e 	bge	fp,r5,189b54 <___vfprintf_internal_r+0x89c>
  189b50:	2839883a 	mov	fp,r5
  189b54:	d8802f17 	ldw	r2,188(sp)
  189b58:	1705883a 	add	r2,r2,fp
  189b5c:	d8802f15 	stw	r2,188(sp)
  189b60:	1802251e 	bne	r3,zero,18a3f8 <___vfprintf_internal_r+0x1140>
  189b64:	d8c02a17 	ldw	r3,168(sp)
  189b68:	d8001f15 	stw	zero,124(sp)
  189b6c:	da000404 	addi	r8,sp,16
  189b70:	18800007 	ldb	r2,0(r3)
  189b74:	103e0e1e 	bne	r2,zero,1893b0 <__alt_data_end+0xfff893b0>
  189b78:	dc002a17 	ldw	r16,168(sp)
  189b7c:	003e2606 	br	189418 <__alt_data_end+0xfff89418>
  189b80:	d9002d17 	ldw	r4,180(sp)
  189b84:	d9402d17 	ldw	r5,180(sp)
  189b88:	da002a17 	ldw	r8,168(sp)
  189b8c:	21000017 	ldw	r4,0(r4)
  189b90:	29400117 	ldw	r5,4(r5)
  189b94:	df002a15 	stw	fp,168(sp)
  189b98:	9839883a 	mov	fp,r19
  189b9c:	dcc02b03 	ldbu	r19,172(sp)
  189ba0:	d9003715 	stw	r4,220(sp)
  189ba4:	d9403915 	stw	r5,228(sp)
  189ba8:	da003f15 	stw	r8,252(sp)
  189bac:	da403e15 	stw	r9,248(sp)
  189bb0:	dcc02785 	stb	r19,158(sp)
  189bb4:	01902f40 	call	1902f4 <__fpclassifyd>
  189bb8:	d8c02d17 	ldw	r3,180(sp)
  189bbc:	04400044 	movi	r17,1
  189bc0:	da003f17 	ldw	r8,252(sp)
  189bc4:	1c800204 	addi	r18,r3,8
  189bc8:	da403e17 	ldw	r9,248(sp)
  189bcc:	d9003717 	ldw	r4,220(sp)
  189bd0:	d9403917 	ldw	r5,228(sp)
  189bd4:	1443411e 	bne	r2,r17,18a8dc <___vfprintf_internal_r+0x1624>
  189bd8:	000d883a 	mov	r6,zero
  189bdc:	000f883a 	mov	r7,zero
  189be0:	01943680 	call	194368 <__ledf2>
  189be4:	da003f17 	ldw	r8,252(sp)
  189be8:	10050d16 	blt	r2,zero,18b020 <___vfprintf_internal_r+0x1d68>
  189bec:	dcc02783 	ldbu	r19,158(sp)
  189bf0:	008011c4 	movi	r2,71
  189bf4:	1404590e 	bge	r2,r16,18ad5c <___vfprintf_internal_r+0x1aa4>
  189bf8:	014006b4 	movhi	r5,26
  189bfc:	297d0204 	addi	r5,r5,-3064
  189c00:	d9403115 	stw	r5,196(sp)
  189c04:	00c000c4 	movi	r3,3
  189c08:	00bfdfc4 	movi	r2,-129
  189c0c:	d8c02b15 	stw	r3,172(sp)
  189c10:	e0b8703a 	and	fp,fp,r2
  189c14:	dc802d15 	stw	r18,180(sp)
  189c18:	1823883a 	mov	r17,r3
  189c1c:	d8003215 	stw	zero,200(sp)
  189c20:	d8003415 	stw	zero,208(sp)
  189c24:	003f0106 	br	18982c <__alt_data_end+0xfff8982c>
  189c28:	9cc00214 	ori	r19,r19,8
  189c2c:	e005883a 	mov	r2,fp
  189c30:	e4000007 	ldb	r16,0(fp)
  189c34:	003e0606 	br	189450 <__alt_data_end+0xfff89450>
  189c38:	da002a17 	ldw	r8,168(sp)
  189c3c:	df002a15 	stw	fp,168(sp)
  189c40:	9f000414 	ori	fp,r19,16
  189c44:	e080080c 	andi	r2,fp,32
  189c48:	1000e726 	beq	r2,zero,189fe8 <___vfprintf_internal_r+0xd30>
  189c4c:	d9402d17 	ldw	r5,180(sp)
  189c50:	0005883a 	mov	r2,zero
  189c54:	2c800017 	ldw	r18,0(r5)
  189c58:	2d400117 	ldw	r21,4(r5)
  189c5c:	29400204 	addi	r5,r5,8
  189c60:	d9402d15 	stw	r5,180(sp)
  189c64:	9546b03a 	or	r3,r18,r21
  189c68:	d8002785 	stb	zero,158(sp)
  189c6c:	da403215 	stw	r9,200(sp)
  189c70:	0027883a 	mov	r19,zero
  189c74:	003ece06 	br	1897b0 <__alt_data_end+0xfff897b0>
  189c78:	da002a17 	ldw	r8,168(sp)
  189c7c:	df002a15 	stw	fp,168(sp)
  189c80:	9f000414 	ori	fp,r19,16
  189c84:	e080080c 	andi	r2,fp,32
  189c88:	1000c826 	beq	r2,zero,189fac <___vfprintf_internal_r+0xcf4>
  189c8c:	d9002d17 	ldw	r4,180(sp)
  189c90:	00800044 	movi	r2,1
  189c94:	24800017 	ldw	r18,0(r4)
  189c98:	25400117 	ldw	r21,4(r4)
  189c9c:	21000204 	addi	r4,r4,8
  189ca0:	d9002d15 	stw	r4,180(sp)
  189ca4:	9546b03a 	or	r3,r18,r21
  189ca8:	003fef06 	br	189c68 <__alt_data_end+0xfff89c68>
  189cac:	d9402d17 	ldw	r5,180(sp)
  189cb0:	00800c04 	movi	r2,48
  189cb4:	d8802705 	stb	r2,156(sp)
  189cb8:	2c800017 	ldw	r18,0(r5)
  189cbc:	00801e04 	movi	r2,120
  189cc0:	d8802745 	stb	r2,157(sp)
  189cc4:	008006b4 	movhi	r2,26
  189cc8:	10bd0a04 	addi	r2,r2,-3032
  189ccc:	29400104 	addi	r5,r5,4
  189cd0:	da002a17 	ldw	r8,168(sp)
  189cd4:	d8803b15 	stw	r2,236(sp)
  189cd8:	df002a15 	stw	fp,168(sp)
  189cdc:	002b883a 	mov	r21,zero
  189ce0:	9f000094 	ori	fp,r19,2
  189ce4:	d9402d15 	stw	r5,180(sp)
  189ce8:	00800084 	movi	r2,2
  189cec:	04001e04 	movi	r16,120
  189cf0:	9007883a 	mov	r3,r18
  189cf4:	003fdc06 	br	189c68 <__alt_data_end+0xfff89c68>
  189cf8:	da002a17 	ldw	r8,168(sp)
  189cfc:	df002a15 	stw	fp,168(sp)
  189d00:	9839883a 	mov	fp,r19
  189d04:	dcc02b03 	ldbu	r19,172(sp)
  189d08:	e080080c 	andi	r2,fp,32
  189d0c:	d8c02d17 	ldw	r3,180(sp)
  189d10:	dcc02785 	stb	r19,158(sp)
  189d14:	103e9b1e 	bne	r2,zero,189784 <__alt_data_end+0xfff89784>
  189d18:	e080040c 	andi	r2,fp,16
  189d1c:	10036626 	beq	r2,zero,18aab8 <___vfprintf_internal_r+0x1800>
  189d20:	1c800017 	ldw	r18,0(r3)
  189d24:	d9402d17 	ldw	r5,180(sp)
  189d28:	902bd7fa 	srai	r21,r18,31
  189d2c:	29400104 	addi	r5,r5,4
  189d30:	d9402d15 	stw	r5,180(sp)
  189d34:	a805883a 	mov	r2,r21
  189d38:	003e9806 	br	18979c <__alt_data_end+0xfff8979c>
  189d3c:	9cc01014 	ori	r19,r19,64
  189d40:	e005883a 	mov	r2,fp
  189d44:	e4000007 	ldb	r16,0(fp)
  189d48:	003dc106 	br	189450 <__alt_data_end+0xfff89450>
  189d4c:	e4000007 	ldb	r16,0(fp)
  189d50:	00801b04 	movi	r2,108
  189d54:	80841426 	beq	r16,r2,18ada8 <___vfprintf_internal_r+0x1af0>
  189d58:	9cc00414 	ori	r19,r19,16
  189d5c:	e005883a 	mov	r2,fp
  189d60:	003dbb06 	br	189450 <__alt_data_end+0xfff89450>
  189d64:	da002a17 	ldw	r8,168(sp)
  189d68:	df002a15 	stw	fp,168(sp)
  189d6c:	9839883a 	mov	fp,r19
  189d70:	dcc02b03 	ldbu	r19,172(sp)
  189d74:	e080080c 	andi	r2,fp,32
  189d78:	dcc02785 	stb	r19,158(sp)
  189d7c:	10036126 	beq	r2,zero,18ab04 <___vfprintf_internal_r+0x184c>
  189d80:	d9402d17 	ldw	r5,180(sp)
  189d84:	d9002f17 	ldw	r4,188(sp)
  189d88:	28800017 	ldw	r2,0(r5)
  189d8c:	2007d7fa 	srai	r3,r4,31
  189d90:	29400104 	addi	r5,r5,4
  189d94:	d9402d15 	stw	r5,180(sp)
  189d98:	11000015 	stw	r4,0(r2)
  189d9c:	10c00115 	stw	r3,4(r2)
  189da0:	003d8006 	br	1893a4 <__alt_data_end+0xfff893a4>
  189da4:	da002a17 	ldw	r8,168(sp)
  189da8:	df002a15 	stw	fp,168(sp)
  189dac:	9839883a 	mov	fp,r19
  189db0:	dcc02b03 	ldbu	r19,172(sp)
  189db4:	014006b4 	movhi	r5,26
  189db8:	297d0504 	addi	r5,r5,-3052
  189dbc:	dcc02785 	stb	r19,158(sp)
  189dc0:	d9403b15 	stw	r5,236(sp)
  189dc4:	e0c0080c 	andi	r3,fp,32
  189dc8:	d8802d17 	ldw	r2,180(sp)
  189dcc:	18006626 	beq	r3,zero,189f68 <___vfprintf_internal_r+0xcb0>
  189dd0:	d9402d17 	ldw	r5,180(sp)
  189dd4:	14800017 	ldw	r18,0(r2)
  189dd8:	15400117 	ldw	r21,4(r2)
  189ddc:	29400204 	addi	r5,r5,8
  189de0:	d9402d15 	stw	r5,180(sp)
  189de4:	e080004c 	andi	r2,fp,1
  189de8:	1001fd26 	beq	r2,zero,18a5e0 <___vfprintf_internal_r+0x1328>
  189dec:	9546b03a 	or	r3,r18,r21
  189df0:	18034f26 	beq	r3,zero,18ab30 <___vfprintf_internal_r+0x1878>
  189df4:	00800c04 	movi	r2,48
  189df8:	d8802705 	stb	r2,156(sp)
  189dfc:	dc002745 	stb	r16,157(sp)
  189e00:	e7000094 	ori	fp,fp,2
  189e04:	00800084 	movi	r2,2
  189e08:	003f9706 	br	189c68 <__alt_data_end+0xfff89c68>
  189e0c:	d8c02d17 	ldw	r3,180(sp)
  189e10:	d9002d17 	ldw	r4,180(sp)
  189e14:	da002a17 	ldw	r8,168(sp)
  189e18:	18800017 	ldw	r2,0(r3)
  189e1c:	21000104 	addi	r4,r4,4
  189e20:	00c00044 	movi	r3,1
  189e24:	df002a15 	stw	fp,168(sp)
  189e28:	d8c02b15 	stw	r3,172(sp)
  189e2c:	9839883a 	mov	fp,r19
  189e30:	d8002785 	stb	zero,158(sp)
  189e34:	d8801405 	stb	r2,80(sp)
  189e38:	d9002d15 	stw	r4,180(sp)
  189e3c:	1823883a 	mov	r17,r3
  189e40:	d8c01404 	addi	r3,sp,80
  189e44:	d8003215 	stw	zero,200(sp)
  189e48:	d8003415 	stw	zero,208(sp)
  189e4c:	d8c03115 	stw	r3,196(sp)
  189e50:	0005883a 	mov	r2,zero
  189e54:	003e7c06 	br	189848 <__alt_data_end+0xfff89848>
  189e58:	d8802b07 	ldb	r2,172(sp)
  189e5c:	1003011e 	bne	r2,zero,18aa64 <___vfprintf_internal_r+0x17ac>
  189e60:	00c00804 	movi	r3,32
  189e64:	d8c02b05 	stb	r3,172(sp)
  189e68:	e005883a 	mov	r2,fp
  189e6c:	e4000007 	ldb	r16,0(fp)
  189e70:	003d7706 	br	189450 <__alt_data_end+0xfff89450>
  189e74:	9cc00054 	ori	r19,r19,1
  189e78:	e005883a 	mov	r2,fp
  189e7c:	e4000007 	ldb	r16,0(fp)
  189e80:	003d7306 	br	189450 <__alt_data_end+0xfff89450>
  189e84:	d9002d17 	ldw	r4,180(sp)
  189e88:	d9402d17 	ldw	r5,180(sp)
  189e8c:	21000017 	ldw	r4,0(r4)
  189e90:	28c00104 	addi	r3,r5,4
  189e94:	d9002e15 	stw	r4,184(sp)
  189e98:	2003bd16 	blt	r4,zero,18ad90 <___vfprintf_internal_r+0x1ad8>
  189e9c:	d8c02d15 	stw	r3,180(sp)
  189ea0:	e005883a 	mov	r2,fp
  189ea4:	e4000007 	ldb	r16,0(fp)
  189ea8:	003d6906 	br	189450 <__alt_data_end+0xfff89450>
  189eac:	00c00ac4 	movi	r3,43
  189eb0:	d8c02b05 	stb	r3,172(sp)
  189eb4:	e005883a 	mov	r2,fp
  189eb8:	e4000007 	ldb	r16,0(fp)
  189ebc:	003d6406 	br	189450 <__alt_data_end+0xfff89450>
  189ec0:	d8c02d17 	ldw	r3,180(sp)
  189ec4:	d9002d17 	ldw	r4,180(sp)
  189ec8:	da002a17 	ldw	r8,168(sp)
  189ecc:	18c00017 	ldw	r3,0(r3)
  189ed0:	df002a15 	stw	fp,168(sp)
  189ed4:	d8002785 	stb	zero,158(sp)
  189ed8:	d8c03115 	stw	r3,196(sp)
  189edc:	9839883a 	mov	fp,r19
  189ee0:	24800104 	addi	r18,r4,4
  189ee4:	18041b26 	beq	r3,zero,18af54 <___vfprintf_internal_r+0x1c9c>
  189ee8:	d9003117 	ldw	r4,196(sp)
  189eec:	4803be16 	blt	r9,zero,18ade8 <___vfprintf_internal_r+0x1b30>
  189ef0:	480d883a 	mov	r6,r9
  189ef4:	000b883a 	mov	r5,zero
  189ef8:	da003f15 	stw	r8,252(sp)
  189efc:	da403e15 	stw	r9,248(sp)
  189f00:	018e9800 	call	18e980 <memchr>
  189f04:	da003f17 	ldw	r8,252(sp)
  189f08:	da403e17 	ldw	r9,248(sp)
  189f0c:	10045426 	beq	r2,zero,18b060 <___vfprintf_internal_r+0x1da8>
  189f10:	d8c03117 	ldw	r3,196(sp)
  189f14:	10e3c83a 	sub	r17,r2,r3
  189f18:	4c436a16 	blt	r9,r17,18acc4 <___vfprintf_internal_r+0x1a0c>
  189f1c:	8805883a 	mov	r2,r17
  189f20:	8803b616 	blt	r17,zero,18adfc <___vfprintf_internal_r+0x1b44>
  189f24:	dcc02783 	ldbu	r19,158(sp)
  189f28:	d8802b15 	stw	r2,172(sp)
  189f2c:	dc802d15 	stw	r18,180(sp)
  189f30:	d8003215 	stw	zero,200(sp)
  189f34:	d8003415 	stw	zero,208(sp)
  189f38:	003e3c06 	br	18982c <__alt_data_end+0xfff8982c>
  189f3c:	da002a17 	ldw	r8,168(sp)
  189f40:	df002a15 	stw	fp,168(sp)
  189f44:	9839883a 	mov	fp,r19
  189f48:	dcc02b03 	ldbu	r19,172(sp)
  189f4c:	010006b4 	movhi	r4,26
  189f50:	213d0a04 	addi	r4,r4,-3032
  189f54:	d9003b15 	stw	r4,236(sp)
  189f58:	dcc02785 	stb	r19,158(sp)
  189f5c:	e0c0080c 	andi	r3,fp,32
  189f60:	d8802d17 	ldw	r2,180(sp)
  189f64:	183f9a1e 	bne	r3,zero,189dd0 <__alt_data_end+0xfff89dd0>
  189f68:	e0c0040c 	andi	r3,fp,16
  189f6c:	1802c026 	beq	r3,zero,18aa70 <___vfprintf_internal_r+0x17b8>
  189f70:	d8c02d17 	ldw	r3,180(sp)
  189f74:	14800017 	ldw	r18,0(r2)
  189f78:	002b883a 	mov	r21,zero
  189f7c:	18c00104 	addi	r3,r3,4
  189f80:	d8c02d15 	stw	r3,180(sp)
  189f84:	003f9706 	br	189de4 <__alt_data_end+0xfff89de4>
  189f88:	9cc00814 	ori	r19,r19,32
  189f8c:	e005883a 	mov	r2,fp
  189f90:	e4000007 	ldb	r16,0(fp)
  189f94:	003d2e06 	br	189450 <__alt_data_end+0xfff89450>
  189f98:	da002a17 	ldw	r8,168(sp)
  189f9c:	df002a15 	stw	fp,168(sp)
  189fa0:	9839883a 	mov	fp,r19
  189fa4:	e080080c 	andi	r2,fp,32
  189fa8:	103f381e 	bne	r2,zero,189c8c <__alt_data_end+0xfff89c8c>
  189fac:	e080040c 	andi	r2,fp,16
  189fb0:	1002b726 	beq	r2,zero,18aa90 <___vfprintf_internal_r+0x17d8>
  189fb4:	d9402d17 	ldw	r5,180(sp)
  189fb8:	002b883a 	mov	r21,zero
  189fbc:	00800044 	movi	r2,1
  189fc0:	2c800017 	ldw	r18,0(r5)
  189fc4:	29400104 	addi	r5,r5,4
  189fc8:	d9402d15 	stw	r5,180(sp)
  189fcc:	9007883a 	mov	r3,r18
  189fd0:	003f2506 	br	189c68 <__alt_data_end+0xfff89c68>
  189fd4:	da002a17 	ldw	r8,168(sp)
  189fd8:	df002a15 	stw	fp,168(sp)
  189fdc:	9839883a 	mov	fp,r19
  189fe0:	e080080c 	andi	r2,fp,32
  189fe4:	103f191e 	bne	r2,zero,189c4c <__alt_data_end+0xfff89c4c>
  189fe8:	e080040c 	andi	r2,fp,16
  189fec:	1002bb26 	beq	r2,zero,18aadc <___vfprintf_internal_r+0x1824>
  189ff0:	d8802d17 	ldw	r2,180(sp)
  189ff4:	002b883a 	mov	r21,zero
  189ff8:	14800017 	ldw	r18,0(r2)
  189ffc:	10800104 	addi	r2,r2,4
  18a000:	d8802d15 	stw	r2,180(sp)
  18a004:	9007883a 	mov	r3,r18
  18a008:	0005883a 	mov	r2,zero
  18a00c:	003f1606 	br	189c68 <__alt_data_end+0xfff89c68>
  18a010:	da002a17 	ldw	r8,168(sp)
  18a014:	df002a15 	stw	fp,168(sp)
  18a018:	9839883a 	mov	fp,r19
  18a01c:	dcc02b03 	ldbu	r19,172(sp)
  18a020:	dcc02785 	stb	r19,158(sp)
  18a024:	803d9326 	beq	r16,zero,189674 <__alt_data_end+0xfff89674>
  18a028:	00c00044 	movi	r3,1
  18a02c:	d8c02b15 	stw	r3,172(sp)
  18a030:	dc001405 	stb	r16,80(sp)
  18a034:	d8002785 	stb	zero,158(sp)
  18a038:	003f8006 	br	189e3c <__alt_data_end+0xfff89e3c>
  18a03c:	d8c02017 	ldw	r3,128(sp)
  18a040:	003e3906 	br	189928 <__alt_data_end+0xfff89928>
  18a044:	10803fcc 	andi	r2,r2,255
  18a048:	00c00044 	movi	r3,1
  18a04c:	10fde01e 	bne	r2,r3,1897d0 <__alt_data_end+0xfff897d0>
  18a050:	a800021e 	bne	r21,zero,18a05c <___vfprintf_internal_r+0xda4>
  18a054:	00800244 	movi	r2,9
  18a058:	14801e2e 	bgeu	r2,r18,18a0d4 <___vfprintf_internal_r+0xe1c>
  18a05c:	dc002b15 	stw	r16,172(sp)
  18a060:	dc401e04 	addi	r17,sp,120
  18a064:	9021883a 	mov	r16,r18
  18a068:	da402c15 	stw	r9,176(sp)
  18a06c:	a825883a 	mov	r18,r21
  18a070:	402b883a 	mov	r21,r8
  18a074:	8009883a 	mov	r4,r16
  18a078:	900b883a 	mov	r5,r18
  18a07c:	01800284 	movi	r6,10
  18a080:	000f883a 	mov	r7,zero
  18a084:	01929cc0 	call	1929cc <__umoddi3>
  18a088:	10800c04 	addi	r2,r2,48
  18a08c:	8c7fffc4 	addi	r17,r17,-1
  18a090:	8009883a 	mov	r4,r16
  18a094:	900b883a 	mov	r5,r18
  18a098:	01800284 	movi	r6,10
  18a09c:	000f883a 	mov	r7,zero
  18a0a0:	88800005 	stb	r2,0(r17)
  18a0a4:	019238c0 	call	19238c <__udivdi3>
  18a0a8:	1021883a 	mov	r16,r2
  18a0ac:	10c4b03a 	or	r2,r2,r3
  18a0b0:	1825883a 	mov	r18,r3
  18a0b4:	103fef1e 	bne	r2,zero,18a074 <__alt_data_end+0xfff8a074>
  18a0b8:	d9002817 	ldw	r4,160(sp)
  18a0bc:	dc403115 	stw	r17,196(sp)
  18a0c0:	dc002b17 	ldw	r16,172(sp)
  18a0c4:	da402c17 	ldw	r9,176(sp)
  18a0c8:	a811883a 	mov	r8,r21
  18a0cc:	2463c83a 	sub	r17,r4,r17
  18a0d0:	003dd106 	br	189818 <__alt_data_end+0xfff89818>
  18a0d4:	94800c04 	addi	r18,r18,48
  18a0d8:	d8c01dc4 	addi	r3,sp,119
  18a0dc:	dc801dc5 	stb	r18,119(sp)
  18a0e0:	dc403c17 	ldw	r17,240(sp)
  18a0e4:	d8c03115 	stw	r3,196(sp)
  18a0e8:	003dcb06 	br	189818 <__alt_data_end+0xfff89818>
  18a0ec:	00801944 	movi	r2,101
  18a0f0:	1400720e 	bge	r2,r16,18a2bc <___vfprintf_internal_r+0x1004>
  18a0f4:	d9003717 	ldw	r4,220(sp)
  18a0f8:	d9403917 	ldw	r5,228(sp)
  18a0fc:	000d883a 	mov	r6,zero
  18a100:	000f883a 	mov	r7,zero
  18a104:	d8c03d15 	stw	r3,244(sp)
  18a108:	da003f15 	stw	r8,252(sp)
  18a10c:	01942040 	call	194204 <__eqdf2>
  18a110:	d8c03d17 	ldw	r3,244(sp)
  18a114:	da003f17 	ldw	r8,252(sp)
  18a118:	1000f41e 	bne	r2,zero,18a4ec <___vfprintf_internal_r+0x1234>
  18a11c:	d8801f17 	ldw	r2,124(sp)
  18a120:	010006b4 	movhi	r4,26
  18a124:	2136e804 	addi	r4,r4,-9312
  18a128:	18c00044 	addi	r3,r3,1
  18a12c:	10800044 	addi	r2,r2,1
  18a130:	41000015 	stw	r4,0(r8)
  18a134:	01000044 	movi	r4,1
  18a138:	41000115 	stw	r4,4(r8)
  18a13c:	d8c02015 	stw	r3,128(sp)
  18a140:	d8801f15 	stw	r2,124(sp)
  18a144:	010001c4 	movi	r4,7
  18a148:	20828d16 	blt	r4,r2,18ab80 <___vfprintf_internal_r+0x18c8>
  18a14c:	42000204 	addi	r8,r8,8
  18a150:	d8802617 	ldw	r2,152(sp)
  18a154:	d9403317 	ldw	r5,204(sp)
  18a158:	11400216 	blt	r2,r5,18a164 <___vfprintf_internal_r+0xeac>
  18a15c:	e080004c 	andi	r2,fp,1
  18a160:	103e4526 	beq	r2,zero,189a78 <__alt_data_end+0xfff89a78>
  18a164:	d8803817 	ldw	r2,224(sp)
  18a168:	d9003517 	ldw	r4,212(sp)
  18a16c:	d9403817 	ldw	r5,224(sp)
  18a170:	1887883a 	add	r3,r3,r2
  18a174:	d8801f17 	ldw	r2,124(sp)
  18a178:	41000015 	stw	r4,0(r8)
  18a17c:	41400115 	stw	r5,4(r8)
  18a180:	10800044 	addi	r2,r2,1
  18a184:	d8c02015 	stw	r3,128(sp)
  18a188:	d8801f15 	stw	r2,124(sp)
  18a18c:	010001c4 	movi	r4,7
  18a190:	20830916 	blt	r4,r2,18adb8 <___vfprintf_internal_r+0x1b00>
  18a194:	42000204 	addi	r8,r8,8
  18a198:	d8803317 	ldw	r2,204(sp)
  18a19c:	143fffc4 	addi	r16,r2,-1
  18a1a0:	043e350e 	bge	zero,r16,189a78 <__alt_data_end+0xfff89a78>
  18a1a4:	04400404 	movi	r17,16
  18a1a8:	d8801f17 	ldw	r2,124(sp)
  18a1ac:	8c007e0e 	bge	r17,r16,18a3a8 <___vfprintf_internal_r+0x10f0>
  18a1b0:	014006b4 	movhi	r5,26
  18a1b4:	297d10c4 	addi	r5,r5,-3005
  18a1b8:	d9402c15 	stw	r5,176(sp)
  18a1bc:	04c001c4 	movi	r19,7
  18a1c0:	00000306 	br	18a1d0 <___vfprintf_internal_r+0xf18>
  18a1c4:	42000204 	addi	r8,r8,8
  18a1c8:	843ffc04 	addi	r16,r16,-16
  18a1cc:	8c00790e 	bge	r17,r16,18a3b4 <___vfprintf_internal_r+0x10fc>
  18a1d0:	18c00404 	addi	r3,r3,16
  18a1d4:	10800044 	addi	r2,r2,1
  18a1d8:	45000015 	stw	r20,0(r8)
  18a1dc:	44400115 	stw	r17,4(r8)
  18a1e0:	d8c02015 	stw	r3,128(sp)
  18a1e4:	d8801f15 	stw	r2,124(sp)
  18a1e8:	98bff60e 	bge	r19,r2,18a1c4 <__alt_data_end+0xfff8a1c4>
  18a1ec:	b809883a 	mov	r4,r23
  18a1f0:	b00b883a 	mov	r5,r22
  18a1f4:	d9801e04 	addi	r6,sp,120
  18a1f8:	01906980 	call	190698 <__sprint_r>
  18a1fc:	103d231e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a200:	d8c02017 	ldw	r3,128(sp)
  18a204:	d8801f17 	ldw	r2,124(sp)
  18a208:	da000404 	addi	r8,sp,16
  18a20c:	003fee06 	br	18a1c8 <__alt_data_end+0xfff8a1c8>
  18a210:	d9402e17 	ldw	r5,184(sp)
  18a214:	d8802b17 	ldw	r2,172(sp)
  18a218:	28a7c83a 	sub	r19,r5,r2
  18a21c:	04fde00e 	bge	zero,r19,1899a0 <__alt_data_end+0xfff899a0>
  18a220:	05400404 	movi	r21,16
  18a224:	d8801f17 	ldw	r2,124(sp)
  18a228:	acc3870e 	bge	r21,r19,18b048 <___vfprintf_internal_r+0x1d90>
  18a22c:	014006b4 	movhi	r5,26
  18a230:	297d10c4 	addi	r5,r5,-3005
  18a234:	d9402c15 	stw	r5,176(sp)
  18a238:	048001c4 	movi	r18,7
  18a23c:	00000306 	br	18a24c <___vfprintf_internal_r+0xf94>
  18a240:	9cfffc04 	addi	r19,r19,-16
  18a244:	42000204 	addi	r8,r8,8
  18a248:	acc0110e 	bge	r21,r19,18a290 <___vfprintf_internal_r+0xfd8>
  18a24c:	18c00404 	addi	r3,r3,16
  18a250:	10800044 	addi	r2,r2,1
  18a254:	45000015 	stw	r20,0(r8)
  18a258:	45400115 	stw	r21,4(r8)
  18a25c:	d8c02015 	stw	r3,128(sp)
  18a260:	d8801f15 	stw	r2,124(sp)
  18a264:	90bff60e 	bge	r18,r2,18a240 <__alt_data_end+0xfff8a240>
  18a268:	b809883a 	mov	r4,r23
  18a26c:	b00b883a 	mov	r5,r22
  18a270:	d9801e04 	addi	r6,sp,120
  18a274:	01906980 	call	190698 <__sprint_r>
  18a278:	103d041e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a27c:	9cfffc04 	addi	r19,r19,-16
  18a280:	d8c02017 	ldw	r3,128(sp)
  18a284:	d8801f17 	ldw	r2,124(sp)
  18a288:	da000404 	addi	r8,sp,16
  18a28c:	acffef16 	blt	r21,r19,18a24c <__alt_data_end+0xfff8a24c>
  18a290:	d9002c17 	ldw	r4,176(sp)
  18a294:	1cc7883a 	add	r3,r3,r19
  18a298:	10800044 	addi	r2,r2,1
  18a29c:	41000015 	stw	r4,0(r8)
  18a2a0:	44c00115 	stw	r19,4(r8)
  18a2a4:	d8c02015 	stw	r3,128(sp)
  18a2a8:	d8801f15 	stw	r2,124(sp)
  18a2ac:	010001c4 	movi	r4,7
  18a2b0:	20817816 	blt	r4,r2,18a894 <___vfprintf_internal_r+0x15dc>
  18a2b4:	42000204 	addi	r8,r8,8
  18a2b8:	003db906 	br	1899a0 <__alt_data_end+0xfff899a0>
  18a2bc:	d9403317 	ldw	r5,204(sp)
  18a2c0:	00800044 	movi	r2,1
  18a2c4:	18c00044 	addi	r3,r3,1
  18a2c8:	11413e0e 	bge	r2,r5,18a7c4 <___vfprintf_internal_r+0x150c>
  18a2cc:	dc001f17 	ldw	r16,124(sp)
  18a2d0:	d8803117 	ldw	r2,196(sp)
  18a2d4:	d8c02015 	stw	r3,128(sp)
  18a2d8:	84000044 	addi	r16,r16,1
  18a2dc:	40800015 	stw	r2,0(r8)
  18a2e0:	00800044 	movi	r2,1
  18a2e4:	40800115 	stw	r2,4(r8)
  18a2e8:	dc001f15 	stw	r16,124(sp)
  18a2ec:	008001c4 	movi	r2,7
  18a2f0:	14015616 	blt	r2,r16,18a84c <___vfprintf_internal_r+0x1594>
  18a2f4:	42000204 	addi	r8,r8,8
  18a2f8:	d9003817 	ldw	r4,224(sp)
  18a2fc:	d9403517 	ldw	r5,212(sp)
  18a300:	84000044 	addi	r16,r16,1
  18a304:	1907883a 	add	r3,r3,r4
  18a308:	41400015 	stw	r5,0(r8)
  18a30c:	41000115 	stw	r4,4(r8)
  18a310:	d8c02015 	stw	r3,128(sp)
  18a314:	dc001f15 	stw	r16,124(sp)
  18a318:	008001c4 	movi	r2,7
  18a31c:	14015416 	blt	r2,r16,18a870 <___vfprintf_internal_r+0x15b8>
  18a320:	44400204 	addi	r17,r8,8
  18a324:	d9003717 	ldw	r4,220(sp)
  18a328:	d9403917 	ldw	r5,228(sp)
  18a32c:	000d883a 	mov	r6,zero
  18a330:	000f883a 	mov	r7,zero
  18a334:	d8c03d15 	stw	r3,244(sp)
  18a338:	01942040 	call	194204 <__eqdf2>
  18a33c:	d8c03d17 	ldw	r3,244(sp)
  18a340:	1000aa26 	beq	r2,zero,18a5ec <___vfprintf_internal_r+0x1334>
  18a344:	d9003317 	ldw	r4,204(sp)
  18a348:	d9403117 	ldw	r5,196(sp)
  18a34c:	84000044 	addi	r16,r16,1
  18a350:	20bfffc4 	addi	r2,r4,-1
  18a354:	1887883a 	add	r3,r3,r2
  18a358:	29000044 	addi	r4,r5,1
  18a35c:	88800115 	stw	r2,4(r17)
  18a360:	89000015 	stw	r4,0(r17)
  18a364:	d8c02015 	stw	r3,128(sp)
  18a368:	dc001f15 	stw	r16,124(sp)
  18a36c:	008001c4 	movi	r2,7
  18a370:	14012d16 	blt	r2,r16,18a828 <___vfprintf_internal_r+0x1570>
  18a374:	8c400204 	addi	r17,r17,8
  18a378:	d9403a17 	ldw	r5,232(sp)
  18a37c:	dcc022c4 	addi	r19,sp,139
  18a380:	84000044 	addi	r16,r16,1
  18a384:	1947883a 	add	r3,r3,r5
  18a388:	8cc00015 	stw	r19,0(r17)
  18a38c:	89400115 	stw	r5,4(r17)
  18a390:	d8c02015 	stw	r3,128(sp)
  18a394:	dc001f15 	stw	r16,124(sp)
  18a398:	008001c4 	movi	r2,7
  18a39c:	14000e16 	blt	r2,r16,18a3d8 <___vfprintf_internal_r+0x1120>
  18a3a0:	8a000204 	addi	r8,r17,8
  18a3a4:	003db406 	br	189a78 <__alt_data_end+0xfff89a78>
  18a3a8:	010006b4 	movhi	r4,26
  18a3ac:	213d10c4 	addi	r4,r4,-3005
  18a3b0:	d9002c15 	stw	r4,176(sp)
  18a3b4:	d9002c17 	ldw	r4,176(sp)
  18a3b8:	1c07883a 	add	r3,r3,r16
  18a3bc:	44000115 	stw	r16,4(r8)
  18a3c0:	41000015 	stw	r4,0(r8)
  18a3c4:	10800044 	addi	r2,r2,1
  18a3c8:	d8c02015 	stw	r3,128(sp)
  18a3cc:	d8801f15 	stw	r2,124(sp)
  18a3d0:	010001c4 	movi	r4,7
  18a3d4:	20bda70e 	bge	r4,r2,189a74 <__alt_data_end+0xfff89a74>
  18a3d8:	b809883a 	mov	r4,r23
  18a3dc:	b00b883a 	mov	r5,r22
  18a3e0:	d9801e04 	addi	r6,sp,120
  18a3e4:	01906980 	call	190698 <__sprint_r>
  18a3e8:	103ca81e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a3ec:	d8c02017 	ldw	r3,128(sp)
  18a3f0:	da000404 	addi	r8,sp,16
  18a3f4:	003da006 	br	189a78 <__alt_data_end+0xfff89a78>
  18a3f8:	b809883a 	mov	r4,r23
  18a3fc:	b00b883a 	mov	r5,r22
  18a400:	d9801e04 	addi	r6,sp,120
  18a404:	01906980 	call	190698 <__sprint_r>
  18a408:	103dd626 	beq	r2,zero,189b64 <__alt_data_end+0xfff89b64>
  18a40c:	003c9f06 	br	18968c <__alt_data_end+0xfff8968c>
  18a410:	10803fcc 	andi	r2,r2,255
  18a414:	1000201e 	bne	r2,zero,18a498 <___vfprintf_internal_r+0x11e0>
  18a418:	e080004c 	andi	r2,fp,1
  18a41c:	10001e26 	beq	r2,zero,18a498 <___vfprintf_internal_r+0x11e0>
  18a420:	00800c04 	movi	r2,48
  18a424:	d8c01dc4 	addi	r3,sp,119
  18a428:	d8801dc5 	stb	r2,119(sp)
  18a42c:	dc403c17 	ldw	r17,240(sp)
  18a430:	d8c03115 	stw	r3,196(sp)
  18a434:	003cf806 	br	189818 <__alt_data_end+0xfff89818>
  18a438:	b809883a 	mov	r4,r23
  18a43c:	b00b883a 	mov	r5,r22
  18a440:	d9801e04 	addi	r6,sp,120
  18a444:	01906980 	call	190698 <__sprint_r>
  18a448:	103c901e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a44c:	d8c02017 	ldw	r3,128(sp)
  18a450:	da000404 	addi	r8,sp,16
  18a454:	003d7b06 	br	189a44 <__alt_data_end+0xfff89a44>
  18a458:	b809883a 	mov	r4,r23
  18a45c:	b00b883a 	mov	r5,r22
  18a460:	d9801e04 	addi	r6,sp,120
  18a464:	01906980 	call	190698 <__sprint_r>
  18a468:	103c881e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a46c:	d8c02017 	ldw	r3,128(sp)
  18a470:	da000404 	addi	r8,sp,16
  18a474:	003d3906 	br	18995c <__alt_data_end+0xfff8995c>
  18a478:	b809883a 	mov	r4,r23
  18a47c:	b00b883a 	mov	r5,r22
  18a480:	d9801e04 	addi	r6,sp,120
  18a484:	01906980 	call	190698 <__sprint_r>
  18a488:	103c801e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a48c:	d8c02017 	ldw	r3,128(sp)
  18a490:	da000404 	addi	r8,sp,16
  18a494:	003d3f06 	br	189994 <__alt_data_end+0xfff89994>
  18a498:	d8c01e04 	addi	r3,sp,120
  18a49c:	0023883a 	mov	r17,zero
  18a4a0:	d8c03115 	stw	r3,196(sp)
  18a4a4:	003cdc06 	br	189818 <__alt_data_end+0xfff89818>
  18a4a8:	d9403b17 	ldw	r5,236(sp)
  18a4ac:	d8c01e04 	addi	r3,sp,120
  18a4b0:	908003cc 	andi	r2,r18,15
  18a4b4:	a808973a 	slli	r4,r21,28
  18a4b8:	2885883a 	add	r2,r5,r2
  18a4bc:	9024d13a 	srli	r18,r18,4
  18a4c0:	10800003 	ldbu	r2,0(r2)
  18a4c4:	a82ad13a 	srli	r21,r21,4
  18a4c8:	18ffffc4 	addi	r3,r3,-1
  18a4cc:	24a4b03a 	or	r18,r4,r18
  18a4d0:	18800005 	stb	r2,0(r3)
  18a4d4:	9544b03a 	or	r2,r18,r21
  18a4d8:	103ff51e 	bne	r2,zero,18a4b0 <__alt_data_end+0xfff8a4b0>
  18a4dc:	d9402817 	ldw	r5,160(sp)
  18a4e0:	d8c03115 	stw	r3,196(sp)
  18a4e4:	28e3c83a 	sub	r17,r5,r3
  18a4e8:	003ccb06 	br	189818 <__alt_data_end+0xfff89818>
  18a4ec:	dc002617 	ldw	r16,152(sp)
  18a4f0:	0401ab0e 	bge	zero,r16,18aba0 <___vfprintf_internal_r+0x18e8>
  18a4f4:	d8803317 	ldw	r2,204(sp)
  18a4f8:	d9403117 	ldw	r5,196(sp)
  18a4fc:	d9003417 	ldw	r4,208(sp)
  18a500:	1023883a 	mov	r17,r2
  18a504:	28a1883a 	add	r16,r5,r2
  18a508:	2080010e 	bge	r4,r2,18a510 <___vfprintf_internal_r+0x1258>
  18a50c:	2023883a 	mov	r17,r4
  18a510:	04400b0e 	bge	zero,r17,18a540 <___vfprintf_internal_r+0x1288>
  18a514:	d8801f17 	ldw	r2,124(sp)
  18a518:	d9403117 	ldw	r5,196(sp)
  18a51c:	1c47883a 	add	r3,r3,r17
  18a520:	10800044 	addi	r2,r2,1
  18a524:	41400015 	stw	r5,0(r8)
  18a528:	44400115 	stw	r17,4(r8)
  18a52c:	d8c02015 	stw	r3,128(sp)
  18a530:	d8801f15 	stw	r2,124(sp)
  18a534:	010001c4 	movi	r4,7
  18a538:	20826716 	blt	r4,r2,18aed8 <___vfprintf_internal_r+0x1c20>
  18a53c:	42000204 	addi	r8,r8,8
  18a540:	88026316 	blt	r17,zero,18aed0 <___vfprintf_internal_r+0x1c18>
  18a544:	d8803417 	ldw	r2,208(sp)
  18a548:	1463c83a 	sub	r17,r2,r17
  18a54c:	0440590e 	bge	zero,r17,18a6b4 <___vfprintf_internal_r+0x13fc>
  18a550:	04c00404 	movi	r19,16
  18a554:	d8801f17 	ldw	r2,124(sp)
  18a558:	9c41770e 	bge	r19,r17,18ab38 <___vfprintf_internal_r+0x1880>
  18a55c:	014006b4 	movhi	r5,26
  18a560:	297d10c4 	addi	r5,r5,-3005
  18a564:	d9402c15 	stw	r5,176(sp)
  18a568:	054001c4 	movi	r21,7
  18a56c:	00000306 	br	18a57c <___vfprintf_internal_r+0x12c4>
  18a570:	42000204 	addi	r8,r8,8
  18a574:	8c7ffc04 	addi	r17,r17,-16
  18a578:	9c41720e 	bge	r19,r17,18ab44 <___vfprintf_internal_r+0x188c>
  18a57c:	18c00404 	addi	r3,r3,16
  18a580:	10800044 	addi	r2,r2,1
  18a584:	45000015 	stw	r20,0(r8)
  18a588:	44c00115 	stw	r19,4(r8)
  18a58c:	d8c02015 	stw	r3,128(sp)
  18a590:	d8801f15 	stw	r2,124(sp)
  18a594:	a8bff60e 	bge	r21,r2,18a570 <__alt_data_end+0xfff8a570>
  18a598:	b809883a 	mov	r4,r23
  18a59c:	b00b883a 	mov	r5,r22
  18a5a0:	d9801e04 	addi	r6,sp,120
  18a5a4:	01906980 	call	190698 <__sprint_r>
  18a5a8:	103c381e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a5ac:	d8c02017 	ldw	r3,128(sp)
  18a5b0:	d8801f17 	ldw	r2,124(sp)
  18a5b4:	da000404 	addi	r8,sp,16
  18a5b8:	003fee06 	br	18a574 <__alt_data_end+0xfff8a574>
  18a5bc:	b809883a 	mov	r4,r23
  18a5c0:	b00b883a 	mov	r5,r22
  18a5c4:	d9801e04 	addi	r6,sp,120
  18a5c8:	01906980 	call	190698 <__sprint_r>
  18a5cc:	103c2f1e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a5d0:	d8c02017 	ldw	r3,128(sp)
  18a5d4:	d8802787 	ldb	r2,158(sp)
  18a5d8:	da000404 	addi	r8,sp,16
  18a5dc:	003cd206 	br	189928 <__alt_data_end+0xfff89928>
  18a5e0:	00800084 	movi	r2,2
  18a5e4:	9546b03a 	or	r3,r18,r21
  18a5e8:	003d9f06 	br	189c68 <__alt_data_end+0xfff89c68>
  18a5ec:	d8803317 	ldw	r2,204(sp)
  18a5f0:	14ffffc4 	addi	r19,r2,-1
  18a5f4:	04ff600e 	bge	zero,r19,18a378 <__alt_data_end+0xfff8a378>
  18a5f8:	05400404 	movi	r21,16
  18a5fc:	acc07e0e 	bge	r21,r19,18a7f8 <___vfprintf_internal_r+0x1540>
  18a600:	014006b4 	movhi	r5,26
  18a604:	297d10c4 	addi	r5,r5,-3005
  18a608:	d9402c15 	stw	r5,176(sp)
  18a60c:	01c001c4 	movi	r7,7
  18a610:	00000306 	br	18a620 <___vfprintf_internal_r+0x1368>
  18a614:	8c400204 	addi	r17,r17,8
  18a618:	9cfffc04 	addi	r19,r19,-16
  18a61c:	acc0790e 	bge	r21,r19,18a804 <___vfprintf_internal_r+0x154c>
  18a620:	18c00404 	addi	r3,r3,16
  18a624:	84000044 	addi	r16,r16,1
  18a628:	8d000015 	stw	r20,0(r17)
  18a62c:	8d400115 	stw	r21,4(r17)
  18a630:	d8c02015 	stw	r3,128(sp)
  18a634:	dc001f15 	stw	r16,124(sp)
  18a638:	3c3ff60e 	bge	r7,r16,18a614 <__alt_data_end+0xfff8a614>
  18a63c:	b809883a 	mov	r4,r23
  18a640:	b00b883a 	mov	r5,r22
  18a644:	d9801e04 	addi	r6,sp,120
  18a648:	d9c03d15 	stw	r7,244(sp)
  18a64c:	01906980 	call	190698 <__sprint_r>
  18a650:	d9c03d17 	ldw	r7,244(sp)
  18a654:	103c0d1e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a658:	d8c02017 	ldw	r3,128(sp)
  18a65c:	dc001f17 	ldw	r16,124(sp)
  18a660:	dc400404 	addi	r17,sp,16
  18a664:	003fec06 	br	18a618 <__alt_data_end+0xfff8a618>
  18a668:	10803fcc 	andi	r2,r2,255
  18a66c:	1080201c 	xori	r2,r2,128
  18a670:	10bfe004 	addi	r2,r2,-128
  18a674:	01000c04 	movi	r4,48
  18a678:	1101d726 	beq	r2,r4,18add8 <___vfprintf_internal_r+0x1b20>
  18a67c:	d9403117 	ldw	r5,196(sp)
  18a680:	d8802817 	ldw	r2,160(sp)
  18a684:	193fffc5 	stb	r4,-1(r3)
  18a688:	297fffc4 	addi	r5,r5,-1
  18a68c:	d9403115 	stw	r5,196(sp)
  18a690:	1163c83a 	sub	r17,r2,r5
  18a694:	003c6006 	br	189818 <__alt_data_end+0xfff89818>
  18a698:	b809883a 	mov	r4,r23
  18a69c:	b00b883a 	mov	r5,r22
  18a6a0:	d9801e04 	addi	r6,sp,120
  18a6a4:	01906980 	call	190698 <__sprint_r>
  18a6a8:	103bf81e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a6ac:	d8c02017 	ldw	r3,128(sp)
  18a6b0:	da000404 	addi	r8,sp,16
  18a6b4:	d9403117 	ldw	r5,196(sp)
  18a6b8:	d9003417 	ldw	r4,208(sp)
  18a6bc:	d8802617 	ldw	r2,152(sp)
  18a6c0:	2923883a 	add	r17,r5,r4
  18a6c4:	d9403317 	ldw	r5,204(sp)
  18a6c8:	11400216 	blt	r2,r5,18a6d4 <___vfprintf_internal_r+0x141c>
  18a6cc:	e100004c 	andi	r4,fp,1
  18a6d0:	20000d26 	beq	r4,zero,18a708 <___vfprintf_internal_r+0x1450>
  18a6d4:	d9003817 	ldw	r4,224(sp)
  18a6d8:	d9403517 	ldw	r5,212(sp)
  18a6dc:	1907883a 	add	r3,r3,r4
  18a6e0:	d9001f17 	ldw	r4,124(sp)
  18a6e4:	41400015 	stw	r5,0(r8)
  18a6e8:	d9403817 	ldw	r5,224(sp)
  18a6ec:	21000044 	addi	r4,r4,1
  18a6f0:	d8c02015 	stw	r3,128(sp)
  18a6f4:	41400115 	stw	r5,4(r8)
  18a6f8:	d9001f15 	stw	r4,124(sp)
  18a6fc:	014001c4 	movi	r5,7
  18a700:	2901fd16 	blt	r5,r4,18aef8 <___vfprintf_internal_r+0x1c40>
  18a704:	42000204 	addi	r8,r8,8
  18a708:	d9003317 	ldw	r4,204(sp)
  18a70c:	2085c83a 	sub	r2,r4,r2
  18a710:	8449c83a 	sub	r4,r16,r17
  18a714:	1021883a 	mov	r16,r2
  18a718:	2080010e 	bge	r4,r2,18a720 <___vfprintf_internal_r+0x1468>
  18a71c:	2021883a 	mov	r16,r4
  18a720:	04000a0e 	bge	zero,r16,18a74c <___vfprintf_internal_r+0x1494>
  18a724:	d9001f17 	ldw	r4,124(sp)
  18a728:	1c07883a 	add	r3,r3,r16
  18a72c:	44400015 	stw	r17,0(r8)
  18a730:	21000044 	addi	r4,r4,1
  18a734:	44000115 	stw	r16,4(r8)
  18a738:	d8c02015 	stw	r3,128(sp)
  18a73c:	d9001f15 	stw	r4,124(sp)
  18a740:	014001c4 	movi	r5,7
  18a744:	29021816 	blt	r5,r4,18afa8 <___vfprintf_internal_r+0x1cf0>
  18a748:	42000204 	addi	r8,r8,8
  18a74c:	80021016 	blt	r16,zero,18af90 <___vfprintf_internal_r+0x1cd8>
  18a750:	1421c83a 	sub	r16,r2,r16
  18a754:	043cc80e 	bge	zero,r16,189a78 <__alt_data_end+0xfff89a78>
  18a758:	04400404 	movi	r17,16
  18a75c:	d8801f17 	ldw	r2,124(sp)
  18a760:	8c3f110e 	bge	r17,r16,18a3a8 <__alt_data_end+0xfff8a3a8>
  18a764:	014006b4 	movhi	r5,26
  18a768:	297d10c4 	addi	r5,r5,-3005
  18a76c:	d9402c15 	stw	r5,176(sp)
  18a770:	04c001c4 	movi	r19,7
  18a774:	00000306 	br	18a784 <___vfprintf_internal_r+0x14cc>
  18a778:	42000204 	addi	r8,r8,8
  18a77c:	843ffc04 	addi	r16,r16,-16
  18a780:	8c3f0c0e 	bge	r17,r16,18a3b4 <__alt_data_end+0xfff8a3b4>
  18a784:	18c00404 	addi	r3,r3,16
  18a788:	10800044 	addi	r2,r2,1
  18a78c:	45000015 	stw	r20,0(r8)
  18a790:	44400115 	stw	r17,4(r8)
  18a794:	d8c02015 	stw	r3,128(sp)
  18a798:	d8801f15 	stw	r2,124(sp)
  18a79c:	98bff60e 	bge	r19,r2,18a778 <__alt_data_end+0xfff8a778>
  18a7a0:	b809883a 	mov	r4,r23
  18a7a4:	b00b883a 	mov	r5,r22
  18a7a8:	d9801e04 	addi	r6,sp,120
  18a7ac:	01906980 	call	190698 <__sprint_r>
  18a7b0:	103bb61e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a7b4:	d8c02017 	ldw	r3,128(sp)
  18a7b8:	d8801f17 	ldw	r2,124(sp)
  18a7bc:	da000404 	addi	r8,sp,16
  18a7c0:	003fee06 	br	18a77c <__alt_data_end+0xfff8a77c>
  18a7c4:	e088703a 	and	r4,fp,r2
  18a7c8:	203ec01e 	bne	r4,zero,18a2cc <__alt_data_end+0xfff8a2cc>
  18a7cc:	dc001f17 	ldw	r16,124(sp)
  18a7d0:	d9003117 	ldw	r4,196(sp)
  18a7d4:	40800115 	stw	r2,4(r8)
  18a7d8:	84000044 	addi	r16,r16,1
  18a7dc:	41000015 	stw	r4,0(r8)
  18a7e0:	d8c02015 	stw	r3,128(sp)
  18a7e4:	dc001f15 	stw	r16,124(sp)
  18a7e8:	008001c4 	movi	r2,7
  18a7ec:	14000e16 	blt	r2,r16,18a828 <___vfprintf_internal_r+0x1570>
  18a7f0:	44400204 	addi	r17,r8,8
  18a7f4:	003ee006 	br	18a378 <__alt_data_end+0xfff8a378>
  18a7f8:	010006b4 	movhi	r4,26
  18a7fc:	213d10c4 	addi	r4,r4,-3005
  18a800:	d9002c15 	stw	r4,176(sp)
  18a804:	d8802c17 	ldw	r2,176(sp)
  18a808:	1cc7883a 	add	r3,r3,r19
  18a80c:	84000044 	addi	r16,r16,1
  18a810:	88800015 	stw	r2,0(r17)
  18a814:	8cc00115 	stw	r19,4(r17)
  18a818:	d8c02015 	stw	r3,128(sp)
  18a81c:	dc001f15 	stw	r16,124(sp)
  18a820:	008001c4 	movi	r2,7
  18a824:	143ed30e 	bge	r2,r16,18a374 <__alt_data_end+0xfff8a374>
  18a828:	b809883a 	mov	r4,r23
  18a82c:	b00b883a 	mov	r5,r22
  18a830:	d9801e04 	addi	r6,sp,120
  18a834:	01906980 	call	190698 <__sprint_r>
  18a838:	103b941e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a83c:	d8c02017 	ldw	r3,128(sp)
  18a840:	dc001f17 	ldw	r16,124(sp)
  18a844:	dc400404 	addi	r17,sp,16
  18a848:	003ecb06 	br	18a378 <__alt_data_end+0xfff8a378>
  18a84c:	b809883a 	mov	r4,r23
  18a850:	b00b883a 	mov	r5,r22
  18a854:	d9801e04 	addi	r6,sp,120
  18a858:	01906980 	call	190698 <__sprint_r>
  18a85c:	103b8b1e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a860:	d8c02017 	ldw	r3,128(sp)
  18a864:	dc001f17 	ldw	r16,124(sp)
  18a868:	da000404 	addi	r8,sp,16
  18a86c:	003ea206 	br	18a2f8 <__alt_data_end+0xfff8a2f8>
  18a870:	b809883a 	mov	r4,r23
  18a874:	b00b883a 	mov	r5,r22
  18a878:	d9801e04 	addi	r6,sp,120
  18a87c:	01906980 	call	190698 <__sprint_r>
  18a880:	103b821e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a884:	d8c02017 	ldw	r3,128(sp)
  18a888:	dc001f17 	ldw	r16,124(sp)
  18a88c:	dc400404 	addi	r17,sp,16
  18a890:	003ea406 	br	18a324 <__alt_data_end+0xfff8a324>
  18a894:	b809883a 	mov	r4,r23
  18a898:	b00b883a 	mov	r5,r22
  18a89c:	d9801e04 	addi	r6,sp,120
  18a8a0:	01906980 	call	190698 <__sprint_r>
  18a8a4:	103b791e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18a8a8:	d8c02017 	ldw	r3,128(sp)
  18a8ac:	da000404 	addi	r8,sp,16
  18a8b0:	003c3b06 	br	1899a0 <__alt_data_end+0xfff899a0>
  18a8b4:	04a5c83a 	sub	r18,zero,r18
  18a8b8:	9004c03a 	cmpne	r2,r18,zero
  18a8bc:	056bc83a 	sub	r21,zero,r21
  18a8c0:	a8abc83a 	sub	r21,r21,r2
  18a8c4:	04c00b44 	movi	r19,45
  18a8c8:	dcc02785 	stb	r19,158(sp)
  18a8cc:	da403215 	stw	r9,200(sp)
  18a8d0:	00800044 	movi	r2,1
  18a8d4:	9546b03a 	or	r3,r18,r21
  18a8d8:	003bb506 	br	1897b0 <__alt_data_end+0xfff897b0>
  18a8dc:	da003f15 	stw	r8,252(sp)
  18a8e0:	da403e15 	stw	r9,248(sp)
  18a8e4:	01902f40 	call	1902f4 <__fpclassifyd>
  18a8e8:	da003f17 	ldw	r8,252(sp)
  18a8ec:	da403e17 	ldw	r9,248(sp)
  18a8f0:	1000e526 	beq	r2,zero,18ac88 <___vfprintf_internal_r+0x19d0>
  18a8f4:	04fff7c4 	movi	r19,-33
  18a8f8:	00bfffc4 	movi	r2,-1
  18a8fc:	84e6703a 	and	r19,r16,r19
  18a900:	48822526 	beq	r9,r2,18b198 <___vfprintf_internal_r+0x1ee0>
  18a904:	008011c4 	movi	r2,71
  18a908:	98821626 	beq	r19,r2,18b164 <___vfprintf_internal_r+0x1eac>
  18a90c:	d9003917 	ldw	r4,228(sp)
  18a910:	e0c04014 	ori	r3,fp,256
  18a914:	d8c02d15 	stw	r3,180(sp)
  18a918:	20022116 	blt	r4,zero,18b1a0 <___vfprintf_internal_r+0x1ee8>
  18a91c:	dc403917 	ldw	r17,228(sp)
  18a920:	d8002b05 	stb	zero,172(sp)
  18a924:	00801984 	movi	r2,102
  18a928:	80814d26 	beq	r16,r2,18ae60 <___vfprintf_internal_r+0x1ba8>
  18a92c:	00801184 	movi	r2,70
  18a930:	80814b26 	beq	r16,r2,18ae60 <___vfprintf_internal_r+0x1ba8>
  18a934:	00801144 	movi	r2,69
  18a938:	98822626 	beq	r19,r2,18b1d4 <___vfprintf_internal_r+0x1f1c>
  18a93c:	482b883a 	mov	r21,r9
  18a940:	d8802604 	addi	r2,sp,152
  18a944:	d8800115 	stw	r2,4(sp)
  18a948:	d9403717 	ldw	r5,220(sp)
  18a94c:	d8802504 	addi	r2,sp,148
  18a950:	d8800215 	stw	r2,8(sp)
  18a954:	d8802104 	addi	r2,sp,132
  18a958:	dd400015 	stw	r21,0(sp)
  18a95c:	d8800315 	stw	r2,12(sp)
  18a960:	b809883a 	mov	r4,r23
  18a964:	880d883a 	mov	r6,r17
  18a968:	01c00084 	movi	r7,2
  18a96c:	da003f15 	stw	r8,252(sp)
  18a970:	da403e15 	stw	r9,248(sp)
  18a974:	018b76c0 	call	18b76c <_dtoa_r>
  18a978:	d8803115 	stw	r2,196(sp)
  18a97c:	008019c4 	movi	r2,103
  18a980:	da003f17 	ldw	r8,252(sp)
  18a984:	da403e17 	ldw	r9,248(sp)
  18a988:	80800226 	beq	r16,r2,18a994 <___vfprintf_internal_r+0x16dc>
  18a98c:	008011c4 	movi	r2,71
  18a990:	8081451e 	bne	r16,r2,18aea8 <___vfprintf_internal_r+0x1bf0>
  18a994:	e080004c 	andi	r2,fp,1
  18a998:	10021e26 	beq	r2,zero,18b214 <___vfprintf_internal_r+0x1f5c>
  18a99c:	d8c03117 	ldw	r3,196(sp)
  18a9a0:	1d55883a 	add	r10,r3,r21
  18a9a4:	d9003717 	ldw	r4,220(sp)
  18a9a8:	880b883a 	mov	r5,r17
  18a9ac:	000d883a 	mov	r6,zero
  18a9b0:	000f883a 	mov	r7,zero
  18a9b4:	da003f15 	stw	r8,252(sp)
  18a9b8:	da403e15 	stw	r9,248(sp)
  18a9bc:	da803d15 	stw	r10,244(sp)
  18a9c0:	01942040 	call	194204 <__eqdf2>
  18a9c4:	da003f17 	ldw	r8,252(sp)
  18a9c8:	da403e17 	ldw	r9,248(sp)
  18a9cc:	da803d17 	ldw	r10,244(sp)
  18a9d0:	1001a126 	beq	r2,zero,18b058 <___vfprintf_internal_r+0x1da0>
  18a9d4:	d8802117 	ldw	r2,132(sp)
  18a9d8:	1280062e 	bgeu	r2,r10,18a9f4 <___vfprintf_internal_r+0x173c>
  18a9dc:	01000c04 	movi	r4,48
  18a9e0:	10c00044 	addi	r3,r2,1
  18a9e4:	d8c02115 	stw	r3,132(sp)
  18a9e8:	11000005 	stb	r4,0(r2)
  18a9ec:	d8802117 	ldw	r2,132(sp)
  18a9f0:	12bffb36 	bltu	r2,r10,18a9e0 <__alt_data_end+0xfff8a9e0>
  18a9f4:	d8c03117 	ldw	r3,196(sp)
  18a9f8:	10c5c83a 	sub	r2,r2,r3
  18a9fc:	d8803315 	stw	r2,204(sp)
  18aa00:	008011c4 	movi	r2,71
  18aa04:	98817f26 	beq	r19,r2,18b004 <___vfprintf_internal_r+0x1d4c>
  18aa08:	00801944 	movi	r2,101
  18aa0c:	14023e0e 	bge	r2,r16,18b308 <___vfprintf_internal_r+0x2050>
  18aa10:	d8c02617 	ldw	r3,152(sp)
  18aa14:	00801984 	movi	r2,102
  18aa18:	d8c03415 	stw	r3,208(sp)
  18aa1c:	8081f326 	beq	r16,r2,18b1ec <___vfprintf_internal_r+0x1f34>
  18aa20:	d8c03417 	ldw	r3,208(sp)
  18aa24:	d9003317 	ldw	r4,204(sp)
  18aa28:	1901e116 	blt	r3,r4,18b1b0 <___vfprintf_internal_r+0x1ef8>
  18aa2c:	e080004c 	andi	r2,fp,1
  18aa30:	1001ea26 	beq	r2,zero,18b1dc <___vfprintf_internal_r+0x1f24>
  18aa34:	d8c03417 	ldw	r3,208(sp)
  18aa38:	1c400044 	addi	r17,r3,1
  18aa3c:	8839883a 	mov	fp,r17
  18aa40:	8801e216 	blt	r17,zero,18b1cc <___vfprintf_internal_r+0x1f14>
  18aa44:	dd402b07 	ldb	r21,172(sp)
  18aa48:	a801661e 	bne	r21,zero,18afe4 <___vfprintf_internal_r+0x1d2c>
  18aa4c:	df002b15 	stw	fp,172(sp)
  18aa50:	dcc02783 	ldbu	r19,158(sp)
  18aa54:	df002d17 	ldw	fp,180(sp)
  18aa58:	d8003215 	stw	zero,200(sp)
  18aa5c:	dc802d15 	stw	r18,180(sp)
  18aa60:	003b7206 	br	18982c <__alt_data_end+0xfff8982c>
  18aa64:	e4000007 	ldb	r16,0(fp)
  18aa68:	e005883a 	mov	r2,fp
  18aa6c:	003a7806 	br	189450 <__alt_data_end+0xfff89450>
  18aa70:	e0c0100c 	andi	r3,fp,64
  18aa74:	1800b326 	beq	r3,zero,18ad44 <___vfprintf_internal_r+0x1a8c>
  18aa78:	d9002d17 	ldw	r4,180(sp)
  18aa7c:	1480000b 	ldhu	r18,0(r2)
  18aa80:	002b883a 	mov	r21,zero
  18aa84:	21000104 	addi	r4,r4,4
  18aa88:	d9002d15 	stw	r4,180(sp)
  18aa8c:	003cd506 	br	189de4 <__alt_data_end+0xfff89de4>
  18aa90:	e080100c 	andi	r2,fp,64
  18aa94:	1000a326 	beq	r2,zero,18ad24 <___vfprintf_internal_r+0x1a6c>
  18aa98:	d8802d17 	ldw	r2,180(sp)
  18aa9c:	002b883a 	mov	r21,zero
  18aaa0:	1480000b 	ldhu	r18,0(r2)
  18aaa4:	10800104 	addi	r2,r2,4
  18aaa8:	d8802d15 	stw	r2,180(sp)
  18aaac:	9007883a 	mov	r3,r18
  18aab0:	00800044 	movi	r2,1
  18aab4:	003c6c06 	br	189c68 <__alt_data_end+0xfff89c68>
  18aab8:	e080100c 	andi	r2,fp,64
  18aabc:	10009226 	beq	r2,zero,18ad08 <___vfprintf_internal_r+0x1a50>
  18aac0:	1c80000f 	ldh	r18,0(r3)
  18aac4:	d8802d17 	ldw	r2,180(sp)
  18aac8:	902bd7fa 	srai	r21,r18,31
  18aacc:	10800104 	addi	r2,r2,4
  18aad0:	d8802d15 	stw	r2,180(sp)
  18aad4:	a805883a 	mov	r2,r21
  18aad8:	003b3006 	br	18979c <__alt_data_end+0xfff8979c>
  18aadc:	e080100c 	andi	r2,fp,64
  18aae0:	10008126 	beq	r2,zero,18ace8 <___vfprintf_internal_r+0x1a30>
  18aae4:	d8c02d17 	ldw	r3,180(sp)
  18aae8:	002b883a 	mov	r21,zero
  18aaec:	0005883a 	mov	r2,zero
  18aaf0:	1c80000b 	ldhu	r18,0(r3)
  18aaf4:	18c00104 	addi	r3,r3,4
  18aaf8:	d8c02d15 	stw	r3,180(sp)
  18aafc:	9007883a 	mov	r3,r18
  18ab00:	003c5906 	br	189c68 <__alt_data_end+0xfff89c68>
  18ab04:	e080040c 	andi	r2,fp,16
  18ab08:	1000701e 	bne	r2,zero,18accc <___vfprintf_internal_r+0x1a14>
  18ab0c:	e080100c 	andi	r2,fp,64
  18ab10:	10014626 	beq	r2,zero,18b02c <___vfprintf_internal_r+0x1d74>
  18ab14:	d9002d17 	ldw	r4,180(sp)
  18ab18:	d9402f17 	ldw	r5,188(sp)
  18ab1c:	20800017 	ldw	r2,0(r4)
  18ab20:	21000104 	addi	r4,r4,4
  18ab24:	d9002d15 	stw	r4,180(sp)
  18ab28:	1140000d 	sth	r5,0(r2)
  18ab2c:	003a1d06 	br	1893a4 <__alt_data_end+0xfff893a4>
  18ab30:	00800084 	movi	r2,2
  18ab34:	003c4c06 	br	189c68 <__alt_data_end+0xfff89c68>
  18ab38:	010006b4 	movhi	r4,26
  18ab3c:	213d10c4 	addi	r4,r4,-3005
  18ab40:	d9002c15 	stw	r4,176(sp)
  18ab44:	d9002c17 	ldw	r4,176(sp)
  18ab48:	1c47883a 	add	r3,r3,r17
  18ab4c:	10800044 	addi	r2,r2,1
  18ab50:	41000015 	stw	r4,0(r8)
  18ab54:	44400115 	stw	r17,4(r8)
  18ab58:	d8c02015 	stw	r3,128(sp)
  18ab5c:	d8801f15 	stw	r2,124(sp)
  18ab60:	010001c4 	movi	r4,7
  18ab64:	20becc16 	blt	r4,r2,18a698 <__alt_data_end+0xfff8a698>
  18ab68:	42000204 	addi	r8,r8,8
  18ab6c:	003ed106 	br	18a6b4 <__alt_data_end+0xfff8a6b4>
  18ab70:	010006b4 	movhi	r4,26
  18ab74:	213d10c4 	addi	r4,r4,-3005
  18ab78:	d9002c15 	stw	r4,176(sp)
  18ab7c:	003ba706 	br	189a1c <__alt_data_end+0xfff89a1c>
  18ab80:	b809883a 	mov	r4,r23
  18ab84:	b00b883a 	mov	r5,r22
  18ab88:	d9801e04 	addi	r6,sp,120
  18ab8c:	01906980 	call	190698 <__sprint_r>
  18ab90:	103abe1e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18ab94:	d8c02017 	ldw	r3,128(sp)
  18ab98:	da000404 	addi	r8,sp,16
  18ab9c:	003d6c06 	br	18a150 <__alt_data_end+0xfff8a150>
  18aba0:	d8801f17 	ldw	r2,124(sp)
  18aba4:	014006b4 	movhi	r5,26
  18aba8:	01000044 	movi	r4,1
  18abac:	18c00044 	addi	r3,r3,1
  18abb0:	10800044 	addi	r2,r2,1
  18abb4:	2976e804 	addi	r5,r5,-9312
  18abb8:	41000115 	stw	r4,4(r8)
  18abbc:	41400015 	stw	r5,0(r8)
  18abc0:	d8c02015 	stw	r3,128(sp)
  18abc4:	d8801f15 	stw	r2,124(sp)
  18abc8:	010001c4 	movi	r4,7
  18abcc:	20806716 	blt	r4,r2,18ad6c <___vfprintf_internal_r+0x1ab4>
  18abd0:	42000204 	addi	r8,r8,8
  18abd4:	8000041e 	bne	r16,zero,18abe8 <___vfprintf_internal_r+0x1930>
  18abd8:	d8803317 	ldw	r2,204(sp)
  18abdc:	1000021e 	bne	r2,zero,18abe8 <___vfprintf_internal_r+0x1930>
  18abe0:	e080004c 	andi	r2,fp,1
  18abe4:	103ba426 	beq	r2,zero,189a78 <__alt_data_end+0xfff89a78>
  18abe8:	d9003817 	ldw	r4,224(sp)
  18abec:	d8801f17 	ldw	r2,124(sp)
  18abf0:	d9403517 	ldw	r5,212(sp)
  18abf4:	1907883a 	add	r3,r3,r4
  18abf8:	10800044 	addi	r2,r2,1
  18abfc:	41000115 	stw	r4,4(r8)
  18ac00:	41400015 	stw	r5,0(r8)
  18ac04:	d8c02015 	stw	r3,128(sp)
  18ac08:	d8801f15 	stw	r2,124(sp)
  18ac0c:	010001c4 	movi	r4,7
  18ac10:	20815716 	blt	r4,r2,18b170 <___vfprintf_internal_r+0x1eb8>
  18ac14:	42000204 	addi	r8,r8,8
  18ac18:	0421c83a 	sub	r16,zero,r16
  18ac1c:	0400810e 	bge	zero,r16,18ae24 <___vfprintf_internal_r+0x1b6c>
  18ac20:	04400404 	movi	r17,16
  18ac24:	8c00bd0e 	bge	r17,r16,18af1c <___vfprintf_internal_r+0x1c64>
  18ac28:	014006b4 	movhi	r5,26
  18ac2c:	297d10c4 	addi	r5,r5,-3005
  18ac30:	d9402c15 	stw	r5,176(sp)
  18ac34:	04c001c4 	movi	r19,7
  18ac38:	00000306 	br	18ac48 <___vfprintf_internal_r+0x1990>
  18ac3c:	42000204 	addi	r8,r8,8
  18ac40:	843ffc04 	addi	r16,r16,-16
  18ac44:	8c00b80e 	bge	r17,r16,18af28 <___vfprintf_internal_r+0x1c70>
  18ac48:	18c00404 	addi	r3,r3,16
  18ac4c:	10800044 	addi	r2,r2,1
  18ac50:	45000015 	stw	r20,0(r8)
  18ac54:	44400115 	stw	r17,4(r8)
  18ac58:	d8c02015 	stw	r3,128(sp)
  18ac5c:	d8801f15 	stw	r2,124(sp)
  18ac60:	98bff60e 	bge	r19,r2,18ac3c <__alt_data_end+0xfff8ac3c>
  18ac64:	b809883a 	mov	r4,r23
  18ac68:	b00b883a 	mov	r5,r22
  18ac6c:	d9801e04 	addi	r6,sp,120
  18ac70:	01906980 	call	190698 <__sprint_r>
  18ac74:	103a851e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18ac78:	d8c02017 	ldw	r3,128(sp)
  18ac7c:	d8801f17 	ldw	r2,124(sp)
  18ac80:	da000404 	addi	r8,sp,16
  18ac84:	003fee06 	br	18ac40 <__alt_data_end+0xfff8ac40>
  18ac88:	008011c4 	movi	r2,71
  18ac8c:	1400d116 	blt	r2,r16,18afd4 <___vfprintf_internal_r+0x1d1c>
  18ac90:	010006b4 	movhi	r4,26
  18ac94:	213d0304 	addi	r4,r4,-3060
  18ac98:	d9003115 	stw	r4,196(sp)
  18ac9c:	00c000c4 	movi	r3,3
  18aca0:	00bfdfc4 	movi	r2,-129
  18aca4:	d8c02b15 	stw	r3,172(sp)
  18aca8:	e0b8703a 	and	fp,fp,r2
  18acac:	dcc02783 	ldbu	r19,158(sp)
  18acb0:	dc802d15 	stw	r18,180(sp)
  18acb4:	1823883a 	mov	r17,r3
  18acb8:	d8003215 	stw	zero,200(sp)
  18acbc:	d8003415 	stw	zero,208(sp)
  18acc0:	003ada06 	br	18982c <__alt_data_end+0xfff8982c>
  18acc4:	4823883a 	mov	r17,r9
  18acc8:	003c9406 	br	189f1c <__alt_data_end+0xfff89f1c>
  18accc:	d9402d17 	ldw	r5,180(sp)
  18acd0:	d8c02f17 	ldw	r3,188(sp)
  18acd4:	28800017 	ldw	r2,0(r5)
  18acd8:	29400104 	addi	r5,r5,4
  18acdc:	d9402d15 	stw	r5,180(sp)
  18ace0:	10c00015 	stw	r3,0(r2)
  18ace4:	0039af06 	br	1893a4 <__alt_data_end+0xfff893a4>
  18ace8:	d9002d17 	ldw	r4,180(sp)
  18acec:	002b883a 	mov	r21,zero
  18acf0:	0005883a 	mov	r2,zero
  18acf4:	24800017 	ldw	r18,0(r4)
  18acf8:	21000104 	addi	r4,r4,4
  18acfc:	d9002d15 	stw	r4,180(sp)
  18ad00:	9007883a 	mov	r3,r18
  18ad04:	003bd806 	br	189c68 <__alt_data_end+0xfff89c68>
  18ad08:	1c800017 	ldw	r18,0(r3)
  18ad0c:	d8c02d17 	ldw	r3,180(sp)
  18ad10:	902bd7fa 	srai	r21,r18,31
  18ad14:	18c00104 	addi	r3,r3,4
  18ad18:	d8c02d15 	stw	r3,180(sp)
  18ad1c:	a805883a 	mov	r2,r21
  18ad20:	003a9e06 	br	18979c <__alt_data_end+0xfff8979c>
  18ad24:	d8c02d17 	ldw	r3,180(sp)
  18ad28:	002b883a 	mov	r21,zero
  18ad2c:	00800044 	movi	r2,1
  18ad30:	1c800017 	ldw	r18,0(r3)
  18ad34:	18c00104 	addi	r3,r3,4
  18ad38:	d8c02d15 	stw	r3,180(sp)
  18ad3c:	9007883a 	mov	r3,r18
  18ad40:	003bc906 	br	189c68 <__alt_data_end+0xfff89c68>
  18ad44:	d9402d17 	ldw	r5,180(sp)
  18ad48:	14800017 	ldw	r18,0(r2)
  18ad4c:	002b883a 	mov	r21,zero
  18ad50:	29400104 	addi	r5,r5,4
  18ad54:	d9402d15 	stw	r5,180(sp)
  18ad58:	003c2206 	br	189de4 <__alt_data_end+0xfff89de4>
  18ad5c:	010006b4 	movhi	r4,26
  18ad60:	213d0104 	addi	r4,r4,-3068
  18ad64:	d9003115 	stw	r4,196(sp)
  18ad68:	003ba606 	br	189c04 <__alt_data_end+0xfff89c04>
  18ad6c:	b809883a 	mov	r4,r23
  18ad70:	b00b883a 	mov	r5,r22
  18ad74:	d9801e04 	addi	r6,sp,120
  18ad78:	01906980 	call	190698 <__sprint_r>
  18ad7c:	103a431e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18ad80:	dc002617 	ldw	r16,152(sp)
  18ad84:	d8c02017 	ldw	r3,128(sp)
  18ad88:	da000404 	addi	r8,sp,16
  18ad8c:	003f9106 	br	18abd4 <__alt_data_end+0xfff8abd4>
  18ad90:	d8802e17 	ldw	r2,184(sp)
  18ad94:	d8c02d15 	stw	r3,180(sp)
  18ad98:	0085c83a 	sub	r2,zero,r2
  18ad9c:	d8802e15 	stw	r2,184(sp)
  18ada0:	e005883a 	mov	r2,fp
  18ada4:	003a4206 	br	1896b0 <__alt_data_end+0xfff896b0>
  18ada8:	e0800044 	addi	r2,fp,1
  18adac:	9cc00814 	ori	r19,r19,32
  18adb0:	e4000047 	ldb	r16,1(fp)
  18adb4:	0039a606 	br	189450 <__alt_data_end+0xfff89450>
  18adb8:	b809883a 	mov	r4,r23
  18adbc:	b00b883a 	mov	r5,r22
  18adc0:	d9801e04 	addi	r6,sp,120
  18adc4:	01906980 	call	190698 <__sprint_r>
  18adc8:	103a301e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18adcc:	d8c02017 	ldw	r3,128(sp)
  18add0:	da000404 	addi	r8,sp,16
  18add4:	003cf006 	br	18a198 <__alt_data_end+0xfff8a198>
  18add8:	d8c02817 	ldw	r3,160(sp)
  18addc:	d9003117 	ldw	r4,196(sp)
  18ade0:	1923c83a 	sub	r17,r3,r4
  18ade4:	003a8c06 	br	189818 <__alt_data_end+0xfff89818>
  18ade8:	da003f15 	stw	r8,252(sp)
  18adec:	01892200 	call	189220 <strlen>
  18adf0:	1023883a 	mov	r17,r2
  18adf4:	da003f17 	ldw	r8,252(sp)
  18adf8:	883c4a0e 	bge	r17,zero,189f24 <__alt_data_end+0xfff89f24>
  18adfc:	0005883a 	mov	r2,zero
  18ae00:	003c4806 	br	189f24 <__alt_data_end+0xfff89f24>
  18ae04:	b809883a 	mov	r4,r23
  18ae08:	b00b883a 	mov	r5,r22
  18ae0c:	d9801e04 	addi	r6,sp,120
  18ae10:	01906980 	call	190698 <__sprint_r>
  18ae14:	103a1d1e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18ae18:	d8c02017 	ldw	r3,128(sp)
  18ae1c:	d8801f17 	ldw	r2,124(sp)
  18ae20:	da000404 	addi	r8,sp,16
  18ae24:	d9403317 	ldw	r5,204(sp)
  18ae28:	d9003117 	ldw	r4,196(sp)
  18ae2c:	10800044 	addi	r2,r2,1
  18ae30:	1947883a 	add	r3,r3,r5
  18ae34:	41000015 	stw	r4,0(r8)
  18ae38:	41400115 	stw	r5,4(r8)
  18ae3c:	d8c02015 	stw	r3,128(sp)
  18ae40:	d8801f15 	stw	r2,124(sp)
  18ae44:	010001c4 	movi	r4,7
  18ae48:	20bb0a0e 	bge	r4,r2,189a74 <__alt_data_end+0xfff89a74>
  18ae4c:	003d6206 	br	18a3d8 <__alt_data_end+0xfff8a3d8>
  18ae50:	010006b4 	movhi	r4,26
  18ae54:	213d14c4 	addi	r4,r4,-2989
  18ae58:	d9003615 	stw	r4,216(sp)
  18ae5c:	003aa706 	br	1898fc <__alt_data_end+0xfff898fc>
  18ae60:	d8802604 	addi	r2,sp,152
  18ae64:	d8800115 	stw	r2,4(sp)
  18ae68:	d9403717 	ldw	r5,220(sp)
  18ae6c:	d8802504 	addi	r2,sp,148
  18ae70:	d8800215 	stw	r2,8(sp)
  18ae74:	d8802104 	addi	r2,sp,132
  18ae78:	da400015 	stw	r9,0(sp)
  18ae7c:	d8800315 	stw	r2,12(sp)
  18ae80:	b809883a 	mov	r4,r23
  18ae84:	880d883a 	mov	r6,r17
  18ae88:	01c000c4 	movi	r7,3
  18ae8c:	da003f15 	stw	r8,252(sp)
  18ae90:	da403e15 	stw	r9,248(sp)
  18ae94:	018b76c0 	call	18b76c <_dtoa_r>
  18ae98:	da403e17 	ldw	r9,248(sp)
  18ae9c:	da003f17 	ldw	r8,252(sp)
  18aea0:	d8803115 	stw	r2,196(sp)
  18aea4:	482b883a 	mov	r21,r9
  18aea8:	d8c03117 	ldw	r3,196(sp)
  18aeac:	00801184 	movi	r2,70
  18aeb0:	1d55883a 	add	r10,r3,r21
  18aeb4:	98bebb1e 	bne	r19,r2,18a9a4 <__alt_data_end+0xfff8a9a4>
  18aeb8:	19000007 	ldb	r4,0(r3)
  18aebc:	00800c04 	movi	r2,48
  18aec0:	2080df26 	beq	r4,r2,18b240 <___vfprintf_internal_r+0x1f88>
  18aec4:	d8c02617 	ldw	r3,152(sp)
  18aec8:	50d5883a 	add	r10,r10,r3
  18aecc:	003eb506 	br	18a9a4 <__alt_data_end+0xfff8a9a4>
  18aed0:	0023883a 	mov	r17,zero
  18aed4:	003d9b06 	br	18a544 <__alt_data_end+0xfff8a544>
  18aed8:	b809883a 	mov	r4,r23
  18aedc:	b00b883a 	mov	r5,r22
  18aee0:	d9801e04 	addi	r6,sp,120
  18aee4:	01906980 	call	190698 <__sprint_r>
  18aee8:	1039e81e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18aeec:	d8c02017 	ldw	r3,128(sp)
  18aef0:	da000404 	addi	r8,sp,16
  18aef4:	003d9206 	br	18a540 <__alt_data_end+0xfff8a540>
  18aef8:	b809883a 	mov	r4,r23
  18aefc:	b00b883a 	mov	r5,r22
  18af00:	d9801e04 	addi	r6,sp,120
  18af04:	01906980 	call	190698 <__sprint_r>
  18af08:	1039e01e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18af0c:	d8802617 	ldw	r2,152(sp)
  18af10:	d8c02017 	ldw	r3,128(sp)
  18af14:	da000404 	addi	r8,sp,16
  18af18:	003dfb06 	br	18a708 <__alt_data_end+0xfff8a708>
  18af1c:	010006b4 	movhi	r4,26
  18af20:	213d10c4 	addi	r4,r4,-3005
  18af24:	d9002c15 	stw	r4,176(sp)
  18af28:	d9002c17 	ldw	r4,176(sp)
  18af2c:	1c07883a 	add	r3,r3,r16
  18af30:	10800044 	addi	r2,r2,1
  18af34:	41000015 	stw	r4,0(r8)
  18af38:	44000115 	stw	r16,4(r8)
  18af3c:	d8c02015 	stw	r3,128(sp)
  18af40:	d8801f15 	stw	r2,124(sp)
  18af44:	010001c4 	movi	r4,7
  18af48:	20bfae16 	blt	r4,r2,18ae04 <__alt_data_end+0xfff8ae04>
  18af4c:	42000204 	addi	r8,r8,8
  18af50:	003fb406 	br	18ae24 <__alt_data_end+0xfff8ae24>
  18af54:	00800184 	movi	r2,6
  18af58:	1240012e 	bgeu	r2,r9,18af60 <___vfprintf_internal_r+0x1ca8>
  18af5c:	1013883a 	mov	r9,r2
  18af60:	4823883a 	mov	r17,r9
  18af64:	4805883a 	mov	r2,r9
  18af68:	4800ac16 	blt	r9,zero,18b21c <___vfprintf_internal_r+0x1f64>
  18af6c:	014006b4 	movhi	r5,26
  18af70:	297d0f04 	addi	r5,r5,-3012
  18af74:	d8802b15 	stw	r2,172(sp)
  18af78:	dc802d15 	stw	r18,180(sp)
  18af7c:	d8003215 	stw	zero,200(sp)
  18af80:	d8003415 	stw	zero,208(sp)
  18af84:	d9403115 	stw	r5,196(sp)
  18af88:	0005883a 	mov	r2,zero
  18af8c:	003a2e06 	br	189848 <__alt_data_end+0xfff89848>
  18af90:	0021883a 	mov	r16,zero
  18af94:	003dee06 	br	18a750 <__alt_data_end+0xfff8a750>
  18af98:	014006b4 	movhi	r5,26
  18af9c:	297d14c4 	addi	r5,r5,-2989
  18afa0:	d9403615 	stw	r5,216(sp)
  18afa4:	003ad806 	br	189b08 <__alt_data_end+0xfff89b08>
  18afa8:	b809883a 	mov	r4,r23
  18afac:	b00b883a 	mov	r5,r22
  18afb0:	d9801e04 	addi	r6,sp,120
  18afb4:	01906980 	call	190698 <__sprint_r>
  18afb8:	1039b41e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18afbc:	d8802617 	ldw	r2,152(sp)
  18afc0:	d9403317 	ldw	r5,204(sp)
  18afc4:	d8c02017 	ldw	r3,128(sp)
  18afc8:	da000404 	addi	r8,sp,16
  18afcc:	2885c83a 	sub	r2,r5,r2
  18afd0:	003dde06 	br	18a74c <__alt_data_end+0xfff8a74c>
  18afd4:	014006b4 	movhi	r5,26
  18afd8:	297d0404 	addi	r5,r5,-3056
  18afdc:	d9403115 	stw	r5,196(sp)
  18afe0:	003f2e06 	br	18ac9c <__alt_data_end+0xfff8ac9c>
  18afe4:	00800b44 	movi	r2,45
  18afe8:	d8802785 	stb	r2,158(sp)
  18afec:	df002b15 	stw	fp,172(sp)
  18aff0:	d8003215 	stw	zero,200(sp)
  18aff4:	df002d17 	ldw	fp,180(sp)
  18aff8:	00800b44 	movi	r2,45
  18affc:	dc802d15 	stw	r18,180(sp)
  18b000:	003a0e06 	br	18983c <__alt_data_end+0xfff8983c>
  18b004:	d8c02617 	ldw	r3,152(sp)
  18b008:	00bfff44 	movi	r2,-3
  18b00c:	18801b16 	blt	r3,r2,18b07c <___vfprintf_internal_r+0x1dc4>
  18b010:	48c01a16 	blt	r9,r3,18b07c <___vfprintf_internal_r+0x1dc4>
  18b014:	d8c03415 	stw	r3,208(sp)
  18b018:	040019c4 	movi	r16,103
  18b01c:	003e8006 	br	18aa20 <__alt_data_end+0xfff8aa20>
  18b020:	04c00b44 	movi	r19,45
  18b024:	dcc02785 	stb	r19,158(sp)
  18b028:	003af106 	br	189bf0 <__alt_data_end+0xfff89bf0>
  18b02c:	d8c02d17 	ldw	r3,180(sp)
  18b030:	d9002f17 	ldw	r4,188(sp)
  18b034:	18800017 	ldw	r2,0(r3)
  18b038:	18c00104 	addi	r3,r3,4
  18b03c:	d8c02d15 	stw	r3,180(sp)
  18b040:	11000015 	stw	r4,0(r2)
  18b044:	0038d706 	br	1893a4 <__alt_data_end+0xfff893a4>
  18b048:	010006b4 	movhi	r4,26
  18b04c:	213d10c4 	addi	r4,r4,-3005
  18b050:	d9002c15 	stw	r4,176(sp)
  18b054:	003c8e06 	br	18a290 <__alt_data_end+0xfff8a290>
  18b058:	5005883a 	mov	r2,r10
  18b05c:	003e6506 	br	18a9f4 <__alt_data_end+0xfff8a9f4>
  18b060:	da402b15 	stw	r9,172(sp)
  18b064:	dcc02783 	ldbu	r19,158(sp)
  18b068:	4823883a 	mov	r17,r9
  18b06c:	dc802d15 	stw	r18,180(sp)
  18b070:	d8003215 	stw	zero,200(sp)
  18b074:	d8003415 	stw	zero,208(sp)
  18b078:	0039ec06 	br	18982c <__alt_data_end+0xfff8982c>
  18b07c:	843fff84 	addi	r16,r16,-2
  18b080:	1d7fffc4 	addi	r21,r3,-1
  18b084:	dd402615 	stw	r21,152(sp)
  18b088:	dc0022c5 	stb	r16,139(sp)
  18b08c:	a8009616 	blt	r21,zero,18b2e8 <___vfprintf_internal_r+0x2030>
  18b090:	00800ac4 	movi	r2,43
  18b094:	d8802305 	stb	r2,140(sp)
  18b098:	00800244 	movi	r2,9
  18b09c:	1540610e 	bge	r2,r21,18b224 <___vfprintf_internal_r+0x1f6c>
  18b0a0:	dcc022c4 	addi	r19,sp,139
  18b0a4:	dc002c15 	stw	r16,176(sp)
  18b0a8:	4023883a 	mov	r17,r8
  18b0ac:	9821883a 	mov	r16,r19
  18b0b0:	a809883a 	mov	r4,r21
  18b0b4:	01400284 	movi	r5,10
  18b0b8:	0187d6c0 	call	187d6c <__modsi3>
  18b0bc:	10800c04 	addi	r2,r2,48
  18b0c0:	843fffc4 	addi	r16,r16,-1
  18b0c4:	a809883a 	mov	r4,r21
  18b0c8:	01400284 	movi	r5,10
  18b0cc:	80800005 	stb	r2,0(r16)
  18b0d0:	0187d180 	call	187d18 <__divsi3>
  18b0d4:	01000244 	movi	r4,9
  18b0d8:	102b883a 	mov	r21,r2
  18b0dc:	20bff416 	blt	r4,r2,18b0b0 <__alt_data_end+0xfff8b0b0>
  18b0e0:	8811883a 	mov	r8,r17
  18b0e4:	10800c04 	addi	r2,r2,48
  18b0e8:	8023883a 	mov	r17,r16
  18b0ec:	897fffc4 	addi	r5,r17,-1
  18b0f0:	88bfffc5 	stb	r2,-1(r17)
  18b0f4:	dc002c17 	ldw	r16,176(sp)
  18b0f8:	2cc07f2e 	bgeu	r5,r19,18b2f8 <___vfprintf_internal_r+0x2040>
  18b0fc:	d9802384 	addi	r6,sp,142
  18b100:	344dc83a 	sub	r6,r6,r17
  18b104:	d9002344 	addi	r4,sp,141
  18b108:	998d883a 	add	r6,r19,r6
  18b10c:	00000106 	br	18b114 <___vfprintf_internal_r+0x1e5c>
  18b110:	28800003 	ldbu	r2,0(r5)
  18b114:	20800005 	stb	r2,0(r4)
  18b118:	21000044 	addi	r4,r4,1
  18b11c:	29400044 	addi	r5,r5,1
  18b120:	21bffb1e 	bne	r4,r6,18b110 <__alt_data_end+0xfff8b110>
  18b124:	d8802304 	addi	r2,sp,140
  18b128:	1445c83a 	sub	r2,r2,r17
  18b12c:	d9402344 	addi	r5,sp,141
  18b130:	2885883a 	add	r2,r5,r2
  18b134:	14e7c83a 	sub	r19,r2,r19
  18b138:	d8803317 	ldw	r2,204(sp)
  18b13c:	d8c03317 	ldw	r3,204(sp)
  18b140:	dcc03a15 	stw	r19,232(sp)
  18b144:	14e3883a 	add	r17,r2,r19
  18b148:	00800044 	movi	r2,1
  18b14c:	10c04e0e 	bge	r2,r3,18b288 <___vfprintf_internal_r+0x1fd0>
  18b150:	8c400044 	addi	r17,r17,1
  18b154:	8839883a 	mov	fp,r17
  18b158:	88004916 	blt	r17,zero,18b280 <___vfprintf_internal_r+0x1fc8>
  18b15c:	d8003415 	stw	zero,208(sp)
  18b160:	003e3806 	br	18aa44 <__alt_data_end+0xfff8aa44>
  18b164:	483de91e 	bne	r9,zero,18a90c <__alt_data_end+0xfff8a90c>
  18b168:	8813883a 	mov	r9,r17
  18b16c:	003de706 	br	18a90c <__alt_data_end+0xfff8a90c>
  18b170:	b809883a 	mov	r4,r23
  18b174:	b00b883a 	mov	r5,r22
  18b178:	d9801e04 	addi	r6,sp,120
  18b17c:	01906980 	call	190698 <__sprint_r>
  18b180:	1039421e 	bne	r2,zero,18968c <__alt_data_end+0xfff8968c>
  18b184:	dc002617 	ldw	r16,152(sp)
  18b188:	d8c02017 	ldw	r3,128(sp)
  18b18c:	d8801f17 	ldw	r2,124(sp)
  18b190:	da000404 	addi	r8,sp,16
  18b194:	003ea006 	br	18ac18 <__alt_data_end+0xfff8ac18>
  18b198:	02400184 	movi	r9,6
  18b19c:	003ddb06 	br	18a90c <__alt_data_end+0xfff8a90c>
  18b1a0:	00c00b44 	movi	r3,45
  18b1a4:	2460003c 	xorhi	r17,r4,32768
  18b1a8:	d8c02b05 	stb	r3,172(sp)
  18b1ac:	003ddd06 	br	18a924 <__alt_data_end+0xfff8a924>
  18b1b0:	d8c03417 	ldw	r3,208(sp)
  18b1b4:	00c03d0e 	bge	zero,r3,18b2ac <___vfprintf_internal_r+0x1ff4>
  18b1b8:	04400044 	movi	r17,1
  18b1bc:	d9003317 	ldw	r4,204(sp)
  18b1c0:	8923883a 	add	r17,r17,r4
  18b1c4:	8839883a 	mov	fp,r17
  18b1c8:	883e1e0e 	bge	r17,zero,18aa44 <__alt_data_end+0xfff8aa44>
  18b1cc:	0039883a 	mov	fp,zero
  18b1d0:	003e1c06 	br	18aa44 <__alt_data_end+0xfff8aa44>
  18b1d4:	4d400044 	addi	r21,r9,1
  18b1d8:	003dd906 	br	18a940 <__alt_data_end+0xfff8a940>
  18b1dc:	1839883a 	mov	fp,r3
  18b1e0:	18004716 	blt	r3,zero,18b300 <___vfprintf_internal_r+0x2048>
  18b1e4:	dc403417 	ldw	r17,208(sp)
  18b1e8:	003e1606 	br	18aa44 <__alt_data_end+0xfff8aa44>
  18b1ec:	00c0290e 	bge	zero,r3,18b294 <___vfprintf_internal_r+0x1fdc>
  18b1f0:	4800021e 	bne	r9,zero,18b1fc <___vfprintf_internal_r+0x1f44>
  18b1f4:	e080004c 	andi	r2,fp,1
  18b1f8:	103ff826 	beq	r2,zero,18b1dc <__alt_data_end+0xfff8b1dc>
  18b1fc:	d8c03417 	ldw	r3,208(sp)
  18b200:	4a400044 	addi	r9,r9,1
  18b204:	1a63883a 	add	r17,r3,r9
  18b208:	8839883a 	mov	fp,r17
  18b20c:	883e0d0e 	bge	r17,zero,18aa44 <__alt_data_end+0xfff8aa44>
  18b210:	003fee06 	br	18b1cc <__alt_data_end+0xfff8b1cc>
  18b214:	d8802117 	ldw	r2,132(sp)
  18b218:	003df606 	br	18a9f4 <__alt_data_end+0xfff8a9f4>
  18b21c:	0005883a 	mov	r2,zero
  18b220:	003f5206 	br	18af6c <__alt_data_end+0xfff8af6c>
  18b224:	00800c04 	movi	r2,48
  18b228:	a8c00c04 	addi	r3,r21,48
  18b22c:	d8802345 	stb	r2,141(sp)
  18b230:	d8c02385 	stb	r3,142(sp)
  18b234:	d88023c4 	addi	r2,sp,143
  18b238:	dcc022c4 	addi	r19,sp,139
  18b23c:	003fbd06 	br	18b134 <__alt_data_end+0xfff8b134>
  18b240:	d9003717 	ldw	r4,220(sp)
  18b244:	880b883a 	mov	r5,r17
  18b248:	000d883a 	mov	r6,zero
  18b24c:	000f883a 	mov	r7,zero
  18b250:	da003f15 	stw	r8,252(sp)
  18b254:	da403e15 	stw	r9,248(sp)
  18b258:	da803d15 	stw	r10,244(sp)
  18b25c:	01942040 	call	194204 <__eqdf2>
  18b260:	da003f17 	ldw	r8,252(sp)
  18b264:	da403e17 	ldw	r9,248(sp)
  18b268:	da803d17 	ldw	r10,244(sp)
  18b26c:	103f1526 	beq	r2,zero,18aec4 <__alt_data_end+0xfff8aec4>
  18b270:	00800044 	movi	r2,1
  18b274:	1547c83a 	sub	r3,r2,r21
  18b278:	d8c02615 	stw	r3,152(sp)
  18b27c:	003f1206 	br	18aec8 <__alt_data_end+0xfff8aec8>
  18b280:	0039883a 	mov	fp,zero
  18b284:	003fb506 	br	18b15c <__alt_data_end+0xfff8b15c>
  18b288:	e084703a 	and	r2,fp,r2
  18b28c:	103fb126 	beq	r2,zero,18b154 <__alt_data_end+0xfff8b154>
  18b290:	003faf06 	br	18b150 <__alt_data_end+0xfff8b150>
  18b294:	4800081e 	bne	r9,zero,18b2b8 <___vfprintf_internal_r+0x2000>
  18b298:	e080004c 	andi	r2,fp,1
  18b29c:	1000061e 	bne	r2,zero,18b2b8 <___vfprintf_internal_r+0x2000>
  18b2a0:	07000044 	movi	fp,1
  18b2a4:	e023883a 	mov	r17,fp
  18b2a8:	003de606 	br	18aa44 <__alt_data_end+0xfff8aa44>
  18b2ac:	04400084 	movi	r17,2
  18b2b0:	88e3c83a 	sub	r17,r17,r3
  18b2b4:	003fc106 	br	18b1bc <__alt_data_end+0xfff8b1bc>
  18b2b8:	4c400084 	addi	r17,r9,2
  18b2bc:	8839883a 	mov	fp,r17
  18b2c0:	883de00e 	bge	r17,zero,18aa44 <__alt_data_end+0xfff8aa44>
  18b2c4:	003fc106 	br	18b1cc <__alt_data_end+0xfff8b1cc>
  18b2c8:	d9402d17 	ldw	r5,180(sp)
  18b2cc:	2a400017 	ldw	r9,0(r5)
  18b2d0:	28c00104 	addi	r3,r5,4
  18b2d4:	d8c02d15 	stw	r3,180(sp)
  18b2d8:	483eb50e 	bge	r9,zero,18adb0 <__alt_data_end+0xfff8adb0>
  18b2dc:	027fffc4 	movi	r9,-1
  18b2e0:	e4000047 	ldb	r16,1(fp)
  18b2e4:	00385a06 	br	189450 <__alt_data_end+0xfff89450>
  18b2e8:	00800b44 	movi	r2,45
  18b2ec:	056bc83a 	sub	r21,zero,r21
  18b2f0:	d8802305 	stb	r2,140(sp)
  18b2f4:	003f6806 	br	18b098 <__alt_data_end+0xfff8b098>
  18b2f8:	d8802344 	addi	r2,sp,141
  18b2fc:	003f8d06 	br	18b134 <__alt_data_end+0xfff8b134>
  18b300:	0039883a 	mov	fp,zero
  18b304:	003fb706 	br	18b1e4 <__alt_data_end+0xfff8b1e4>
  18b308:	d8c02617 	ldw	r3,152(sp)
  18b30c:	003f5c06 	br	18b080 <__alt_data_end+0xfff8b080>

0018b310 <__vfprintf_internal>:
  18b310:	2007883a 	mov	r3,r4
  18b314:	010006b4 	movhi	r4,26
  18b318:	21046704 	addi	r4,r4,4508
  18b31c:	21000017 	ldw	r4,0(r4)
  18b320:	2805883a 	mov	r2,r5
  18b324:	300f883a 	mov	r7,r6
  18b328:	180b883a 	mov	r5,r3
  18b32c:	100d883a 	mov	r6,r2
  18b330:	01892b81 	jmpi	1892b8 <___vfprintf_internal_r>

0018b334 <__sbprintf>:
  18b334:	2880030b 	ldhu	r2,12(r5)
  18b338:	2ac01917 	ldw	r11,100(r5)
  18b33c:	2a80038b 	ldhu	r10,14(r5)
  18b340:	2a400717 	ldw	r9,28(r5)
  18b344:	2a000917 	ldw	r8,36(r5)
  18b348:	defee204 	addi	sp,sp,-1144
  18b34c:	00c10004 	movi	r3,1024
  18b350:	dc011a15 	stw	r16,1128(sp)
  18b354:	10bfff4c 	andi	r2,r2,65533
  18b358:	2821883a 	mov	r16,r5
  18b35c:	d8cb883a 	add	r5,sp,r3
  18b360:	dc811c15 	stw	r18,1136(sp)
  18b364:	dc411b15 	stw	r17,1132(sp)
  18b368:	dfc11d15 	stw	ra,1140(sp)
  18b36c:	2025883a 	mov	r18,r4
  18b370:	d881030d 	sth	r2,1036(sp)
  18b374:	dac11915 	stw	r11,1124(sp)
  18b378:	da81038d 	sth	r10,1038(sp)
  18b37c:	da410715 	stw	r9,1052(sp)
  18b380:	da010915 	stw	r8,1060(sp)
  18b384:	dec10015 	stw	sp,1024(sp)
  18b388:	dec10415 	stw	sp,1040(sp)
  18b38c:	d8c10215 	stw	r3,1032(sp)
  18b390:	d8c10515 	stw	r3,1044(sp)
  18b394:	d8010615 	stw	zero,1048(sp)
  18b398:	01892b80 	call	1892b8 <___vfprintf_internal_r>
  18b39c:	1023883a 	mov	r17,r2
  18b3a0:	10000416 	blt	r2,zero,18b3b4 <__sbprintf+0x80>
  18b3a4:	9009883a 	mov	r4,r18
  18b3a8:	d9410004 	addi	r5,sp,1024
  18b3ac:	018d09c0 	call	18d09c <_fflush_r>
  18b3b0:	10000d1e 	bne	r2,zero,18b3e8 <__sbprintf+0xb4>
  18b3b4:	d8c1030b 	ldhu	r3,1036(sp)
  18b3b8:	18c0100c 	andi	r3,r3,64
  18b3bc:	18000326 	beq	r3,zero,18b3cc <__sbprintf+0x98>
  18b3c0:	8080030b 	ldhu	r2,12(r16)
  18b3c4:	10801014 	ori	r2,r2,64
  18b3c8:	8080030d 	sth	r2,12(r16)
  18b3cc:	8805883a 	mov	r2,r17
  18b3d0:	dfc11d17 	ldw	ra,1140(sp)
  18b3d4:	dc811c17 	ldw	r18,1136(sp)
  18b3d8:	dc411b17 	ldw	r17,1132(sp)
  18b3dc:	dc011a17 	ldw	r16,1128(sp)
  18b3e0:	dec11e04 	addi	sp,sp,1144
  18b3e4:	f800283a 	ret
  18b3e8:	047fffc4 	movi	r17,-1
  18b3ec:	003ff106 	br	18b3b4 <__alt_data_end+0xfff8b3b4>

0018b3f0 <__swsetup_r>:
  18b3f0:	008006b4 	movhi	r2,26
  18b3f4:	defffd04 	addi	sp,sp,-12
  18b3f8:	10846704 	addi	r2,r2,4508
  18b3fc:	dc400115 	stw	r17,4(sp)
  18b400:	2023883a 	mov	r17,r4
  18b404:	11000017 	ldw	r4,0(r2)
  18b408:	dc000015 	stw	r16,0(sp)
  18b40c:	dfc00215 	stw	ra,8(sp)
  18b410:	2821883a 	mov	r16,r5
  18b414:	20000226 	beq	r4,zero,18b420 <__swsetup_r+0x30>
  18b418:	20c00e17 	ldw	r3,56(r4)
  18b41c:	18003126 	beq	r3,zero,18b4e4 <__swsetup_r+0xf4>
  18b420:	8080030b 	ldhu	r2,12(r16)
  18b424:	10c0020c 	andi	r3,r2,8
  18b428:	100d883a 	mov	r6,r2
  18b42c:	18000f26 	beq	r3,zero,18b46c <__swsetup_r+0x7c>
  18b430:	80c00417 	ldw	r3,16(r16)
  18b434:	18001526 	beq	r3,zero,18b48c <__swsetup_r+0x9c>
  18b438:	1100004c 	andi	r4,r2,1
  18b43c:	20001c1e 	bne	r4,zero,18b4b0 <__swsetup_r+0xc0>
  18b440:	1080008c 	andi	r2,r2,2
  18b444:	1000291e 	bne	r2,zero,18b4ec <__swsetup_r+0xfc>
  18b448:	80800517 	ldw	r2,20(r16)
  18b44c:	80800215 	stw	r2,8(r16)
  18b450:	18001c26 	beq	r3,zero,18b4c4 <__swsetup_r+0xd4>
  18b454:	0005883a 	mov	r2,zero
  18b458:	dfc00217 	ldw	ra,8(sp)
  18b45c:	dc400117 	ldw	r17,4(sp)
  18b460:	dc000017 	ldw	r16,0(sp)
  18b464:	dec00304 	addi	sp,sp,12
  18b468:	f800283a 	ret
  18b46c:	3080040c 	andi	r2,r6,16
  18b470:	10002e26 	beq	r2,zero,18b52c <__swsetup_r+0x13c>
  18b474:	3080010c 	andi	r2,r6,4
  18b478:	10001e1e 	bne	r2,zero,18b4f4 <__swsetup_r+0x104>
  18b47c:	80c00417 	ldw	r3,16(r16)
  18b480:	30800214 	ori	r2,r6,8
  18b484:	8080030d 	sth	r2,12(r16)
  18b488:	183feb1e 	bne	r3,zero,18b438 <__alt_data_end+0xfff8b438>
  18b48c:	1140a00c 	andi	r5,r2,640
  18b490:	01008004 	movi	r4,512
  18b494:	293fe826 	beq	r5,r4,18b438 <__alt_data_end+0xfff8b438>
  18b498:	8809883a 	mov	r4,r17
  18b49c:	800b883a 	mov	r5,r16
  18b4a0:	018e0200 	call	18e020 <__smakebuf_r>
  18b4a4:	8080030b 	ldhu	r2,12(r16)
  18b4a8:	80c00417 	ldw	r3,16(r16)
  18b4ac:	003fe206 	br	18b438 <__alt_data_end+0xfff8b438>
  18b4b0:	80800517 	ldw	r2,20(r16)
  18b4b4:	80000215 	stw	zero,8(r16)
  18b4b8:	0085c83a 	sub	r2,zero,r2
  18b4bc:	80800615 	stw	r2,24(r16)
  18b4c0:	183fe41e 	bne	r3,zero,18b454 <__alt_data_end+0xfff8b454>
  18b4c4:	80c0030b 	ldhu	r3,12(r16)
  18b4c8:	0005883a 	mov	r2,zero
  18b4cc:	1900200c 	andi	r4,r3,128
  18b4d0:	203fe126 	beq	r4,zero,18b458 <__alt_data_end+0xfff8b458>
  18b4d4:	18c01014 	ori	r3,r3,64
  18b4d8:	80c0030d 	sth	r3,12(r16)
  18b4dc:	00bfffc4 	movi	r2,-1
  18b4e0:	003fdd06 	br	18b458 <__alt_data_end+0xfff8b458>
  18b4e4:	018d4880 	call	18d488 <__sinit>
  18b4e8:	003fcd06 	br	18b420 <__alt_data_end+0xfff8b420>
  18b4ec:	0005883a 	mov	r2,zero
  18b4f0:	003fd606 	br	18b44c <__alt_data_end+0xfff8b44c>
  18b4f4:	81400c17 	ldw	r5,48(r16)
  18b4f8:	28000626 	beq	r5,zero,18b514 <__swsetup_r+0x124>
  18b4fc:	80801004 	addi	r2,r16,64
  18b500:	28800326 	beq	r5,r2,18b510 <__swsetup_r+0x120>
  18b504:	8809883a 	mov	r4,r17
  18b508:	018d5fc0 	call	18d5fc <_free_r>
  18b50c:	8180030b 	ldhu	r6,12(r16)
  18b510:	80000c15 	stw	zero,48(r16)
  18b514:	80c00417 	ldw	r3,16(r16)
  18b518:	00bff6c4 	movi	r2,-37
  18b51c:	118c703a 	and	r6,r2,r6
  18b520:	80000115 	stw	zero,4(r16)
  18b524:	80c00015 	stw	r3,0(r16)
  18b528:	003fd506 	br	18b480 <__alt_data_end+0xfff8b480>
  18b52c:	00800244 	movi	r2,9
  18b530:	88800015 	stw	r2,0(r17)
  18b534:	30801014 	ori	r2,r6,64
  18b538:	8080030d 	sth	r2,12(r16)
  18b53c:	00bfffc4 	movi	r2,-1
  18b540:	003fc506 	br	18b458 <__alt_data_end+0xfff8b458>

0018b544 <quorem>:
  18b544:	defff204 	addi	sp,sp,-56
  18b548:	ddc00b15 	stw	r23,44(sp)
  18b54c:	20800417 	ldw	r2,16(r4)
  18b550:	2dc00417 	ldw	r23,16(r5)
  18b554:	dfc00d15 	stw	ra,52(sp)
  18b558:	df000c15 	stw	fp,48(sp)
  18b55c:	dd800a15 	stw	r22,40(sp)
  18b560:	dd400915 	stw	r21,36(sp)
  18b564:	dd000815 	stw	r20,32(sp)
  18b568:	dcc00715 	stw	r19,28(sp)
  18b56c:	dc800615 	stw	r18,24(sp)
  18b570:	dc400515 	stw	r17,20(sp)
  18b574:	dc000415 	stw	r16,16(sp)
  18b578:	15c07a16 	blt	r2,r23,18b764 <quorem+0x220>
  18b57c:	bdffffc4 	addi	r23,r23,-1
  18b580:	bde9883a 	add	r20,r23,r23
  18b584:	28c00504 	addi	r3,r5,20
  18b588:	a529883a 	add	r20,r20,r20
  18b58c:	1d39883a 	add	fp,r3,r20
  18b590:	24c00504 	addi	r19,r4,20
  18b594:	d9400215 	stw	r5,8(sp)
  18b598:	9d29883a 	add	r20,r19,r20
  18b59c:	e1400017 	ldw	r5,0(fp)
  18b5a0:	d9000015 	stw	r4,0(sp)
  18b5a4:	a1000017 	ldw	r4,0(r20)
  18b5a8:	29400044 	addi	r5,r5,1
  18b5ac:	d8c00115 	stw	r3,4(sp)
  18b5b0:	dd000315 	stw	r20,12(sp)
  18b5b4:	0187dc80 	call	187dc8 <__udivsi3>
  18b5b8:	1025883a 	mov	r18,r2
  18b5bc:	10003026 	beq	r2,zero,18b680 <quorem+0x13c>
  18b5c0:	dc400117 	ldw	r17,4(sp)
  18b5c4:	9829883a 	mov	r20,r19
  18b5c8:	002d883a 	mov	r22,zero
  18b5cc:	0021883a 	mov	r16,zero
  18b5d0:	8d400017 	ldw	r21,0(r17)
  18b5d4:	900b883a 	mov	r5,r18
  18b5d8:	8c400104 	addi	r17,r17,4
  18b5dc:	a93fffcc 	andi	r4,r21,65535
  18b5e0:	0187dd80 	call	187dd8 <__mulsi3>
  18b5e4:	a808d43a 	srli	r4,r21,16
  18b5e8:	900b883a 	mov	r5,r18
  18b5ec:	b0ad883a 	add	r22,r22,r2
  18b5f0:	0187dd80 	call	187dd8 <__mulsi3>
  18b5f4:	a1000017 	ldw	r4,0(r20)
  18b5f8:	b00cd43a 	srli	r6,r22,16
  18b5fc:	b0ffffcc 	andi	r3,r22,65535
  18b600:	217fffcc 	andi	r5,r4,65535
  18b604:	2c21883a 	add	r16,r5,r16
  18b608:	80c7c83a 	sub	r3,r16,r3
  18b60c:	2008d43a 	srli	r4,r4,16
  18b610:	3085883a 	add	r2,r6,r2
  18b614:	1821d43a 	srai	r16,r3,16
  18b618:	117fffcc 	andi	r5,r2,65535
  18b61c:	2149c83a 	sub	r4,r4,r5
  18b620:	2421883a 	add	r16,r4,r16
  18b624:	8008943a 	slli	r4,r16,16
  18b628:	18ffffcc 	andi	r3,r3,65535
  18b62c:	102cd43a 	srli	r22,r2,16
  18b630:	20c8b03a 	or	r4,r4,r3
  18b634:	a1000015 	stw	r4,0(r20)
  18b638:	8021d43a 	srai	r16,r16,16
  18b63c:	a5000104 	addi	r20,r20,4
  18b640:	e47fe32e 	bgeu	fp,r17,18b5d0 <__alt_data_end+0xfff8b5d0>
  18b644:	d8c00317 	ldw	r3,12(sp)
  18b648:	18800017 	ldw	r2,0(r3)
  18b64c:	10000c1e 	bne	r2,zero,18b680 <quorem+0x13c>
  18b650:	18bfff04 	addi	r2,r3,-4
  18b654:	9880082e 	bgeu	r19,r2,18b678 <quorem+0x134>
  18b658:	18ffff17 	ldw	r3,-4(r3)
  18b65c:	18000326 	beq	r3,zero,18b66c <quorem+0x128>
  18b660:	00000506 	br	18b678 <quorem+0x134>
  18b664:	10c00017 	ldw	r3,0(r2)
  18b668:	1800031e 	bne	r3,zero,18b678 <quorem+0x134>
  18b66c:	10bfff04 	addi	r2,r2,-4
  18b670:	bdffffc4 	addi	r23,r23,-1
  18b674:	98bffb36 	bltu	r19,r2,18b664 <__alt_data_end+0xfff8b664>
  18b678:	d8c00017 	ldw	r3,0(sp)
  18b67c:	1dc00415 	stw	r23,16(r3)
  18b680:	d9000017 	ldw	r4,0(sp)
  18b684:	d9400217 	ldw	r5,8(sp)
  18b688:	018f5540 	call	18f554 <__mcmp>
  18b68c:	10002816 	blt	r2,zero,18b730 <quorem+0x1ec>
  18b690:	dc400117 	ldw	r17,4(sp)
  18b694:	94800044 	addi	r18,r18,1
  18b698:	980d883a 	mov	r6,r19
  18b69c:	0007883a 	mov	r3,zero
  18b6a0:	31000017 	ldw	r4,0(r6)
  18b6a4:	89400017 	ldw	r5,0(r17)
  18b6a8:	31800104 	addi	r6,r6,4
  18b6ac:	20bfffcc 	andi	r2,r4,65535
  18b6b0:	10c7883a 	add	r3,r2,r3
  18b6b4:	28bfffcc 	andi	r2,r5,65535
  18b6b8:	1885c83a 	sub	r2,r3,r2
  18b6bc:	280ad43a 	srli	r5,r5,16
  18b6c0:	2008d43a 	srli	r4,r4,16
  18b6c4:	1007d43a 	srai	r3,r2,16
  18b6c8:	10bfffcc 	andi	r2,r2,65535
  18b6cc:	2149c83a 	sub	r4,r4,r5
  18b6d0:	20c9883a 	add	r4,r4,r3
  18b6d4:	200a943a 	slli	r5,r4,16
  18b6d8:	8c400104 	addi	r17,r17,4
  18b6dc:	2007d43a 	srai	r3,r4,16
  18b6e0:	2884b03a 	or	r2,r5,r2
  18b6e4:	30bfff15 	stw	r2,-4(r6)
  18b6e8:	e47fed2e 	bgeu	fp,r17,18b6a0 <__alt_data_end+0xfff8b6a0>
  18b6ec:	bdc5883a 	add	r2,r23,r23
  18b6f0:	1085883a 	add	r2,r2,r2
  18b6f4:	9887883a 	add	r3,r19,r2
  18b6f8:	18800017 	ldw	r2,0(r3)
  18b6fc:	10000c1e 	bne	r2,zero,18b730 <quorem+0x1ec>
  18b700:	18bfff04 	addi	r2,r3,-4
  18b704:	9880082e 	bgeu	r19,r2,18b728 <quorem+0x1e4>
  18b708:	18ffff17 	ldw	r3,-4(r3)
  18b70c:	18000326 	beq	r3,zero,18b71c <quorem+0x1d8>
  18b710:	00000506 	br	18b728 <quorem+0x1e4>
  18b714:	10c00017 	ldw	r3,0(r2)
  18b718:	1800031e 	bne	r3,zero,18b728 <quorem+0x1e4>
  18b71c:	10bfff04 	addi	r2,r2,-4
  18b720:	bdffffc4 	addi	r23,r23,-1
  18b724:	98bffb36 	bltu	r19,r2,18b714 <__alt_data_end+0xfff8b714>
  18b728:	d8c00017 	ldw	r3,0(sp)
  18b72c:	1dc00415 	stw	r23,16(r3)
  18b730:	9005883a 	mov	r2,r18
  18b734:	dfc00d17 	ldw	ra,52(sp)
  18b738:	df000c17 	ldw	fp,48(sp)
  18b73c:	ddc00b17 	ldw	r23,44(sp)
  18b740:	dd800a17 	ldw	r22,40(sp)
  18b744:	dd400917 	ldw	r21,36(sp)
  18b748:	dd000817 	ldw	r20,32(sp)
  18b74c:	dcc00717 	ldw	r19,28(sp)
  18b750:	dc800617 	ldw	r18,24(sp)
  18b754:	dc400517 	ldw	r17,20(sp)
  18b758:	dc000417 	ldw	r16,16(sp)
  18b75c:	dec00e04 	addi	sp,sp,56
  18b760:	f800283a 	ret
  18b764:	0005883a 	mov	r2,zero
  18b768:	003ff206 	br	18b734 <__alt_data_end+0xfff8b734>

0018b76c <_dtoa_r>:
  18b76c:	20801017 	ldw	r2,64(r4)
  18b770:	deffde04 	addi	sp,sp,-136
  18b774:	dd401d15 	stw	r21,116(sp)
  18b778:	dcc01b15 	stw	r19,108(sp)
  18b77c:	dc801a15 	stw	r18,104(sp)
  18b780:	dc401915 	stw	r17,100(sp)
  18b784:	dc001815 	stw	r16,96(sp)
  18b788:	dfc02115 	stw	ra,132(sp)
  18b78c:	df002015 	stw	fp,128(sp)
  18b790:	ddc01f15 	stw	r23,124(sp)
  18b794:	dd801e15 	stw	r22,120(sp)
  18b798:	dd001c15 	stw	r20,112(sp)
  18b79c:	d9c00315 	stw	r7,12(sp)
  18b7a0:	2021883a 	mov	r16,r4
  18b7a4:	302b883a 	mov	r21,r6
  18b7a8:	2825883a 	mov	r18,r5
  18b7ac:	dc402417 	ldw	r17,144(sp)
  18b7b0:	3027883a 	mov	r19,r6
  18b7b4:	10000826 	beq	r2,zero,18b7d8 <_dtoa_r+0x6c>
  18b7b8:	21801117 	ldw	r6,68(r4)
  18b7bc:	00c00044 	movi	r3,1
  18b7c0:	100b883a 	mov	r5,r2
  18b7c4:	1986983a 	sll	r3,r3,r6
  18b7c8:	11800115 	stw	r6,4(r2)
  18b7cc:	10c00215 	stw	r3,8(r2)
  18b7d0:	018ec6c0 	call	18ec6c <_Bfree>
  18b7d4:	80001015 	stw	zero,64(r16)
  18b7d8:	a8002d16 	blt	r21,zero,18b890 <_dtoa_r+0x124>
  18b7dc:	88000015 	stw	zero,0(r17)
  18b7e0:	a8dffc2c 	andhi	r3,r21,32752
  18b7e4:	009ffc34 	movhi	r2,32752
  18b7e8:	18801b26 	beq	r3,r2,18b858 <_dtoa_r+0xec>
  18b7ec:	9009883a 	mov	r4,r18
  18b7f0:	980b883a 	mov	r5,r19
  18b7f4:	000d883a 	mov	r6,zero
  18b7f8:	000f883a 	mov	r7,zero
  18b7fc:	01942040 	call	194204 <__eqdf2>
  18b800:	10002a1e 	bne	r2,zero,18b8ac <_dtoa_r+0x140>
  18b804:	d8c02317 	ldw	r3,140(sp)
  18b808:	d9002517 	ldw	r4,148(sp)
  18b80c:	00800044 	movi	r2,1
  18b810:	18800015 	stw	r2,0(r3)
  18b814:	2001a226 	beq	r4,zero,18bea0 <_dtoa_r+0x734>
  18b818:	008006b4 	movhi	r2,26
  18b81c:	10b6e844 	addi	r2,r2,-9311
  18b820:	20800015 	stw	r2,0(r4)
  18b824:	10bfffc4 	addi	r2,r2,-1
  18b828:	dfc02117 	ldw	ra,132(sp)
  18b82c:	df002017 	ldw	fp,128(sp)
  18b830:	ddc01f17 	ldw	r23,124(sp)
  18b834:	dd801e17 	ldw	r22,120(sp)
  18b838:	dd401d17 	ldw	r21,116(sp)
  18b83c:	dd001c17 	ldw	r20,112(sp)
  18b840:	dcc01b17 	ldw	r19,108(sp)
  18b844:	dc801a17 	ldw	r18,104(sp)
  18b848:	dc401917 	ldw	r17,100(sp)
  18b84c:	dc001817 	ldw	r16,96(sp)
  18b850:	dec02204 	addi	sp,sp,136
  18b854:	f800283a 	ret
  18b858:	d8c02317 	ldw	r3,140(sp)
  18b85c:	0089c3c4 	movi	r2,9999
  18b860:	18800015 	stw	r2,0(r3)
  18b864:	90017c26 	beq	r18,zero,18be58 <_dtoa_r+0x6ec>
  18b868:	008006b4 	movhi	r2,26
  18b86c:	10bd1c04 	addi	r2,r2,-2960
  18b870:	d9002517 	ldw	r4,148(sp)
  18b874:	203fec26 	beq	r4,zero,18b828 <__alt_data_end+0xfff8b828>
  18b878:	10c000c7 	ldb	r3,3(r2)
  18b87c:	18017d1e 	bne	r3,zero,18be74 <_dtoa_r+0x708>
  18b880:	10c000c4 	addi	r3,r2,3
  18b884:	d9802517 	ldw	r6,148(sp)
  18b888:	30c00015 	stw	r3,0(r6)
  18b88c:	003fe606 	br	18b828 <__alt_data_end+0xfff8b828>
  18b890:	04e00034 	movhi	r19,32768
  18b894:	9cffffc4 	addi	r19,r19,-1
  18b898:	00800044 	movi	r2,1
  18b89c:	ace6703a 	and	r19,r21,r19
  18b8a0:	88800015 	stw	r2,0(r17)
  18b8a4:	982b883a 	mov	r21,r19
  18b8a8:	003fcd06 	br	18b7e0 <__alt_data_end+0xfff8b7e0>
  18b8ac:	d8800204 	addi	r2,sp,8
  18b8b0:	a822d53a 	srli	r17,r21,20
  18b8b4:	d8800015 	stw	r2,0(sp)
  18b8b8:	8009883a 	mov	r4,r16
  18b8bc:	900b883a 	mov	r5,r18
  18b8c0:	980d883a 	mov	r6,r19
  18b8c4:	d9c00104 	addi	r7,sp,4
  18b8c8:	018f8c80 	call	18f8c8 <__d2b>
  18b8cc:	1039883a 	mov	fp,r2
  18b8d0:	88016a1e 	bne	r17,zero,18be7c <_dtoa_r+0x710>
  18b8d4:	dd000217 	ldw	r20,8(sp)
  18b8d8:	dc400117 	ldw	r17,4(sp)
  18b8dc:	00befbc4 	movi	r2,-1041
  18b8e0:	a463883a 	add	r17,r20,r17
  18b8e4:	8882ea16 	blt	r17,r2,18c490 <_dtoa_r+0xd24>
  18b8e8:	00bf0384 	movi	r2,-1010
  18b8ec:	1445c83a 	sub	r2,r2,r17
  18b8f0:	89010484 	addi	r4,r17,1042
  18b8f4:	a8aa983a 	sll	r21,r21,r2
  18b8f8:	9108d83a 	srl	r4,r18,r4
  18b8fc:	a908b03a 	or	r4,r21,r4
  18b900:	01956dc0 	call	1956dc <__floatunsidf>
  18b904:	017f8434 	movhi	r5,65040
  18b908:	01800044 	movi	r6,1
  18b90c:	1009883a 	mov	r4,r2
  18b910:	194b883a 	add	r5,r3,r5
  18b914:	8c7fffc4 	addi	r17,r17,-1
  18b918:	d9800f15 	stw	r6,60(sp)
  18b91c:	000d883a 	mov	r6,zero
  18b920:	01cffe34 	movhi	r7,16376
  18b924:	0194cb40 	call	194cb4 <__subdf3>
  18b928:	0198dbf4 	movhi	r6,25455
  18b92c:	01cff4f4 	movhi	r7,16339
  18b930:	1009883a 	mov	r4,r2
  18b934:	180b883a 	mov	r5,r3
  18b938:	3190d844 	addi	r6,r6,17249
  18b93c:	39e1e9c4 	addi	r7,r7,-30809
  18b940:	01944480 	call	194448 <__muldf3>
  18b944:	01a2d874 	movhi	r6,35681
  18b948:	01cff1f4 	movhi	r7,16327
  18b94c:	180b883a 	mov	r5,r3
  18b950:	31b22cc4 	addi	r6,r6,-14157
  18b954:	39e28a04 	addi	r7,r7,-30168
  18b958:	1009883a 	mov	r4,r2
  18b95c:	0192fe80 	call	192fe8 <__adddf3>
  18b960:	8809883a 	mov	r4,r17
  18b964:	102d883a 	mov	r22,r2
  18b968:	182b883a 	mov	r21,r3
  18b96c:	019560c0 	call	19560c <__floatsidf>
  18b970:	019427f4 	movhi	r6,20639
  18b974:	01cff4f4 	movhi	r7,16339
  18b978:	1009883a 	mov	r4,r2
  18b97c:	180b883a 	mov	r5,r3
  18b980:	319e7ec4 	addi	r6,r6,31227
  18b984:	39d104c4 	addi	r7,r7,17427
  18b988:	01944480 	call	194448 <__muldf3>
  18b98c:	b009883a 	mov	r4,r22
  18b990:	a80b883a 	mov	r5,r21
  18b994:	100d883a 	mov	r6,r2
  18b998:	180f883a 	mov	r7,r3
  18b99c:	0192fe80 	call	192fe8 <__adddf3>
  18b9a0:	1009883a 	mov	r4,r2
  18b9a4:	180b883a 	mov	r5,r3
  18b9a8:	102d883a 	mov	r22,r2
  18b9ac:	182b883a 	mov	r21,r3
  18b9b0:	01955840 	call	195584 <__fixdfsi>
  18b9b4:	b009883a 	mov	r4,r22
  18b9b8:	a80b883a 	mov	r5,r21
  18b9bc:	000d883a 	mov	r6,zero
  18b9c0:	000f883a 	mov	r7,zero
  18b9c4:	d8800515 	stw	r2,20(sp)
  18b9c8:	01943680 	call	194368 <__ledf2>
  18b9cc:	10023116 	blt	r2,zero,18c294 <_dtoa_r+0xb28>
  18b9d0:	d8c00517 	ldw	r3,20(sp)
  18b9d4:	00800584 	movi	r2,22
  18b9d8:	10c21f36 	bltu	r2,r3,18c258 <_dtoa_r+0xaec>
  18b9dc:	180490fa 	slli	r2,r3,3
  18b9e0:	00c006b4 	movhi	r3,26
  18b9e4:	18fd3604 	addi	r3,r3,-2856
  18b9e8:	1885883a 	add	r2,r3,r2
  18b9ec:	11000017 	ldw	r4,0(r2)
  18b9f0:	11400117 	ldw	r5,4(r2)
  18b9f4:	900d883a 	mov	r6,r18
  18b9f8:	980f883a 	mov	r7,r19
  18b9fc:	01942880 	call	194288 <__gedf2>
  18ba00:	0082a70e 	bge	zero,r2,18c4a0 <_dtoa_r+0xd34>
  18ba04:	d9000517 	ldw	r4,20(sp)
  18ba08:	d8000d15 	stw	zero,52(sp)
  18ba0c:	213fffc4 	addi	r4,r4,-1
  18ba10:	d9000515 	stw	r4,20(sp)
  18ba14:	a463c83a 	sub	r17,r20,r17
  18ba18:	8dbfffc4 	addi	r22,r17,-1
  18ba1c:	b0021916 	blt	r22,zero,18c284 <_dtoa_r+0xb18>
  18ba20:	d8000815 	stw	zero,32(sp)
  18ba24:	d8800517 	ldw	r2,20(sp)
  18ba28:	10020e16 	blt	r2,zero,18c264 <_dtoa_r+0xaf8>
  18ba2c:	b0ad883a 	add	r22,r22,r2
  18ba30:	d8800a15 	stw	r2,40(sp)
  18ba34:	d8000915 	stw	zero,36(sp)
  18ba38:	d8c00317 	ldw	r3,12(sp)
  18ba3c:	00800244 	movi	r2,9
  18ba40:	10c11a36 	bltu	r2,r3,18beac <_dtoa_r+0x740>
  18ba44:	00800144 	movi	r2,5
  18ba48:	10c4fc0e 	bge	r2,r3,18ce3c <_dtoa_r+0x16d0>
  18ba4c:	18ffff04 	addi	r3,r3,-4
  18ba50:	d8c00315 	stw	r3,12(sp)
  18ba54:	0029883a 	mov	r20,zero
  18ba58:	d9800317 	ldw	r6,12(sp)
  18ba5c:	008000c4 	movi	r2,3
  18ba60:	3083bd26 	beq	r6,r2,18c958 <_dtoa_r+0x11ec>
  18ba64:	1183670e 	bge	r2,r6,18c804 <_dtoa_r+0x1098>
  18ba68:	d8c00317 	ldw	r3,12(sp)
  18ba6c:	00800104 	movi	r2,4
  18ba70:	1882e726 	beq	r3,r2,18c610 <_dtoa_r+0xea4>
  18ba74:	00800144 	movi	r2,5
  18ba78:	1884f21e 	bne	r3,r2,18ce44 <_dtoa_r+0x16d8>
  18ba7c:	00800044 	movi	r2,1
  18ba80:	d8800b15 	stw	r2,44(sp)
  18ba84:	d8c02217 	ldw	r3,136(sp)
  18ba88:	d9000517 	ldw	r4,20(sp)
  18ba8c:	1907883a 	add	r3,r3,r4
  18ba90:	19800044 	addi	r6,r3,1
  18ba94:	d8c00c15 	stw	r3,48(sp)
  18ba98:	d9800615 	stw	r6,24(sp)
  18ba9c:	0183c30e 	bge	zero,r6,18c9ac <_dtoa_r+0x1240>
  18baa0:	d9800617 	ldw	r6,24(sp)
  18baa4:	3023883a 	mov	r17,r6
  18baa8:	80001115 	stw	zero,68(r16)
  18baac:	008005c4 	movi	r2,23
  18bab0:	1184f62e 	bgeu	r2,r6,18ce8c <_dtoa_r+0x1720>
  18bab4:	00c00044 	movi	r3,1
  18bab8:	00800104 	movi	r2,4
  18babc:	1085883a 	add	r2,r2,r2
  18bac0:	11000504 	addi	r4,r2,20
  18bac4:	180b883a 	mov	r5,r3
  18bac8:	18c00044 	addi	r3,r3,1
  18bacc:	313ffb2e 	bgeu	r6,r4,18babc <__alt_data_end+0xfff8babc>
  18bad0:	81401115 	stw	r5,68(r16)
  18bad4:	8009883a 	mov	r4,r16
  18bad8:	018ebc40 	call	18ebc4 <_Balloc>
  18badc:	d8800715 	stw	r2,28(sp)
  18bae0:	80801015 	stw	r2,64(r16)
  18bae4:	00800384 	movi	r2,14
  18bae8:	1440fd36 	bltu	r2,r17,18bee0 <_dtoa_r+0x774>
  18baec:	a000fc26 	beq	r20,zero,18bee0 <_dtoa_r+0x774>
  18baf0:	d8800517 	ldw	r2,20(sp)
  18baf4:	0083b90e 	bge	zero,r2,18c9dc <_dtoa_r+0x1270>
  18baf8:	d8c00517 	ldw	r3,20(sp)
  18bafc:	108003cc 	andi	r2,r2,15
  18bb00:	100490fa 	slli	r2,r2,3
  18bb04:	182fd13a 	srai	r23,r3,4
  18bb08:	00c006b4 	movhi	r3,26
  18bb0c:	18fd3604 	addi	r3,r3,-2856
  18bb10:	1885883a 	add	r2,r3,r2
  18bb14:	b8c0040c 	andi	r3,r23,16
  18bb18:	12c00017 	ldw	r11,0(r2)
  18bb1c:	12800117 	ldw	r10,4(r2)
  18bb20:	18039726 	beq	r3,zero,18c980 <_dtoa_r+0x1214>
  18bb24:	008006b4 	movhi	r2,26
  18bb28:	10bd2c04 	addi	r2,r2,-2896
  18bb2c:	11800817 	ldw	r6,32(r2)
  18bb30:	11c00917 	ldw	r7,36(r2)
  18bb34:	9009883a 	mov	r4,r18
  18bb38:	980b883a 	mov	r5,r19
  18bb3c:	da801615 	stw	r10,88(sp)
  18bb40:	dac01515 	stw	r11,84(sp)
  18bb44:	01938840 	call	193884 <__divdf3>
  18bb48:	da801617 	ldw	r10,88(sp)
  18bb4c:	dac01517 	ldw	r11,84(sp)
  18bb50:	bdc003cc 	andi	r23,r23,15
  18bb54:	044000c4 	movi	r17,3
  18bb58:	d8800e15 	stw	r2,56(sp)
  18bb5c:	182b883a 	mov	r21,r3
  18bb60:	b8001126 	beq	r23,zero,18bba8 <_dtoa_r+0x43c>
  18bb64:	050006b4 	movhi	r20,26
  18bb68:	a53d2c04 	addi	r20,r20,-2896
  18bb6c:	5805883a 	mov	r2,r11
  18bb70:	5007883a 	mov	r3,r10
  18bb74:	b980004c 	andi	r6,r23,1
  18bb78:	1009883a 	mov	r4,r2
  18bb7c:	b82fd07a 	srai	r23,r23,1
  18bb80:	180b883a 	mov	r5,r3
  18bb84:	30000426 	beq	r6,zero,18bb98 <_dtoa_r+0x42c>
  18bb88:	a1800017 	ldw	r6,0(r20)
  18bb8c:	a1c00117 	ldw	r7,4(r20)
  18bb90:	8c400044 	addi	r17,r17,1
  18bb94:	01944480 	call	194448 <__muldf3>
  18bb98:	a5000204 	addi	r20,r20,8
  18bb9c:	b83ff51e 	bne	r23,zero,18bb74 <__alt_data_end+0xfff8bb74>
  18bba0:	1017883a 	mov	r11,r2
  18bba4:	1815883a 	mov	r10,r3
  18bba8:	d9000e17 	ldw	r4,56(sp)
  18bbac:	a80b883a 	mov	r5,r21
  18bbb0:	580d883a 	mov	r6,r11
  18bbb4:	500f883a 	mov	r7,r10
  18bbb8:	01938840 	call	193884 <__divdf3>
  18bbbc:	1029883a 	mov	r20,r2
  18bbc0:	182b883a 	mov	r21,r3
  18bbc4:	d9800d17 	ldw	r6,52(sp)
  18bbc8:	30000626 	beq	r6,zero,18bbe4 <_dtoa_r+0x478>
  18bbcc:	a009883a 	mov	r4,r20
  18bbd0:	a80b883a 	mov	r5,r21
  18bbd4:	000d883a 	mov	r6,zero
  18bbd8:	01cffc34 	movhi	r7,16368
  18bbdc:	01943680 	call	194368 <__ledf2>
  18bbe0:	10043216 	blt	r2,zero,18ccac <_dtoa_r+0x1540>
  18bbe4:	8809883a 	mov	r4,r17
  18bbe8:	019560c0 	call	19560c <__floatsidf>
  18bbec:	1009883a 	mov	r4,r2
  18bbf0:	180b883a 	mov	r5,r3
  18bbf4:	a00d883a 	mov	r6,r20
  18bbf8:	a80f883a 	mov	r7,r21
  18bbfc:	01944480 	call	194448 <__muldf3>
  18bc00:	000d883a 	mov	r6,zero
  18bc04:	1009883a 	mov	r4,r2
  18bc08:	180b883a 	mov	r5,r3
  18bc0c:	01d00734 	movhi	r7,16412
  18bc10:	0192fe80 	call	192fe8 <__adddf3>
  18bc14:	1023883a 	mov	r17,r2
  18bc18:	d9800617 	ldw	r6,24(sp)
  18bc1c:	00bf3034 	movhi	r2,64704
  18bc20:	1885883a 	add	r2,r3,r2
  18bc24:	d8800e15 	stw	r2,56(sp)
  18bc28:	30032e26 	beq	r6,zero,18c8e4 <_dtoa_r+0x1178>
  18bc2c:	d8c00517 	ldw	r3,20(sp)
  18bc30:	da800617 	ldw	r10,24(sp)
  18bc34:	d8c01215 	stw	r3,72(sp)
  18bc38:	d9000b17 	ldw	r4,44(sp)
  18bc3c:	2003b026 	beq	r4,zero,18cb00 <_dtoa_r+0x1394>
  18bc40:	50bfffc4 	addi	r2,r10,-1
  18bc44:	100490fa 	slli	r2,r2,3
  18bc48:	00c006b4 	movhi	r3,26
  18bc4c:	18fd3604 	addi	r3,r3,-2856
  18bc50:	1885883a 	add	r2,r3,r2
  18bc54:	11800017 	ldw	r6,0(r2)
  18bc58:	11c00117 	ldw	r7,4(r2)
  18bc5c:	d8800717 	ldw	r2,28(sp)
  18bc60:	0009883a 	mov	r4,zero
  18bc64:	014ff834 	movhi	r5,16352
  18bc68:	da801615 	stw	r10,88(sp)
  18bc6c:	15c00044 	addi	r23,r2,1
  18bc70:	01938840 	call	193884 <__divdf3>
  18bc74:	d9c00e17 	ldw	r7,56(sp)
  18bc78:	880d883a 	mov	r6,r17
  18bc7c:	1009883a 	mov	r4,r2
  18bc80:	180b883a 	mov	r5,r3
  18bc84:	0194cb40 	call	194cb4 <__subdf3>
  18bc88:	a80b883a 	mov	r5,r21
  18bc8c:	a009883a 	mov	r4,r20
  18bc90:	d8c01015 	stw	r3,64(sp)
  18bc94:	d8800e15 	stw	r2,56(sp)
  18bc98:	01955840 	call	195584 <__fixdfsi>
  18bc9c:	1009883a 	mov	r4,r2
  18bca0:	d8801715 	stw	r2,92(sp)
  18bca4:	019560c0 	call	19560c <__floatsidf>
  18bca8:	a009883a 	mov	r4,r20
  18bcac:	a80b883a 	mov	r5,r21
  18bcb0:	100d883a 	mov	r6,r2
  18bcb4:	180f883a 	mov	r7,r3
  18bcb8:	0194cb40 	call	194cb4 <__subdf3>
  18bcbc:	da001717 	ldw	r8,92(sp)
  18bcc0:	1829883a 	mov	r20,r3
  18bcc4:	d8c00717 	ldw	r3,28(sp)
  18bcc8:	d9000e17 	ldw	r4,56(sp)
  18bccc:	d9401017 	ldw	r5,64(sp)
  18bcd0:	42000c04 	addi	r8,r8,48
  18bcd4:	1023883a 	mov	r17,r2
  18bcd8:	1a000005 	stb	r8,0(r3)
  18bcdc:	880d883a 	mov	r6,r17
  18bce0:	a00f883a 	mov	r7,r20
  18bce4:	402b883a 	mov	r21,r8
  18bce8:	01942880 	call	194288 <__gedf2>
  18bcec:	00844516 	blt	zero,r2,18ce04 <_dtoa_r+0x1698>
  18bcf0:	0009883a 	mov	r4,zero
  18bcf4:	014ffc34 	movhi	r5,16368
  18bcf8:	880d883a 	mov	r6,r17
  18bcfc:	a00f883a 	mov	r7,r20
  18bd00:	0194cb40 	call	194cb4 <__subdf3>
  18bd04:	d9000e17 	ldw	r4,56(sp)
  18bd08:	d9401017 	ldw	r5,64(sp)
  18bd0c:	100d883a 	mov	r6,r2
  18bd10:	180f883a 	mov	r7,r3
  18bd14:	01942880 	call	194288 <__gedf2>
  18bd18:	da801617 	ldw	r10,88(sp)
  18bd1c:	00843616 	blt	zero,r2,18cdf8 <_dtoa_r+0x168c>
  18bd20:	00800044 	movi	r2,1
  18bd24:	12806e0e 	bge	r2,r10,18bee0 <_dtoa_r+0x774>
  18bd28:	d9000717 	ldw	r4,28(sp)
  18bd2c:	dd801315 	stw	r22,76(sp)
  18bd30:	dc001115 	stw	r16,68(sp)
  18bd34:	2295883a 	add	r10,r4,r10
  18bd38:	dcc01415 	stw	r19,80(sp)
  18bd3c:	502d883a 	mov	r22,r10
  18bd40:	dcc01017 	ldw	r19,64(sp)
  18bd44:	b821883a 	mov	r16,r23
  18bd48:	dc801015 	stw	r18,64(sp)
  18bd4c:	dc800e17 	ldw	r18,56(sp)
  18bd50:	00000906 	br	18bd78 <_dtoa_r+0x60c>
  18bd54:	0194cb40 	call	194cb4 <__subdf3>
  18bd58:	1009883a 	mov	r4,r2
  18bd5c:	180b883a 	mov	r5,r3
  18bd60:	900d883a 	mov	r6,r18
  18bd64:	980f883a 	mov	r7,r19
  18bd68:	01943680 	call	194368 <__ledf2>
  18bd6c:	10040e16 	blt	r2,zero,18cda8 <_dtoa_r+0x163c>
  18bd70:	b821883a 	mov	r16,r23
  18bd74:	bd841026 	beq	r23,r22,18cdb8 <_dtoa_r+0x164c>
  18bd78:	9009883a 	mov	r4,r18
  18bd7c:	980b883a 	mov	r5,r19
  18bd80:	000d883a 	mov	r6,zero
  18bd84:	01d00934 	movhi	r7,16420
  18bd88:	01944480 	call	194448 <__muldf3>
  18bd8c:	000d883a 	mov	r6,zero
  18bd90:	01d00934 	movhi	r7,16420
  18bd94:	8809883a 	mov	r4,r17
  18bd98:	a00b883a 	mov	r5,r20
  18bd9c:	1025883a 	mov	r18,r2
  18bda0:	1827883a 	mov	r19,r3
  18bda4:	01944480 	call	194448 <__muldf3>
  18bda8:	180b883a 	mov	r5,r3
  18bdac:	1009883a 	mov	r4,r2
  18bdb0:	1823883a 	mov	r17,r3
  18bdb4:	1029883a 	mov	r20,r2
  18bdb8:	01955840 	call	195584 <__fixdfsi>
  18bdbc:	1009883a 	mov	r4,r2
  18bdc0:	102b883a 	mov	r21,r2
  18bdc4:	019560c0 	call	19560c <__floatsidf>
  18bdc8:	a009883a 	mov	r4,r20
  18bdcc:	880b883a 	mov	r5,r17
  18bdd0:	100d883a 	mov	r6,r2
  18bdd4:	180f883a 	mov	r7,r3
  18bdd8:	0194cb40 	call	194cb4 <__subdf3>
  18bddc:	ad400c04 	addi	r21,r21,48
  18bde0:	1009883a 	mov	r4,r2
  18bde4:	180b883a 	mov	r5,r3
  18bde8:	900d883a 	mov	r6,r18
  18bdec:	980f883a 	mov	r7,r19
  18bdf0:	85400005 	stb	r21,0(r16)
  18bdf4:	1023883a 	mov	r17,r2
  18bdf8:	1829883a 	mov	r20,r3
  18bdfc:	01943680 	call	194368 <__ledf2>
  18be00:	bdc00044 	addi	r23,r23,1
  18be04:	0009883a 	mov	r4,zero
  18be08:	014ffc34 	movhi	r5,16368
  18be0c:	880d883a 	mov	r6,r17
  18be10:	a00f883a 	mov	r7,r20
  18be14:	103fcf0e 	bge	r2,zero,18bd54 <__alt_data_end+0xfff8bd54>
  18be18:	d9801217 	ldw	r6,72(sp)
  18be1c:	dc001117 	ldw	r16,68(sp)
  18be20:	d9800515 	stw	r6,20(sp)
  18be24:	8009883a 	mov	r4,r16
  18be28:	e00b883a 	mov	r5,fp
  18be2c:	018ec6c0 	call	18ec6c <_Bfree>
  18be30:	d8c00517 	ldw	r3,20(sp)
  18be34:	d9002317 	ldw	r4,140(sp)
  18be38:	d9802517 	ldw	r6,148(sp)
  18be3c:	b8000005 	stb	zero,0(r23)
  18be40:	18800044 	addi	r2,r3,1
  18be44:	20800015 	stw	r2,0(r4)
  18be48:	30027226 	beq	r6,zero,18c814 <_dtoa_r+0x10a8>
  18be4c:	35c00015 	stw	r23,0(r6)
  18be50:	d8800717 	ldw	r2,28(sp)
  18be54:	003e7406 	br	18b828 <__alt_data_end+0xfff8b828>
  18be58:	00800434 	movhi	r2,16
  18be5c:	10bfffc4 	addi	r2,r2,-1
  18be60:	a8aa703a 	and	r21,r21,r2
  18be64:	a83e801e 	bne	r21,zero,18b868 <__alt_data_end+0xfff8b868>
  18be68:	008006b4 	movhi	r2,26
  18be6c:	10bd1904 	addi	r2,r2,-2972
  18be70:	003e7f06 	br	18b870 <__alt_data_end+0xfff8b870>
  18be74:	10c00204 	addi	r3,r2,8
  18be78:	003e8206 	br	18b884 <__alt_data_end+0xfff8b884>
  18be7c:	01400434 	movhi	r5,16
  18be80:	297fffc4 	addi	r5,r5,-1
  18be84:	994a703a 	and	r5,r19,r5
  18be88:	9009883a 	mov	r4,r18
  18be8c:	8c7f0044 	addi	r17,r17,-1023
  18be90:	294ffc34 	orhi	r5,r5,16368
  18be94:	dd000217 	ldw	r20,8(sp)
  18be98:	d8000f15 	stw	zero,60(sp)
  18be9c:	003e9f06 	br	18b91c <__alt_data_end+0xfff8b91c>
  18bea0:	008006b4 	movhi	r2,26
  18bea4:	10b6e804 	addi	r2,r2,-9312
  18bea8:	003e5f06 	br	18b828 <__alt_data_end+0xfff8b828>
  18beac:	80001115 	stw	zero,68(r16)
  18beb0:	8009883a 	mov	r4,r16
  18beb4:	000b883a 	mov	r5,zero
  18beb8:	018ebc40 	call	18ebc4 <_Balloc>
  18bebc:	01bfffc4 	movi	r6,-1
  18bec0:	d8800715 	stw	r2,28(sp)
  18bec4:	80801015 	stw	r2,64(r16)
  18bec8:	00800044 	movi	r2,1
  18becc:	d9800c15 	stw	r6,48(sp)
  18bed0:	d8800b15 	stw	r2,44(sp)
  18bed4:	d9800615 	stw	r6,24(sp)
  18bed8:	d8002215 	stw	zero,136(sp)
  18bedc:	d8000315 	stw	zero,12(sp)
  18bee0:	d8800117 	ldw	r2,4(sp)
  18bee4:	10008e16 	blt	r2,zero,18c120 <_dtoa_r+0x9b4>
  18bee8:	d9000517 	ldw	r4,20(sp)
  18beec:	00c00384 	movi	r3,14
  18bef0:	19008b16 	blt	r3,r4,18c120 <_dtoa_r+0x9b4>
  18bef4:	200490fa 	slli	r2,r4,3
  18bef8:	00c006b4 	movhi	r3,26
  18befc:	d9802217 	ldw	r6,136(sp)
  18bf00:	18fd3604 	addi	r3,r3,-2856
  18bf04:	1885883a 	add	r2,r3,r2
  18bf08:	14400017 	ldw	r17,0(r2)
  18bf0c:	15000117 	ldw	r20,4(r2)
  18bf10:	3001c716 	blt	r6,zero,18c630 <_dtoa_r+0xec4>
  18bf14:	880d883a 	mov	r6,r17
  18bf18:	a00f883a 	mov	r7,r20
  18bf1c:	9009883a 	mov	r4,r18
  18bf20:	980b883a 	mov	r5,r19
  18bf24:	01938840 	call	193884 <__divdf3>
  18bf28:	180b883a 	mov	r5,r3
  18bf2c:	1009883a 	mov	r4,r2
  18bf30:	01955840 	call	195584 <__fixdfsi>
  18bf34:	1009883a 	mov	r4,r2
  18bf38:	102d883a 	mov	r22,r2
  18bf3c:	019560c0 	call	19560c <__floatsidf>
  18bf40:	1009883a 	mov	r4,r2
  18bf44:	180b883a 	mov	r5,r3
  18bf48:	880d883a 	mov	r6,r17
  18bf4c:	a00f883a 	mov	r7,r20
  18bf50:	01944480 	call	194448 <__muldf3>
  18bf54:	9009883a 	mov	r4,r18
  18bf58:	980b883a 	mov	r5,r19
  18bf5c:	100d883a 	mov	r6,r2
  18bf60:	180f883a 	mov	r7,r3
  18bf64:	0194cb40 	call	194cb4 <__subdf3>
  18bf68:	d9000717 	ldw	r4,28(sp)
  18bf6c:	d9800617 	ldw	r6,24(sp)
  18bf70:	180b883a 	mov	r5,r3
  18bf74:	b0c00c04 	addi	r3,r22,48
  18bf78:	20c00005 	stb	r3,0(r4)
  18bf7c:	25c00044 	addi	r23,r4,1
  18bf80:	01000044 	movi	r4,1
  18bf84:	1011883a 	mov	r8,r2
  18bf88:	2807883a 	mov	r3,r5
  18bf8c:	31003d26 	beq	r6,r4,18c084 <_dtoa_r+0x918>
  18bf90:	000d883a 	mov	r6,zero
  18bf94:	01d00934 	movhi	r7,16420
  18bf98:	1009883a 	mov	r4,r2
  18bf9c:	01944480 	call	194448 <__muldf3>
  18bfa0:	1009883a 	mov	r4,r2
  18bfa4:	180b883a 	mov	r5,r3
  18bfa8:	000d883a 	mov	r6,zero
  18bfac:	000f883a 	mov	r7,zero
  18bfb0:	1027883a 	mov	r19,r2
  18bfb4:	182b883a 	mov	r21,r3
  18bfb8:	01942040 	call	194204 <__eqdf2>
  18bfbc:	103f9926 	beq	r2,zero,18be24 <__alt_data_end+0xfff8be24>
  18bfc0:	d8c00617 	ldw	r3,24(sp)
  18bfc4:	d9000717 	ldw	r4,28(sp)
  18bfc8:	b825883a 	mov	r18,r23
  18bfcc:	18bfffc4 	addi	r2,r3,-1
  18bfd0:	20ad883a 	add	r22,r4,r2
  18bfd4:	dc000315 	stw	r16,12(sp)
  18bfd8:	00000a06 	br	18c004 <_dtoa_r+0x898>
  18bfdc:	01944480 	call	194448 <__muldf3>
  18bfe0:	1009883a 	mov	r4,r2
  18bfe4:	180b883a 	mov	r5,r3
  18bfe8:	000d883a 	mov	r6,zero
  18bfec:	000f883a 	mov	r7,zero
  18bff0:	1027883a 	mov	r19,r2
  18bff4:	182b883a 	mov	r21,r3
  18bff8:	b825883a 	mov	r18,r23
  18bffc:	01942040 	call	194204 <__eqdf2>
  18c000:	10022626 	beq	r2,zero,18c89c <_dtoa_r+0x1130>
  18c004:	880d883a 	mov	r6,r17
  18c008:	a00f883a 	mov	r7,r20
  18c00c:	9809883a 	mov	r4,r19
  18c010:	a80b883a 	mov	r5,r21
  18c014:	01938840 	call	193884 <__divdf3>
  18c018:	180b883a 	mov	r5,r3
  18c01c:	1009883a 	mov	r4,r2
  18c020:	01955840 	call	195584 <__fixdfsi>
  18c024:	1009883a 	mov	r4,r2
  18c028:	1021883a 	mov	r16,r2
  18c02c:	019560c0 	call	19560c <__floatsidf>
  18c030:	1009883a 	mov	r4,r2
  18c034:	180b883a 	mov	r5,r3
  18c038:	880d883a 	mov	r6,r17
  18c03c:	a00f883a 	mov	r7,r20
  18c040:	01944480 	call	194448 <__muldf3>
  18c044:	9809883a 	mov	r4,r19
  18c048:	a80b883a 	mov	r5,r21
  18c04c:	100d883a 	mov	r6,r2
  18c050:	180f883a 	mov	r7,r3
  18c054:	0194cb40 	call	194cb4 <__subdf3>
  18c058:	82000c04 	addi	r8,r16,48
  18c05c:	92000005 	stb	r8,0(r18)
  18c060:	1009883a 	mov	r4,r2
  18c064:	180b883a 	mov	r5,r3
  18c068:	000d883a 	mov	r6,zero
  18c06c:	01d00934 	movhi	r7,16420
  18c070:	1011883a 	mov	r8,r2
  18c074:	bdc00044 	addi	r23,r23,1
  18c078:	95bfd81e 	bne	r18,r22,18bfdc <__alt_data_end+0xfff8bfdc>
  18c07c:	802d883a 	mov	r22,r16
  18c080:	dc000317 	ldw	r16,12(sp)
  18c084:	4009883a 	mov	r4,r8
  18c088:	180b883a 	mov	r5,r3
  18c08c:	400d883a 	mov	r6,r8
  18c090:	180f883a 	mov	r7,r3
  18c094:	0192fe80 	call	192fe8 <__adddf3>
  18c098:	8809883a 	mov	r4,r17
  18c09c:	a00b883a 	mov	r5,r20
  18c0a0:	100d883a 	mov	r6,r2
  18c0a4:	180f883a 	mov	r7,r3
  18c0a8:	1027883a 	mov	r19,r2
  18c0ac:	1825883a 	mov	r18,r3
  18c0b0:	01943680 	call	194368 <__ledf2>
  18c0b4:	10000816 	blt	r2,zero,18c0d8 <_dtoa_r+0x96c>
  18c0b8:	8809883a 	mov	r4,r17
  18c0bc:	a00b883a 	mov	r5,r20
  18c0c0:	980d883a 	mov	r6,r19
  18c0c4:	900f883a 	mov	r7,r18
  18c0c8:	01942040 	call	194204 <__eqdf2>
  18c0cc:	103f551e 	bne	r2,zero,18be24 <__alt_data_end+0xfff8be24>
  18c0d0:	b580004c 	andi	r22,r22,1
  18c0d4:	b03f5326 	beq	r22,zero,18be24 <__alt_data_end+0xfff8be24>
  18c0d8:	bd7fffc3 	ldbu	r21,-1(r23)
  18c0dc:	b8bfffc4 	addi	r2,r23,-1
  18c0e0:	1007883a 	mov	r3,r2
  18c0e4:	01400e44 	movi	r5,57
  18c0e8:	d9800717 	ldw	r6,28(sp)
  18c0ec:	00000506 	br	18c104 <_dtoa_r+0x998>
  18c0f0:	18ffffc4 	addi	r3,r3,-1
  18c0f4:	30825e26 	beq	r6,r2,18ca70 <_dtoa_r+0x1304>
  18c0f8:	1d400003 	ldbu	r21,0(r3)
  18c0fc:	102f883a 	mov	r23,r2
  18c100:	10bfffc4 	addi	r2,r2,-1
  18c104:	a9003fcc 	andi	r4,r21,255
  18c108:	2100201c 	xori	r4,r4,128
  18c10c:	213fe004 	addi	r4,r4,-128
  18c110:	217ff726 	beq	r4,r5,18c0f0 <__alt_data_end+0xfff8c0f0>
  18c114:	aa000044 	addi	r8,r21,1
  18c118:	12000005 	stb	r8,0(r2)
  18c11c:	003f4106 	br	18be24 <__alt_data_end+0xfff8be24>
  18c120:	d8c00b17 	ldw	r3,44(sp)
  18c124:	18006726 	beq	r3,zero,18c2c4 <_dtoa_r+0xb58>
  18c128:	d9000317 	ldw	r4,12(sp)
  18c12c:	00c00044 	movi	r3,1
  18c130:	19016a0e 	bge	r3,r4,18c6dc <_dtoa_r+0xf70>
  18c134:	d8800617 	ldw	r2,24(sp)
  18c138:	d8c00917 	ldw	r3,36(sp)
  18c13c:	157fffc4 	addi	r21,r2,-1
  18c140:	1d420716 	blt	r3,r21,18c960 <_dtoa_r+0x11f4>
  18c144:	1d6bc83a 	sub	r21,r3,r21
  18c148:	d8800617 	ldw	r2,24(sp)
  18c14c:	1002c716 	blt	r2,zero,18cc6c <_dtoa_r+0x1500>
  18c150:	dd000817 	ldw	r20,32(sp)
  18c154:	d8800617 	ldw	r2,24(sp)
  18c158:	d9800817 	ldw	r6,32(sp)
  18c15c:	8009883a 	mov	r4,r16
  18c160:	01400044 	movi	r5,1
  18c164:	308d883a 	add	r6,r6,r2
  18c168:	d9800815 	stw	r6,32(sp)
  18c16c:	b0ad883a 	add	r22,r22,r2
  18c170:	018eff80 	call	18eff8 <__i2b>
  18c174:	1023883a 	mov	r17,r2
  18c178:	a0000826 	beq	r20,zero,18c19c <_dtoa_r+0xa30>
  18c17c:	0580070e 	bge	zero,r22,18c19c <_dtoa_r+0xa30>
  18c180:	b005883a 	mov	r2,r22
  18c184:	a5812016 	blt	r20,r22,18c608 <_dtoa_r+0xe9c>
  18c188:	d8c00817 	ldw	r3,32(sp)
  18c18c:	a0a9c83a 	sub	r20,r20,r2
  18c190:	b0adc83a 	sub	r22,r22,r2
  18c194:	1887c83a 	sub	r3,r3,r2
  18c198:	d8c00815 	stw	r3,32(sp)
  18c19c:	d9000917 	ldw	r4,36(sp)
  18c1a0:	0100140e 	bge	zero,r4,18c1f4 <_dtoa_r+0xa88>
  18c1a4:	d9800b17 	ldw	r6,44(sp)
  18c1a8:	3001e526 	beq	r6,zero,18c940 <_dtoa_r+0x11d4>
  18c1ac:	05400e0e 	bge	zero,r21,18c1e8 <_dtoa_r+0xa7c>
  18c1b0:	880b883a 	mov	r5,r17
  18c1b4:	8009883a 	mov	r4,r16
  18c1b8:	a80d883a 	mov	r6,r21
  18c1bc:	018f2c40 	call	18f2c4 <__pow5mult>
  18c1c0:	e00d883a 	mov	r6,fp
  18c1c4:	8009883a 	mov	r4,r16
  18c1c8:	100b883a 	mov	r5,r2
  18c1cc:	1023883a 	mov	r17,r2
  18c1d0:	018f0340 	call	18f034 <__multiply>
  18c1d4:	102f883a 	mov	r23,r2
  18c1d8:	e00b883a 	mov	r5,fp
  18c1dc:	8009883a 	mov	r4,r16
  18c1e0:	018ec6c0 	call	18ec6c <_Bfree>
  18c1e4:	b839883a 	mov	fp,r23
  18c1e8:	d8800917 	ldw	r2,36(sp)
  18c1ec:	154dc83a 	sub	r6,r2,r21
  18c1f0:	3001281e 	bne	r6,zero,18c694 <_dtoa_r+0xf28>
  18c1f4:	05c00044 	movi	r23,1
  18c1f8:	8009883a 	mov	r4,r16
  18c1fc:	b80b883a 	mov	r5,r23
  18c200:	018eff80 	call	18eff8 <__i2b>
  18c204:	d8c00a17 	ldw	r3,40(sp)
  18c208:	102b883a 	mov	r21,r2
  18c20c:	00c0310e 	bge	zero,r3,18c2d4 <_dtoa_r+0xb68>
  18c210:	8009883a 	mov	r4,r16
  18c214:	100b883a 	mov	r5,r2
  18c218:	180d883a 	mov	r6,r3
  18c21c:	018f2c40 	call	18f2c4 <__pow5mult>
  18c220:	d9000317 	ldw	r4,12(sp)
  18c224:	102b883a 	mov	r21,r2
  18c228:	b9011f0e 	bge	r23,r4,18c6a8 <_dtoa_r+0xf3c>
  18c22c:	0027883a 	mov	r19,zero
  18c230:	a8800417 	ldw	r2,16(r21)
  18c234:	10800104 	addi	r2,r2,4
  18c238:	1085883a 	add	r2,r2,r2
  18c23c:	1085883a 	add	r2,r2,r2
  18c240:	a885883a 	add	r2,r21,r2
  18c244:	11000017 	ldw	r4,0(r2)
  18c248:	018eee00 	call	18eee0 <__hi0bits>
  18c24c:	00c00804 	movi	r3,32
  18c250:	1885c83a 	sub	r2,r3,r2
  18c254:	00002506 	br	18c2ec <_dtoa_r+0xb80>
  18c258:	01800044 	movi	r6,1
  18c25c:	d9800d15 	stw	r6,52(sp)
  18c260:	003dec06 	br	18ba14 <__alt_data_end+0xfff8ba14>
  18c264:	d8c00817 	ldw	r3,32(sp)
  18c268:	d9000517 	ldw	r4,20(sp)
  18c26c:	d8000a15 	stw	zero,40(sp)
  18c270:	1907c83a 	sub	r3,r3,r4
  18c274:	010dc83a 	sub	r6,zero,r4
  18c278:	d8c00815 	stw	r3,32(sp)
  18c27c:	d9800915 	stw	r6,36(sp)
  18c280:	003ded06 	br	18ba38 <__alt_data_end+0xfff8ba38>
  18c284:	05adc83a 	sub	r22,zero,r22
  18c288:	dd800815 	stw	r22,32(sp)
  18c28c:	002d883a 	mov	r22,zero
  18c290:	003de406 	br	18ba24 <__alt_data_end+0xfff8ba24>
  18c294:	d9000517 	ldw	r4,20(sp)
  18c298:	019560c0 	call	19560c <__floatsidf>
  18c29c:	1009883a 	mov	r4,r2
  18c2a0:	180b883a 	mov	r5,r3
  18c2a4:	b00d883a 	mov	r6,r22
  18c2a8:	a80f883a 	mov	r7,r21
  18c2ac:	01942040 	call	194204 <__eqdf2>
  18c2b0:	103dc726 	beq	r2,zero,18b9d0 <__alt_data_end+0xfff8b9d0>
  18c2b4:	d8800517 	ldw	r2,20(sp)
  18c2b8:	10bfffc4 	addi	r2,r2,-1
  18c2bc:	d8800515 	stw	r2,20(sp)
  18c2c0:	003dc306 	br	18b9d0 <__alt_data_end+0xfff8b9d0>
  18c2c4:	dd400917 	ldw	r21,36(sp)
  18c2c8:	dd000817 	ldw	r20,32(sp)
  18c2cc:	0023883a 	mov	r17,zero
  18c2d0:	003fa906 	br	18c178 <__alt_data_end+0xfff8c178>
  18c2d4:	d9800317 	ldw	r6,12(sp)
  18c2d8:	b981670e 	bge	r23,r6,18c878 <_dtoa_r+0x110c>
  18c2dc:	0027883a 	mov	r19,zero
  18c2e0:	d8c00a17 	ldw	r3,40(sp)
  18c2e4:	183fd21e 	bne	r3,zero,18c230 <__alt_data_end+0xfff8c230>
  18c2e8:	00800044 	movi	r2,1
  18c2ec:	1585883a 	add	r2,r2,r22
  18c2f0:	108007cc 	andi	r2,r2,31
  18c2f4:	10005f26 	beq	r2,zero,18c474 <_dtoa_r+0xd08>
  18c2f8:	00c00804 	movi	r3,32
  18c2fc:	1887c83a 	sub	r3,r3,r2
  18c300:	01000104 	movi	r4,4
  18c304:	20c2dd0e 	bge	r4,r3,18ce7c <_dtoa_r+0x1710>
  18c308:	d9000817 	ldw	r4,32(sp)
  18c30c:	00c00704 	movi	r3,28
  18c310:	1885c83a 	sub	r2,r3,r2
  18c314:	2089883a 	add	r4,r4,r2
  18c318:	d9000815 	stw	r4,32(sp)
  18c31c:	a0a9883a 	add	r20,r20,r2
  18c320:	b0ad883a 	add	r22,r22,r2
  18c324:	d8800817 	ldw	r2,32(sp)
  18c328:	0080050e 	bge	zero,r2,18c340 <_dtoa_r+0xbd4>
  18c32c:	e00b883a 	mov	r5,fp
  18c330:	8009883a 	mov	r4,r16
  18c334:	100d883a 	mov	r6,r2
  18c338:	018f4040 	call	18f404 <__lshift>
  18c33c:	1039883a 	mov	fp,r2
  18c340:	0580050e 	bge	zero,r22,18c358 <_dtoa_r+0xbec>
  18c344:	a80b883a 	mov	r5,r21
  18c348:	8009883a 	mov	r4,r16
  18c34c:	b00d883a 	mov	r6,r22
  18c350:	018f4040 	call	18f404 <__lshift>
  18c354:	102b883a 	mov	r21,r2
  18c358:	d8c00d17 	ldw	r3,52(sp)
  18c35c:	1801161e 	bne	r3,zero,18c7b8 <_dtoa_r+0x104c>
  18c360:	d8c00617 	ldw	r3,24(sp)
  18c364:	00c12d0e 	bge	zero,r3,18c81c <_dtoa_r+0x10b0>
  18c368:	d8c00b17 	ldw	r3,44(sp)
  18c36c:	1800571e 	bne	r3,zero,18c4cc <_dtoa_r+0xd60>
  18c370:	dc800717 	ldw	r18,28(sp)
  18c374:	dcc00617 	ldw	r19,24(sp)
  18c378:	9029883a 	mov	r20,r18
  18c37c:	00000206 	br	18c388 <_dtoa_r+0xc1c>
  18c380:	018ec940 	call	18ec94 <__multadd>
  18c384:	1039883a 	mov	fp,r2
  18c388:	e009883a 	mov	r4,fp
  18c38c:	a80b883a 	mov	r5,r21
  18c390:	018b5440 	call	18b544 <quorem>
  18c394:	10800c04 	addi	r2,r2,48
  18c398:	90800005 	stb	r2,0(r18)
  18c39c:	94800044 	addi	r18,r18,1
  18c3a0:	9507c83a 	sub	r3,r18,r20
  18c3a4:	8009883a 	mov	r4,r16
  18c3a8:	e00b883a 	mov	r5,fp
  18c3ac:	01800284 	movi	r6,10
  18c3b0:	000f883a 	mov	r7,zero
  18c3b4:	1cfff216 	blt	r3,r19,18c380 <__alt_data_end+0xfff8c380>
  18c3b8:	1011883a 	mov	r8,r2
  18c3bc:	d8800617 	ldw	r2,24(sp)
  18c3c0:	00822e0e 	bge	zero,r2,18cc7c <_dtoa_r+0x1510>
  18c3c4:	d9000717 	ldw	r4,28(sp)
  18c3c8:	0025883a 	mov	r18,zero
  18c3cc:	20af883a 	add	r23,r4,r2
  18c3d0:	e00b883a 	mov	r5,fp
  18c3d4:	01800044 	movi	r6,1
  18c3d8:	8009883a 	mov	r4,r16
  18c3dc:	da001715 	stw	r8,92(sp)
  18c3e0:	018f4040 	call	18f404 <__lshift>
  18c3e4:	1009883a 	mov	r4,r2
  18c3e8:	a80b883a 	mov	r5,r21
  18c3ec:	1039883a 	mov	fp,r2
  18c3f0:	018f5540 	call	18f554 <__mcmp>
  18c3f4:	da001717 	ldw	r8,92(sp)
  18c3f8:	00816e0e 	bge	zero,r2,18c9b4 <_dtoa_r+0x1248>
  18c3fc:	b93fffc3 	ldbu	r4,-1(r23)
  18c400:	b8bfffc4 	addi	r2,r23,-1
  18c404:	1007883a 	mov	r3,r2
  18c408:	01800e44 	movi	r6,57
  18c40c:	d9c00717 	ldw	r7,28(sp)
  18c410:	00000506 	br	18c428 <_dtoa_r+0xcbc>
  18c414:	18ffffc4 	addi	r3,r3,-1
  18c418:	38811926 	beq	r7,r2,18c880 <_dtoa_r+0x1114>
  18c41c:	19000003 	ldbu	r4,0(r3)
  18c420:	102f883a 	mov	r23,r2
  18c424:	10bfffc4 	addi	r2,r2,-1
  18c428:	21403fcc 	andi	r5,r4,255
  18c42c:	2940201c 	xori	r5,r5,128
  18c430:	297fe004 	addi	r5,r5,-128
  18c434:	29bff726 	beq	r5,r6,18c414 <__alt_data_end+0xfff8c414>
  18c438:	21000044 	addi	r4,r4,1
  18c43c:	11000005 	stb	r4,0(r2)
  18c440:	8009883a 	mov	r4,r16
  18c444:	a80b883a 	mov	r5,r21
  18c448:	018ec6c0 	call	18ec6c <_Bfree>
  18c44c:	883e7526 	beq	r17,zero,18be24 <__alt_data_end+0xfff8be24>
  18c450:	90000426 	beq	r18,zero,18c464 <_dtoa_r+0xcf8>
  18c454:	94400326 	beq	r18,r17,18c464 <_dtoa_r+0xcf8>
  18c458:	8009883a 	mov	r4,r16
  18c45c:	900b883a 	mov	r5,r18
  18c460:	018ec6c0 	call	18ec6c <_Bfree>
  18c464:	8009883a 	mov	r4,r16
  18c468:	880b883a 	mov	r5,r17
  18c46c:	018ec6c0 	call	18ec6c <_Bfree>
  18c470:	003e6c06 	br	18be24 <__alt_data_end+0xfff8be24>
  18c474:	00800704 	movi	r2,28
  18c478:	d9800817 	ldw	r6,32(sp)
  18c47c:	a0a9883a 	add	r20,r20,r2
  18c480:	b0ad883a 	add	r22,r22,r2
  18c484:	308d883a 	add	r6,r6,r2
  18c488:	d9800815 	stw	r6,32(sp)
  18c48c:	003fa506 	br	18c324 <__alt_data_end+0xfff8c324>
  18c490:	013efb84 	movi	r4,-1042
  18c494:	246bc83a 	sub	r21,r4,r17
  18c498:	9548983a 	sll	r4,r18,r21
  18c49c:	003d1806 	br	18b900 <__alt_data_end+0xfff8b900>
  18c4a0:	d8000d15 	stw	zero,52(sp)
  18c4a4:	003d5b06 	br	18ba14 <__alt_data_end+0xfff8ba14>
  18c4a8:	880b883a 	mov	r5,r17
  18c4ac:	8009883a 	mov	r4,r16
  18c4b0:	01800284 	movi	r6,10
  18c4b4:	000f883a 	mov	r7,zero
  18c4b8:	018ec940 	call	18ec94 <__multadd>
  18c4bc:	1023883a 	mov	r17,r2
  18c4c0:	d8800c17 	ldw	r2,48(sp)
  18c4c4:	0082550e 	bge	zero,r2,18ce1c <_dtoa_r+0x16b0>
  18c4c8:	d8800615 	stw	r2,24(sp)
  18c4cc:	0500050e 	bge	zero,r20,18c4e4 <_dtoa_r+0xd78>
  18c4d0:	880b883a 	mov	r5,r17
  18c4d4:	8009883a 	mov	r4,r16
  18c4d8:	a00d883a 	mov	r6,r20
  18c4dc:	018f4040 	call	18f404 <__lshift>
  18c4e0:	1023883a 	mov	r17,r2
  18c4e4:	98016a1e 	bne	r19,zero,18ca90 <_dtoa_r+0x1324>
  18c4e8:	8829883a 	mov	r20,r17
  18c4ec:	d9000617 	ldw	r4,24(sp)
  18c4f0:	dcc00717 	ldw	r19,28(sp)
  18c4f4:	9480004c 	andi	r18,r18,1
  18c4f8:	20bfffc4 	addi	r2,r4,-1
  18c4fc:	9885883a 	add	r2,r19,r2
  18c500:	d8800415 	stw	r2,16(sp)
  18c504:	dc800615 	stw	r18,24(sp)
  18c508:	e009883a 	mov	r4,fp
  18c50c:	a80b883a 	mov	r5,r21
  18c510:	018b5440 	call	18b544 <quorem>
  18c514:	e009883a 	mov	r4,fp
  18c518:	880b883a 	mov	r5,r17
  18c51c:	102f883a 	mov	r23,r2
  18c520:	018f5540 	call	18f554 <__mcmp>
  18c524:	8009883a 	mov	r4,r16
  18c528:	a80b883a 	mov	r5,r21
  18c52c:	a00d883a 	mov	r6,r20
  18c530:	102d883a 	mov	r22,r2
  18c534:	018f5b40 	call	18f5b4 <__mdiff>
  18c538:	1007883a 	mov	r3,r2
  18c53c:	10800317 	ldw	r2,12(r2)
  18c540:	bc800c04 	addi	r18,r23,48
  18c544:	1000971e 	bne	r2,zero,18c7a4 <_dtoa_r+0x1038>
  18c548:	180b883a 	mov	r5,r3
  18c54c:	e009883a 	mov	r4,fp
  18c550:	d8c01515 	stw	r3,84(sp)
  18c554:	018f5540 	call	18f554 <__mcmp>
  18c558:	d8c01517 	ldw	r3,84(sp)
  18c55c:	8009883a 	mov	r4,r16
  18c560:	d8801515 	stw	r2,84(sp)
  18c564:	180b883a 	mov	r5,r3
  18c568:	018ec6c0 	call	18ec6c <_Bfree>
  18c56c:	d8801517 	ldw	r2,84(sp)
  18c570:	1000041e 	bne	r2,zero,18c584 <_dtoa_r+0xe18>
  18c574:	d9800317 	ldw	r6,12(sp)
  18c578:	3000021e 	bne	r6,zero,18c584 <_dtoa_r+0xe18>
  18c57c:	d8c00617 	ldw	r3,24(sp)
  18c580:	18007626 	beq	r3,zero,18c75c <_dtoa_r+0xff0>
  18c584:	b0005b16 	blt	r22,zero,18c6f4 <_dtoa_r+0xf88>
  18c588:	b000041e 	bne	r22,zero,18c59c <_dtoa_r+0xe30>
  18c58c:	d9000317 	ldw	r4,12(sp)
  18c590:	2000021e 	bne	r4,zero,18c59c <_dtoa_r+0xe30>
  18c594:	d8c00617 	ldw	r3,24(sp)
  18c598:	18005626 	beq	r3,zero,18c6f4 <_dtoa_r+0xf88>
  18c59c:	00814d16 	blt	zero,r2,18cad4 <_dtoa_r+0x1368>
  18c5a0:	d8c00417 	ldw	r3,16(sp)
  18c5a4:	9d800044 	addi	r22,r19,1
  18c5a8:	9c800005 	stb	r18,0(r19)
  18c5ac:	b02f883a 	mov	r23,r22
  18c5b0:	98c14c26 	beq	r19,r3,18cae4 <_dtoa_r+0x1378>
  18c5b4:	e00b883a 	mov	r5,fp
  18c5b8:	8009883a 	mov	r4,r16
  18c5bc:	01800284 	movi	r6,10
  18c5c0:	000f883a 	mov	r7,zero
  18c5c4:	018ec940 	call	18ec94 <__multadd>
  18c5c8:	1039883a 	mov	fp,r2
  18c5cc:	8d006d26 	beq	r17,r20,18c784 <_dtoa_r+0x1018>
  18c5d0:	880b883a 	mov	r5,r17
  18c5d4:	01800284 	movi	r6,10
  18c5d8:	000f883a 	mov	r7,zero
  18c5dc:	8009883a 	mov	r4,r16
  18c5e0:	018ec940 	call	18ec94 <__multadd>
  18c5e4:	a00b883a 	mov	r5,r20
  18c5e8:	8009883a 	mov	r4,r16
  18c5ec:	01800284 	movi	r6,10
  18c5f0:	000f883a 	mov	r7,zero
  18c5f4:	1023883a 	mov	r17,r2
  18c5f8:	018ec940 	call	18ec94 <__multadd>
  18c5fc:	1029883a 	mov	r20,r2
  18c600:	b027883a 	mov	r19,r22
  18c604:	003fc006 	br	18c508 <__alt_data_end+0xfff8c508>
  18c608:	a005883a 	mov	r2,r20
  18c60c:	003ede06 	br	18c188 <__alt_data_end+0xfff8c188>
  18c610:	01000044 	movi	r4,1
  18c614:	d9000b15 	stw	r4,44(sp)
  18c618:	d9802217 	ldw	r6,136(sp)
  18c61c:	0180dc0e 	bge	zero,r6,18c990 <_dtoa_r+0x1224>
  18c620:	3023883a 	mov	r17,r6
  18c624:	d9800c15 	stw	r6,48(sp)
  18c628:	d9800615 	stw	r6,24(sp)
  18c62c:	003d1e06 	br	18baa8 <__alt_data_end+0xfff8baa8>
  18c630:	d8800617 	ldw	r2,24(sp)
  18c634:	00be3716 	blt	zero,r2,18bf14 <__alt_data_end+0xfff8bf14>
  18c638:	1000be1e 	bne	r2,zero,18c934 <_dtoa_r+0x11c8>
  18c63c:	8809883a 	mov	r4,r17
  18c640:	a00b883a 	mov	r5,r20
  18c644:	000d883a 	mov	r6,zero
  18c648:	01d00534 	movhi	r7,16404
  18c64c:	01944480 	call	194448 <__muldf3>
  18c650:	1009883a 	mov	r4,r2
  18c654:	180b883a 	mov	r5,r3
  18c658:	900d883a 	mov	r6,r18
  18c65c:	980f883a 	mov	r7,r19
  18c660:	01942880 	call	194288 <__gedf2>
  18c664:	002b883a 	mov	r21,zero
  18c668:	0023883a 	mov	r17,zero
  18c66c:	10007a16 	blt	r2,zero,18c858 <_dtoa_r+0x10ec>
  18c670:	d9002217 	ldw	r4,136(sp)
  18c674:	ddc00717 	ldw	r23,28(sp)
  18c678:	0108303a 	nor	r4,zero,r4
  18c67c:	d9000515 	stw	r4,20(sp)
  18c680:	8009883a 	mov	r4,r16
  18c684:	a80b883a 	mov	r5,r21
  18c688:	018ec6c0 	call	18ec6c <_Bfree>
  18c68c:	883f751e 	bne	r17,zero,18c464 <__alt_data_end+0xfff8c464>
  18c690:	003de406 	br	18be24 <__alt_data_end+0xfff8be24>
  18c694:	e00b883a 	mov	r5,fp
  18c698:	8009883a 	mov	r4,r16
  18c69c:	018f2c40 	call	18f2c4 <__pow5mult>
  18c6a0:	1039883a 	mov	fp,r2
  18c6a4:	003ed306 	br	18c1f4 <__alt_data_end+0xfff8c1f4>
  18c6a8:	903ee01e 	bne	r18,zero,18c22c <__alt_data_end+0xfff8c22c>
  18c6ac:	00800434 	movhi	r2,16
  18c6b0:	10bfffc4 	addi	r2,r2,-1
  18c6b4:	9884703a 	and	r2,r19,r2
  18c6b8:	103f081e 	bne	r2,zero,18c2dc <__alt_data_end+0xfff8c2dc>
  18c6bc:	9cdffc2c 	andhi	r19,r19,32752
  18c6c0:	983f0626 	beq	r19,zero,18c2dc <__alt_data_end+0xfff8c2dc>
  18c6c4:	d8800817 	ldw	r2,32(sp)
  18c6c8:	b5800044 	addi	r22,r22,1
  18c6cc:	04c00044 	movi	r19,1
  18c6d0:	10800044 	addi	r2,r2,1
  18c6d4:	d8800815 	stw	r2,32(sp)
  18c6d8:	003f0106 	br	18c2e0 <__alt_data_end+0xfff8c2e0>
  18c6dc:	d9800f17 	ldw	r6,60(sp)
  18c6e0:	30016826 	beq	r6,zero,18cc84 <_dtoa_r+0x1518>
  18c6e4:	10810cc4 	addi	r2,r2,1075
  18c6e8:	dd400917 	ldw	r21,36(sp)
  18c6ec:	dd000817 	ldw	r20,32(sp)
  18c6f0:	003e9906 	br	18c158 <__alt_data_end+0xfff8c158>
  18c6f4:	9011883a 	mov	r8,r18
  18c6f8:	4007883a 	mov	r3,r8
  18c6fc:	e02d883a 	mov	r22,fp
  18c700:	0080100e 	bge	zero,r2,18c744 <_dtoa_r+0xfd8>
  18c704:	01800044 	movi	r6,1
  18c708:	8009883a 	mov	r4,r16
  18c70c:	e00b883a 	mov	r5,fp
  18c710:	da001515 	stw	r8,84(sp)
  18c714:	da001715 	stw	r8,92(sp)
  18c718:	018f4040 	call	18f404 <__lshift>
  18c71c:	1009883a 	mov	r4,r2
  18c720:	a80b883a 	mov	r5,r21
  18c724:	102d883a 	mov	r22,r2
  18c728:	018f5540 	call	18f554 <__mcmp>
  18c72c:	d8c01517 	ldw	r3,84(sp)
  18c730:	da001717 	ldw	r8,92(sp)
  18c734:	0081a50e 	bge	zero,r2,18cdcc <_dtoa_r+0x1660>
  18c738:	00800e44 	movi	r2,57
  18c73c:	40817b26 	beq	r8,r2,18cd2c <_dtoa_r+0x15c0>
  18c740:	40c00044 	addi	r3,r8,1
  18c744:	8825883a 	mov	r18,r17
  18c748:	9dc00044 	addi	r23,r19,1
  18c74c:	98c00005 	stb	r3,0(r19)
  18c750:	a023883a 	mov	r17,r20
  18c754:	b039883a 	mov	fp,r22
  18c758:	003f3906 	br	18c440 <__alt_data_end+0xfff8c440>
  18c75c:	00800e44 	movi	r2,57
  18c760:	9011883a 	mov	r8,r18
  18c764:	90817226 	beq	r18,r2,18cd30 <_dtoa_r+0x15c4>
  18c768:	0580010e 	bge	zero,r22,18c770 <_dtoa_r+0x1004>
  18c76c:	ba000c44 	addi	r8,r23,49
  18c770:	8825883a 	mov	r18,r17
  18c774:	9dc00044 	addi	r23,r19,1
  18c778:	9a000005 	stb	r8,0(r19)
  18c77c:	a023883a 	mov	r17,r20
  18c780:	003f2f06 	br	18c440 <__alt_data_end+0xfff8c440>
  18c784:	880b883a 	mov	r5,r17
  18c788:	8009883a 	mov	r4,r16
  18c78c:	01800284 	movi	r6,10
  18c790:	000f883a 	mov	r7,zero
  18c794:	018ec940 	call	18ec94 <__multadd>
  18c798:	1023883a 	mov	r17,r2
  18c79c:	1029883a 	mov	r20,r2
  18c7a0:	003f9706 	br	18c600 <__alt_data_end+0xfff8c600>
  18c7a4:	8009883a 	mov	r4,r16
  18c7a8:	180b883a 	mov	r5,r3
  18c7ac:	018ec6c0 	call	18ec6c <_Bfree>
  18c7b0:	00800044 	movi	r2,1
  18c7b4:	003f7306 	br	18c584 <__alt_data_end+0xfff8c584>
  18c7b8:	e009883a 	mov	r4,fp
  18c7bc:	a80b883a 	mov	r5,r21
  18c7c0:	018f5540 	call	18f554 <__mcmp>
  18c7c4:	103ee60e 	bge	r2,zero,18c360 <__alt_data_end+0xfff8c360>
  18c7c8:	8009883a 	mov	r4,r16
  18c7cc:	e00b883a 	mov	r5,fp
  18c7d0:	01800284 	movi	r6,10
  18c7d4:	000f883a 	mov	r7,zero
  18c7d8:	018ec940 	call	18ec94 <__multadd>
  18c7dc:	d9000517 	ldw	r4,20(sp)
  18c7e0:	d9800b17 	ldw	r6,44(sp)
  18c7e4:	1039883a 	mov	fp,r2
  18c7e8:	213fffc4 	addi	r4,r4,-1
  18c7ec:	d9000515 	stw	r4,20(sp)
  18c7f0:	303f2d1e 	bne	r6,zero,18c4a8 <__alt_data_end+0xfff8c4a8>
  18c7f4:	d9000c17 	ldw	r4,48(sp)
  18c7f8:	0101780e 	bge	zero,r4,18cddc <_dtoa_r+0x1670>
  18c7fc:	d9000615 	stw	r4,24(sp)
  18c800:	003edb06 	br	18c370 <__alt_data_end+0xfff8c370>
  18c804:	00800084 	movi	r2,2
  18c808:	30818e1e 	bne	r6,r2,18ce44 <_dtoa_r+0x16d8>
  18c80c:	d8000b15 	stw	zero,44(sp)
  18c810:	003f8106 	br	18c618 <__alt_data_end+0xfff8c618>
  18c814:	d8800717 	ldw	r2,28(sp)
  18c818:	003c0306 	br	18b828 <__alt_data_end+0xfff8b828>
  18c81c:	d9000317 	ldw	r4,12(sp)
  18c820:	00800084 	movi	r2,2
  18c824:	113ed00e 	bge	r2,r4,18c368 <__alt_data_end+0xfff8c368>
  18c828:	d8c00617 	ldw	r3,24(sp)
  18c82c:	183f901e 	bne	r3,zero,18c670 <__alt_data_end+0xfff8c670>
  18c830:	a80b883a 	mov	r5,r21
  18c834:	8009883a 	mov	r4,r16
  18c838:	01800144 	movi	r6,5
  18c83c:	000f883a 	mov	r7,zero
  18c840:	018ec940 	call	18ec94 <__multadd>
  18c844:	e009883a 	mov	r4,fp
  18c848:	100b883a 	mov	r5,r2
  18c84c:	102b883a 	mov	r21,r2
  18c850:	018f5540 	call	18f554 <__mcmp>
  18c854:	00bf860e 	bge	zero,r2,18c670 <__alt_data_end+0xfff8c670>
  18c858:	d9800717 	ldw	r6,28(sp)
  18c85c:	00800c44 	movi	r2,49
  18c860:	30800005 	stb	r2,0(r6)
  18c864:	d8800517 	ldw	r2,20(sp)
  18c868:	35c00044 	addi	r23,r6,1
  18c86c:	10800044 	addi	r2,r2,1
  18c870:	d8800515 	stw	r2,20(sp)
  18c874:	003f8206 	br	18c680 <__alt_data_end+0xfff8c680>
  18c878:	903e981e 	bne	r18,zero,18c2dc <__alt_data_end+0xfff8c2dc>
  18c87c:	003f8b06 	br	18c6ac <__alt_data_end+0xfff8c6ac>
  18c880:	d9800517 	ldw	r6,20(sp)
  18c884:	d8c00717 	ldw	r3,28(sp)
  18c888:	00800c44 	movi	r2,49
  18c88c:	31800044 	addi	r6,r6,1
  18c890:	d9800515 	stw	r6,20(sp)
  18c894:	18800005 	stb	r2,0(r3)
  18c898:	003ee906 	br	18c440 <__alt_data_end+0xfff8c440>
  18c89c:	dc000317 	ldw	r16,12(sp)
  18c8a0:	003d6006 	br	18be24 <__alt_data_end+0xfff8be24>
  18c8a4:	8809883a 	mov	r4,r17
  18c8a8:	019560c0 	call	19560c <__floatsidf>
  18c8ac:	a009883a 	mov	r4,r20
  18c8b0:	a80b883a 	mov	r5,r21
  18c8b4:	100d883a 	mov	r6,r2
  18c8b8:	180f883a 	mov	r7,r3
  18c8bc:	01944480 	call	194448 <__muldf3>
  18c8c0:	1009883a 	mov	r4,r2
  18c8c4:	180b883a 	mov	r5,r3
  18c8c8:	000d883a 	mov	r6,zero
  18c8cc:	01d00734 	movhi	r7,16412
  18c8d0:	0192fe80 	call	192fe8 <__adddf3>
  18c8d4:	1023883a 	mov	r17,r2
  18c8d8:	00bf3034 	movhi	r2,64704
  18c8dc:	1885883a 	add	r2,r3,r2
  18c8e0:	d8800e15 	stw	r2,56(sp)
  18c8e4:	a009883a 	mov	r4,r20
  18c8e8:	a80b883a 	mov	r5,r21
  18c8ec:	000d883a 	mov	r6,zero
  18c8f0:	01d00534 	movhi	r7,16404
  18c8f4:	0194cb40 	call	194cb4 <__subdf3>
  18c8f8:	d9c00e17 	ldw	r7,56(sp)
  18c8fc:	1009883a 	mov	r4,r2
  18c900:	180b883a 	mov	r5,r3
  18c904:	880d883a 	mov	r6,r17
  18c908:	102b883a 	mov	r21,r2
  18c90c:	1829883a 	mov	r20,r3
  18c910:	01942880 	call	194288 <__gedf2>
  18c914:	00807716 	blt	zero,r2,18caf4 <_dtoa_r+0x1388>
  18c918:	d8800e17 	ldw	r2,56(sp)
  18c91c:	a809883a 	mov	r4,r21
  18c920:	a00b883a 	mov	r5,r20
  18c924:	11e0003c 	xorhi	r7,r2,32768
  18c928:	880d883a 	mov	r6,r17
  18c92c:	01943680 	call	194368 <__ledf2>
  18c930:	103d6b0e 	bge	r2,zero,18bee0 <__alt_data_end+0xfff8bee0>
  18c934:	002b883a 	mov	r21,zero
  18c938:	0023883a 	mov	r17,zero
  18c93c:	003f4c06 	br	18c670 <__alt_data_end+0xfff8c670>
  18c940:	d9800917 	ldw	r6,36(sp)
  18c944:	e00b883a 	mov	r5,fp
  18c948:	8009883a 	mov	r4,r16
  18c94c:	018f2c40 	call	18f2c4 <__pow5mult>
  18c950:	1039883a 	mov	fp,r2
  18c954:	003e2706 	br	18c1f4 <__alt_data_end+0xfff8c1f4>
  18c958:	d8000b15 	stw	zero,44(sp)
  18c95c:	003c4906 	br	18ba84 <__alt_data_end+0xfff8ba84>
  18c960:	d9000917 	ldw	r4,36(sp)
  18c964:	d9800a17 	ldw	r6,40(sp)
  18c968:	dd400915 	stw	r21,36(sp)
  18c96c:	a905c83a 	sub	r2,r21,r4
  18c970:	308d883a 	add	r6,r6,r2
  18c974:	d9800a15 	stw	r6,40(sp)
  18c978:	002b883a 	mov	r21,zero
  18c97c:	003df206 	br	18c148 <__alt_data_end+0xfff8c148>
  18c980:	dc800e15 	stw	r18,56(sp)
  18c984:	982b883a 	mov	r21,r19
  18c988:	04400084 	movi	r17,2
  18c98c:	003c7406 	br	18bb60 <__alt_data_end+0xfff8bb60>
  18c990:	04400044 	movi	r17,1
  18c994:	dc400c15 	stw	r17,48(sp)
  18c998:	dc400615 	stw	r17,24(sp)
  18c99c:	dc402215 	stw	r17,136(sp)
  18c9a0:	80001115 	stw	zero,68(r16)
  18c9a4:	000b883a 	mov	r5,zero
  18c9a8:	003c4a06 	br	18bad4 <__alt_data_end+0xfff8bad4>
  18c9ac:	3023883a 	mov	r17,r6
  18c9b0:	003ffb06 	br	18c9a0 <__alt_data_end+0xfff8c9a0>
  18c9b4:	1000021e 	bne	r2,zero,18c9c0 <_dtoa_r+0x1254>
  18c9b8:	4200004c 	andi	r8,r8,1
  18c9bc:	403e8f1e 	bne	r8,zero,18c3fc <__alt_data_end+0xfff8c3fc>
  18c9c0:	01000c04 	movi	r4,48
  18c9c4:	00000106 	br	18c9cc <_dtoa_r+0x1260>
  18c9c8:	102f883a 	mov	r23,r2
  18c9cc:	b8bfffc4 	addi	r2,r23,-1
  18c9d0:	10c00007 	ldb	r3,0(r2)
  18c9d4:	193ffc26 	beq	r3,r4,18c9c8 <__alt_data_end+0xfff8c9c8>
  18c9d8:	003e9906 	br	18c440 <__alt_data_end+0xfff8c440>
  18c9dc:	d9000517 	ldw	r4,20(sp)
  18c9e0:	012fc83a 	sub	r23,zero,r4
  18c9e4:	b800ad26 	beq	r23,zero,18cc9c <_dtoa_r+0x1530>
  18c9e8:	b88003cc 	andi	r2,r23,15
  18c9ec:	100490fa 	slli	r2,r2,3
  18c9f0:	00c006b4 	movhi	r3,26
  18c9f4:	18fd3604 	addi	r3,r3,-2856
  18c9f8:	1885883a 	add	r2,r3,r2
  18c9fc:	11800017 	ldw	r6,0(r2)
  18ca00:	11c00117 	ldw	r7,4(r2)
  18ca04:	b82fd13a 	srai	r23,r23,4
  18ca08:	9009883a 	mov	r4,r18
  18ca0c:	980b883a 	mov	r5,r19
  18ca10:	01944480 	call	194448 <__muldf3>
  18ca14:	1029883a 	mov	r20,r2
  18ca18:	182b883a 	mov	r21,r3
  18ca1c:	b800f426 	beq	r23,zero,18cdf0 <_dtoa_r+0x1684>
  18ca20:	020006b4 	movhi	r8,26
  18ca24:	423d2c04 	addi	r8,r8,-2896
  18ca28:	8029883a 	mov	r20,r16
  18ca2c:	04400084 	movi	r17,2
  18ca30:	4021883a 	mov	r16,r8
  18ca34:	b980004c 	andi	r6,r23,1
  18ca38:	1009883a 	mov	r4,r2
  18ca3c:	b82fd07a 	srai	r23,r23,1
  18ca40:	180b883a 	mov	r5,r3
  18ca44:	30000426 	beq	r6,zero,18ca58 <_dtoa_r+0x12ec>
  18ca48:	81800017 	ldw	r6,0(r16)
  18ca4c:	81c00117 	ldw	r7,4(r16)
  18ca50:	8c400044 	addi	r17,r17,1
  18ca54:	01944480 	call	194448 <__muldf3>
  18ca58:	84000204 	addi	r16,r16,8
  18ca5c:	b83ff51e 	bne	r23,zero,18ca34 <__alt_data_end+0xfff8ca34>
  18ca60:	a021883a 	mov	r16,r20
  18ca64:	182b883a 	mov	r21,r3
  18ca68:	1029883a 	mov	r20,r2
  18ca6c:	003c5506 	br	18bbc4 <__alt_data_end+0xfff8bbc4>
  18ca70:	d9800517 	ldw	r6,20(sp)
  18ca74:	d9000717 	ldw	r4,28(sp)
  18ca78:	00c00c04 	movi	r3,48
  18ca7c:	31800044 	addi	r6,r6,1
  18ca80:	d9800515 	stw	r6,20(sp)
  18ca84:	20c00005 	stb	r3,0(r4)
  18ca88:	02000c44 	movi	r8,49
  18ca8c:	003da206 	br	18c118 <__alt_data_end+0xfff8c118>
  18ca90:	89400117 	ldw	r5,4(r17)
  18ca94:	8009883a 	mov	r4,r16
  18ca98:	018ebc40 	call	18ebc4 <_Balloc>
  18ca9c:	89800417 	ldw	r6,16(r17)
  18caa0:	11000304 	addi	r4,r2,12
  18caa4:	89400304 	addi	r5,r17,12
  18caa8:	31800084 	addi	r6,r6,2
  18caac:	318d883a 	add	r6,r6,r6
  18cab0:	318d883a 	add	r6,r6,r6
  18cab4:	1027883a 	mov	r19,r2
  18cab8:	0188e800 	call	188e80 <memcpy>
  18cabc:	8009883a 	mov	r4,r16
  18cac0:	980b883a 	mov	r5,r19
  18cac4:	01800044 	movi	r6,1
  18cac8:	018f4040 	call	18f404 <__lshift>
  18cacc:	1029883a 	mov	r20,r2
  18cad0:	003e8606 	br	18c4ec <__alt_data_end+0xfff8c4ec>
  18cad4:	00800e44 	movi	r2,57
  18cad8:	90809526 	beq	r18,r2,18cd30 <_dtoa_r+0x15c4>
  18cadc:	92000044 	addi	r8,r18,1
  18cae0:	003f2306 	br	18c770 <__alt_data_end+0xfff8c770>
  18cae4:	9011883a 	mov	r8,r18
  18cae8:	8825883a 	mov	r18,r17
  18caec:	a023883a 	mov	r17,r20
  18caf0:	003e3706 	br	18c3d0 <__alt_data_end+0xfff8c3d0>
  18caf4:	002b883a 	mov	r21,zero
  18caf8:	0023883a 	mov	r17,zero
  18cafc:	003f5606 	br	18c858 <__alt_data_end+0xfff8c858>
  18cb00:	51bfffc4 	addi	r6,r10,-1
  18cb04:	300490fa 	slli	r2,r6,3
  18cb08:	00c006b4 	movhi	r3,26
  18cb0c:	18fd3604 	addi	r3,r3,-2856
  18cb10:	1885883a 	add	r2,r3,r2
  18cb14:	d9c00e17 	ldw	r7,56(sp)
  18cb18:	11000017 	ldw	r4,0(r2)
  18cb1c:	11400117 	ldw	r5,4(r2)
  18cb20:	d8800717 	ldw	r2,28(sp)
  18cb24:	d9801015 	stw	r6,64(sp)
  18cb28:	880d883a 	mov	r6,r17
  18cb2c:	da801615 	stw	r10,88(sp)
  18cb30:	15c00044 	addi	r23,r2,1
  18cb34:	01944480 	call	194448 <__muldf3>
  18cb38:	a80b883a 	mov	r5,r21
  18cb3c:	a009883a 	mov	r4,r20
  18cb40:	d8c01115 	stw	r3,68(sp)
  18cb44:	d8800e15 	stw	r2,56(sp)
  18cb48:	01955840 	call	195584 <__fixdfsi>
  18cb4c:	1009883a 	mov	r4,r2
  18cb50:	1023883a 	mov	r17,r2
  18cb54:	019560c0 	call	19560c <__floatsidf>
  18cb58:	a009883a 	mov	r4,r20
  18cb5c:	a80b883a 	mov	r5,r21
  18cb60:	100d883a 	mov	r6,r2
  18cb64:	180f883a 	mov	r7,r3
  18cb68:	0194cb40 	call	194cb4 <__subdf3>
  18cb6c:	1813883a 	mov	r9,r3
  18cb70:	d8c00717 	ldw	r3,28(sp)
  18cb74:	8c400c04 	addi	r17,r17,48
  18cb78:	1011883a 	mov	r8,r2
  18cb7c:	1c400005 	stb	r17,0(r3)
  18cb80:	da801617 	ldw	r10,88(sp)
  18cb84:	00800044 	movi	r2,1
  18cb88:	50802326 	beq	r10,r2,18cc18 <_dtoa_r+0x14ac>
  18cb8c:	d8800717 	ldw	r2,28(sp)
  18cb90:	b82b883a 	mov	r21,r23
  18cb94:	dc001315 	stw	r16,76(sp)
  18cb98:	12a9883a 	add	r20,r2,r10
  18cb9c:	4807883a 	mov	r3,r9
  18cba0:	4005883a 	mov	r2,r8
  18cba4:	dc801415 	stw	r18,80(sp)
  18cba8:	000d883a 	mov	r6,zero
  18cbac:	01d00934 	movhi	r7,16420
  18cbb0:	1009883a 	mov	r4,r2
  18cbb4:	180b883a 	mov	r5,r3
  18cbb8:	01944480 	call	194448 <__muldf3>
  18cbbc:	180b883a 	mov	r5,r3
  18cbc0:	1009883a 	mov	r4,r2
  18cbc4:	1821883a 	mov	r16,r3
  18cbc8:	1025883a 	mov	r18,r2
  18cbcc:	01955840 	call	195584 <__fixdfsi>
  18cbd0:	1009883a 	mov	r4,r2
  18cbd4:	1023883a 	mov	r17,r2
  18cbd8:	019560c0 	call	19560c <__floatsidf>
  18cbdc:	9009883a 	mov	r4,r18
  18cbe0:	800b883a 	mov	r5,r16
  18cbe4:	100d883a 	mov	r6,r2
  18cbe8:	180f883a 	mov	r7,r3
  18cbec:	8c400c04 	addi	r17,r17,48
  18cbf0:	0194cb40 	call	194cb4 <__subdf3>
  18cbf4:	ad400044 	addi	r21,r21,1
  18cbf8:	ac7fffc5 	stb	r17,-1(r21)
  18cbfc:	ad3fea1e 	bne	r21,r20,18cba8 <__alt_data_end+0xfff8cba8>
  18cc00:	1813883a 	mov	r9,r3
  18cc04:	d8c01017 	ldw	r3,64(sp)
  18cc08:	dc001317 	ldw	r16,76(sp)
  18cc0c:	dc801417 	ldw	r18,80(sp)
  18cc10:	1011883a 	mov	r8,r2
  18cc14:	b8ef883a 	add	r23,r23,r3
  18cc18:	d9000e17 	ldw	r4,56(sp)
  18cc1c:	d9401117 	ldw	r5,68(sp)
  18cc20:	000d883a 	mov	r6,zero
  18cc24:	01cff834 	movhi	r7,16352
  18cc28:	da001715 	stw	r8,92(sp)
  18cc2c:	da401515 	stw	r9,84(sp)
  18cc30:	0192fe80 	call	192fe8 <__adddf3>
  18cc34:	da001717 	ldw	r8,92(sp)
  18cc38:	da401517 	ldw	r9,84(sp)
  18cc3c:	1009883a 	mov	r4,r2
  18cc40:	400d883a 	mov	r6,r8
  18cc44:	480f883a 	mov	r7,r9
  18cc48:	180b883a 	mov	r5,r3
  18cc4c:	01943680 	call	194368 <__ledf2>
  18cc50:	da001717 	ldw	r8,92(sp)
  18cc54:	da401517 	ldw	r9,84(sp)
  18cc58:	10003b0e 	bge	r2,zero,18cd48 <_dtoa_r+0x15dc>
  18cc5c:	d9001217 	ldw	r4,72(sp)
  18cc60:	bd7fffc3 	ldbu	r21,-1(r23)
  18cc64:	d9000515 	stw	r4,20(sp)
  18cc68:	003d1c06 	br	18c0dc <__alt_data_end+0xfff8c0dc>
  18cc6c:	d8c00817 	ldw	r3,32(sp)
  18cc70:	18a9c83a 	sub	r20,r3,r2
  18cc74:	0005883a 	mov	r2,zero
  18cc78:	003d3706 	br	18c158 <__alt_data_end+0xfff8c158>
  18cc7c:	00800044 	movi	r2,1
  18cc80:	003dd006 	br	18c3c4 <__alt_data_end+0xfff8c3c4>
  18cc84:	d8c00217 	ldw	r3,8(sp)
  18cc88:	00800d84 	movi	r2,54
  18cc8c:	dd400917 	ldw	r21,36(sp)
  18cc90:	10c5c83a 	sub	r2,r2,r3
  18cc94:	dd000817 	ldw	r20,32(sp)
  18cc98:	003d2f06 	br	18c158 <__alt_data_end+0xfff8c158>
  18cc9c:	9029883a 	mov	r20,r18
  18cca0:	982b883a 	mov	r21,r19
  18cca4:	04400084 	movi	r17,2
  18cca8:	003bc606 	br	18bbc4 <__alt_data_end+0xfff8bbc4>
  18ccac:	d8800617 	ldw	r2,24(sp)
  18ccb0:	103efc26 	beq	r2,zero,18c8a4 <__alt_data_end+0xfff8c8a4>
  18ccb4:	d8c00c17 	ldw	r3,48(sp)
  18ccb8:	00fc890e 	bge	zero,r3,18bee0 <__alt_data_end+0xfff8bee0>
  18ccbc:	a80b883a 	mov	r5,r21
  18ccc0:	a009883a 	mov	r4,r20
  18ccc4:	000d883a 	mov	r6,zero
  18ccc8:	01d00934 	movhi	r7,16420
  18cccc:	01944480 	call	194448 <__muldf3>
  18ccd0:	89000044 	addi	r4,r17,1
  18ccd4:	1029883a 	mov	r20,r2
  18ccd8:	182b883a 	mov	r21,r3
  18ccdc:	019560c0 	call	19560c <__floatsidf>
  18cce0:	a009883a 	mov	r4,r20
  18cce4:	a80b883a 	mov	r5,r21
  18cce8:	100d883a 	mov	r6,r2
  18ccec:	180f883a 	mov	r7,r3
  18ccf0:	01944480 	call	194448 <__muldf3>
  18ccf4:	1009883a 	mov	r4,r2
  18ccf8:	180b883a 	mov	r5,r3
  18ccfc:	000d883a 	mov	r6,zero
  18cd00:	01d00734 	movhi	r7,16412
  18cd04:	0192fe80 	call	192fe8 <__adddf3>
  18cd08:	d9000517 	ldw	r4,20(sp)
  18cd0c:	1023883a 	mov	r17,r2
  18cd10:	00bf3034 	movhi	r2,64704
  18cd14:	213fffc4 	addi	r4,r4,-1
  18cd18:	1885883a 	add	r2,r3,r2
  18cd1c:	d9001215 	stw	r4,72(sp)
  18cd20:	d8800e15 	stw	r2,56(sp)
  18cd24:	da800c17 	ldw	r10,48(sp)
  18cd28:	003bc306 	br	18bc38 <__alt_data_end+0xfff8bc38>
  18cd2c:	b039883a 	mov	fp,r22
  18cd30:	01000e44 	movi	r4,57
  18cd34:	8825883a 	mov	r18,r17
  18cd38:	9dc00044 	addi	r23,r19,1
  18cd3c:	99000005 	stb	r4,0(r19)
  18cd40:	a023883a 	mov	r17,r20
  18cd44:	003dae06 	br	18c400 <__alt_data_end+0xfff8c400>
  18cd48:	d9800e17 	ldw	r6,56(sp)
  18cd4c:	d9c01117 	ldw	r7,68(sp)
  18cd50:	0009883a 	mov	r4,zero
  18cd54:	014ff834 	movhi	r5,16352
  18cd58:	da001715 	stw	r8,92(sp)
  18cd5c:	da401515 	stw	r9,84(sp)
  18cd60:	0194cb40 	call	194cb4 <__subdf3>
  18cd64:	da001717 	ldw	r8,92(sp)
  18cd68:	da401517 	ldw	r9,84(sp)
  18cd6c:	1009883a 	mov	r4,r2
  18cd70:	180b883a 	mov	r5,r3
  18cd74:	400d883a 	mov	r6,r8
  18cd78:	480f883a 	mov	r7,r9
  18cd7c:	01942880 	call	194288 <__gedf2>
  18cd80:	00bc570e 	bge	zero,r2,18bee0 <__alt_data_end+0xfff8bee0>
  18cd84:	01000c04 	movi	r4,48
  18cd88:	00000106 	br	18cd90 <_dtoa_r+0x1624>
  18cd8c:	102f883a 	mov	r23,r2
  18cd90:	b8bfffc4 	addi	r2,r23,-1
  18cd94:	10c00007 	ldb	r3,0(r2)
  18cd98:	193ffc26 	beq	r3,r4,18cd8c <__alt_data_end+0xfff8cd8c>
  18cd9c:	d9801217 	ldw	r6,72(sp)
  18cda0:	d9800515 	stw	r6,20(sp)
  18cda4:	003c1f06 	br	18be24 <__alt_data_end+0xfff8be24>
  18cda8:	d8801217 	ldw	r2,72(sp)
  18cdac:	dc001117 	ldw	r16,68(sp)
  18cdb0:	d8800515 	stw	r2,20(sp)
  18cdb4:	003cc906 	br	18c0dc <__alt_data_end+0xfff8c0dc>
  18cdb8:	dd801317 	ldw	r22,76(sp)
  18cdbc:	dc001117 	ldw	r16,68(sp)
  18cdc0:	dcc01417 	ldw	r19,80(sp)
  18cdc4:	dc801017 	ldw	r18,64(sp)
  18cdc8:	003c4506 	br	18bee0 <__alt_data_end+0xfff8bee0>
  18cdcc:	103e5d1e 	bne	r2,zero,18c744 <__alt_data_end+0xfff8c744>
  18cdd0:	4080004c 	andi	r2,r8,1
  18cdd4:	103e5b26 	beq	r2,zero,18c744 <__alt_data_end+0xfff8c744>
  18cdd8:	003e5706 	br	18c738 <__alt_data_end+0xfff8c738>
  18cddc:	d8c00317 	ldw	r3,12(sp)
  18cde0:	00800084 	movi	r2,2
  18cde4:	10c00a16 	blt	r2,r3,18ce10 <_dtoa_r+0x16a4>
  18cde8:	d9000c17 	ldw	r4,48(sp)
  18cdec:	003e8306 	br	18c7fc <__alt_data_end+0xfff8c7fc>
  18cdf0:	04400084 	movi	r17,2
  18cdf4:	003b7306 	br	18bbc4 <__alt_data_end+0xfff8bbc4>
  18cdf8:	d9801217 	ldw	r6,72(sp)
  18cdfc:	d9800515 	stw	r6,20(sp)
  18ce00:	003cb606 	br	18c0dc <__alt_data_end+0xfff8c0dc>
  18ce04:	d9001217 	ldw	r4,72(sp)
  18ce08:	d9000515 	stw	r4,20(sp)
  18ce0c:	003c0506 	br	18be24 <__alt_data_end+0xfff8be24>
  18ce10:	d9800c17 	ldw	r6,48(sp)
  18ce14:	d9800615 	stw	r6,24(sp)
  18ce18:	003e8306 	br	18c828 <__alt_data_end+0xfff8c828>
  18ce1c:	d9800317 	ldw	r6,12(sp)
  18ce20:	00800084 	movi	r2,2
  18ce24:	11800216 	blt	r2,r6,18ce30 <_dtoa_r+0x16c4>
  18ce28:	d8800c17 	ldw	r2,48(sp)
  18ce2c:	003da606 	br	18c4c8 <__alt_data_end+0xfff8c4c8>
  18ce30:	d8800c17 	ldw	r2,48(sp)
  18ce34:	d8800615 	stw	r2,24(sp)
  18ce38:	003e7b06 	br	18c828 <__alt_data_end+0xfff8c828>
  18ce3c:	05000044 	movi	r20,1
  18ce40:	003b0506 	br	18ba58 <__alt_data_end+0xfff8ba58>
  18ce44:	8009883a 	mov	r4,r16
  18ce48:	80001115 	stw	zero,68(r16)
  18ce4c:	000b883a 	mov	r5,zero
  18ce50:	018ebc40 	call	18ebc4 <_Balloc>
  18ce54:	d8800715 	stw	r2,28(sp)
  18ce58:	d8c00717 	ldw	r3,28(sp)
  18ce5c:	00bfffc4 	movi	r2,-1
  18ce60:	01000044 	movi	r4,1
  18ce64:	d8800c15 	stw	r2,48(sp)
  18ce68:	80c01015 	stw	r3,64(r16)
  18ce6c:	d9000b15 	stw	r4,44(sp)
  18ce70:	d8800615 	stw	r2,24(sp)
  18ce74:	d8002215 	stw	zero,136(sp)
  18ce78:	003c1906 	br	18bee0 <__alt_data_end+0xfff8bee0>
  18ce7c:	193d2926 	beq	r3,r4,18c324 <__alt_data_end+0xfff8c324>
  18ce80:	00c00f04 	movi	r3,60
  18ce84:	1885c83a 	sub	r2,r3,r2
  18ce88:	003d7b06 	br	18c478 <__alt_data_end+0xfff8c478>
  18ce8c:	000b883a 	mov	r5,zero
  18ce90:	003b1006 	br	18bad4 <__alt_data_end+0xfff8bad4>

0018ce94 <__sflush_r>:
  18ce94:	2880030b 	ldhu	r2,12(r5)
  18ce98:	defffb04 	addi	sp,sp,-20
  18ce9c:	dcc00315 	stw	r19,12(sp)
  18cea0:	dc400115 	stw	r17,4(sp)
  18cea4:	dfc00415 	stw	ra,16(sp)
  18cea8:	dc800215 	stw	r18,8(sp)
  18ceac:	dc000015 	stw	r16,0(sp)
  18ceb0:	10c0020c 	andi	r3,r2,8
  18ceb4:	2823883a 	mov	r17,r5
  18ceb8:	2027883a 	mov	r19,r4
  18cebc:	1800311e 	bne	r3,zero,18cf84 <__sflush_r+0xf0>
  18cec0:	28c00117 	ldw	r3,4(r5)
  18cec4:	10820014 	ori	r2,r2,2048
  18cec8:	2880030d 	sth	r2,12(r5)
  18cecc:	00c04b0e 	bge	zero,r3,18cffc <__sflush_r+0x168>
  18ced0:	8a000a17 	ldw	r8,40(r17)
  18ced4:	40002326 	beq	r8,zero,18cf64 <__sflush_r+0xd0>
  18ced8:	9c000017 	ldw	r16,0(r19)
  18cedc:	10c4000c 	andi	r3,r2,4096
  18cee0:	98000015 	stw	zero,0(r19)
  18cee4:	18004826 	beq	r3,zero,18d008 <__sflush_r+0x174>
  18cee8:	89801417 	ldw	r6,80(r17)
  18ceec:	10c0010c 	andi	r3,r2,4
  18cef0:	18000626 	beq	r3,zero,18cf0c <__sflush_r+0x78>
  18cef4:	88c00117 	ldw	r3,4(r17)
  18cef8:	88800c17 	ldw	r2,48(r17)
  18cefc:	30cdc83a 	sub	r6,r6,r3
  18cf00:	10000226 	beq	r2,zero,18cf0c <__sflush_r+0x78>
  18cf04:	88800f17 	ldw	r2,60(r17)
  18cf08:	308dc83a 	sub	r6,r6,r2
  18cf0c:	89400717 	ldw	r5,28(r17)
  18cf10:	9809883a 	mov	r4,r19
  18cf14:	000f883a 	mov	r7,zero
  18cf18:	403ee83a 	callr	r8
  18cf1c:	00ffffc4 	movi	r3,-1
  18cf20:	10c04426 	beq	r2,r3,18d034 <__sflush_r+0x1a0>
  18cf24:	88c0030b 	ldhu	r3,12(r17)
  18cf28:	89000417 	ldw	r4,16(r17)
  18cf2c:	88000115 	stw	zero,4(r17)
  18cf30:	197dffcc 	andi	r5,r3,63487
  18cf34:	8940030d 	sth	r5,12(r17)
  18cf38:	89000015 	stw	r4,0(r17)
  18cf3c:	18c4000c 	andi	r3,r3,4096
  18cf40:	18002c1e 	bne	r3,zero,18cff4 <__sflush_r+0x160>
  18cf44:	89400c17 	ldw	r5,48(r17)
  18cf48:	9c000015 	stw	r16,0(r19)
  18cf4c:	28000526 	beq	r5,zero,18cf64 <__sflush_r+0xd0>
  18cf50:	88801004 	addi	r2,r17,64
  18cf54:	28800226 	beq	r5,r2,18cf60 <__sflush_r+0xcc>
  18cf58:	9809883a 	mov	r4,r19
  18cf5c:	018d5fc0 	call	18d5fc <_free_r>
  18cf60:	88000c15 	stw	zero,48(r17)
  18cf64:	0005883a 	mov	r2,zero
  18cf68:	dfc00417 	ldw	ra,16(sp)
  18cf6c:	dcc00317 	ldw	r19,12(sp)
  18cf70:	dc800217 	ldw	r18,8(sp)
  18cf74:	dc400117 	ldw	r17,4(sp)
  18cf78:	dc000017 	ldw	r16,0(sp)
  18cf7c:	dec00504 	addi	sp,sp,20
  18cf80:	f800283a 	ret
  18cf84:	2c800417 	ldw	r18,16(r5)
  18cf88:	903ff626 	beq	r18,zero,18cf64 <__alt_data_end+0xfff8cf64>
  18cf8c:	2c000017 	ldw	r16,0(r5)
  18cf90:	108000cc 	andi	r2,r2,3
  18cf94:	2c800015 	stw	r18,0(r5)
  18cf98:	84a1c83a 	sub	r16,r16,r18
  18cf9c:	1000131e 	bne	r2,zero,18cfec <__sflush_r+0x158>
  18cfa0:	28800517 	ldw	r2,20(r5)
  18cfa4:	88800215 	stw	r2,8(r17)
  18cfa8:	04000316 	blt	zero,r16,18cfb8 <__sflush_r+0x124>
  18cfac:	003fed06 	br	18cf64 <__alt_data_end+0xfff8cf64>
  18cfb0:	90a5883a 	add	r18,r18,r2
  18cfb4:	043feb0e 	bge	zero,r16,18cf64 <__alt_data_end+0xfff8cf64>
  18cfb8:	88800917 	ldw	r2,36(r17)
  18cfbc:	89400717 	ldw	r5,28(r17)
  18cfc0:	800f883a 	mov	r7,r16
  18cfc4:	900d883a 	mov	r6,r18
  18cfc8:	9809883a 	mov	r4,r19
  18cfcc:	103ee83a 	callr	r2
  18cfd0:	80a1c83a 	sub	r16,r16,r2
  18cfd4:	00bff616 	blt	zero,r2,18cfb0 <__alt_data_end+0xfff8cfb0>
  18cfd8:	88c0030b 	ldhu	r3,12(r17)
  18cfdc:	00bfffc4 	movi	r2,-1
  18cfe0:	18c01014 	ori	r3,r3,64
  18cfe4:	88c0030d 	sth	r3,12(r17)
  18cfe8:	003fdf06 	br	18cf68 <__alt_data_end+0xfff8cf68>
  18cfec:	0005883a 	mov	r2,zero
  18cff0:	003fec06 	br	18cfa4 <__alt_data_end+0xfff8cfa4>
  18cff4:	88801415 	stw	r2,80(r17)
  18cff8:	003fd206 	br	18cf44 <__alt_data_end+0xfff8cf44>
  18cffc:	28c00f17 	ldw	r3,60(r5)
  18d000:	00ffb316 	blt	zero,r3,18ced0 <__alt_data_end+0xfff8ced0>
  18d004:	003fd706 	br	18cf64 <__alt_data_end+0xfff8cf64>
  18d008:	89400717 	ldw	r5,28(r17)
  18d00c:	000d883a 	mov	r6,zero
  18d010:	9809883a 	mov	r4,r19
  18d014:	01c00044 	movi	r7,1
  18d018:	403ee83a 	callr	r8
  18d01c:	100d883a 	mov	r6,r2
  18d020:	00bfffc4 	movi	r2,-1
  18d024:	30801426 	beq	r6,r2,18d078 <__sflush_r+0x1e4>
  18d028:	8880030b 	ldhu	r2,12(r17)
  18d02c:	8a000a17 	ldw	r8,40(r17)
  18d030:	003fae06 	br	18ceec <__alt_data_end+0xfff8ceec>
  18d034:	98c00017 	ldw	r3,0(r19)
  18d038:	183fba26 	beq	r3,zero,18cf24 <__alt_data_end+0xfff8cf24>
  18d03c:	01000744 	movi	r4,29
  18d040:	19000626 	beq	r3,r4,18d05c <__sflush_r+0x1c8>
  18d044:	01000584 	movi	r4,22
  18d048:	19000426 	beq	r3,r4,18d05c <__sflush_r+0x1c8>
  18d04c:	88c0030b 	ldhu	r3,12(r17)
  18d050:	18c01014 	ori	r3,r3,64
  18d054:	88c0030d 	sth	r3,12(r17)
  18d058:	003fc306 	br	18cf68 <__alt_data_end+0xfff8cf68>
  18d05c:	8880030b 	ldhu	r2,12(r17)
  18d060:	88c00417 	ldw	r3,16(r17)
  18d064:	88000115 	stw	zero,4(r17)
  18d068:	10bdffcc 	andi	r2,r2,63487
  18d06c:	8880030d 	sth	r2,12(r17)
  18d070:	88c00015 	stw	r3,0(r17)
  18d074:	003fb306 	br	18cf44 <__alt_data_end+0xfff8cf44>
  18d078:	98800017 	ldw	r2,0(r19)
  18d07c:	103fea26 	beq	r2,zero,18d028 <__alt_data_end+0xfff8d028>
  18d080:	00c00744 	movi	r3,29
  18d084:	10c00226 	beq	r2,r3,18d090 <__sflush_r+0x1fc>
  18d088:	00c00584 	movi	r3,22
  18d08c:	10ffd21e 	bne	r2,r3,18cfd8 <__alt_data_end+0xfff8cfd8>
  18d090:	9c000015 	stw	r16,0(r19)
  18d094:	0005883a 	mov	r2,zero
  18d098:	003fb306 	br	18cf68 <__alt_data_end+0xfff8cf68>

0018d09c <_fflush_r>:
  18d09c:	defffd04 	addi	sp,sp,-12
  18d0a0:	dc000115 	stw	r16,4(sp)
  18d0a4:	dfc00215 	stw	ra,8(sp)
  18d0a8:	2021883a 	mov	r16,r4
  18d0ac:	20000226 	beq	r4,zero,18d0b8 <_fflush_r+0x1c>
  18d0b0:	20800e17 	ldw	r2,56(r4)
  18d0b4:	10000c26 	beq	r2,zero,18d0e8 <_fflush_r+0x4c>
  18d0b8:	2880030f 	ldh	r2,12(r5)
  18d0bc:	1000051e 	bne	r2,zero,18d0d4 <_fflush_r+0x38>
  18d0c0:	0005883a 	mov	r2,zero
  18d0c4:	dfc00217 	ldw	ra,8(sp)
  18d0c8:	dc000117 	ldw	r16,4(sp)
  18d0cc:	dec00304 	addi	sp,sp,12
  18d0d0:	f800283a 	ret
  18d0d4:	8009883a 	mov	r4,r16
  18d0d8:	dfc00217 	ldw	ra,8(sp)
  18d0dc:	dc000117 	ldw	r16,4(sp)
  18d0e0:	dec00304 	addi	sp,sp,12
  18d0e4:	018ce941 	jmpi	18ce94 <__sflush_r>
  18d0e8:	d9400015 	stw	r5,0(sp)
  18d0ec:	018d4880 	call	18d488 <__sinit>
  18d0f0:	d9400017 	ldw	r5,0(sp)
  18d0f4:	003ff006 	br	18d0b8 <__alt_data_end+0xfff8d0b8>

0018d0f8 <fflush>:
  18d0f8:	20000526 	beq	r4,zero,18d110 <fflush+0x18>
  18d0fc:	008006b4 	movhi	r2,26
  18d100:	10846704 	addi	r2,r2,4508
  18d104:	200b883a 	mov	r5,r4
  18d108:	11000017 	ldw	r4,0(r2)
  18d10c:	018d09c1 	jmpi	18d09c <_fflush_r>
  18d110:	008006b4 	movhi	r2,26
  18d114:	10846604 	addi	r2,r2,4504
  18d118:	11000017 	ldw	r4,0(r2)
  18d11c:	01400674 	movhi	r5,25
  18d120:	29742704 	addi	r5,r5,-12132
  18d124:	018de7c1 	jmpi	18de7c <_fwalk_reent>

0018d128 <__fp_lock>:
  18d128:	0005883a 	mov	r2,zero
  18d12c:	f800283a 	ret

0018d130 <__fp_unlock>:
  18d130:	0005883a 	mov	r2,zero
  18d134:	f800283a 	ret

0018d138 <_cleanup_r>:
  18d138:	01400674 	movhi	r5,25
  18d13c:	29475704 	addi	r5,r5,7516
  18d140:	018de7c1 	jmpi	18de7c <_fwalk_reent>

0018d144 <__sinit.part.1>:
  18d144:	defff704 	addi	sp,sp,-36
  18d148:	00c00674 	movhi	r3,25
  18d14c:	dfc00815 	stw	ra,32(sp)
  18d150:	ddc00715 	stw	r23,28(sp)
  18d154:	dd800615 	stw	r22,24(sp)
  18d158:	dd400515 	stw	r21,20(sp)
  18d15c:	dd000415 	stw	r20,16(sp)
  18d160:	dcc00315 	stw	r19,12(sp)
  18d164:	dc800215 	stw	r18,8(sp)
  18d168:	dc400115 	stw	r17,4(sp)
  18d16c:	dc000015 	stw	r16,0(sp)
  18d170:	18f44e04 	addi	r3,r3,-11976
  18d174:	24000117 	ldw	r16,4(r4)
  18d178:	20c00f15 	stw	r3,60(r4)
  18d17c:	2080bb04 	addi	r2,r4,748
  18d180:	00c000c4 	movi	r3,3
  18d184:	20c0b915 	stw	r3,740(r4)
  18d188:	2080ba15 	stw	r2,744(r4)
  18d18c:	2000b815 	stw	zero,736(r4)
  18d190:	05c00204 	movi	r23,8
  18d194:	00800104 	movi	r2,4
  18d198:	2025883a 	mov	r18,r4
  18d19c:	b80d883a 	mov	r6,r23
  18d1a0:	81001704 	addi	r4,r16,92
  18d1a4:	000b883a 	mov	r5,zero
  18d1a8:	80000015 	stw	zero,0(r16)
  18d1ac:	80000115 	stw	zero,4(r16)
  18d1b0:	80000215 	stw	zero,8(r16)
  18d1b4:	8080030d 	sth	r2,12(r16)
  18d1b8:	80001915 	stw	zero,100(r16)
  18d1bc:	8000038d 	sth	zero,14(r16)
  18d1c0:	80000415 	stw	zero,16(r16)
  18d1c4:	80000515 	stw	zero,20(r16)
  18d1c8:	80000615 	stw	zero,24(r16)
  18d1cc:	0188fb80 	call	188fb8 <memset>
  18d1d0:	05800674 	movhi	r22,25
  18d1d4:	94400217 	ldw	r17,8(r18)
  18d1d8:	05400674 	movhi	r21,25
  18d1dc:	05000674 	movhi	r20,25
  18d1e0:	04c00674 	movhi	r19,25
  18d1e4:	b580ef04 	addi	r22,r22,956
  18d1e8:	ad410604 	addi	r21,r21,1048
  18d1ec:	a5012504 	addi	r20,r20,1172
  18d1f0:	9cc13c04 	addi	r19,r19,1264
  18d1f4:	85800815 	stw	r22,32(r16)
  18d1f8:	85400915 	stw	r21,36(r16)
  18d1fc:	85000a15 	stw	r20,40(r16)
  18d200:	84c00b15 	stw	r19,44(r16)
  18d204:	84000715 	stw	r16,28(r16)
  18d208:	00800284 	movi	r2,10
  18d20c:	8880030d 	sth	r2,12(r17)
  18d210:	00800044 	movi	r2,1
  18d214:	89001704 	addi	r4,r17,92
  18d218:	b80d883a 	mov	r6,r23
  18d21c:	000b883a 	mov	r5,zero
  18d220:	88000015 	stw	zero,0(r17)
  18d224:	88000115 	stw	zero,4(r17)
  18d228:	88000215 	stw	zero,8(r17)
  18d22c:	88001915 	stw	zero,100(r17)
  18d230:	8880038d 	sth	r2,14(r17)
  18d234:	88000415 	stw	zero,16(r17)
  18d238:	88000515 	stw	zero,20(r17)
  18d23c:	88000615 	stw	zero,24(r17)
  18d240:	0188fb80 	call	188fb8 <memset>
  18d244:	94000317 	ldw	r16,12(r18)
  18d248:	00800484 	movi	r2,18
  18d24c:	8c400715 	stw	r17,28(r17)
  18d250:	8d800815 	stw	r22,32(r17)
  18d254:	8d400915 	stw	r21,36(r17)
  18d258:	8d000a15 	stw	r20,40(r17)
  18d25c:	8cc00b15 	stw	r19,44(r17)
  18d260:	8080030d 	sth	r2,12(r16)
  18d264:	00800084 	movi	r2,2
  18d268:	80000015 	stw	zero,0(r16)
  18d26c:	80000115 	stw	zero,4(r16)
  18d270:	80000215 	stw	zero,8(r16)
  18d274:	80001915 	stw	zero,100(r16)
  18d278:	8080038d 	sth	r2,14(r16)
  18d27c:	80000415 	stw	zero,16(r16)
  18d280:	80000515 	stw	zero,20(r16)
  18d284:	80000615 	stw	zero,24(r16)
  18d288:	81001704 	addi	r4,r16,92
  18d28c:	000b883a 	mov	r5,zero
  18d290:	b80d883a 	mov	r6,r23
  18d294:	0188fb80 	call	188fb8 <memset>
  18d298:	00800044 	movi	r2,1
  18d29c:	84000715 	stw	r16,28(r16)
  18d2a0:	85800815 	stw	r22,32(r16)
  18d2a4:	85400915 	stw	r21,36(r16)
  18d2a8:	85000a15 	stw	r20,40(r16)
  18d2ac:	84c00b15 	stw	r19,44(r16)
  18d2b0:	90800e15 	stw	r2,56(r18)
  18d2b4:	dfc00817 	ldw	ra,32(sp)
  18d2b8:	ddc00717 	ldw	r23,28(sp)
  18d2bc:	dd800617 	ldw	r22,24(sp)
  18d2c0:	dd400517 	ldw	r21,20(sp)
  18d2c4:	dd000417 	ldw	r20,16(sp)
  18d2c8:	dcc00317 	ldw	r19,12(sp)
  18d2cc:	dc800217 	ldw	r18,8(sp)
  18d2d0:	dc400117 	ldw	r17,4(sp)
  18d2d4:	dc000017 	ldw	r16,0(sp)
  18d2d8:	dec00904 	addi	sp,sp,36
  18d2dc:	f800283a 	ret

0018d2e0 <__sfmoreglue>:
  18d2e0:	defffc04 	addi	sp,sp,-16
  18d2e4:	dc800215 	stw	r18,8(sp)
  18d2e8:	2825883a 	mov	r18,r5
  18d2ec:	dc000015 	stw	r16,0(sp)
  18d2f0:	01401a04 	movi	r5,104
  18d2f4:	2021883a 	mov	r16,r4
  18d2f8:	913fffc4 	addi	r4,r18,-1
  18d2fc:	dfc00315 	stw	ra,12(sp)
  18d300:	dc400115 	stw	r17,4(sp)
  18d304:	0187dd80 	call	187dd8 <__mulsi3>
  18d308:	8009883a 	mov	r4,r16
  18d30c:	11401d04 	addi	r5,r2,116
  18d310:	1023883a 	mov	r17,r2
  18d314:	018e1d80 	call	18e1d8 <_malloc_r>
  18d318:	1021883a 	mov	r16,r2
  18d31c:	10000726 	beq	r2,zero,18d33c <__sfmoreglue+0x5c>
  18d320:	11000304 	addi	r4,r2,12
  18d324:	10000015 	stw	zero,0(r2)
  18d328:	14800115 	stw	r18,4(r2)
  18d32c:	11000215 	stw	r4,8(r2)
  18d330:	000b883a 	mov	r5,zero
  18d334:	89801a04 	addi	r6,r17,104
  18d338:	0188fb80 	call	188fb8 <memset>
  18d33c:	8005883a 	mov	r2,r16
  18d340:	dfc00317 	ldw	ra,12(sp)
  18d344:	dc800217 	ldw	r18,8(sp)
  18d348:	dc400117 	ldw	r17,4(sp)
  18d34c:	dc000017 	ldw	r16,0(sp)
  18d350:	dec00404 	addi	sp,sp,16
  18d354:	f800283a 	ret

0018d358 <__sfp>:
  18d358:	008006b4 	movhi	r2,26
  18d35c:	defffb04 	addi	sp,sp,-20
  18d360:	10846604 	addi	r2,r2,4504
  18d364:	dc800215 	stw	r18,8(sp)
  18d368:	14800017 	ldw	r18,0(r2)
  18d36c:	dcc00315 	stw	r19,12(sp)
  18d370:	dfc00415 	stw	ra,16(sp)
  18d374:	90800e17 	ldw	r2,56(r18)
  18d378:	dc400115 	stw	r17,4(sp)
  18d37c:	dc000015 	stw	r16,0(sp)
  18d380:	2027883a 	mov	r19,r4
  18d384:	1000021e 	bne	r2,zero,18d390 <__sfp+0x38>
  18d388:	9009883a 	mov	r4,r18
  18d38c:	018d1440 	call	18d144 <__sinit.part.1>
  18d390:	9480b804 	addi	r18,r18,736
  18d394:	047fffc4 	movi	r17,-1
  18d398:	91400117 	ldw	r5,4(r18)
  18d39c:	94000217 	ldw	r16,8(r18)
  18d3a0:	297fffc4 	addi	r5,r5,-1
  18d3a4:	28000a16 	blt	r5,zero,18d3d0 <__sfp+0x78>
  18d3a8:	8080030f 	ldh	r2,12(r16)
  18d3ac:	10000c26 	beq	r2,zero,18d3e0 <__sfp+0x88>
  18d3b0:	80c01d04 	addi	r3,r16,116
  18d3b4:	00000206 	br	18d3c0 <__sfp+0x68>
  18d3b8:	18bfe60f 	ldh	r2,-104(r3)
  18d3bc:	10000826 	beq	r2,zero,18d3e0 <__sfp+0x88>
  18d3c0:	297fffc4 	addi	r5,r5,-1
  18d3c4:	1c3ffd04 	addi	r16,r3,-12
  18d3c8:	18c01a04 	addi	r3,r3,104
  18d3cc:	2c7ffa1e 	bne	r5,r17,18d3b8 <__alt_data_end+0xfff8d3b8>
  18d3d0:	90800017 	ldw	r2,0(r18)
  18d3d4:	10001d26 	beq	r2,zero,18d44c <__sfp+0xf4>
  18d3d8:	1025883a 	mov	r18,r2
  18d3dc:	003fee06 	br	18d398 <__alt_data_end+0xfff8d398>
  18d3e0:	00bfffc4 	movi	r2,-1
  18d3e4:	8080038d 	sth	r2,14(r16)
  18d3e8:	00800044 	movi	r2,1
  18d3ec:	8080030d 	sth	r2,12(r16)
  18d3f0:	80001915 	stw	zero,100(r16)
  18d3f4:	80000015 	stw	zero,0(r16)
  18d3f8:	80000215 	stw	zero,8(r16)
  18d3fc:	80000115 	stw	zero,4(r16)
  18d400:	80000415 	stw	zero,16(r16)
  18d404:	80000515 	stw	zero,20(r16)
  18d408:	80000615 	stw	zero,24(r16)
  18d40c:	81001704 	addi	r4,r16,92
  18d410:	000b883a 	mov	r5,zero
  18d414:	01800204 	movi	r6,8
  18d418:	0188fb80 	call	188fb8 <memset>
  18d41c:	8005883a 	mov	r2,r16
  18d420:	80000c15 	stw	zero,48(r16)
  18d424:	80000d15 	stw	zero,52(r16)
  18d428:	80001115 	stw	zero,68(r16)
  18d42c:	80001215 	stw	zero,72(r16)
  18d430:	dfc00417 	ldw	ra,16(sp)
  18d434:	dcc00317 	ldw	r19,12(sp)
  18d438:	dc800217 	ldw	r18,8(sp)
  18d43c:	dc400117 	ldw	r17,4(sp)
  18d440:	dc000017 	ldw	r16,0(sp)
  18d444:	dec00504 	addi	sp,sp,20
  18d448:	f800283a 	ret
  18d44c:	9809883a 	mov	r4,r19
  18d450:	01400104 	movi	r5,4
  18d454:	018d2e00 	call	18d2e0 <__sfmoreglue>
  18d458:	90800015 	stw	r2,0(r18)
  18d45c:	103fde1e 	bne	r2,zero,18d3d8 <__alt_data_end+0xfff8d3d8>
  18d460:	00800304 	movi	r2,12
  18d464:	98800015 	stw	r2,0(r19)
  18d468:	0005883a 	mov	r2,zero
  18d46c:	003ff006 	br	18d430 <__alt_data_end+0xfff8d430>

0018d470 <_cleanup>:
  18d470:	008006b4 	movhi	r2,26
  18d474:	10846604 	addi	r2,r2,4504
  18d478:	11000017 	ldw	r4,0(r2)
  18d47c:	01400674 	movhi	r5,25
  18d480:	29475704 	addi	r5,r5,7516
  18d484:	018de7c1 	jmpi	18de7c <_fwalk_reent>

0018d488 <__sinit>:
  18d488:	20800e17 	ldw	r2,56(r4)
  18d48c:	10000126 	beq	r2,zero,18d494 <__sinit+0xc>
  18d490:	f800283a 	ret
  18d494:	018d1441 	jmpi	18d144 <__sinit.part.1>

0018d498 <__sfp_lock_acquire>:
  18d498:	f800283a 	ret

0018d49c <__sfp_lock_release>:
  18d49c:	f800283a 	ret

0018d4a0 <__sinit_lock_acquire>:
  18d4a0:	f800283a 	ret

0018d4a4 <__sinit_lock_release>:
  18d4a4:	f800283a 	ret

0018d4a8 <__fp_lock_all>:
  18d4a8:	008006b4 	movhi	r2,26
  18d4ac:	10846704 	addi	r2,r2,4508
  18d4b0:	11000017 	ldw	r4,0(r2)
  18d4b4:	01400674 	movhi	r5,25
  18d4b8:	29744a04 	addi	r5,r5,-11992
  18d4bc:	018ddb81 	jmpi	18ddb8 <_fwalk>

0018d4c0 <__fp_unlock_all>:
  18d4c0:	008006b4 	movhi	r2,26
  18d4c4:	10846704 	addi	r2,r2,4508
  18d4c8:	11000017 	ldw	r4,0(r2)
  18d4cc:	01400674 	movhi	r5,25
  18d4d0:	29744c04 	addi	r5,r5,-11984
  18d4d4:	018ddb81 	jmpi	18ddb8 <_fwalk>

0018d4d8 <_malloc_trim_r>:
  18d4d8:	defffb04 	addi	sp,sp,-20
  18d4dc:	dcc00315 	stw	r19,12(sp)
  18d4e0:	04c006b4 	movhi	r19,26
  18d4e4:	dc800215 	stw	r18,8(sp)
  18d4e8:	dc400115 	stw	r17,4(sp)
  18d4ec:	dc000015 	stw	r16,0(sp)
  18d4f0:	dfc00415 	stw	ra,16(sp)
  18d4f4:	2821883a 	mov	r16,r5
  18d4f8:	9cfeaf04 	addi	r19,r19,-1348
  18d4fc:	2025883a 	mov	r18,r4
  18d500:	0196aec0 	call	196aec <__malloc_lock>
  18d504:	98800217 	ldw	r2,8(r19)
  18d508:	14400117 	ldw	r17,4(r2)
  18d50c:	00bfff04 	movi	r2,-4
  18d510:	88a2703a 	and	r17,r17,r2
  18d514:	8c21c83a 	sub	r16,r17,r16
  18d518:	8403fbc4 	addi	r16,r16,4079
  18d51c:	8020d33a 	srli	r16,r16,12
  18d520:	0083ffc4 	movi	r2,4095
  18d524:	843fffc4 	addi	r16,r16,-1
  18d528:	8020933a 	slli	r16,r16,12
  18d52c:	1400060e 	bge	r2,r16,18d548 <_malloc_trim_r+0x70>
  18d530:	9009883a 	mov	r4,r18
  18d534:	000b883a 	mov	r5,zero
  18d538:	01903680 	call	190368 <_sbrk_r>
  18d53c:	98c00217 	ldw	r3,8(r19)
  18d540:	1c47883a 	add	r3,r3,r17
  18d544:	10c00a26 	beq	r2,r3,18d570 <_malloc_trim_r+0x98>
  18d548:	9009883a 	mov	r4,r18
  18d54c:	0196b0c0 	call	196b0c <__malloc_unlock>
  18d550:	0005883a 	mov	r2,zero
  18d554:	dfc00417 	ldw	ra,16(sp)
  18d558:	dcc00317 	ldw	r19,12(sp)
  18d55c:	dc800217 	ldw	r18,8(sp)
  18d560:	dc400117 	ldw	r17,4(sp)
  18d564:	dc000017 	ldw	r16,0(sp)
  18d568:	dec00504 	addi	sp,sp,20
  18d56c:	f800283a 	ret
  18d570:	9009883a 	mov	r4,r18
  18d574:	040bc83a 	sub	r5,zero,r16
  18d578:	01903680 	call	190368 <_sbrk_r>
  18d57c:	00ffffc4 	movi	r3,-1
  18d580:	10c00d26 	beq	r2,r3,18d5b8 <_malloc_trim_r+0xe0>
  18d584:	00c006b4 	movhi	r3,26
  18d588:	18cb7504 	addi	r3,r3,11732
  18d58c:	18800017 	ldw	r2,0(r3)
  18d590:	99000217 	ldw	r4,8(r19)
  18d594:	8c23c83a 	sub	r17,r17,r16
  18d598:	8c400054 	ori	r17,r17,1
  18d59c:	1421c83a 	sub	r16,r2,r16
  18d5a0:	24400115 	stw	r17,4(r4)
  18d5a4:	9009883a 	mov	r4,r18
  18d5a8:	1c000015 	stw	r16,0(r3)
  18d5ac:	0196b0c0 	call	196b0c <__malloc_unlock>
  18d5b0:	00800044 	movi	r2,1
  18d5b4:	003fe706 	br	18d554 <__alt_data_end+0xfff8d554>
  18d5b8:	9009883a 	mov	r4,r18
  18d5bc:	000b883a 	mov	r5,zero
  18d5c0:	01903680 	call	190368 <_sbrk_r>
  18d5c4:	99000217 	ldw	r4,8(r19)
  18d5c8:	014003c4 	movi	r5,15
  18d5cc:	1107c83a 	sub	r3,r2,r4
  18d5d0:	28ffdd0e 	bge	r5,r3,18d548 <__alt_data_end+0xfff8d548>
  18d5d4:	014006b4 	movhi	r5,26
  18d5d8:	29446904 	addi	r5,r5,4516
  18d5dc:	29400017 	ldw	r5,0(r5)
  18d5e0:	18c00054 	ori	r3,r3,1
  18d5e4:	20c00115 	stw	r3,4(r4)
  18d5e8:	00c006b4 	movhi	r3,26
  18d5ec:	1145c83a 	sub	r2,r2,r5
  18d5f0:	18cb7504 	addi	r3,r3,11732
  18d5f4:	18800015 	stw	r2,0(r3)
  18d5f8:	003fd306 	br	18d548 <__alt_data_end+0xfff8d548>

0018d5fc <_free_r>:
  18d5fc:	28004c26 	beq	r5,zero,18d730 <_free_r+0x134>
  18d600:	defffd04 	addi	sp,sp,-12
  18d604:	dc400115 	stw	r17,4(sp)
  18d608:	dc000015 	stw	r16,0(sp)
  18d60c:	2023883a 	mov	r17,r4
  18d610:	2821883a 	mov	r16,r5
  18d614:	dfc00215 	stw	ra,8(sp)
  18d618:	0196aec0 	call	196aec <__malloc_lock>
  18d61c:	813fff17 	ldw	r4,-4(r16)
  18d620:	00bfff84 	movi	r2,-2
  18d624:	024006b4 	movhi	r9,26
  18d628:	81bffe04 	addi	r6,r16,-8
  18d62c:	2084703a 	and	r2,r4,r2
  18d630:	4a7eaf04 	addi	r9,r9,-1348
  18d634:	308b883a 	add	r5,r6,r2
  18d638:	2a000117 	ldw	r8,4(r5)
  18d63c:	49c00217 	ldw	r7,8(r9)
  18d640:	00ffff04 	movi	r3,-4
  18d644:	40c6703a 	and	r3,r8,r3
  18d648:	39405326 	beq	r7,r5,18d798 <_free_r+0x19c>
  18d64c:	28c00115 	stw	r3,4(r5)
  18d650:	2100004c 	andi	r4,r4,1
  18d654:	2000091e 	bne	r4,zero,18d67c <_free_r+0x80>
  18d658:	81fffe17 	ldw	r7,-8(r16)
  18d65c:	4a000204 	addi	r8,r9,8
  18d660:	31cdc83a 	sub	r6,r6,r7
  18d664:	31000217 	ldw	r4,8(r6)
  18d668:	11c5883a 	add	r2,r2,r7
  18d66c:	22006126 	beq	r4,r8,18d7f4 <_free_r+0x1f8>
  18d670:	31c00317 	ldw	r7,12(r6)
  18d674:	21c00315 	stw	r7,12(r4)
  18d678:	39000215 	stw	r4,8(r7)
  18d67c:	28c9883a 	add	r4,r5,r3
  18d680:	21c00117 	ldw	r7,4(r4)
  18d684:	39c0004c 	andi	r7,r7,1
  18d688:	38000d1e 	bne	r7,zero,18d6c0 <_free_r+0xc4>
  18d68c:	29000217 	ldw	r4,8(r5)
  18d690:	10c5883a 	add	r2,r2,r3
  18d694:	00c006b4 	movhi	r3,26
  18d698:	18feb104 	addi	r3,r3,-1340
  18d69c:	20c07526 	beq	r4,r3,18d874 <_free_r+0x278>
  18d6a0:	29c00317 	ldw	r7,12(r5)
  18d6a4:	11400054 	ori	r5,r2,1
  18d6a8:	3087883a 	add	r3,r6,r2
  18d6ac:	21c00315 	stw	r7,12(r4)
  18d6b0:	39000215 	stw	r4,8(r7)
  18d6b4:	31400115 	stw	r5,4(r6)
  18d6b8:	18800015 	stw	r2,0(r3)
  18d6bc:	00000406 	br	18d6d0 <_free_r+0xd4>
  18d6c0:	10c00054 	ori	r3,r2,1
  18d6c4:	30c00115 	stw	r3,4(r6)
  18d6c8:	3087883a 	add	r3,r6,r2
  18d6cc:	18800015 	stw	r2,0(r3)
  18d6d0:	00c07fc4 	movi	r3,511
  18d6d4:	18801736 	bltu	r3,r2,18d734 <_free_r+0x138>
  18d6d8:	1004d0fa 	srli	r2,r2,3
  18d6dc:	01400044 	movi	r5,1
  18d6e0:	49000117 	ldw	r4,4(r9)
  18d6e4:	1087883a 	add	r3,r2,r2
  18d6e8:	18c7883a 	add	r3,r3,r3
  18d6ec:	1005d0ba 	srai	r2,r2,2
  18d6f0:	18c7883a 	add	r3,r3,r3
  18d6f4:	1a47883a 	add	r3,r3,r9
  18d6f8:	19c00217 	ldw	r7,8(r3)
  18d6fc:	2884983a 	sll	r2,r5,r2
  18d700:	30c00315 	stw	r3,12(r6)
  18d704:	31c00215 	stw	r7,8(r6)
  18d708:	1104b03a 	or	r2,r2,r4
  18d70c:	19800215 	stw	r6,8(r3)
  18d710:	48800115 	stw	r2,4(r9)
  18d714:	39800315 	stw	r6,12(r7)
  18d718:	8809883a 	mov	r4,r17
  18d71c:	dfc00217 	ldw	ra,8(sp)
  18d720:	dc400117 	ldw	r17,4(sp)
  18d724:	dc000017 	ldw	r16,0(sp)
  18d728:	dec00304 	addi	sp,sp,12
  18d72c:	0196b0c1 	jmpi	196b0c <__malloc_unlock>
  18d730:	f800283a 	ret
  18d734:	1006d27a 	srli	r3,r2,9
  18d738:	01000104 	movi	r4,4
  18d73c:	20c04036 	bltu	r4,r3,18d840 <_free_r+0x244>
  18d740:	1006d1ba 	srli	r3,r2,6
  18d744:	19400e04 	addi	r5,r3,56
  18d748:	2947883a 	add	r3,r5,r5
  18d74c:	18c7883a 	add	r3,r3,r3
  18d750:	18c7883a 	add	r3,r3,r3
  18d754:	1a49883a 	add	r4,r3,r9
  18d758:	20c00217 	ldw	r3,8(r4)
  18d75c:	01c006b4 	movhi	r7,26
  18d760:	39feaf04 	addi	r7,r7,-1348
  18d764:	19003b26 	beq	r3,r4,18d854 <_free_r+0x258>
  18d768:	01ffff04 	movi	r7,-4
  18d76c:	19400117 	ldw	r5,4(r3)
  18d770:	29ca703a 	and	r5,r5,r7
  18d774:	1140022e 	bgeu	r2,r5,18d780 <_free_r+0x184>
  18d778:	18c00217 	ldw	r3,8(r3)
  18d77c:	20fffb1e 	bne	r4,r3,18d76c <__alt_data_end+0xfff8d76c>
  18d780:	18800317 	ldw	r2,12(r3)
  18d784:	30800315 	stw	r2,12(r6)
  18d788:	30c00215 	stw	r3,8(r6)
  18d78c:	11800215 	stw	r6,8(r2)
  18d790:	19800315 	stw	r6,12(r3)
  18d794:	003fe006 	br	18d718 <__alt_data_end+0xfff8d718>
  18d798:	2100004c 	andi	r4,r4,1
  18d79c:	1885883a 	add	r2,r3,r2
  18d7a0:	2000071e 	bne	r4,zero,18d7c0 <_free_r+0x1c4>
  18d7a4:	817ffe17 	ldw	r5,-8(r16)
  18d7a8:	314dc83a 	sub	r6,r6,r5
  18d7ac:	30c00317 	ldw	r3,12(r6)
  18d7b0:	31000217 	ldw	r4,8(r6)
  18d7b4:	1145883a 	add	r2,r2,r5
  18d7b8:	20c00315 	stw	r3,12(r4)
  18d7bc:	19000215 	stw	r4,8(r3)
  18d7c0:	10c00054 	ori	r3,r2,1
  18d7c4:	30c00115 	stw	r3,4(r6)
  18d7c8:	00c006b4 	movhi	r3,26
  18d7cc:	18c46a04 	addi	r3,r3,4520
  18d7d0:	18c00017 	ldw	r3,0(r3)
  18d7d4:	49800215 	stw	r6,8(r9)
  18d7d8:	10ffcf36 	bltu	r2,r3,18d718 <__alt_data_end+0xfff8d718>
  18d7dc:	008006b4 	movhi	r2,26
  18d7e0:	108b6a04 	addi	r2,r2,11688
  18d7e4:	11400017 	ldw	r5,0(r2)
  18d7e8:	8809883a 	mov	r4,r17
  18d7ec:	018d4d80 	call	18d4d8 <_malloc_trim_r>
  18d7f0:	003fc906 	br	18d718 <__alt_data_end+0xfff8d718>
  18d7f4:	28c9883a 	add	r4,r5,r3
  18d7f8:	21000117 	ldw	r4,4(r4)
  18d7fc:	2100004c 	andi	r4,r4,1
  18d800:	20000a1e 	bne	r4,zero,18d82c <_free_r+0x230>
  18d804:	29000317 	ldw	r4,12(r5)
  18d808:	29400217 	ldw	r5,8(r5)
  18d80c:	10c5883a 	add	r2,r2,r3
  18d810:	10c00054 	ori	r3,r2,1
  18d814:	29000315 	stw	r4,12(r5)
  18d818:	21400215 	stw	r5,8(r4)
  18d81c:	30c00115 	stw	r3,4(r6)
  18d820:	308d883a 	add	r6,r6,r2
  18d824:	30800015 	stw	r2,0(r6)
  18d828:	003fbb06 	br	18d718 <__alt_data_end+0xfff8d718>
  18d82c:	10c00054 	ori	r3,r2,1
  18d830:	30c00115 	stw	r3,4(r6)
  18d834:	308d883a 	add	r6,r6,r2
  18d838:	30800015 	stw	r2,0(r6)
  18d83c:	003fb606 	br	18d718 <__alt_data_end+0xfff8d718>
  18d840:	01000504 	movi	r4,20
  18d844:	20c01436 	bltu	r4,r3,18d898 <_free_r+0x29c>
  18d848:	194016c4 	addi	r5,r3,91
  18d84c:	2947883a 	add	r3,r5,r5
  18d850:	003fbe06 	br	18d74c <__alt_data_end+0xfff8d74c>
  18d854:	280bd0ba 	srai	r5,r5,2
  18d858:	00800044 	movi	r2,1
  18d85c:	39000117 	ldw	r4,4(r7)
  18d860:	114a983a 	sll	r5,r2,r5
  18d864:	1805883a 	mov	r2,r3
  18d868:	2908b03a 	or	r4,r5,r4
  18d86c:	39000115 	stw	r4,4(r7)
  18d870:	003fc406 	br	18d784 <__alt_data_end+0xfff8d784>
  18d874:	49800515 	stw	r6,20(r9)
  18d878:	49800415 	stw	r6,16(r9)
  18d87c:	10c00054 	ori	r3,r2,1
  18d880:	31000315 	stw	r4,12(r6)
  18d884:	31000215 	stw	r4,8(r6)
  18d888:	30c00115 	stw	r3,4(r6)
  18d88c:	308d883a 	add	r6,r6,r2
  18d890:	30800015 	stw	r2,0(r6)
  18d894:	003fa006 	br	18d718 <__alt_data_end+0xfff8d718>
  18d898:	01001504 	movi	r4,84
  18d89c:	20c00436 	bltu	r4,r3,18d8b0 <_free_r+0x2b4>
  18d8a0:	1006d33a 	srli	r3,r2,12
  18d8a4:	19401b84 	addi	r5,r3,110
  18d8a8:	2947883a 	add	r3,r5,r5
  18d8ac:	003fa706 	br	18d74c <__alt_data_end+0xfff8d74c>
  18d8b0:	01005504 	movi	r4,340
  18d8b4:	20c00436 	bltu	r4,r3,18d8c8 <_free_r+0x2cc>
  18d8b8:	1006d3fa 	srli	r3,r2,15
  18d8bc:	19401dc4 	addi	r5,r3,119
  18d8c0:	2947883a 	add	r3,r5,r5
  18d8c4:	003fa106 	br	18d74c <__alt_data_end+0xfff8d74c>
  18d8c8:	01015504 	movi	r4,1364
  18d8cc:	20c00436 	bltu	r4,r3,18d8e0 <_free_r+0x2e4>
  18d8d0:	1006d4ba 	srli	r3,r2,18
  18d8d4:	19401f04 	addi	r5,r3,124
  18d8d8:	2947883a 	add	r3,r5,r5
  18d8dc:	003f9b06 	br	18d74c <__alt_data_end+0xfff8d74c>
  18d8e0:	00c03f04 	movi	r3,252
  18d8e4:	01401f84 	movi	r5,126
  18d8e8:	003f9806 	br	18d74c <__alt_data_end+0xfff8d74c>

0018d8ec <__sfvwrite_r>:
  18d8ec:	30800217 	ldw	r2,8(r6)
  18d8f0:	10006726 	beq	r2,zero,18da90 <__sfvwrite_r+0x1a4>
  18d8f4:	defff404 	addi	sp,sp,-48
  18d8f8:	dd000615 	stw	r20,24(sp)
  18d8fc:	2029883a 	mov	r20,r4
  18d900:	2900030b 	ldhu	r4,12(r5)
  18d904:	ddc00915 	stw	r23,36(sp)
  18d908:	dc000215 	stw	r16,8(sp)
  18d90c:	dfc00b15 	stw	ra,44(sp)
  18d910:	df000a15 	stw	fp,40(sp)
  18d914:	dd800815 	stw	r22,32(sp)
  18d918:	dd400715 	stw	r21,28(sp)
  18d91c:	dcc00515 	stw	r19,20(sp)
  18d920:	dc800415 	stw	r18,16(sp)
  18d924:	dc400315 	stw	r17,12(sp)
  18d928:	2080020c 	andi	r2,r4,8
  18d92c:	2821883a 	mov	r16,r5
  18d930:	302f883a 	mov	r23,r6
  18d934:	10002726 	beq	r2,zero,18d9d4 <__sfvwrite_r+0xe8>
  18d938:	28800417 	ldw	r2,16(r5)
  18d93c:	10002526 	beq	r2,zero,18d9d4 <__sfvwrite_r+0xe8>
  18d940:	2080008c 	andi	r2,r4,2
  18d944:	bc400017 	ldw	r17,0(r23)
  18d948:	10002a26 	beq	r2,zero,18d9f4 <__sfvwrite_r+0x108>
  18d94c:	05600034 	movhi	r21,32768
  18d950:	0027883a 	mov	r19,zero
  18d954:	0025883a 	mov	r18,zero
  18d958:	ad7f0004 	addi	r21,r21,-1024
  18d95c:	980d883a 	mov	r6,r19
  18d960:	a009883a 	mov	r4,r20
  18d964:	90004626 	beq	r18,zero,18da80 <__sfvwrite_r+0x194>
  18d968:	900f883a 	mov	r7,r18
  18d96c:	81400717 	ldw	r5,28(r16)
  18d970:	ac80022e 	bgeu	r21,r18,18d97c <__sfvwrite_r+0x90>
  18d974:	01e00034 	movhi	r7,32768
  18d978:	39ff0004 	addi	r7,r7,-1024
  18d97c:	80800917 	ldw	r2,36(r16)
  18d980:	103ee83a 	callr	r2
  18d984:	0080550e 	bge	zero,r2,18dadc <__sfvwrite_r+0x1f0>
  18d988:	b8c00217 	ldw	r3,8(r23)
  18d98c:	98a7883a 	add	r19,r19,r2
  18d990:	90a5c83a 	sub	r18,r18,r2
  18d994:	1885c83a 	sub	r2,r3,r2
  18d998:	b8800215 	stw	r2,8(r23)
  18d99c:	103fef1e 	bne	r2,zero,18d95c <__alt_data_end+0xfff8d95c>
  18d9a0:	0005883a 	mov	r2,zero
  18d9a4:	dfc00b17 	ldw	ra,44(sp)
  18d9a8:	df000a17 	ldw	fp,40(sp)
  18d9ac:	ddc00917 	ldw	r23,36(sp)
  18d9b0:	dd800817 	ldw	r22,32(sp)
  18d9b4:	dd400717 	ldw	r21,28(sp)
  18d9b8:	dd000617 	ldw	r20,24(sp)
  18d9bc:	dcc00517 	ldw	r19,20(sp)
  18d9c0:	dc800417 	ldw	r18,16(sp)
  18d9c4:	dc400317 	ldw	r17,12(sp)
  18d9c8:	dc000217 	ldw	r16,8(sp)
  18d9cc:	dec00c04 	addi	sp,sp,48
  18d9d0:	f800283a 	ret
  18d9d4:	a009883a 	mov	r4,r20
  18d9d8:	800b883a 	mov	r5,r16
  18d9dc:	018b3f00 	call	18b3f0 <__swsetup_r>
  18d9e0:	1000ef1e 	bne	r2,zero,18dda0 <__sfvwrite_r+0x4b4>
  18d9e4:	8100030b 	ldhu	r4,12(r16)
  18d9e8:	bc400017 	ldw	r17,0(r23)
  18d9ec:	2080008c 	andi	r2,r4,2
  18d9f0:	103fd61e 	bne	r2,zero,18d94c <__alt_data_end+0xfff8d94c>
  18d9f4:	2080004c 	andi	r2,r4,1
  18d9f8:	10003d1e 	bne	r2,zero,18daf0 <__sfvwrite_r+0x204>
  18d9fc:	0039883a 	mov	fp,zero
  18da00:	0025883a 	mov	r18,zero
  18da04:	90001a26 	beq	r18,zero,18da70 <__sfvwrite_r+0x184>
  18da08:	2080800c 	andi	r2,r4,512
  18da0c:	85800217 	ldw	r22,8(r16)
  18da10:	10007926 	beq	r2,zero,18dbf8 <__sfvwrite_r+0x30c>
  18da14:	b027883a 	mov	r19,r22
  18da18:	95809736 	bltu	r18,r22,18dc78 <__sfvwrite_r+0x38c>
  18da1c:	2081200c 	andi	r2,r4,1152
  18da20:	1000a21e 	bne	r2,zero,18dcac <__sfvwrite_r+0x3c0>
  18da24:	81000017 	ldw	r4,0(r16)
  18da28:	e00b883a 	mov	r5,fp
  18da2c:	980d883a 	mov	r6,r19
  18da30:	018ea680 	call	18ea68 <memmove>
  18da34:	81000217 	ldw	r4,8(r16)
  18da38:	81400017 	ldw	r5,0(r16)
  18da3c:	9005883a 	mov	r2,r18
  18da40:	2587c83a 	sub	r3,r4,r22
  18da44:	2ce7883a 	add	r19,r5,r19
  18da48:	80c00215 	stw	r3,8(r16)
  18da4c:	84c00015 	stw	r19,0(r16)
  18da50:	b8c00217 	ldw	r3,8(r23)
  18da54:	e0b9883a 	add	fp,fp,r2
  18da58:	90a5c83a 	sub	r18,r18,r2
  18da5c:	1885c83a 	sub	r2,r3,r2
  18da60:	b8800215 	stw	r2,8(r23)
  18da64:	103fce26 	beq	r2,zero,18d9a0 <__alt_data_end+0xfff8d9a0>
  18da68:	8100030b 	ldhu	r4,12(r16)
  18da6c:	903fe61e 	bne	r18,zero,18da08 <__alt_data_end+0xfff8da08>
  18da70:	8f000017 	ldw	fp,0(r17)
  18da74:	8c800117 	ldw	r18,4(r17)
  18da78:	8c400204 	addi	r17,r17,8
  18da7c:	003fe106 	br	18da04 <__alt_data_end+0xfff8da04>
  18da80:	8cc00017 	ldw	r19,0(r17)
  18da84:	8c800117 	ldw	r18,4(r17)
  18da88:	8c400204 	addi	r17,r17,8
  18da8c:	003fb306 	br	18d95c <__alt_data_end+0xfff8d95c>
  18da90:	0005883a 	mov	r2,zero
  18da94:	f800283a 	ret
  18da98:	00a00034 	movhi	r2,32768
  18da9c:	10bfffc4 	addi	r2,r2,-1
  18daa0:	9009883a 	mov	r4,r18
  18daa4:	1480012e 	bgeu	r2,r18,18daac <__sfvwrite_r+0x1c0>
  18daa8:	1009883a 	mov	r4,r2
  18daac:	980b883a 	mov	r5,r19
  18dab0:	0187d180 	call	187d18 <__divsi3>
  18dab4:	9809883a 	mov	r4,r19
  18dab8:	100b883a 	mov	r5,r2
  18dabc:	0187dd80 	call	187dd8 <__mulsi3>
  18dac0:	81400717 	ldw	r5,28(r16)
  18dac4:	80c00917 	ldw	r3,36(r16)
  18dac8:	a009883a 	mov	r4,r20
  18dacc:	e00d883a 	mov	r6,fp
  18dad0:	100f883a 	mov	r7,r2
  18dad4:	183ee83a 	callr	r3
  18dad8:	00bfdd16 	blt	zero,r2,18da50 <__alt_data_end+0xfff8da50>
  18dadc:	8080030b 	ldhu	r2,12(r16)
  18dae0:	10801014 	ori	r2,r2,64
  18dae4:	8080030d 	sth	r2,12(r16)
  18dae8:	00bfffc4 	movi	r2,-1
  18daec:	003fad06 	br	18d9a4 <__alt_data_end+0xfff8d9a4>
  18daf0:	0027883a 	mov	r19,zero
  18daf4:	0011883a 	mov	r8,zero
  18daf8:	0039883a 	mov	fp,zero
  18dafc:	0025883a 	mov	r18,zero
  18db00:	90001f26 	beq	r18,zero,18db80 <__sfvwrite_r+0x294>
  18db04:	40006026 	beq	r8,zero,18dc88 <__sfvwrite_r+0x39c>
  18db08:	982b883a 	mov	r21,r19
  18db0c:	94c0012e 	bgeu	r18,r19,18db14 <__sfvwrite_r+0x228>
  18db10:	902b883a 	mov	r21,r18
  18db14:	81000017 	ldw	r4,0(r16)
  18db18:	80800417 	ldw	r2,16(r16)
  18db1c:	a82d883a 	mov	r22,r21
  18db20:	81800217 	ldw	r6,8(r16)
  18db24:	81c00517 	ldw	r7,20(r16)
  18db28:	1100022e 	bgeu	r2,r4,18db34 <__sfvwrite_r+0x248>
  18db2c:	31c7883a 	add	r3,r6,r7
  18db30:	1d401816 	blt	r3,r21,18db94 <__sfvwrite_r+0x2a8>
  18db34:	a9c04416 	blt	r21,r7,18dc48 <__sfvwrite_r+0x35c>
  18db38:	80800917 	ldw	r2,36(r16)
  18db3c:	81400717 	ldw	r5,28(r16)
  18db40:	a009883a 	mov	r4,r20
  18db44:	da000115 	stw	r8,4(sp)
  18db48:	e00d883a 	mov	r6,fp
  18db4c:	103ee83a 	callr	r2
  18db50:	102d883a 	mov	r22,r2
  18db54:	da000117 	ldw	r8,4(sp)
  18db58:	00bfe00e 	bge	zero,r2,18dadc <__alt_data_end+0xfff8dadc>
  18db5c:	9da7c83a 	sub	r19,r19,r22
  18db60:	98001f26 	beq	r19,zero,18dbe0 <__sfvwrite_r+0x2f4>
  18db64:	b8800217 	ldw	r2,8(r23)
  18db68:	e5b9883a 	add	fp,fp,r22
  18db6c:	95a5c83a 	sub	r18,r18,r22
  18db70:	15adc83a 	sub	r22,r2,r22
  18db74:	bd800215 	stw	r22,8(r23)
  18db78:	b03f8926 	beq	r22,zero,18d9a0 <__alt_data_end+0xfff8d9a0>
  18db7c:	903fe11e 	bne	r18,zero,18db04 <__alt_data_end+0xfff8db04>
  18db80:	8f000017 	ldw	fp,0(r17)
  18db84:	8c800117 	ldw	r18,4(r17)
  18db88:	0011883a 	mov	r8,zero
  18db8c:	8c400204 	addi	r17,r17,8
  18db90:	003fdb06 	br	18db00 <__alt_data_end+0xfff8db00>
  18db94:	180d883a 	mov	r6,r3
  18db98:	e00b883a 	mov	r5,fp
  18db9c:	da000115 	stw	r8,4(sp)
  18dba0:	d8c00015 	stw	r3,0(sp)
  18dba4:	018ea680 	call	18ea68 <memmove>
  18dba8:	d8c00017 	ldw	r3,0(sp)
  18dbac:	80800017 	ldw	r2,0(r16)
  18dbb0:	a009883a 	mov	r4,r20
  18dbb4:	800b883a 	mov	r5,r16
  18dbb8:	10c5883a 	add	r2,r2,r3
  18dbbc:	80800015 	stw	r2,0(r16)
  18dbc0:	d8c00015 	stw	r3,0(sp)
  18dbc4:	018d09c0 	call	18d09c <_fflush_r>
  18dbc8:	d8c00017 	ldw	r3,0(sp)
  18dbcc:	da000117 	ldw	r8,4(sp)
  18dbd0:	103fc21e 	bne	r2,zero,18dadc <__alt_data_end+0xfff8dadc>
  18dbd4:	182d883a 	mov	r22,r3
  18dbd8:	9da7c83a 	sub	r19,r19,r22
  18dbdc:	983fe11e 	bne	r19,zero,18db64 <__alt_data_end+0xfff8db64>
  18dbe0:	a009883a 	mov	r4,r20
  18dbe4:	800b883a 	mov	r5,r16
  18dbe8:	018d09c0 	call	18d09c <_fflush_r>
  18dbec:	103fbb1e 	bne	r2,zero,18dadc <__alt_data_end+0xfff8dadc>
  18dbf0:	0011883a 	mov	r8,zero
  18dbf4:	003fdb06 	br	18db64 <__alt_data_end+0xfff8db64>
  18dbf8:	81000017 	ldw	r4,0(r16)
  18dbfc:	80800417 	ldw	r2,16(r16)
  18dc00:	11000236 	bltu	r2,r4,18dc0c <__sfvwrite_r+0x320>
  18dc04:	84c00517 	ldw	r19,20(r16)
  18dc08:	94ffa32e 	bgeu	r18,r19,18da98 <__alt_data_end+0xfff8da98>
  18dc0c:	9027883a 	mov	r19,r18
  18dc10:	b480012e 	bgeu	r22,r18,18dc18 <__sfvwrite_r+0x32c>
  18dc14:	b027883a 	mov	r19,r22
  18dc18:	e00b883a 	mov	r5,fp
  18dc1c:	980d883a 	mov	r6,r19
  18dc20:	018ea680 	call	18ea68 <memmove>
  18dc24:	80800217 	ldw	r2,8(r16)
  18dc28:	80c00017 	ldw	r3,0(r16)
  18dc2c:	14c5c83a 	sub	r2,r2,r19
  18dc30:	1cc7883a 	add	r3,r3,r19
  18dc34:	80800215 	stw	r2,8(r16)
  18dc38:	80c00015 	stw	r3,0(r16)
  18dc3c:	10004326 	beq	r2,zero,18dd4c <__sfvwrite_r+0x460>
  18dc40:	9805883a 	mov	r2,r19
  18dc44:	003f8206 	br	18da50 <__alt_data_end+0xfff8da50>
  18dc48:	a80d883a 	mov	r6,r21
  18dc4c:	e00b883a 	mov	r5,fp
  18dc50:	da000115 	stw	r8,4(sp)
  18dc54:	018ea680 	call	18ea68 <memmove>
  18dc58:	80800217 	ldw	r2,8(r16)
  18dc5c:	80c00017 	ldw	r3,0(r16)
  18dc60:	da000117 	ldw	r8,4(sp)
  18dc64:	1545c83a 	sub	r2,r2,r21
  18dc68:	1d6b883a 	add	r21,r3,r21
  18dc6c:	80800215 	stw	r2,8(r16)
  18dc70:	85400015 	stw	r21,0(r16)
  18dc74:	003fb906 	br	18db5c <__alt_data_end+0xfff8db5c>
  18dc78:	81000017 	ldw	r4,0(r16)
  18dc7c:	902d883a 	mov	r22,r18
  18dc80:	9027883a 	mov	r19,r18
  18dc84:	003f6806 	br	18da28 <__alt_data_end+0xfff8da28>
  18dc88:	e009883a 	mov	r4,fp
  18dc8c:	01400284 	movi	r5,10
  18dc90:	900d883a 	mov	r6,r18
  18dc94:	018e9800 	call	18e980 <memchr>
  18dc98:	10003e26 	beq	r2,zero,18dd94 <__sfvwrite_r+0x4a8>
  18dc9c:	10800044 	addi	r2,r2,1
  18dca0:	1727c83a 	sub	r19,r2,fp
  18dca4:	02000044 	movi	r8,1
  18dca8:	003f9706 	br	18db08 <__alt_data_end+0xfff8db08>
  18dcac:	80800517 	ldw	r2,20(r16)
  18dcb0:	81400417 	ldw	r5,16(r16)
  18dcb4:	80c00017 	ldw	r3,0(r16)
  18dcb8:	10a7883a 	add	r19,r2,r2
  18dcbc:	9885883a 	add	r2,r19,r2
  18dcc0:	1026d7fa 	srli	r19,r2,31
  18dcc4:	196bc83a 	sub	r21,r3,r5
  18dcc8:	a9800044 	addi	r6,r21,1
  18dccc:	9885883a 	add	r2,r19,r2
  18dcd0:	1027d07a 	srai	r19,r2,1
  18dcd4:	3485883a 	add	r2,r6,r18
  18dcd8:	980d883a 	mov	r6,r19
  18dcdc:	9880022e 	bgeu	r19,r2,18dce8 <__sfvwrite_r+0x3fc>
  18dce0:	1027883a 	mov	r19,r2
  18dce4:	100d883a 	mov	r6,r2
  18dce8:	2101000c 	andi	r4,r4,1024
  18dcec:	20001c26 	beq	r4,zero,18dd60 <__sfvwrite_r+0x474>
  18dcf0:	a009883a 	mov	r4,r20
  18dcf4:	300b883a 	mov	r5,r6
  18dcf8:	018e1d80 	call	18e1d8 <_malloc_r>
  18dcfc:	102d883a 	mov	r22,r2
  18dd00:	10002926 	beq	r2,zero,18dda8 <__sfvwrite_r+0x4bc>
  18dd04:	81400417 	ldw	r5,16(r16)
  18dd08:	1009883a 	mov	r4,r2
  18dd0c:	a80d883a 	mov	r6,r21
  18dd10:	0188e800 	call	188e80 <memcpy>
  18dd14:	8080030b 	ldhu	r2,12(r16)
  18dd18:	00fedfc4 	movi	r3,-1153
  18dd1c:	10c4703a 	and	r2,r2,r3
  18dd20:	10802014 	ori	r2,r2,128
  18dd24:	8080030d 	sth	r2,12(r16)
  18dd28:	b549883a 	add	r4,r22,r21
  18dd2c:	9d4bc83a 	sub	r5,r19,r21
  18dd30:	85800415 	stw	r22,16(r16)
  18dd34:	84c00515 	stw	r19,20(r16)
  18dd38:	81000015 	stw	r4,0(r16)
  18dd3c:	902d883a 	mov	r22,r18
  18dd40:	81400215 	stw	r5,8(r16)
  18dd44:	9027883a 	mov	r19,r18
  18dd48:	003f3706 	br	18da28 <__alt_data_end+0xfff8da28>
  18dd4c:	a009883a 	mov	r4,r20
  18dd50:	800b883a 	mov	r5,r16
  18dd54:	018d09c0 	call	18d09c <_fflush_r>
  18dd58:	103fb926 	beq	r2,zero,18dc40 <__alt_data_end+0xfff8dc40>
  18dd5c:	003f5f06 	br	18dadc <__alt_data_end+0xfff8dadc>
  18dd60:	a009883a 	mov	r4,r20
  18dd64:	018fd8c0 	call	18fd8c <_realloc_r>
  18dd68:	102d883a 	mov	r22,r2
  18dd6c:	103fee1e 	bne	r2,zero,18dd28 <__alt_data_end+0xfff8dd28>
  18dd70:	81400417 	ldw	r5,16(r16)
  18dd74:	a009883a 	mov	r4,r20
  18dd78:	018d5fc0 	call	18d5fc <_free_r>
  18dd7c:	8080030b 	ldhu	r2,12(r16)
  18dd80:	00ffdfc4 	movi	r3,-129
  18dd84:	1884703a 	and	r2,r3,r2
  18dd88:	00c00304 	movi	r3,12
  18dd8c:	a0c00015 	stw	r3,0(r20)
  18dd90:	003f5306 	br	18dae0 <__alt_data_end+0xfff8dae0>
  18dd94:	94c00044 	addi	r19,r18,1
  18dd98:	02000044 	movi	r8,1
  18dd9c:	003f5a06 	br	18db08 <__alt_data_end+0xfff8db08>
  18dda0:	00bfffc4 	movi	r2,-1
  18dda4:	003eff06 	br	18d9a4 <__alt_data_end+0xfff8d9a4>
  18dda8:	00800304 	movi	r2,12
  18ddac:	a0800015 	stw	r2,0(r20)
  18ddb0:	8080030b 	ldhu	r2,12(r16)
  18ddb4:	003f4a06 	br	18dae0 <__alt_data_end+0xfff8dae0>

0018ddb8 <_fwalk>:
  18ddb8:	defff704 	addi	sp,sp,-36
  18ddbc:	dd000415 	stw	r20,16(sp)
  18ddc0:	dfc00815 	stw	ra,32(sp)
  18ddc4:	ddc00715 	stw	r23,28(sp)
  18ddc8:	dd800615 	stw	r22,24(sp)
  18ddcc:	dd400515 	stw	r21,20(sp)
  18ddd0:	dcc00315 	stw	r19,12(sp)
  18ddd4:	dc800215 	stw	r18,8(sp)
  18ddd8:	dc400115 	stw	r17,4(sp)
  18dddc:	dc000015 	stw	r16,0(sp)
  18dde0:	2500b804 	addi	r20,r4,736
  18dde4:	a0002326 	beq	r20,zero,18de74 <_fwalk+0xbc>
  18dde8:	282b883a 	mov	r21,r5
  18ddec:	002f883a 	mov	r23,zero
  18ddf0:	05800044 	movi	r22,1
  18ddf4:	04ffffc4 	movi	r19,-1
  18ddf8:	a4400117 	ldw	r17,4(r20)
  18ddfc:	a4800217 	ldw	r18,8(r20)
  18de00:	8c7fffc4 	addi	r17,r17,-1
  18de04:	88000d16 	blt	r17,zero,18de3c <_fwalk+0x84>
  18de08:	94000304 	addi	r16,r18,12
  18de0c:	94800384 	addi	r18,r18,14
  18de10:	80c0000b 	ldhu	r3,0(r16)
  18de14:	8c7fffc4 	addi	r17,r17,-1
  18de18:	813ffd04 	addi	r4,r16,-12
  18de1c:	b0c0042e 	bgeu	r22,r3,18de30 <_fwalk+0x78>
  18de20:	90c0000f 	ldh	r3,0(r18)
  18de24:	1cc00226 	beq	r3,r19,18de30 <_fwalk+0x78>
  18de28:	a83ee83a 	callr	r21
  18de2c:	b8aeb03a 	or	r23,r23,r2
  18de30:	84001a04 	addi	r16,r16,104
  18de34:	94801a04 	addi	r18,r18,104
  18de38:	8cfff51e 	bne	r17,r19,18de10 <__alt_data_end+0xfff8de10>
  18de3c:	a5000017 	ldw	r20,0(r20)
  18de40:	a03fed1e 	bne	r20,zero,18ddf8 <__alt_data_end+0xfff8ddf8>
  18de44:	b805883a 	mov	r2,r23
  18de48:	dfc00817 	ldw	ra,32(sp)
  18de4c:	ddc00717 	ldw	r23,28(sp)
  18de50:	dd800617 	ldw	r22,24(sp)
  18de54:	dd400517 	ldw	r21,20(sp)
  18de58:	dd000417 	ldw	r20,16(sp)
  18de5c:	dcc00317 	ldw	r19,12(sp)
  18de60:	dc800217 	ldw	r18,8(sp)
  18de64:	dc400117 	ldw	r17,4(sp)
  18de68:	dc000017 	ldw	r16,0(sp)
  18de6c:	dec00904 	addi	sp,sp,36
  18de70:	f800283a 	ret
  18de74:	002f883a 	mov	r23,zero
  18de78:	003ff206 	br	18de44 <__alt_data_end+0xfff8de44>

0018de7c <_fwalk_reent>:
  18de7c:	defff704 	addi	sp,sp,-36
  18de80:	dd400515 	stw	r21,20(sp)
  18de84:	dfc00815 	stw	ra,32(sp)
  18de88:	ddc00715 	stw	r23,28(sp)
  18de8c:	dd800615 	stw	r22,24(sp)
  18de90:	dd000415 	stw	r20,16(sp)
  18de94:	dcc00315 	stw	r19,12(sp)
  18de98:	dc800215 	stw	r18,8(sp)
  18de9c:	dc400115 	stw	r17,4(sp)
  18dea0:	dc000015 	stw	r16,0(sp)
  18dea4:	2540b804 	addi	r21,r4,736
  18dea8:	a8002326 	beq	r21,zero,18df38 <_fwalk_reent+0xbc>
  18deac:	2829883a 	mov	r20,r5
  18deb0:	202d883a 	mov	r22,r4
  18deb4:	002f883a 	mov	r23,zero
  18deb8:	04c00044 	movi	r19,1
  18debc:	04bfffc4 	movi	r18,-1
  18dec0:	ac400117 	ldw	r17,4(r21)
  18dec4:	ac000217 	ldw	r16,8(r21)
  18dec8:	8c7fffc4 	addi	r17,r17,-1
  18decc:	88000c16 	blt	r17,zero,18df00 <_fwalk_reent+0x84>
  18ded0:	84000304 	addi	r16,r16,12
  18ded4:	80c0000b 	ldhu	r3,0(r16)
  18ded8:	8c7fffc4 	addi	r17,r17,-1
  18dedc:	817ffd04 	addi	r5,r16,-12
  18dee0:	98c0052e 	bgeu	r19,r3,18def8 <_fwalk_reent+0x7c>
  18dee4:	80c0008f 	ldh	r3,2(r16)
  18dee8:	b009883a 	mov	r4,r22
  18deec:	1c800226 	beq	r3,r18,18def8 <_fwalk_reent+0x7c>
  18def0:	a03ee83a 	callr	r20
  18def4:	b8aeb03a 	or	r23,r23,r2
  18def8:	84001a04 	addi	r16,r16,104
  18defc:	8cbff51e 	bne	r17,r18,18ded4 <__alt_data_end+0xfff8ded4>
  18df00:	ad400017 	ldw	r21,0(r21)
  18df04:	a83fee1e 	bne	r21,zero,18dec0 <__alt_data_end+0xfff8dec0>
  18df08:	b805883a 	mov	r2,r23
  18df0c:	dfc00817 	ldw	ra,32(sp)
  18df10:	ddc00717 	ldw	r23,28(sp)
  18df14:	dd800617 	ldw	r22,24(sp)
  18df18:	dd400517 	ldw	r21,20(sp)
  18df1c:	dd000417 	ldw	r20,16(sp)
  18df20:	dcc00317 	ldw	r19,12(sp)
  18df24:	dc800217 	ldw	r18,8(sp)
  18df28:	dc400117 	ldw	r17,4(sp)
  18df2c:	dc000017 	ldw	r16,0(sp)
  18df30:	dec00904 	addi	sp,sp,36
  18df34:	f800283a 	ret
  18df38:	002f883a 	mov	r23,zero
  18df3c:	003ff206 	br	18df08 <__alt_data_end+0xfff8df08>

0018df40 <_setlocale_r>:
  18df40:	30001b26 	beq	r6,zero,18dfb0 <_setlocale_r+0x70>
  18df44:	014006b4 	movhi	r5,26
  18df48:	defffe04 	addi	sp,sp,-8
  18df4c:	297d1d04 	addi	r5,r5,-2956
  18df50:	3009883a 	mov	r4,r6
  18df54:	dc000015 	stw	r16,0(sp)
  18df58:	dfc00115 	stw	ra,4(sp)
  18df5c:	3021883a 	mov	r16,r6
  18df60:	01904f80 	call	1904f8 <strcmp>
  18df64:	1000061e 	bne	r2,zero,18df80 <_setlocale_r+0x40>
  18df68:	008006b4 	movhi	r2,26
  18df6c:	10b98604 	addi	r2,r2,-6632
  18df70:	dfc00117 	ldw	ra,4(sp)
  18df74:	dc000017 	ldw	r16,0(sp)
  18df78:	dec00204 	addi	sp,sp,8
  18df7c:	f800283a 	ret
  18df80:	014006b4 	movhi	r5,26
  18df84:	29798604 	addi	r5,r5,-6632
  18df88:	8009883a 	mov	r4,r16
  18df8c:	01904f80 	call	1904f8 <strcmp>
  18df90:	103ff526 	beq	r2,zero,18df68 <__alt_data_end+0xfff8df68>
  18df94:	014006b4 	movhi	r5,26
  18df98:	296f7204 	addi	r5,r5,-16952
  18df9c:	8009883a 	mov	r4,r16
  18dfa0:	01904f80 	call	1904f8 <strcmp>
  18dfa4:	103ff026 	beq	r2,zero,18df68 <__alt_data_end+0xfff8df68>
  18dfa8:	0005883a 	mov	r2,zero
  18dfac:	003ff006 	br	18df70 <__alt_data_end+0xfff8df70>
  18dfb0:	008006b4 	movhi	r2,26
  18dfb4:	10b98604 	addi	r2,r2,-6632
  18dfb8:	f800283a 	ret

0018dfbc <__locale_charset>:
  18dfbc:	008006b4 	movhi	r2,26
  18dfc0:	10be9904 	addi	r2,r2,-1436
  18dfc4:	f800283a 	ret

0018dfc8 <__locale_mb_cur_max>:
  18dfc8:	008006b4 	movhi	r2,26
  18dfcc:	10846804 	addi	r2,r2,4512
  18dfd0:	10800017 	ldw	r2,0(r2)
  18dfd4:	f800283a 	ret

0018dfd8 <__locale_msgcharset>:
  18dfd8:	008006b4 	movhi	r2,26
  18dfdc:	10be9104 	addi	r2,r2,-1468
  18dfe0:	f800283a 	ret

0018dfe4 <__locale_cjk_lang>:
  18dfe4:	0005883a 	mov	r2,zero
  18dfe8:	f800283a 	ret

0018dfec <_localeconv_r>:
  18dfec:	008006b4 	movhi	r2,26
  18dff0:	10bea104 	addi	r2,r2,-1404
  18dff4:	f800283a 	ret

0018dff8 <setlocale>:
  18dff8:	00c006b4 	movhi	r3,26
  18dffc:	18c46704 	addi	r3,r3,4508
  18e000:	2005883a 	mov	r2,r4
  18e004:	19000017 	ldw	r4,0(r3)
  18e008:	280d883a 	mov	r6,r5
  18e00c:	100b883a 	mov	r5,r2
  18e010:	018df401 	jmpi	18df40 <_setlocale_r>

0018e014 <localeconv>:
  18e014:	008006b4 	movhi	r2,26
  18e018:	10bea104 	addi	r2,r2,-1404
  18e01c:	f800283a 	ret

0018e020 <__smakebuf_r>:
  18e020:	2880030b 	ldhu	r2,12(r5)
  18e024:	10c0008c 	andi	r3,r2,2
  18e028:	1800401e 	bne	r3,zero,18e12c <__smakebuf_r+0x10c>
  18e02c:	deffec04 	addi	sp,sp,-80
  18e030:	dc000f15 	stw	r16,60(sp)
  18e034:	2821883a 	mov	r16,r5
  18e038:	2940038f 	ldh	r5,14(r5)
  18e03c:	dc401015 	stw	r17,64(sp)
  18e040:	dfc01315 	stw	ra,76(sp)
  18e044:	dcc01215 	stw	r19,72(sp)
  18e048:	dc801115 	stw	r18,68(sp)
  18e04c:	2023883a 	mov	r17,r4
  18e050:	28001b16 	blt	r5,zero,18e0c0 <__smakebuf_r+0xa0>
  18e054:	d80d883a 	mov	r6,sp
  18e058:	01920400 	call	192040 <_fstat_r>
  18e05c:	10001716 	blt	r2,zero,18e0bc <__smakebuf_r+0x9c>
  18e060:	d8800117 	ldw	r2,4(sp)
  18e064:	00e00014 	movui	r3,32768
  18e068:	10bc000c 	andi	r2,r2,61440
  18e06c:	10c03726 	beq	r2,r3,18e14c <__smakebuf_r+0x12c>
  18e070:	80c0030b 	ldhu	r3,12(r16)
  18e074:	18c20014 	ori	r3,r3,2048
  18e078:	80c0030d 	sth	r3,12(r16)
  18e07c:	00c80004 	movi	r3,8192
  18e080:	10c03c1e 	bne	r2,r3,18e174 <__smakebuf_r+0x154>
  18e084:	8140038f 	ldh	r5,14(r16)
  18e088:	8809883a 	mov	r4,r17
  18e08c:	01920980 	call	192098 <_isatty_r>
  18e090:	10004e26 	beq	r2,zero,18e1cc <__smakebuf_r+0x1ac>
  18e094:	8080030b 	ldhu	r2,12(r16)
  18e098:	04c00044 	movi	r19,1
  18e09c:	80c010c4 	addi	r3,r16,67
  18e0a0:	14c4b03a 	or	r2,r2,r19
  18e0a4:	8080030d 	sth	r2,12(r16)
  18e0a8:	80c00015 	stw	r3,0(r16)
  18e0ac:	80c00415 	stw	r3,16(r16)
  18e0b0:	84c00515 	stw	r19,20(r16)
  18e0b4:	04810004 	movi	r18,1024
  18e0b8:	00000706 	br	18e0d8 <__smakebuf_r+0xb8>
  18e0bc:	8080030b 	ldhu	r2,12(r16)
  18e0c0:	10c0200c 	andi	r3,r2,128
  18e0c4:	18001f1e 	bne	r3,zero,18e144 <__smakebuf_r+0x124>
  18e0c8:	04810004 	movi	r18,1024
  18e0cc:	10820014 	ori	r2,r2,2048
  18e0d0:	8080030d 	sth	r2,12(r16)
  18e0d4:	0027883a 	mov	r19,zero
  18e0d8:	8809883a 	mov	r4,r17
  18e0dc:	900b883a 	mov	r5,r18
  18e0e0:	018e1d80 	call	18e1d8 <_malloc_r>
  18e0e4:	10002e26 	beq	r2,zero,18e1a0 <__smakebuf_r+0x180>
  18e0e8:	80c0030b 	ldhu	r3,12(r16)
  18e0ec:	01000674 	movhi	r4,25
  18e0f0:	21344e04 	addi	r4,r4,-11976
  18e0f4:	89000f15 	stw	r4,60(r17)
  18e0f8:	18c02014 	ori	r3,r3,128
  18e0fc:	80c0030d 	sth	r3,12(r16)
  18e100:	80800015 	stw	r2,0(r16)
  18e104:	80800415 	stw	r2,16(r16)
  18e108:	84800515 	stw	r18,20(r16)
  18e10c:	98001c1e 	bne	r19,zero,18e180 <__smakebuf_r+0x160>
  18e110:	dfc01317 	ldw	ra,76(sp)
  18e114:	dcc01217 	ldw	r19,72(sp)
  18e118:	dc801117 	ldw	r18,68(sp)
  18e11c:	dc401017 	ldw	r17,64(sp)
  18e120:	dc000f17 	ldw	r16,60(sp)
  18e124:	dec01404 	addi	sp,sp,80
  18e128:	f800283a 	ret
  18e12c:	288010c4 	addi	r2,r5,67
  18e130:	28800015 	stw	r2,0(r5)
  18e134:	28800415 	stw	r2,16(r5)
  18e138:	00800044 	movi	r2,1
  18e13c:	28800515 	stw	r2,20(r5)
  18e140:	f800283a 	ret
  18e144:	04801004 	movi	r18,64
  18e148:	003fe006 	br	18e0cc <__alt_data_end+0xfff8e0cc>
  18e14c:	81000a17 	ldw	r4,40(r16)
  18e150:	00c00674 	movhi	r3,25
  18e154:	18c12504 	addi	r3,r3,1172
  18e158:	20ffc51e 	bne	r4,r3,18e070 <__alt_data_end+0xfff8e070>
  18e15c:	80c0030b 	ldhu	r3,12(r16)
  18e160:	01010004 	movi	r4,1024
  18e164:	81001315 	stw	r4,76(r16)
  18e168:	1906b03a 	or	r3,r3,r4
  18e16c:	80c0030d 	sth	r3,12(r16)
  18e170:	003fc206 	br	18e07c <__alt_data_end+0xfff8e07c>
  18e174:	0027883a 	mov	r19,zero
  18e178:	04810004 	movi	r18,1024
  18e17c:	003fd606 	br	18e0d8 <__alt_data_end+0xfff8e0d8>
  18e180:	8140038f 	ldh	r5,14(r16)
  18e184:	8809883a 	mov	r4,r17
  18e188:	01920980 	call	192098 <_isatty_r>
  18e18c:	103fe026 	beq	r2,zero,18e110 <__alt_data_end+0xfff8e110>
  18e190:	8080030b 	ldhu	r2,12(r16)
  18e194:	10800054 	ori	r2,r2,1
  18e198:	8080030d 	sth	r2,12(r16)
  18e19c:	003fdc06 	br	18e110 <__alt_data_end+0xfff8e110>
  18e1a0:	8080030b 	ldhu	r2,12(r16)
  18e1a4:	10c0800c 	andi	r3,r2,512
  18e1a8:	183fd91e 	bne	r3,zero,18e110 <__alt_data_end+0xfff8e110>
  18e1ac:	10800094 	ori	r2,r2,2
  18e1b0:	80c010c4 	addi	r3,r16,67
  18e1b4:	8080030d 	sth	r2,12(r16)
  18e1b8:	00800044 	movi	r2,1
  18e1bc:	80c00015 	stw	r3,0(r16)
  18e1c0:	80c00415 	stw	r3,16(r16)
  18e1c4:	80800515 	stw	r2,20(r16)
  18e1c8:	003fd106 	br	18e110 <__alt_data_end+0xfff8e110>
  18e1cc:	04c00044 	movi	r19,1
  18e1d0:	04810004 	movi	r18,1024
  18e1d4:	003fc006 	br	18e0d8 <__alt_data_end+0xfff8e0d8>

0018e1d8 <_malloc_r>:
  18e1d8:	defff504 	addi	sp,sp,-44
  18e1dc:	dc800315 	stw	r18,12(sp)
  18e1e0:	dfc00a15 	stw	ra,40(sp)
  18e1e4:	df000915 	stw	fp,36(sp)
  18e1e8:	ddc00815 	stw	r23,32(sp)
  18e1ec:	dd800715 	stw	r22,28(sp)
  18e1f0:	dd400615 	stw	r21,24(sp)
  18e1f4:	dd000515 	stw	r20,20(sp)
  18e1f8:	dcc00415 	stw	r19,16(sp)
  18e1fc:	dc400215 	stw	r17,8(sp)
  18e200:	dc000115 	stw	r16,4(sp)
  18e204:	288002c4 	addi	r2,r5,11
  18e208:	00c00584 	movi	r3,22
  18e20c:	2025883a 	mov	r18,r4
  18e210:	18802a2e 	bgeu	r3,r2,18e2bc <_malloc_r+0xe4>
  18e214:	047ffe04 	movi	r17,-8
  18e218:	1462703a 	and	r17,r2,r17
  18e21c:	88009e16 	blt	r17,zero,18e498 <_malloc_r+0x2c0>
  18e220:	89409d36 	bltu	r17,r5,18e498 <_malloc_r+0x2c0>
  18e224:	0196aec0 	call	196aec <__malloc_lock>
  18e228:	00807dc4 	movi	r2,503
  18e22c:	14402736 	bltu	r2,r17,18e2cc <_malloc_r+0xf4>
  18e230:	8806d0fa 	srli	r3,r17,3
  18e234:	04c006b4 	movhi	r19,26
  18e238:	9cfeaf04 	addi	r19,r19,-1348
  18e23c:	18c5883a 	add	r2,r3,r3
  18e240:	1085883a 	add	r2,r2,r2
  18e244:	1085883a 	add	r2,r2,r2
  18e248:	9885883a 	add	r2,r19,r2
  18e24c:	14000317 	ldw	r16,12(r2)
  18e250:	80814a26 	beq	r16,r2,18e77c <_malloc_r+0x5a4>
  18e254:	80c00117 	ldw	r3,4(r16)
  18e258:	81000317 	ldw	r4,12(r16)
  18e25c:	00bfff04 	movi	r2,-4
  18e260:	1884703a 	and	r2,r3,r2
  18e264:	81400217 	ldw	r5,8(r16)
  18e268:	8085883a 	add	r2,r16,r2
  18e26c:	10c00117 	ldw	r3,4(r2)
  18e270:	29000315 	stw	r4,12(r5)
  18e274:	21400215 	stw	r5,8(r4)
  18e278:	18c00054 	ori	r3,r3,1
  18e27c:	10c00115 	stw	r3,4(r2)
  18e280:	9009883a 	mov	r4,r18
  18e284:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e288:	80800204 	addi	r2,r16,8
  18e28c:	dfc00a17 	ldw	ra,40(sp)
  18e290:	df000917 	ldw	fp,36(sp)
  18e294:	ddc00817 	ldw	r23,32(sp)
  18e298:	dd800717 	ldw	r22,28(sp)
  18e29c:	dd400617 	ldw	r21,24(sp)
  18e2a0:	dd000517 	ldw	r20,20(sp)
  18e2a4:	dcc00417 	ldw	r19,16(sp)
  18e2a8:	dc800317 	ldw	r18,12(sp)
  18e2ac:	dc400217 	ldw	r17,8(sp)
  18e2b0:	dc000117 	ldw	r16,4(sp)
  18e2b4:	dec00b04 	addi	sp,sp,44
  18e2b8:	f800283a 	ret
  18e2bc:	04400404 	movi	r17,16
  18e2c0:	89407536 	bltu	r17,r5,18e498 <_malloc_r+0x2c0>
  18e2c4:	0196aec0 	call	196aec <__malloc_lock>
  18e2c8:	003fd906 	br	18e230 <__alt_data_end+0xfff8e230>
  18e2cc:	8806d27a 	srli	r3,r17,9
  18e2d0:	18007526 	beq	r3,zero,18e4a8 <_malloc_r+0x2d0>
  18e2d4:	00800104 	movi	r2,4
  18e2d8:	10c0ef36 	bltu	r2,r3,18e698 <_malloc_r+0x4c0>
  18e2dc:	8806d1ba 	srli	r3,r17,6
  18e2e0:	19c00e04 	addi	r7,r3,56
  18e2e4:	39cb883a 	add	r5,r7,r7
  18e2e8:	04c006b4 	movhi	r19,26
  18e2ec:	294b883a 	add	r5,r5,r5
  18e2f0:	9cfeaf04 	addi	r19,r19,-1348
  18e2f4:	294b883a 	add	r5,r5,r5
  18e2f8:	994b883a 	add	r5,r19,r5
  18e2fc:	2c000317 	ldw	r16,12(r5)
  18e300:	2c000e26 	beq	r5,r16,18e33c <_malloc_r+0x164>
  18e304:	80800117 	ldw	r2,4(r16)
  18e308:	01bfff04 	movi	r6,-4
  18e30c:	010003c4 	movi	r4,15
  18e310:	1184703a 	and	r2,r2,r6
  18e314:	1447c83a 	sub	r3,r2,r17
  18e318:	20c00716 	blt	r4,r3,18e338 <_malloc_r+0x160>
  18e31c:	1800650e 	bge	r3,zero,18e4b4 <_malloc_r+0x2dc>
  18e320:	84000317 	ldw	r16,12(r16)
  18e324:	2c000526 	beq	r5,r16,18e33c <_malloc_r+0x164>
  18e328:	80800117 	ldw	r2,4(r16)
  18e32c:	1184703a 	and	r2,r2,r6
  18e330:	1447c83a 	sub	r3,r2,r17
  18e334:	20fff90e 	bge	r4,r3,18e31c <__alt_data_end+0xfff8e31c>
  18e338:	39ffffc4 	addi	r7,r7,-1
  18e33c:	38c00044 	addi	r3,r7,1
  18e340:	018006b4 	movhi	r6,26
  18e344:	9c000417 	ldw	r16,16(r19)
  18e348:	31beaf04 	addi	r6,r6,-1348
  18e34c:	32400204 	addi	r9,r6,8
  18e350:	82410326 	beq	r16,r9,18e760 <_malloc_r+0x588>
  18e354:	81000117 	ldw	r4,4(r16)
  18e358:	00bfff04 	movi	r2,-4
  18e35c:	208e703a 	and	r7,r4,r2
  18e360:	3c45c83a 	sub	r2,r7,r17
  18e364:	010003c4 	movi	r4,15
  18e368:	2080ee16 	blt	r4,r2,18e724 <_malloc_r+0x54c>
  18e36c:	32400515 	stw	r9,20(r6)
  18e370:	32400415 	stw	r9,16(r6)
  18e374:	1000510e 	bge	r2,zero,18e4bc <_malloc_r+0x2e4>
  18e378:	00807fc4 	movi	r2,511
  18e37c:	11c0ce36 	bltu	r2,r7,18e6b8 <_malloc_r+0x4e0>
  18e380:	3808d0fa 	srli	r4,r7,3
  18e384:	01c00044 	movi	r7,1
  18e388:	30800117 	ldw	r2,4(r6)
  18e38c:	210b883a 	add	r5,r4,r4
  18e390:	294b883a 	add	r5,r5,r5
  18e394:	2009d0ba 	srai	r4,r4,2
  18e398:	294b883a 	add	r5,r5,r5
  18e39c:	298b883a 	add	r5,r5,r6
  18e3a0:	2a000217 	ldw	r8,8(r5)
  18e3a4:	3908983a 	sll	r4,r7,r4
  18e3a8:	81400315 	stw	r5,12(r16)
  18e3ac:	82000215 	stw	r8,8(r16)
  18e3b0:	2088b03a 	or	r4,r4,r2
  18e3b4:	2c000215 	stw	r16,8(r5)
  18e3b8:	31000115 	stw	r4,4(r6)
  18e3bc:	44000315 	stw	r16,12(r8)
  18e3c0:	1805d0ba 	srai	r2,r3,2
  18e3c4:	01400044 	movi	r5,1
  18e3c8:	288a983a 	sll	r5,r5,r2
  18e3cc:	21404336 	bltu	r4,r5,18e4dc <_malloc_r+0x304>
  18e3d0:	2144703a 	and	r2,r4,r5
  18e3d4:	10000a1e 	bne	r2,zero,18e400 <_malloc_r+0x228>
  18e3d8:	00bfff04 	movi	r2,-4
  18e3dc:	294b883a 	add	r5,r5,r5
  18e3e0:	1886703a 	and	r3,r3,r2
  18e3e4:	2144703a 	and	r2,r4,r5
  18e3e8:	18c00104 	addi	r3,r3,4
  18e3ec:	1000041e 	bne	r2,zero,18e400 <_malloc_r+0x228>
  18e3f0:	294b883a 	add	r5,r5,r5
  18e3f4:	2144703a 	and	r2,r4,r5
  18e3f8:	18c00104 	addi	r3,r3,4
  18e3fc:	103ffc26 	beq	r2,zero,18e3f0 <__alt_data_end+0xfff8e3f0>
  18e400:	023fff04 	movi	r8,-4
  18e404:	01c003c4 	movi	r7,15
  18e408:	18c5883a 	add	r2,r3,r3
  18e40c:	1085883a 	add	r2,r2,r2
  18e410:	1085883a 	add	r2,r2,r2
  18e414:	9895883a 	add	r10,r19,r2
  18e418:	52c00304 	addi	r11,r10,12
  18e41c:	1819883a 	mov	r12,r3
  18e420:	5c000017 	ldw	r16,0(r11)
  18e424:	59bffd04 	addi	r6,r11,-12
  18e428:	8180041e 	bne	r16,r6,18e43c <_malloc_r+0x264>
  18e42c:	0000ce06 	br	18e768 <_malloc_r+0x590>
  18e430:	2000d70e 	bge	r4,zero,18e790 <_malloc_r+0x5b8>
  18e434:	84000317 	ldw	r16,12(r16)
  18e438:	8180cb26 	beq	r16,r6,18e768 <_malloc_r+0x590>
  18e43c:	80800117 	ldw	r2,4(r16)
  18e440:	1204703a 	and	r2,r2,r8
  18e444:	1449c83a 	sub	r4,r2,r17
  18e448:	393ff90e 	bge	r7,r4,18e430 <__alt_data_end+0xfff8e430>
  18e44c:	80800317 	ldw	r2,12(r16)
  18e450:	80c00217 	ldw	r3,8(r16)
  18e454:	89400054 	ori	r5,r17,1
  18e458:	81400115 	stw	r5,4(r16)
  18e45c:	18800315 	stw	r2,12(r3)
  18e460:	10c00215 	stw	r3,8(r2)
  18e464:	8463883a 	add	r17,r16,r17
  18e468:	9c400515 	stw	r17,20(r19)
  18e46c:	9c400415 	stw	r17,16(r19)
  18e470:	20800054 	ori	r2,r4,1
  18e474:	88800115 	stw	r2,4(r17)
  18e478:	8a400315 	stw	r9,12(r17)
  18e47c:	8a400215 	stw	r9,8(r17)
  18e480:	8923883a 	add	r17,r17,r4
  18e484:	89000015 	stw	r4,0(r17)
  18e488:	9009883a 	mov	r4,r18
  18e48c:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e490:	80800204 	addi	r2,r16,8
  18e494:	003f7d06 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e498:	00800304 	movi	r2,12
  18e49c:	90800015 	stw	r2,0(r18)
  18e4a0:	0005883a 	mov	r2,zero
  18e4a4:	003f7906 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e4a8:	01401f84 	movi	r5,126
  18e4ac:	01c00fc4 	movi	r7,63
  18e4b0:	003f8d06 	br	18e2e8 <__alt_data_end+0xfff8e2e8>
  18e4b4:	81000317 	ldw	r4,12(r16)
  18e4b8:	003f6a06 	br	18e264 <__alt_data_end+0xfff8e264>
  18e4bc:	81c5883a 	add	r2,r16,r7
  18e4c0:	10c00117 	ldw	r3,4(r2)
  18e4c4:	9009883a 	mov	r4,r18
  18e4c8:	18c00054 	ori	r3,r3,1
  18e4cc:	10c00115 	stw	r3,4(r2)
  18e4d0:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e4d4:	80800204 	addi	r2,r16,8
  18e4d8:	003f6c06 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e4dc:	9c000217 	ldw	r16,8(r19)
  18e4e0:	00bfff04 	movi	r2,-4
  18e4e4:	85800117 	ldw	r22,4(r16)
  18e4e8:	b0ac703a 	and	r22,r22,r2
  18e4ec:	b4400336 	bltu	r22,r17,18e4fc <_malloc_r+0x324>
  18e4f0:	b445c83a 	sub	r2,r22,r17
  18e4f4:	00c003c4 	movi	r3,15
  18e4f8:	18805d16 	blt	r3,r2,18e670 <_malloc_r+0x498>
  18e4fc:	05c006b4 	movhi	r23,26
  18e500:	008006b4 	movhi	r2,26
  18e504:	bdc46904 	addi	r23,r23,4516
  18e508:	108b6a04 	addi	r2,r2,11688
  18e50c:	15400017 	ldw	r21,0(r2)
  18e510:	b9000017 	ldw	r4,0(r23)
  18e514:	00ffffc4 	movi	r3,-1
  18e518:	858d883a 	add	r6,r16,r22
  18e51c:	8d6b883a 	add	r21,r17,r21
  18e520:	20c0e426 	beq	r4,r3,18e8b4 <_malloc_r+0x6dc>
  18e524:	ad4403c4 	addi	r21,r21,4111
  18e528:	00fc0004 	movi	r3,-4096
  18e52c:	a8ea703a 	and	r21,r21,r3
  18e530:	9009883a 	mov	r4,r18
  18e534:	a80b883a 	mov	r5,r21
  18e538:	d9800015 	stw	r6,0(sp)
  18e53c:	01903680 	call	190368 <_sbrk_r>
  18e540:	00ffffc4 	movi	r3,-1
  18e544:	1029883a 	mov	r20,r2
  18e548:	d9800017 	ldw	r6,0(sp)
  18e54c:	10c0a426 	beq	r2,r3,18e7e0 <_malloc_r+0x608>
  18e550:	1180a236 	bltu	r2,r6,18e7dc <_malloc_r+0x604>
  18e554:	070006b4 	movhi	fp,26
  18e558:	e70b7504 	addi	fp,fp,11732
  18e55c:	e0c00017 	ldw	r3,0(fp)
  18e560:	a8c7883a 	add	r3,r21,r3
  18e564:	e0c00015 	stw	r3,0(fp)
  18e568:	3500da26 	beq	r6,r20,18e8d4 <_malloc_r+0x6fc>
  18e56c:	b9000017 	ldw	r4,0(r23)
  18e570:	00bfffc4 	movi	r2,-1
  18e574:	2080e426 	beq	r4,r2,18e908 <_malloc_r+0x730>
  18e578:	a185c83a 	sub	r2,r20,r6
  18e57c:	1885883a 	add	r2,r3,r2
  18e580:	e0800015 	stw	r2,0(fp)
  18e584:	a0c001cc 	andi	r3,r20,7
  18e588:	1800b526 	beq	r3,zero,18e860 <_malloc_r+0x688>
  18e58c:	a0e9c83a 	sub	r20,r20,r3
  18e590:	00840204 	movi	r2,4104
  18e594:	a5000204 	addi	r20,r20,8
  18e598:	10c7c83a 	sub	r3,r2,r3
  18e59c:	a545883a 	add	r2,r20,r21
  18e5a0:	1083ffcc 	andi	r2,r2,4095
  18e5a4:	18abc83a 	sub	r21,r3,r2
  18e5a8:	9009883a 	mov	r4,r18
  18e5ac:	a80b883a 	mov	r5,r21
  18e5b0:	01903680 	call	190368 <_sbrk_r>
  18e5b4:	00ffffc4 	movi	r3,-1
  18e5b8:	10c0d026 	beq	r2,r3,18e8fc <_malloc_r+0x724>
  18e5bc:	1507c83a 	sub	r3,r2,r20
  18e5c0:	a8c7883a 	add	r3,r21,r3
  18e5c4:	18c00054 	ori	r3,r3,1
  18e5c8:	e0800017 	ldw	r2,0(fp)
  18e5cc:	9d000215 	stw	r20,8(r19)
  18e5d0:	a0c00115 	stw	r3,4(r20)
  18e5d4:	a887883a 	add	r3,r21,r2
  18e5d8:	e0c00015 	stw	r3,0(fp)
  18e5dc:	84c00e26 	beq	r16,r19,18e618 <_malloc_r+0x440>
  18e5e0:	018003c4 	movi	r6,15
  18e5e4:	3580a02e 	bgeu	r6,r22,18e868 <_malloc_r+0x690>
  18e5e8:	81400117 	ldw	r5,4(r16)
  18e5ec:	013ffe04 	movi	r4,-8
  18e5f0:	b0bffd04 	addi	r2,r22,-12
  18e5f4:	1104703a 	and	r2,r2,r4
  18e5f8:	2900004c 	andi	r4,r5,1
  18e5fc:	1108b03a 	or	r4,r2,r4
  18e600:	81000115 	stw	r4,4(r16)
  18e604:	01400144 	movi	r5,5
  18e608:	8089883a 	add	r4,r16,r2
  18e60c:	21400115 	stw	r5,4(r4)
  18e610:	21400215 	stw	r5,8(r4)
  18e614:	3080c036 	bltu	r6,r2,18e918 <_malloc_r+0x740>
  18e618:	008006b4 	movhi	r2,26
  18e61c:	108b6904 	addi	r2,r2,11684
  18e620:	11000017 	ldw	r4,0(r2)
  18e624:	20c0012e 	bgeu	r4,r3,18e62c <_malloc_r+0x454>
  18e628:	10c00015 	stw	r3,0(r2)
  18e62c:	008006b4 	movhi	r2,26
  18e630:	108b6804 	addi	r2,r2,11680
  18e634:	11000017 	ldw	r4,0(r2)
  18e638:	9c000217 	ldw	r16,8(r19)
  18e63c:	20c0012e 	bgeu	r4,r3,18e644 <_malloc_r+0x46c>
  18e640:	10c00015 	stw	r3,0(r2)
  18e644:	80c00117 	ldw	r3,4(r16)
  18e648:	00bfff04 	movi	r2,-4
  18e64c:	1886703a 	and	r3,r3,r2
  18e650:	1c45c83a 	sub	r2,r3,r17
  18e654:	1c400236 	bltu	r3,r17,18e660 <_malloc_r+0x488>
  18e658:	00c003c4 	movi	r3,15
  18e65c:	18800416 	blt	r3,r2,18e670 <_malloc_r+0x498>
  18e660:	9009883a 	mov	r4,r18
  18e664:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e668:	0005883a 	mov	r2,zero
  18e66c:	003f0706 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e670:	88c00054 	ori	r3,r17,1
  18e674:	80c00115 	stw	r3,4(r16)
  18e678:	8463883a 	add	r17,r16,r17
  18e67c:	10800054 	ori	r2,r2,1
  18e680:	9c400215 	stw	r17,8(r19)
  18e684:	88800115 	stw	r2,4(r17)
  18e688:	9009883a 	mov	r4,r18
  18e68c:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e690:	80800204 	addi	r2,r16,8
  18e694:	003efd06 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e698:	00800504 	movi	r2,20
  18e69c:	10c0482e 	bgeu	r2,r3,18e7c0 <_malloc_r+0x5e8>
  18e6a0:	00801504 	movi	r2,84
  18e6a4:	10c06836 	bltu	r2,r3,18e848 <_malloc_r+0x670>
  18e6a8:	8806d33a 	srli	r3,r17,12
  18e6ac:	19c01b84 	addi	r7,r3,110
  18e6b0:	39cb883a 	add	r5,r7,r7
  18e6b4:	003f0c06 	br	18e2e8 <__alt_data_end+0xfff8e2e8>
  18e6b8:	3804d27a 	srli	r2,r7,9
  18e6bc:	01000104 	movi	r4,4
  18e6c0:	2080422e 	bgeu	r4,r2,18e7cc <_malloc_r+0x5f4>
  18e6c4:	01000504 	movi	r4,20
  18e6c8:	20807c36 	bltu	r4,r2,18e8bc <_malloc_r+0x6e4>
  18e6cc:	110016c4 	addi	r4,r2,91
  18e6d0:	210b883a 	add	r5,r4,r4
  18e6d4:	294b883a 	add	r5,r5,r5
  18e6d8:	294b883a 	add	r5,r5,r5
  18e6dc:	994b883a 	add	r5,r19,r5
  18e6e0:	28800217 	ldw	r2,8(r5)
  18e6e4:	020006b4 	movhi	r8,26
  18e6e8:	423eaf04 	addi	r8,r8,-1348
  18e6ec:	11406326 	beq	r2,r5,18e87c <_malloc_r+0x6a4>
  18e6f0:	01bfff04 	movi	r6,-4
  18e6f4:	11000117 	ldw	r4,4(r2)
  18e6f8:	2188703a 	and	r4,r4,r6
  18e6fc:	3900022e 	bgeu	r7,r4,18e708 <_malloc_r+0x530>
  18e700:	10800217 	ldw	r2,8(r2)
  18e704:	28bffb1e 	bne	r5,r2,18e6f4 <__alt_data_end+0xfff8e6f4>
  18e708:	11800317 	ldw	r6,12(r2)
  18e70c:	99000117 	ldw	r4,4(r19)
  18e710:	81800315 	stw	r6,12(r16)
  18e714:	80800215 	stw	r2,8(r16)
  18e718:	34000215 	stw	r16,8(r6)
  18e71c:	14000315 	stw	r16,12(r2)
  18e720:	003f2706 	br	18e3c0 <__alt_data_end+0xfff8e3c0>
  18e724:	88c00054 	ori	r3,r17,1
  18e728:	80c00115 	stw	r3,4(r16)
  18e72c:	8463883a 	add	r17,r16,r17
  18e730:	34400515 	stw	r17,20(r6)
  18e734:	34400415 	stw	r17,16(r6)
  18e738:	10c00054 	ori	r3,r2,1
  18e73c:	8a400315 	stw	r9,12(r17)
  18e740:	8a400215 	stw	r9,8(r17)
  18e744:	88c00115 	stw	r3,4(r17)
  18e748:	88a3883a 	add	r17,r17,r2
  18e74c:	88800015 	stw	r2,0(r17)
  18e750:	9009883a 	mov	r4,r18
  18e754:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e758:	80800204 	addi	r2,r16,8
  18e75c:	003ecb06 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e760:	31000117 	ldw	r4,4(r6)
  18e764:	003f1606 	br	18e3c0 <__alt_data_end+0xfff8e3c0>
  18e768:	63000044 	addi	r12,r12,1
  18e76c:	608000cc 	andi	r2,r12,3
  18e770:	5ac00204 	addi	r11,r11,8
  18e774:	103f2a1e 	bne	r2,zero,18e420 <__alt_data_end+0xfff8e420>
  18e778:	00002106 	br	18e800 <_malloc_r+0x628>
  18e77c:	80800204 	addi	r2,r16,8
  18e780:	84000517 	ldw	r16,20(r16)
  18e784:	143eb31e 	bne	r2,r16,18e254 <__alt_data_end+0xfff8e254>
  18e788:	18c00084 	addi	r3,r3,2
  18e78c:	003eec06 	br	18e340 <__alt_data_end+0xfff8e340>
  18e790:	8085883a 	add	r2,r16,r2
  18e794:	10c00117 	ldw	r3,4(r2)
  18e798:	81000317 	ldw	r4,12(r16)
  18e79c:	81400217 	ldw	r5,8(r16)
  18e7a0:	18c00054 	ori	r3,r3,1
  18e7a4:	10c00115 	stw	r3,4(r2)
  18e7a8:	29000315 	stw	r4,12(r5)
  18e7ac:	21400215 	stw	r5,8(r4)
  18e7b0:	9009883a 	mov	r4,r18
  18e7b4:	0196b0c0 	call	196b0c <__malloc_unlock>
  18e7b8:	80800204 	addi	r2,r16,8
  18e7bc:	003eb306 	br	18e28c <__alt_data_end+0xfff8e28c>
  18e7c0:	19c016c4 	addi	r7,r3,91
  18e7c4:	39cb883a 	add	r5,r7,r7
  18e7c8:	003ec706 	br	18e2e8 <__alt_data_end+0xfff8e2e8>
  18e7cc:	3804d1ba 	srli	r2,r7,6
  18e7d0:	11000e04 	addi	r4,r2,56
  18e7d4:	210b883a 	add	r5,r4,r4
  18e7d8:	003fbe06 	br	18e6d4 <__alt_data_end+0xfff8e6d4>
  18e7dc:	84ff5d26 	beq	r16,r19,18e554 <__alt_data_end+0xfff8e554>
  18e7e0:	9c000217 	ldw	r16,8(r19)
  18e7e4:	00bfff04 	movi	r2,-4
  18e7e8:	80c00117 	ldw	r3,4(r16)
  18e7ec:	1886703a 	and	r3,r3,r2
  18e7f0:	003f9706 	br	18e650 <__alt_data_end+0xfff8e650>
  18e7f4:	52800017 	ldw	r10,0(r10)
  18e7f8:	18ffffc4 	addi	r3,r3,-1
  18e7fc:	50805c1e 	bne	r10,r2,18e970 <_malloc_r+0x798>
  18e800:	190000cc 	andi	r4,r3,3
  18e804:	50bffe04 	addi	r2,r10,-8
  18e808:	203ffa1e 	bne	r4,zero,18e7f4 <__alt_data_end+0xfff8e7f4>
  18e80c:	98800117 	ldw	r2,4(r19)
  18e810:	0146303a 	nor	r3,zero,r5
  18e814:	1884703a 	and	r2,r3,r2
  18e818:	98800115 	stw	r2,4(r19)
  18e81c:	294b883a 	add	r5,r5,r5
  18e820:	117f2e36 	bltu	r2,r5,18e4dc <__alt_data_end+0xfff8e4dc>
  18e824:	283f2d26 	beq	r5,zero,18e4dc <__alt_data_end+0xfff8e4dc>
  18e828:	1146703a 	and	r3,r2,r5
  18e82c:	1800521e 	bne	r3,zero,18e978 <_malloc_r+0x7a0>
  18e830:	6007883a 	mov	r3,r12
  18e834:	294b883a 	add	r5,r5,r5
  18e838:	1148703a 	and	r4,r2,r5
  18e83c:	18c00104 	addi	r3,r3,4
  18e840:	203ffc26 	beq	r4,zero,18e834 <__alt_data_end+0xfff8e834>
  18e844:	003ef006 	br	18e408 <__alt_data_end+0xfff8e408>
  18e848:	00805504 	movi	r2,340
  18e84c:	10c01336 	bltu	r2,r3,18e89c <_malloc_r+0x6c4>
  18e850:	8806d3fa 	srli	r3,r17,15
  18e854:	19c01dc4 	addi	r7,r3,119
  18e858:	39cb883a 	add	r5,r7,r7
  18e85c:	003ea206 	br	18e2e8 <__alt_data_end+0xfff8e2e8>
  18e860:	00c40004 	movi	r3,4096
  18e864:	003f4d06 	br	18e59c <__alt_data_end+0xfff8e59c>
  18e868:	00800044 	movi	r2,1
  18e86c:	a0800115 	stw	r2,4(r20)
  18e870:	a021883a 	mov	r16,r20
  18e874:	0007883a 	mov	r3,zero
  18e878:	003f7506 	br	18e650 <__alt_data_end+0xfff8e650>
  18e87c:	200bd0ba 	srai	r5,r4,2
  18e880:	01800044 	movi	r6,1
  18e884:	41000117 	ldw	r4,4(r8)
  18e888:	314a983a 	sll	r5,r6,r5
  18e88c:	100d883a 	mov	r6,r2
  18e890:	2908b03a 	or	r4,r5,r4
  18e894:	41000115 	stw	r4,4(r8)
  18e898:	003f9d06 	br	18e710 <__alt_data_end+0xfff8e710>
  18e89c:	00815504 	movi	r2,1364
  18e8a0:	10c01336 	bltu	r2,r3,18e8f0 <_malloc_r+0x718>
  18e8a4:	8806d4ba 	srli	r3,r17,18
  18e8a8:	19c01f04 	addi	r7,r3,124
  18e8ac:	39cb883a 	add	r5,r7,r7
  18e8b0:	003e8d06 	br	18e2e8 <__alt_data_end+0xfff8e2e8>
  18e8b4:	ad400404 	addi	r21,r21,16
  18e8b8:	003f1d06 	br	18e530 <__alt_data_end+0xfff8e530>
  18e8bc:	01001504 	movi	r4,84
  18e8c0:	20801c36 	bltu	r4,r2,18e934 <_malloc_r+0x75c>
  18e8c4:	3804d33a 	srli	r2,r7,12
  18e8c8:	11001b84 	addi	r4,r2,110
  18e8cc:	210b883a 	add	r5,r4,r4
  18e8d0:	003f8006 	br	18e6d4 <__alt_data_end+0xfff8e6d4>
  18e8d4:	3083ffcc 	andi	r2,r6,4095
  18e8d8:	103f241e 	bne	r2,zero,18e56c <__alt_data_end+0xfff8e56c>
  18e8dc:	99000217 	ldw	r4,8(r19)
  18e8e0:	ad85883a 	add	r2,r21,r22
  18e8e4:	10800054 	ori	r2,r2,1
  18e8e8:	20800115 	stw	r2,4(r4)
  18e8ec:	003f4a06 	br	18e618 <__alt_data_end+0xfff8e618>
  18e8f0:	01403f04 	movi	r5,252
  18e8f4:	01c01f84 	movi	r7,126
  18e8f8:	003e7b06 	br	18e2e8 <__alt_data_end+0xfff8e2e8>
  18e8fc:	00c00044 	movi	r3,1
  18e900:	002b883a 	mov	r21,zero
  18e904:	003f3006 	br	18e5c8 <__alt_data_end+0xfff8e5c8>
  18e908:	008006b4 	movhi	r2,26
  18e90c:	10846904 	addi	r2,r2,4516
  18e910:	15000015 	stw	r20,0(r2)
  18e914:	003f1b06 	br	18e584 <__alt_data_end+0xfff8e584>
  18e918:	9009883a 	mov	r4,r18
  18e91c:	81400204 	addi	r5,r16,8
  18e920:	018d5fc0 	call	18d5fc <_free_r>
  18e924:	008006b4 	movhi	r2,26
  18e928:	108b7504 	addi	r2,r2,11732
  18e92c:	10c00017 	ldw	r3,0(r2)
  18e930:	003f3906 	br	18e618 <__alt_data_end+0xfff8e618>
  18e934:	01005504 	movi	r4,340
  18e938:	20800436 	bltu	r4,r2,18e94c <_malloc_r+0x774>
  18e93c:	3804d3fa 	srli	r2,r7,15
  18e940:	11001dc4 	addi	r4,r2,119
  18e944:	210b883a 	add	r5,r4,r4
  18e948:	003f6206 	br	18e6d4 <__alt_data_end+0xfff8e6d4>
  18e94c:	01015504 	movi	r4,1364
  18e950:	20800436 	bltu	r4,r2,18e964 <_malloc_r+0x78c>
  18e954:	3804d4ba 	srli	r2,r7,18
  18e958:	11001f04 	addi	r4,r2,124
  18e95c:	210b883a 	add	r5,r4,r4
  18e960:	003f5c06 	br	18e6d4 <__alt_data_end+0xfff8e6d4>
  18e964:	01403f04 	movi	r5,252
  18e968:	01001f84 	movi	r4,126
  18e96c:	003f5906 	br	18e6d4 <__alt_data_end+0xfff8e6d4>
  18e970:	98800117 	ldw	r2,4(r19)
  18e974:	003fa906 	br	18e81c <__alt_data_end+0xfff8e81c>
  18e978:	6007883a 	mov	r3,r12
  18e97c:	003ea206 	br	18e408 <__alt_data_end+0xfff8e408>

0018e980 <memchr>:
  18e980:	208000cc 	andi	r2,r4,3
  18e984:	280f883a 	mov	r7,r5
  18e988:	10003526 	beq	r2,zero,18ea60 <memchr+0xe0>
  18e98c:	30bfffc4 	addi	r2,r6,-1
  18e990:	30001b26 	beq	r6,zero,18ea00 <memchr+0x80>
  18e994:	21800003 	ldbu	r6,0(r4)
  18e998:	28c03fcc 	andi	r3,r5,255
  18e99c:	30c01a26 	beq	r6,r3,18ea08 <memchr+0x88>
  18e9a0:	180d883a 	mov	r6,r3
  18e9a4:	00000406 	br	18e9b8 <memchr+0x38>
  18e9a8:	10001526 	beq	r2,zero,18ea00 <memchr+0x80>
  18e9ac:	20c00003 	ldbu	r3,0(r4)
  18e9b0:	10bfffc4 	addi	r2,r2,-1
  18e9b4:	19801426 	beq	r3,r6,18ea08 <memchr+0x88>
  18e9b8:	21000044 	addi	r4,r4,1
  18e9bc:	20c000cc 	andi	r3,r4,3
  18e9c0:	183ff91e 	bne	r3,zero,18e9a8 <__alt_data_end+0xfff8e9a8>
  18e9c4:	024000c4 	movi	r9,3
  18e9c8:	48801136 	bltu	r9,r2,18ea10 <memchr+0x90>
  18e9cc:	10000c26 	beq	r2,zero,18ea00 <memchr+0x80>
  18e9d0:	20c00003 	ldbu	r3,0(r4)
  18e9d4:	29403fcc 	andi	r5,r5,255
  18e9d8:	19400b26 	beq	r3,r5,18ea08 <memchr+0x88>
  18e9dc:	20c00044 	addi	r3,r4,1
  18e9e0:	2085883a 	add	r2,r4,r2
  18e9e4:	39803fcc 	andi	r6,r7,255
  18e9e8:	00000306 	br	18e9f8 <memchr+0x78>
  18e9ec:	18c00044 	addi	r3,r3,1
  18e9f0:	197fffc3 	ldbu	r5,-1(r3)
  18e9f4:	29800426 	beq	r5,r6,18ea08 <memchr+0x88>
  18e9f8:	1809883a 	mov	r4,r3
  18e9fc:	18bffb1e 	bne	r3,r2,18e9ec <__alt_data_end+0xfff8e9ec>
  18ea00:	0005883a 	mov	r2,zero
  18ea04:	f800283a 	ret
  18ea08:	2005883a 	mov	r2,r4
  18ea0c:	f800283a 	ret
  18ea10:	28c03fcc 	andi	r3,r5,255
  18ea14:	1810923a 	slli	r8,r3,8
  18ea18:	02ffbff4 	movhi	r11,65279
  18ea1c:	02a02074 	movhi	r10,32897
  18ea20:	40c6b03a 	or	r3,r8,r3
  18ea24:	1810943a 	slli	r8,r3,16
  18ea28:	5affbfc4 	addi	r11,r11,-257
  18ea2c:	52a02004 	addi	r10,r10,-32640
  18ea30:	40d0b03a 	or	r8,r8,r3
  18ea34:	20c00017 	ldw	r3,0(r4)
  18ea38:	40c6f03a 	xor	r3,r8,r3
  18ea3c:	1acd883a 	add	r6,r3,r11
  18ea40:	00c6303a 	nor	r3,zero,r3
  18ea44:	30c6703a 	and	r3,r6,r3
  18ea48:	1a86703a 	and	r3,r3,r10
  18ea4c:	183fdf1e 	bne	r3,zero,18e9cc <__alt_data_end+0xfff8e9cc>
  18ea50:	10bfff04 	addi	r2,r2,-4
  18ea54:	21000104 	addi	r4,r4,4
  18ea58:	48bff636 	bltu	r9,r2,18ea34 <__alt_data_end+0xfff8ea34>
  18ea5c:	003fdb06 	br	18e9cc <__alt_data_end+0xfff8e9cc>
  18ea60:	3005883a 	mov	r2,r6
  18ea64:	003fd706 	br	18e9c4 <__alt_data_end+0xfff8e9c4>

0018ea68 <memmove>:
  18ea68:	2005883a 	mov	r2,r4
  18ea6c:	29000b2e 	bgeu	r5,r4,18ea9c <memmove+0x34>
  18ea70:	298f883a 	add	r7,r5,r6
  18ea74:	21c0092e 	bgeu	r4,r7,18ea9c <memmove+0x34>
  18ea78:	2187883a 	add	r3,r4,r6
  18ea7c:	198bc83a 	sub	r5,r3,r6
  18ea80:	30004b26 	beq	r6,zero,18ebb0 <memmove+0x148>
  18ea84:	39ffffc4 	addi	r7,r7,-1
  18ea88:	39000003 	ldbu	r4,0(r7)
  18ea8c:	18ffffc4 	addi	r3,r3,-1
  18ea90:	19000005 	stb	r4,0(r3)
  18ea94:	197ffb1e 	bne	r3,r5,18ea84 <__alt_data_end+0xfff8ea84>
  18ea98:	f800283a 	ret
  18ea9c:	00c003c4 	movi	r3,15
  18eaa0:	1980412e 	bgeu	r3,r6,18eba8 <memmove+0x140>
  18eaa4:	1146b03a 	or	r3,r2,r5
  18eaa8:	18c000cc 	andi	r3,r3,3
  18eaac:	1800411e 	bne	r3,zero,18ebb4 <memmove+0x14c>
  18eab0:	33fffc04 	addi	r15,r6,-16
  18eab4:	781ed13a 	srli	r15,r15,4
  18eab8:	28c00104 	addi	r3,r5,4
  18eabc:	13400104 	addi	r13,r2,4
  18eac0:	781c913a 	slli	r14,r15,4
  18eac4:	2b000204 	addi	r12,r5,8
  18eac8:	12c00204 	addi	r11,r2,8
  18eacc:	73800504 	addi	r14,r14,20
  18ead0:	2a800304 	addi	r10,r5,12
  18ead4:	12400304 	addi	r9,r2,12
  18ead8:	2b9d883a 	add	r14,r5,r14
  18eadc:	2811883a 	mov	r8,r5
  18eae0:	100f883a 	mov	r7,r2
  18eae4:	41000017 	ldw	r4,0(r8)
  18eae8:	39c00404 	addi	r7,r7,16
  18eaec:	18c00404 	addi	r3,r3,16
  18eaf0:	393ffc15 	stw	r4,-16(r7)
  18eaf4:	193ffc17 	ldw	r4,-16(r3)
  18eaf8:	6b400404 	addi	r13,r13,16
  18eafc:	5ac00404 	addi	r11,r11,16
  18eb00:	693ffc15 	stw	r4,-16(r13)
  18eb04:	61000017 	ldw	r4,0(r12)
  18eb08:	4a400404 	addi	r9,r9,16
  18eb0c:	42000404 	addi	r8,r8,16
  18eb10:	593ffc15 	stw	r4,-16(r11)
  18eb14:	51000017 	ldw	r4,0(r10)
  18eb18:	63000404 	addi	r12,r12,16
  18eb1c:	52800404 	addi	r10,r10,16
  18eb20:	493ffc15 	stw	r4,-16(r9)
  18eb24:	1bbfef1e 	bne	r3,r14,18eae4 <__alt_data_end+0xfff8eae4>
  18eb28:	79000044 	addi	r4,r15,1
  18eb2c:	2008913a 	slli	r4,r4,4
  18eb30:	328003cc 	andi	r10,r6,15
  18eb34:	02c000c4 	movi	r11,3
  18eb38:	1107883a 	add	r3,r2,r4
  18eb3c:	290b883a 	add	r5,r5,r4
  18eb40:	5a801e2e 	bgeu	r11,r10,18ebbc <memmove+0x154>
  18eb44:	1813883a 	mov	r9,r3
  18eb48:	2811883a 	mov	r8,r5
  18eb4c:	500f883a 	mov	r7,r10
  18eb50:	41000017 	ldw	r4,0(r8)
  18eb54:	4a400104 	addi	r9,r9,4
  18eb58:	39ffff04 	addi	r7,r7,-4
  18eb5c:	493fff15 	stw	r4,-4(r9)
  18eb60:	42000104 	addi	r8,r8,4
  18eb64:	59fffa36 	bltu	r11,r7,18eb50 <__alt_data_end+0xfff8eb50>
  18eb68:	513fff04 	addi	r4,r10,-4
  18eb6c:	2008d0ba 	srli	r4,r4,2
  18eb70:	318000cc 	andi	r6,r6,3
  18eb74:	21000044 	addi	r4,r4,1
  18eb78:	2109883a 	add	r4,r4,r4
  18eb7c:	2109883a 	add	r4,r4,r4
  18eb80:	1907883a 	add	r3,r3,r4
  18eb84:	290b883a 	add	r5,r5,r4
  18eb88:	30000926 	beq	r6,zero,18ebb0 <memmove+0x148>
  18eb8c:	198d883a 	add	r6,r3,r6
  18eb90:	29c00003 	ldbu	r7,0(r5)
  18eb94:	18c00044 	addi	r3,r3,1
  18eb98:	29400044 	addi	r5,r5,1
  18eb9c:	19ffffc5 	stb	r7,-1(r3)
  18eba0:	19bffb1e 	bne	r3,r6,18eb90 <__alt_data_end+0xfff8eb90>
  18eba4:	f800283a 	ret
  18eba8:	1007883a 	mov	r3,r2
  18ebac:	003ff606 	br	18eb88 <__alt_data_end+0xfff8eb88>
  18ebb0:	f800283a 	ret
  18ebb4:	1007883a 	mov	r3,r2
  18ebb8:	003ff406 	br	18eb8c <__alt_data_end+0xfff8eb8c>
  18ebbc:	500d883a 	mov	r6,r10
  18ebc0:	003ff106 	br	18eb88 <__alt_data_end+0xfff8eb88>

0018ebc4 <_Balloc>:
  18ebc4:	20801317 	ldw	r2,76(r4)
  18ebc8:	defffc04 	addi	sp,sp,-16
  18ebcc:	dc400115 	stw	r17,4(sp)
  18ebd0:	dc000015 	stw	r16,0(sp)
  18ebd4:	dfc00315 	stw	ra,12(sp)
  18ebd8:	dc800215 	stw	r18,8(sp)
  18ebdc:	2023883a 	mov	r17,r4
  18ebe0:	2821883a 	mov	r16,r5
  18ebe4:	10000f26 	beq	r2,zero,18ec24 <_Balloc+0x60>
  18ebe8:	8407883a 	add	r3,r16,r16
  18ebec:	18c7883a 	add	r3,r3,r3
  18ebf0:	10c7883a 	add	r3,r2,r3
  18ebf4:	18800017 	ldw	r2,0(r3)
  18ebf8:	10001126 	beq	r2,zero,18ec40 <_Balloc+0x7c>
  18ebfc:	11000017 	ldw	r4,0(r2)
  18ec00:	19000015 	stw	r4,0(r3)
  18ec04:	10000415 	stw	zero,16(r2)
  18ec08:	10000315 	stw	zero,12(r2)
  18ec0c:	dfc00317 	ldw	ra,12(sp)
  18ec10:	dc800217 	ldw	r18,8(sp)
  18ec14:	dc400117 	ldw	r17,4(sp)
  18ec18:	dc000017 	ldw	r16,0(sp)
  18ec1c:	dec00404 	addi	sp,sp,16
  18ec20:	f800283a 	ret
  18ec24:	01400104 	movi	r5,4
  18ec28:	01800844 	movi	r6,33
  18ec2c:	0191c840 	call	191c84 <_calloc_r>
  18ec30:	88801315 	stw	r2,76(r17)
  18ec34:	103fec1e 	bne	r2,zero,18ebe8 <__alt_data_end+0xfff8ebe8>
  18ec38:	0005883a 	mov	r2,zero
  18ec3c:	003ff306 	br	18ec0c <__alt_data_end+0xfff8ec0c>
  18ec40:	01400044 	movi	r5,1
  18ec44:	2c24983a 	sll	r18,r5,r16
  18ec48:	8809883a 	mov	r4,r17
  18ec4c:	91800144 	addi	r6,r18,5
  18ec50:	318d883a 	add	r6,r6,r6
  18ec54:	318d883a 	add	r6,r6,r6
  18ec58:	0191c840 	call	191c84 <_calloc_r>
  18ec5c:	103ff626 	beq	r2,zero,18ec38 <__alt_data_end+0xfff8ec38>
  18ec60:	14000115 	stw	r16,4(r2)
  18ec64:	14800215 	stw	r18,8(r2)
  18ec68:	003fe606 	br	18ec04 <__alt_data_end+0xfff8ec04>

0018ec6c <_Bfree>:
  18ec6c:	28000826 	beq	r5,zero,18ec90 <_Bfree+0x24>
  18ec70:	28c00117 	ldw	r3,4(r5)
  18ec74:	20801317 	ldw	r2,76(r4)
  18ec78:	18c7883a 	add	r3,r3,r3
  18ec7c:	18c7883a 	add	r3,r3,r3
  18ec80:	10c5883a 	add	r2,r2,r3
  18ec84:	10c00017 	ldw	r3,0(r2)
  18ec88:	28c00015 	stw	r3,0(r5)
  18ec8c:	11400015 	stw	r5,0(r2)
  18ec90:	f800283a 	ret

0018ec94 <__multadd>:
  18ec94:	defff704 	addi	sp,sp,-36
  18ec98:	dc800215 	stw	r18,8(sp)
  18ec9c:	2c800417 	ldw	r18,16(r5)
  18eca0:	ddc00715 	stw	r23,28(sp)
  18eca4:	dd800615 	stw	r22,24(sp)
  18eca8:	dd000415 	stw	r20,16(sp)
  18ecac:	dcc00315 	stw	r19,12(sp)
  18ecb0:	dc400115 	stw	r17,4(sp)
  18ecb4:	dc000015 	stw	r16,0(sp)
  18ecb8:	dfc00815 	stw	ra,32(sp)
  18ecbc:	dd400515 	stw	r21,20(sp)
  18ecc0:	2827883a 	mov	r19,r5
  18ecc4:	2029883a 	mov	r20,r4
  18ecc8:	3023883a 	mov	r17,r6
  18eccc:	3821883a 	mov	r16,r7
  18ecd0:	2d800504 	addi	r22,r5,20
  18ecd4:	002f883a 	mov	r23,zero
  18ecd8:	b5400017 	ldw	r21,0(r22)
  18ecdc:	880b883a 	mov	r5,r17
  18ece0:	bdc00044 	addi	r23,r23,1
  18ece4:	a93fffcc 	andi	r4,r21,65535
  18ece8:	0187dd80 	call	187dd8 <__mulsi3>
  18ecec:	1421883a 	add	r16,r2,r16
  18ecf0:	a808d43a 	srli	r4,r21,16
  18ecf4:	802ad43a 	srli	r21,r16,16
  18ecf8:	880b883a 	mov	r5,r17
  18ecfc:	0187dd80 	call	187dd8 <__mulsi3>
  18ed00:	a88f883a 	add	r7,r21,r2
  18ed04:	3804943a 	slli	r2,r7,16
  18ed08:	80ffffcc 	andi	r3,r16,65535
  18ed0c:	b5800104 	addi	r22,r22,4
  18ed10:	10c7883a 	add	r3,r2,r3
  18ed14:	b0ffff15 	stw	r3,-4(r22)
  18ed18:	3820d43a 	srli	r16,r7,16
  18ed1c:	bcbfee16 	blt	r23,r18,18ecd8 <__alt_data_end+0xfff8ecd8>
  18ed20:	80000926 	beq	r16,zero,18ed48 <__multadd+0xb4>
  18ed24:	98800217 	ldw	r2,8(r19)
  18ed28:	9080130e 	bge	r18,r2,18ed78 <__multadd+0xe4>
  18ed2c:	90800144 	addi	r2,r18,5
  18ed30:	1085883a 	add	r2,r2,r2
  18ed34:	1085883a 	add	r2,r2,r2
  18ed38:	9885883a 	add	r2,r19,r2
  18ed3c:	14000015 	stw	r16,0(r2)
  18ed40:	94800044 	addi	r18,r18,1
  18ed44:	9c800415 	stw	r18,16(r19)
  18ed48:	9805883a 	mov	r2,r19
  18ed4c:	dfc00817 	ldw	ra,32(sp)
  18ed50:	ddc00717 	ldw	r23,28(sp)
  18ed54:	dd800617 	ldw	r22,24(sp)
  18ed58:	dd400517 	ldw	r21,20(sp)
  18ed5c:	dd000417 	ldw	r20,16(sp)
  18ed60:	dcc00317 	ldw	r19,12(sp)
  18ed64:	dc800217 	ldw	r18,8(sp)
  18ed68:	dc400117 	ldw	r17,4(sp)
  18ed6c:	dc000017 	ldw	r16,0(sp)
  18ed70:	dec00904 	addi	sp,sp,36
  18ed74:	f800283a 	ret
  18ed78:	99400117 	ldw	r5,4(r19)
  18ed7c:	a009883a 	mov	r4,r20
  18ed80:	29400044 	addi	r5,r5,1
  18ed84:	018ebc40 	call	18ebc4 <_Balloc>
  18ed88:	99800417 	ldw	r6,16(r19)
  18ed8c:	11000304 	addi	r4,r2,12
  18ed90:	99400304 	addi	r5,r19,12
  18ed94:	31800084 	addi	r6,r6,2
  18ed98:	318d883a 	add	r6,r6,r6
  18ed9c:	318d883a 	add	r6,r6,r6
  18eda0:	1023883a 	mov	r17,r2
  18eda4:	0188e800 	call	188e80 <memcpy>
  18eda8:	98000a26 	beq	r19,zero,18edd4 <__multadd+0x140>
  18edac:	99000117 	ldw	r4,4(r19)
  18edb0:	a0c01317 	ldw	r3,76(r20)
  18edb4:	2109883a 	add	r4,r4,r4
  18edb8:	2109883a 	add	r4,r4,r4
  18edbc:	1907883a 	add	r3,r3,r4
  18edc0:	18800017 	ldw	r2,0(r3)
  18edc4:	98800015 	stw	r2,0(r19)
  18edc8:	1cc00015 	stw	r19,0(r3)
  18edcc:	8827883a 	mov	r19,r17
  18edd0:	003fd606 	br	18ed2c <__alt_data_end+0xfff8ed2c>
  18edd4:	8827883a 	mov	r19,r17
  18edd8:	003fd406 	br	18ed2c <__alt_data_end+0xfff8ed2c>

0018eddc <__s2b>:
  18eddc:	defff904 	addi	sp,sp,-28
  18ede0:	dc400115 	stw	r17,4(sp)
  18ede4:	dc000015 	stw	r16,0(sp)
  18ede8:	2023883a 	mov	r17,r4
  18edec:	2821883a 	mov	r16,r5
  18edf0:	39000204 	addi	r4,r7,8
  18edf4:	01400244 	movi	r5,9
  18edf8:	dcc00315 	stw	r19,12(sp)
  18edfc:	dc800215 	stw	r18,8(sp)
  18ee00:	dfc00615 	stw	ra,24(sp)
  18ee04:	dd400515 	stw	r21,20(sp)
  18ee08:	dd000415 	stw	r20,16(sp)
  18ee0c:	3825883a 	mov	r18,r7
  18ee10:	3027883a 	mov	r19,r6
  18ee14:	0187d180 	call	187d18 <__divsi3>
  18ee18:	00c00044 	movi	r3,1
  18ee1c:	000b883a 	mov	r5,zero
  18ee20:	1880030e 	bge	r3,r2,18ee30 <__s2b+0x54>
  18ee24:	18c7883a 	add	r3,r3,r3
  18ee28:	29400044 	addi	r5,r5,1
  18ee2c:	18bffd16 	blt	r3,r2,18ee24 <__alt_data_end+0xfff8ee24>
  18ee30:	8809883a 	mov	r4,r17
  18ee34:	018ebc40 	call	18ebc4 <_Balloc>
  18ee38:	d8c00717 	ldw	r3,28(sp)
  18ee3c:	10c00515 	stw	r3,20(r2)
  18ee40:	00c00044 	movi	r3,1
  18ee44:	10c00415 	stw	r3,16(r2)
  18ee48:	00c00244 	movi	r3,9
  18ee4c:	1cc0210e 	bge	r3,r19,18eed4 <__s2b+0xf8>
  18ee50:	80eb883a 	add	r21,r16,r3
  18ee54:	a829883a 	mov	r20,r21
  18ee58:	84e1883a 	add	r16,r16,r19
  18ee5c:	a1c00007 	ldb	r7,0(r20)
  18ee60:	8809883a 	mov	r4,r17
  18ee64:	a5000044 	addi	r20,r20,1
  18ee68:	100b883a 	mov	r5,r2
  18ee6c:	01800284 	movi	r6,10
  18ee70:	39fff404 	addi	r7,r7,-48
  18ee74:	018ec940 	call	18ec94 <__multadd>
  18ee78:	a43ff81e 	bne	r20,r16,18ee5c <__alt_data_end+0xfff8ee5c>
  18ee7c:	ace1883a 	add	r16,r21,r19
  18ee80:	843ffe04 	addi	r16,r16,-8
  18ee84:	9c800a0e 	bge	r19,r18,18eeb0 <__s2b+0xd4>
  18ee88:	94e5c83a 	sub	r18,r18,r19
  18ee8c:	84a5883a 	add	r18,r16,r18
  18ee90:	81c00007 	ldb	r7,0(r16)
  18ee94:	8809883a 	mov	r4,r17
  18ee98:	84000044 	addi	r16,r16,1
  18ee9c:	100b883a 	mov	r5,r2
  18eea0:	01800284 	movi	r6,10
  18eea4:	39fff404 	addi	r7,r7,-48
  18eea8:	018ec940 	call	18ec94 <__multadd>
  18eeac:	84bff81e 	bne	r16,r18,18ee90 <__alt_data_end+0xfff8ee90>
  18eeb0:	dfc00617 	ldw	ra,24(sp)
  18eeb4:	dd400517 	ldw	r21,20(sp)
  18eeb8:	dd000417 	ldw	r20,16(sp)
  18eebc:	dcc00317 	ldw	r19,12(sp)
  18eec0:	dc800217 	ldw	r18,8(sp)
  18eec4:	dc400117 	ldw	r17,4(sp)
  18eec8:	dc000017 	ldw	r16,0(sp)
  18eecc:	dec00704 	addi	sp,sp,28
  18eed0:	f800283a 	ret
  18eed4:	84000284 	addi	r16,r16,10
  18eed8:	1827883a 	mov	r19,r3
  18eedc:	003fe906 	br	18ee84 <__alt_data_end+0xfff8ee84>

0018eee0 <__hi0bits>:
  18eee0:	20bfffec 	andhi	r2,r4,65535
  18eee4:	1000141e 	bne	r2,zero,18ef38 <__hi0bits+0x58>
  18eee8:	2008943a 	slli	r4,r4,16
  18eeec:	00800404 	movi	r2,16
  18eef0:	20ffc02c 	andhi	r3,r4,65280
  18eef4:	1800021e 	bne	r3,zero,18ef00 <__hi0bits+0x20>
  18eef8:	2008923a 	slli	r4,r4,8
  18eefc:	10800204 	addi	r2,r2,8
  18ef00:	20fc002c 	andhi	r3,r4,61440
  18ef04:	1800021e 	bne	r3,zero,18ef10 <__hi0bits+0x30>
  18ef08:	2008913a 	slli	r4,r4,4
  18ef0c:	10800104 	addi	r2,r2,4
  18ef10:	20f0002c 	andhi	r3,r4,49152
  18ef14:	1800031e 	bne	r3,zero,18ef24 <__hi0bits+0x44>
  18ef18:	2109883a 	add	r4,r4,r4
  18ef1c:	10800084 	addi	r2,r2,2
  18ef20:	2109883a 	add	r4,r4,r4
  18ef24:	20000316 	blt	r4,zero,18ef34 <__hi0bits+0x54>
  18ef28:	2110002c 	andhi	r4,r4,16384
  18ef2c:	2000041e 	bne	r4,zero,18ef40 <__hi0bits+0x60>
  18ef30:	00800804 	movi	r2,32
  18ef34:	f800283a 	ret
  18ef38:	0005883a 	mov	r2,zero
  18ef3c:	003fec06 	br	18eef0 <__alt_data_end+0xfff8eef0>
  18ef40:	10800044 	addi	r2,r2,1
  18ef44:	f800283a 	ret

0018ef48 <__lo0bits>:
  18ef48:	20c00017 	ldw	r3,0(r4)
  18ef4c:	188001cc 	andi	r2,r3,7
  18ef50:	10000826 	beq	r2,zero,18ef74 <__lo0bits+0x2c>
  18ef54:	1880004c 	andi	r2,r3,1
  18ef58:	1000211e 	bne	r2,zero,18efe0 <__lo0bits+0x98>
  18ef5c:	1880008c 	andi	r2,r3,2
  18ef60:	1000211e 	bne	r2,zero,18efe8 <__lo0bits+0xa0>
  18ef64:	1806d0ba 	srli	r3,r3,2
  18ef68:	00800084 	movi	r2,2
  18ef6c:	20c00015 	stw	r3,0(r4)
  18ef70:	f800283a 	ret
  18ef74:	18bfffcc 	andi	r2,r3,65535
  18ef78:	10001326 	beq	r2,zero,18efc8 <__lo0bits+0x80>
  18ef7c:	0005883a 	mov	r2,zero
  18ef80:	19403fcc 	andi	r5,r3,255
  18ef84:	2800021e 	bne	r5,zero,18ef90 <__lo0bits+0x48>
  18ef88:	1806d23a 	srli	r3,r3,8
  18ef8c:	10800204 	addi	r2,r2,8
  18ef90:	194003cc 	andi	r5,r3,15
  18ef94:	2800021e 	bne	r5,zero,18efa0 <__lo0bits+0x58>
  18ef98:	1806d13a 	srli	r3,r3,4
  18ef9c:	10800104 	addi	r2,r2,4
  18efa0:	194000cc 	andi	r5,r3,3
  18efa4:	2800021e 	bne	r5,zero,18efb0 <__lo0bits+0x68>
  18efa8:	1806d0ba 	srli	r3,r3,2
  18efac:	10800084 	addi	r2,r2,2
  18efb0:	1940004c 	andi	r5,r3,1
  18efb4:	2800081e 	bne	r5,zero,18efd8 <__lo0bits+0x90>
  18efb8:	1806d07a 	srli	r3,r3,1
  18efbc:	1800051e 	bne	r3,zero,18efd4 <__lo0bits+0x8c>
  18efc0:	00800804 	movi	r2,32
  18efc4:	f800283a 	ret
  18efc8:	1806d43a 	srli	r3,r3,16
  18efcc:	00800404 	movi	r2,16
  18efd0:	003feb06 	br	18ef80 <__alt_data_end+0xfff8ef80>
  18efd4:	10800044 	addi	r2,r2,1
  18efd8:	20c00015 	stw	r3,0(r4)
  18efdc:	f800283a 	ret
  18efe0:	0005883a 	mov	r2,zero
  18efe4:	f800283a 	ret
  18efe8:	1806d07a 	srli	r3,r3,1
  18efec:	00800044 	movi	r2,1
  18eff0:	20c00015 	stw	r3,0(r4)
  18eff4:	f800283a 	ret

0018eff8 <__i2b>:
  18eff8:	defffd04 	addi	sp,sp,-12
  18effc:	dc000015 	stw	r16,0(sp)
  18f000:	04000044 	movi	r16,1
  18f004:	dc400115 	stw	r17,4(sp)
  18f008:	2823883a 	mov	r17,r5
  18f00c:	800b883a 	mov	r5,r16
  18f010:	dfc00215 	stw	ra,8(sp)
  18f014:	018ebc40 	call	18ebc4 <_Balloc>
  18f018:	14400515 	stw	r17,20(r2)
  18f01c:	14000415 	stw	r16,16(r2)
  18f020:	dfc00217 	ldw	ra,8(sp)
  18f024:	dc400117 	ldw	r17,4(sp)
  18f028:	dc000017 	ldw	r16,0(sp)
  18f02c:	dec00304 	addi	sp,sp,12
  18f030:	f800283a 	ret

0018f034 <__multiply>:
  18f034:	deffef04 	addi	sp,sp,-68
  18f038:	dc400815 	stw	r17,32(sp)
  18f03c:	dc000715 	stw	r16,28(sp)
  18f040:	2c400417 	ldw	r17,16(r5)
  18f044:	34000417 	ldw	r16,16(r6)
  18f048:	dd800d15 	stw	r22,52(sp)
  18f04c:	dc800915 	stw	r18,36(sp)
  18f050:	dfc01015 	stw	ra,64(sp)
  18f054:	df000f15 	stw	fp,60(sp)
  18f058:	ddc00e15 	stw	r23,56(sp)
  18f05c:	dd400c15 	stw	r21,48(sp)
  18f060:	dd000b15 	stw	r20,44(sp)
  18f064:	dcc00a15 	stw	r19,40(sp)
  18f068:	2825883a 	mov	r18,r5
  18f06c:	302d883a 	mov	r22,r6
  18f070:	8c009116 	blt	r17,r16,18f2b8 <__multiply+0x284>
  18f074:	8005883a 	mov	r2,r16
  18f078:	8821883a 	mov	r16,r17
  18f07c:	1023883a 	mov	r17,r2
  18f080:	90800217 	ldw	r2,8(r18)
  18f084:	8447883a 	add	r3,r16,r17
  18f088:	d8c00215 	stw	r3,8(sp)
  18f08c:	91400117 	ldw	r5,4(r18)
  18f090:	10c0010e 	bge	r2,r3,18f098 <__multiply+0x64>
  18f094:	29400044 	addi	r5,r5,1
  18f098:	018ebc40 	call	18ebc4 <_Balloc>
  18f09c:	d8c00217 	ldw	r3,8(sp)
  18f0a0:	d8800615 	stw	r2,24(sp)
  18f0a4:	18eb883a 	add	r21,r3,r3
  18f0a8:	ad6b883a 	add	r21,r21,r21
  18f0ac:	10c00504 	addi	r3,r2,20
  18f0b0:	1d6b883a 	add	r21,r3,r21
  18f0b4:	d8c00115 	stw	r3,4(sp)
  18f0b8:	dd400315 	stw	r21,12(sp)
  18f0bc:	1805883a 	mov	r2,r3
  18f0c0:	1d40042e 	bgeu	r3,r21,18f0d4 <__multiply+0xa0>
  18f0c4:	d8c00317 	ldw	r3,12(sp)
  18f0c8:	10000015 	stw	zero,0(r2)
  18f0cc:	10800104 	addi	r2,r2,4
  18f0d0:	10fffc36 	bltu	r2,r3,18f0c4 <__alt_data_end+0xfff8f0c4>
  18f0d4:	8c63883a 	add	r17,r17,r17
  18f0d8:	b5800504 	addi	r22,r22,20
  18f0dc:	8c63883a 	add	r17,r17,r17
  18f0e0:	94800504 	addi	r18,r18,20
  18f0e4:	8421883a 	add	r16,r16,r16
  18f0e8:	b463883a 	add	r17,r22,r17
  18f0ec:	8421883a 	add	r16,r16,r16
  18f0f0:	dd800015 	stw	r22,0(sp)
  18f0f4:	dc800415 	stw	r18,16(sp)
  18f0f8:	dc400515 	stw	r17,20(sp)
  18f0fc:	9429883a 	add	r20,r18,r16
  18f100:	b4404f2e 	bgeu	r22,r17,18f240 <__multiply+0x20c>
  18f104:	d8c00017 	ldw	r3,0(sp)
  18f108:	1c800017 	ldw	r18,0(r3)
  18f10c:	943fffcc 	andi	r16,r18,65535
  18f110:	80001e26 	beq	r16,zero,18f18c <__multiply+0x158>
  18f114:	dd800117 	ldw	r22,4(sp)
  18f118:	dd400417 	ldw	r21,16(sp)
  18f11c:	0025883a 	mov	r18,zero
  18f120:	adc00017 	ldw	r23,0(r21)
  18f124:	b4c00017 	ldw	r19,0(r22)
  18f128:	800b883a 	mov	r5,r16
  18f12c:	b93fffcc 	andi	r4,r23,65535
  18f130:	0187dd80 	call	187dd8 <__mulsi3>
  18f134:	9c7fffcc 	andi	r17,r19,65535
  18f138:	8885883a 	add	r2,r17,r2
  18f13c:	b808d43a 	srli	r4,r23,16
  18f140:	14a3883a 	add	r17,r2,r18
  18f144:	9826d43a 	srli	r19,r19,16
  18f148:	8824d43a 	srli	r18,r17,16
  18f14c:	800b883a 	mov	r5,r16
  18f150:	0187dd80 	call	187dd8 <__mulsi3>
  18f154:	9885883a 	add	r2,r19,r2
  18f158:	14a7883a 	add	r19,r2,r18
  18f15c:	88ffffcc 	andi	r3,r17,65535
  18f160:	9822943a 	slli	r17,r19,16
  18f164:	ad400104 	addi	r21,r21,4
  18f168:	b005883a 	mov	r2,r22
  18f16c:	88c6b03a 	or	r3,r17,r3
  18f170:	b0c00015 	stw	r3,0(r22)
  18f174:	9824d43a 	srli	r18,r19,16
  18f178:	b5800104 	addi	r22,r22,4
  18f17c:	ad3fe836 	bltu	r21,r20,18f120 <__alt_data_end+0xfff8f120>
  18f180:	d8c00017 	ldw	r3,0(sp)
  18f184:	14800115 	stw	r18,4(r2)
  18f188:	1c800017 	ldw	r18,0(r3)
  18f18c:	9024d43a 	srli	r18,r18,16
  18f190:	90002226 	beq	r18,zero,18f21c <__multiply+0x1e8>
  18f194:	d8c00117 	ldw	r3,4(sp)
  18f198:	dd800417 	ldw	r22,16(sp)
  18f19c:	002f883a 	mov	r23,zero
  18f1a0:	1f000017 	ldw	fp,0(r3)
  18f1a4:	1823883a 	mov	r17,r3
  18f1a8:	182b883a 	mov	r21,r3
  18f1ac:	e021883a 	mov	r16,fp
  18f1b0:	00000106 	br	18f1b8 <__multiply+0x184>
  18f1b4:	982b883a 	mov	r21,r19
  18f1b8:	b100000b 	ldhu	r4,0(r22)
  18f1bc:	8020d43a 	srli	r16,r16,16
  18f1c0:	900b883a 	mov	r5,r18
  18f1c4:	0187dd80 	call	187dd8 <__mulsi3>
  18f1c8:	1405883a 	add	r2,r2,r16
  18f1cc:	15ef883a 	add	r23,r2,r23
  18f1d0:	b804943a 	slli	r2,r23,16
  18f1d4:	e0ffffcc 	andi	r3,fp,65535
  18f1d8:	8c400104 	addi	r17,r17,4
  18f1dc:	10c6b03a 	or	r3,r2,r3
  18f1e0:	88ffff15 	stw	r3,-4(r17)
  18f1e4:	b5800104 	addi	r22,r22,4
  18f1e8:	b13fff17 	ldw	r4,-4(r22)
  18f1ec:	acc00104 	addi	r19,r21,4
  18f1f0:	900b883a 	mov	r5,r18
  18f1f4:	2008d43a 	srli	r4,r4,16
  18f1f8:	9c000017 	ldw	r16,0(r19)
  18f1fc:	0187dd80 	call	187dd8 <__mulsi3>
  18f200:	b806d43a 	srli	r3,r23,16
  18f204:	813fffcc 	andi	r4,r16,65535
  18f208:	1105883a 	add	r2,r2,r4
  18f20c:	10f9883a 	add	fp,r2,r3
  18f210:	e02ed43a 	srli	r23,fp,16
  18f214:	b53fe736 	bltu	r22,r20,18f1b4 <__alt_data_end+0xfff8f1b4>
  18f218:	af000115 	stw	fp,4(r21)
  18f21c:	d8c00017 	ldw	r3,0(sp)
  18f220:	d9000517 	ldw	r4,20(sp)
  18f224:	18c00104 	addi	r3,r3,4
  18f228:	d8c00015 	stw	r3,0(sp)
  18f22c:	d8c00117 	ldw	r3,4(sp)
  18f230:	18c00104 	addi	r3,r3,4
  18f234:	d8c00115 	stw	r3,4(sp)
  18f238:	d8c00017 	ldw	r3,0(sp)
  18f23c:	193fb136 	bltu	r3,r4,18f104 <__alt_data_end+0xfff8f104>
  18f240:	d8c00217 	ldw	r3,8(sp)
  18f244:	00c00c0e 	bge	zero,r3,18f278 <__multiply+0x244>
  18f248:	d8c00317 	ldw	r3,12(sp)
  18f24c:	18bfff17 	ldw	r2,-4(r3)
  18f250:	1d7fff04 	addi	r21,r3,-4
  18f254:	10000326 	beq	r2,zero,18f264 <__multiply+0x230>
  18f258:	00000706 	br	18f278 <__multiply+0x244>
  18f25c:	a8800017 	ldw	r2,0(r21)
  18f260:	1000051e 	bne	r2,zero,18f278 <__multiply+0x244>
  18f264:	d8c00217 	ldw	r3,8(sp)
  18f268:	ad7fff04 	addi	r21,r21,-4
  18f26c:	18ffffc4 	addi	r3,r3,-1
  18f270:	d8c00215 	stw	r3,8(sp)
  18f274:	183ff91e 	bne	r3,zero,18f25c <__alt_data_end+0xfff8f25c>
  18f278:	d8c00617 	ldw	r3,24(sp)
  18f27c:	d9000217 	ldw	r4,8(sp)
  18f280:	1805883a 	mov	r2,r3
  18f284:	19000415 	stw	r4,16(r3)
  18f288:	dfc01017 	ldw	ra,64(sp)
  18f28c:	df000f17 	ldw	fp,60(sp)
  18f290:	ddc00e17 	ldw	r23,56(sp)
  18f294:	dd800d17 	ldw	r22,52(sp)
  18f298:	dd400c17 	ldw	r21,48(sp)
  18f29c:	dd000b17 	ldw	r20,44(sp)
  18f2a0:	dcc00a17 	ldw	r19,40(sp)
  18f2a4:	dc800917 	ldw	r18,36(sp)
  18f2a8:	dc400817 	ldw	r17,32(sp)
  18f2ac:	dc000717 	ldw	r16,28(sp)
  18f2b0:	dec01104 	addi	sp,sp,68
  18f2b4:	f800283a 	ret
  18f2b8:	3025883a 	mov	r18,r6
  18f2bc:	282d883a 	mov	r22,r5
  18f2c0:	003f6f06 	br	18f080 <__alt_data_end+0xfff8f080>

0018f2c4 <__pow5mult>:
  18f2c4:	defffa04 	addi	sp,sp,-24
  18f2c8:	dcc00315 	stw	r19,12(sp)
  18f2cc:	dc800215 	stw	r18,8(sp)
  18f2d0:	dc000015 	stw	r16,0(sp)
  18f2d4:	dfc00515 	stw	ra,20(sp)
  18f2d8:	dd000415 	stw	r20,16(sp)
  18f2dc:	dc400115 	stw	r17,4(sp)
  18f2e0:	308000cc 	andi	r2,r6,3
  18f2e4:	3021883a 	mov	r16,r6
  18f2e8:	2027883a 	mov	r19,r4
  18f2ec:	2825883a 	mov	r18,r5
  18f2f0:	10002e1e 	bne	r2,zero,18f3ac <__pow5mult+0xe8>
  18f2f4:	8021d0ba 	srai	r16,r16,2
  18f2f8:	80001a26 	beq	r16,zero,18f364 <__pow5mult+0xa0>
  18f2fc:	9c401217 	ldw	r17,72(r19)
  18f300:	8800061e 	bne	r17,zero,18f31c <__pow5mult+0x58>
  18f304:	00003406 	br	18f3d8 <__pow5mult+0x114>
  18f308:	8021d07a 	srai	r16,r16,1
  18f30c:	80001526 	beq	r16,zero,18f364 <__pow5mult+0xa0>
  18f310:	88800017 	ldw	r2,0(r17)
  18f314:	10001c26 	beq	r2,zero,18f388 <__pow5mult+0xc4>
  18f318:	1023883a 	mov	r17,r2
  18f31c:	80c0004c 	andi	r3,r16,1
  18f320:	183ff926 	beq	r3,zero,18f308 <__alt_data_end+0xfff8f308>
  18f324:	900b883a 	mov	r5,r18
  18f328:	880d883a 	mov	r6,r17
  18f32c:	9809883a 	mov	r4,r19
  18f330:	018f0340 	call	18f034 <__multiply>
  18f334:	90001b26 	beq	r18,zero,18f3a4 <__pow5mult+0xe0>
  18f338:	91c00117 	ldw	r7,4(r18)
  18f33c:	98c01317 	ldw	r3,76(r19)
  18f340:	8021d07a 	srai	r16,r16,1
  18f344:	39cf883a 	add	r7,r7,r7
  18f348:	39cf883a 	add	r7,r7,r7
  18f34c:	19c7883a 	add	r3,r3,r7
  18f350:	19000017 	ldw	r4,0(r3)
  18f354:	91000015 	stw	r4,0(r18)
  18f358:	1c800015 	stw	r18,0(r3)
  18f35c:	1025883a 	mov	r18,r2
  18f360:	803feb1e 	bne	r16,zero,18f310 <__alt_data_end+0xfff8f310>
  18f364:	9005883a 	mov	r2,r18
  18f368:	dfc00517 	ldw	ra,20(sp)
  18f36c:	dd000417 	ldw	r20,16(sp)
  18f370:	dcc00317 	ldw	r19,12(sp)
  18f374:	dc800217 	ldw	r18,8(sp)
  18f378:	dc400117 	ldw	r17,4(sp)
  18f37c:	dc000017 	ldw	r16,0(sp)
  18f380:	dec00604 	addi	sp,sp,24
  18f384:	f800283a 	ret
  18f388:	9809883a 	mov	r4,r19
  18f38c:	880b883a 	mov	r5,r17
  18f390:	880d883a 	mov	r6,r17
  18f394:	018f0340 	call	18f034 <__multiply>
  18f398:	88800015 	stw	r2,0(r17)
  18f39c:	10000015 	stw	zero,0(r2)
  18f3a0:	003fdd06 	br	18f318 <__alt_data_end+0xfff8f318>
  18f3a4:	1025883a 	mov	r18,r2
  18f3a8:	003fd706 	br	18f308 <__alt_data_end+0xfff8f308>
  18f3ac:	10bfffc4 	addi	r2,r2,-1
  18f3b0:	1085883a 	add	r2,r2,r2
  18f3b4:	00c006b4 	movhi	r3,26
  18f3b8:	18fd1f04 	addi	r3,r3,-2948
  18f3bc:	1085883a 	add	r2,r2,r2
  18f3c0:	1885883a 	add	r2,r3,r2
  18f3c4:	11800017 	ldw	r6,0(r2)
  18f3c8:	000f883a 	mov	r7,zero
  18f3cc:	018ec940 	call	18ec94 <__multadd>
  18f3d0:	1025883a 	mov	r18,r2
  18f3d4:	003fc706 	br	18f2f4 <__alt_data_end+0xfff8f2f4>
  18f3d8:	05000044 	movi	r20,1
  18f3dc:	9809883a 	mov	r4,r19
  18f3e0:	a00b883a 	mov	r5,r20
  18f3e4:	018ebc40 	call	18ebc4 <_Balloc>
  18f3e8:	1023883a 	mov	r17,r2
  18f3ec:	00809c44 	movi	r2,625
  18f3f0:	88800515 	stw	r2,20(r17)
  18f3f4:	8d000415 	stw	r20,16(r17)
  18f3f8:	9c401215 	stw	r17,72(r19)
  18f3fc:	88000015 	stw	zero,0(r17)
  18f400:	003fc606 	br	18f31c <__alt_data_end+0xfff8f31c>

0018f404 <__lshift>:
  18f404:	defff904 	addi	sp,sp,-28
  18f408:	dd000415 	stw	r20,16(sp)
  18f40c:	dcc00315 	stw	r19,12(sp)
  18f410:	3029d17a 	srai	r20,r6,5
  18f414:	2cc00417 	ldw	r19,16(r5)
  18f418:	28800217 	ldw	r2,8(r5)
  18f41c:	dd400515 	stw	r21,20(sp)
  18f420:	a4e7883a 	add	r19,r20,r19
  18f424:	dc800215 	stw	r18,8(sp)
  18f428:	dc400115 	stw	r17,4(sp)
  18f42c:	dc000015 	stw	r16,0(sp)
  18f430:	dfc00615 	stw	ra,24(sp)
  18f434:	9c000044 	addi	r16,r19,1
  18f438:	2823883a 	mov	r17,r5
  18f43c:	302b883a 	mov	r21,r6
  18f440:	2025883a 	mov	r18,r4
  18f444:	29400117 	ldw	r5,4(r5)
  18f448:	1400030e 	bge	r2,r16,18f458 <__lshift+0x54>
  18f44c:	1085883a 	add	r2,r2,r2
  18f450:	29400044 	addi	r5,r5,1
  18f454:	143ffd16 	blt	r2,r16,18f44c <__alt_data_end+0xfff8f44c>
  18f458:	9009883a 	mov	r4,r18
  18f45c:	018ebc40 	call	18ebc4 <_Balloc>
  18f460:	11c00504 	addi	r7,r2,20
  18f464:	0500090e 	bge	zero,r20,18f48c <__lshift+0x88>
  18f468:	3811883a 	mov	r8,r7
  18f46c:	0007883a 	mov	r3,zero
  18f470:	40000015 	stw	zero,0(r8)
  18f474:	18c00044 	addi	r3,r3,1
  18f478:	42000104 	addi	r8,r8,4
  18f47c:	1d3ffc1e 	bne	r3,r20,18f470 <__alt_data_end+0xfff8f470>
  18f480:	18c7883a 	add	r3,r3,r3
  18f484:	18c7883a 	add	r3,r3,r3
  18f488:	38cf883a 	add	r7,r7,r3
  18f48c:	89000417 	ldw	r4,16(r17)
  18f490:	88c00504 	addi	r3,r17,20
  18f494:	a98007cc 	andi	r6,r21,31
  18f498:	2109883a 	add	r4,r4,r4
  18f49c:	2109883a 	add	r4,r4,r4
  18f4a0:	1909883a 	add	r4,r3,r4
  18f4a4:	30002326 	beq	r6,zero,18f534 <__lshift+0x130>
  18f4a8:	01400804 	movi	r5,32
  18f4ac:	298bc83a 	sub	r5,r5,r6
  18f4b0:	0013883a 	mov	r9,zero
  18f4b4:	1a000017 	ldw	r8,0(r3)
  18f4b8:	3815883a 	mov	r10,r7
  18f4bc:	39c00104 	addi	r7,r7,4
  18f4c0:	4190983a 	sll	r8,r8,r6
  18f4c4:	18c00104 	addi	r3,r3,4
  18f4c8:	4a10b03a 	or	r8,r9,r8
  18f4cc:	3a3fff15 	stw	r8,-4(r7)
  18f4d0:	1a3fff17 	ldw	r8,-4(r3)
  18f4d4:	4152d83a 	srl	r9,r8,r5
  18f4d8:	193ff636 	bltu	r3,r4,18f4b4 <__alt_data_end+0xfff8f4b4>
  18f4dc:	52400115 	stw	r9,4(r10)
  18f4e0:	48001a1e 	bne	r9,zero,18f54c <__lshift+0x148>
  18f4e4:	843fffc4 	addi	r16,r16,-1
  18f4e8:	14000415 	stw	r16,16(r2)
  18f4ec:	88000826 	beq	r17,zero,18f510 <__lshift+0x10c>
  18f4f0:	89000117 	ldw	r4,4(r17)
  18f4f4:	90c01317 	ldw	r3,76(r18)
  18f4f8:	2109883a 	add	r4,r4,r4
  18f4fc:	2109883a 	add	r4,r4,r4
  18f500:	1907883a 	add	r3,r3,r4
  18f504:	19000017 	ldw	r4,0(r3)
  18f508:	89000015 	stw	r4,0(r17)
  18f50c:	1c400015 	stw	r17,0(r3)
  18f510:	dfc00617 	ldw	ra,24(sp)
  18f514:	dd400517 	ldw	r21,20(sp)
  18f518:	dd000417 	ldw	r20,16(sp)
  18f51c:	dcc00317 	ldw	r19,12(sp)
  18f520:	dc800217 	ldw	r18,8(sp)
  18f524:	dc400117 	ldw	r17,4(sp)
  18f528:	dc000017 	ldw	r16,0(sp)
  18f52c:	dec00704 	addi	sp,sp,28
  18f530:	f800283a 	ret
  18f534:	19400017 	ldw	r5,0(r3)
  18f538:	39c00104 	addi	r7,r7,4
  18f53c:	18c00104 	addi	r3,r3,4
  18f540:	397fff15 	stw	r5,-4(r7)
  18f544:	193ffb36 	bltu	r3,r4,18f534 <__alt_data_end+0xfff8f534>
  18f548:	003fe606 	br	18f4e4 <__alt_data_end+0xfff8f4e4>
  18f54c:	9c000084 	addi	r16,r19,2
  18f550:	003fe406 	br	18f4e4 <__alt_data_end+0xfff8f4e4>

0018f554 <__mcmp>:
  18f554:	20800417 	ldw	r2,16(r4)
  18f558:	28c00417 	ldw	r3,16(r5)
  18f55c:	10c5c83a 	sub	r2,r2,r3
  18f560:	1000111e 	bne	r2,zero,18f5a8 <__mcmp+0x54>
  18f564:	18c7883a 	add	r3,r3,r3
  18f568:	18c7883a 	add	r3,r3,r3
  18f56c:	21000504 	addi	r4,r4,20
  18f570:	29400504 	addi	r5,r5,20
  18f574:	20c5883a 	add	r2,r4,r3
  18f578:	28cb883a 	add	r5,r5,r3
  18f57c:	00000106 	br	18f584 <__mcmp+0x30>
  18f580:	20800a2e 	bgeu	r4,r2,18f5ac <__mcmp+0x58>
  18f584:	10bfff04 	addi	r2,r2,-4
  18f588:	297fff04 	addi	r5,r5,-4
  18f58c:	11800017 	ldw	r6,0(r2)
  18f590:	28c00017 	ldw	r3,0(r5)
  18f594:	30fffa26 	beq	r6,r3,18f580 <__alt_data_end+0xfff8f580>
  18f598:	30c00236 	bltu	r6,r3,18f5a4 <__mcmp+0x50>
  18f59c:	00800044 	movi	r2,1
  18f5a0:	f800283a 	ret
  18f5a4:	00bfffc4 	movi	r2,-1
  18f5a8:	f800283a 	ret
  18f5ac:	0005883a 	mov	r2,zero
  18f5b0:	f800283a 	ret

0018f5b4 <__mdiff>:
  18f5b4:	defffb04 	addi	sp,sp,-20
  18f5b8:	dc000015 	stw	r16,0(sp)
  18f5bc:	2821883a 	mov	r16,r5
  18f5c0:	dcc00315 	stw	r19,12(sp)
  18f5c4:	300b883a 	mov	r5,r6
  18f5c8:	2027883a 	mov	r19,r4
  18f5cc:	8009883a 	mov	r4,r16
  18f5d0:	dc800215 	stw	r18,8(sp)
  18f5d4:	dfc00415 	stw	ra,16(sp)
  18f5d8:	dc400115 	stw	r17,4(sp)
  18f5dc:	3025883a 	mov	r18,r6
  18f5e0:	018f5540 	call	18f554 <__mcmp>
  18f5e4:	10005226 	beq	r2,zero,18f730 <__mdiff+0x17c>
  18f5e8:	10004c16 	blt	r2,zero,18f71c <__mdiff+0x168>
  18f5ec:	0023883a 	mov	r17,zero
  18f5f0:	81400117 	ldw	r5,4(r16)
  18f5f4:	9809883a 	mov	r4,r19
  18f5f8:	018ebc40 	call	18ebc4 <_Balloc>
  18f5fc:	83400417 	ldw	r13,16(r16)
  18f600:	93800417 	ldw	r14,16(r18)
  18f604:	81000504 	addi	r4,r16,20
  18f608:	6b59883a 	add	r12,r13,r13
  18f60c:	739d883a 	add	r14,r14,r14
  18f610:	6319883a 	add	r12,r12,r12
  18f614:	91800504 	addi	r6,r18,20
  18f618:	739d883a 	add	r14,r14,r14
  18f61c:	14400315 	stw	r17,12(r2)
  18f620:	2319883a 	add	r12,r4,r12
  18f624:	339d883a 	add	r14,r6,r14
  18f628:	12400504 	addi	r9,r2,20
  18f62c:	0007883a 	mov	r3,zero
  18f630:	22000017 	ldw	r8,0(r4)
  18f634:	32800017 	ldw	r10,0(r6)
  18f638:	4ac00104 	addi	r11,r9,4
  18f63c:	41ffffcc 	andi	r7,r8,65535
  18f640:	38c7883a 	add	r3,r7,r3
  18f644:	51ffffcc 	andi	r7,r10,65535
  18f648:	19cfc83a 	sub	r7,r3,r7
  18f64c:	4010d43a 	srli	r8,r8,16
  18f650:	5014d43a 	srli	r10,r10,16
  18f654:	3807d43a 	srai	r3,r7,16
  18f658:	39ffffcc 	andi	r7,r7,65535
  18f65c:	4291c83a 	sub	r8,r8,r10
  18f660:	40c7883a 	add	r3,r8,r3
  18f664:	1810943a 	slli	r8,r3,16
  18f668:	31800104 	addi	r6,r6,4
  18f66c:	21000104 	addi	r4,r4,4
  18f670:	41ceb03a 	or	r7,r8,r7
  18f674:	49c00015 	stw	r7,0(r9)
  18f678:	1807d43a 	srai	r3,r3,16
  18f67c:	580b883a 	mov	r5,r11
  18f680:	5813883a 	mov	r9,r11
  18f684:	33bfea36 	bltu	r6,r14,18f630 <__alt_data_end+0xfff8f630>
  18f688:	2011883a 	mov	r8,r4
  18f68c:	2300152e 	bgeu	r4,r12,18f6e4 <__mdiff+0x130>
  18f690:	21400017 	ldw	r5,0(r4)
  18f694:	4a400104 	addi	r9,r9,4
  18f698:	21000104 	addi	r4,r4,4
  18f69c:	29ffffcc 	andi	r7,r5,65535
  18f6a0:	38c7883a 	add	r3,r7,r3
  18f6a4:	280ad43a 	srli	r5,r5,16
  18f6a8:	180dd43a 	srai	r6,r3,16
  18f6ac:	19ffffcc 	andi	r7,r3,65535
  18f6b0:	3147883a 	add	r3,r6,r5
  18f6b4:	180a943a 	slli	r5,r3,16
  18f6b8:	1807d43a 	srai	r3,r3,16
  18f6bc:	29ceb03a 	or	r7,r5,r7
  18f6c0:	49ffff15 	stw	r7,-4(r9)
  18f6c4:	233ff236 	bltu	r4,r12,18f690 <__alt_data_end+0xfff8f690>
  18f6c8:	0206303a 	nor	r3,zero,r8
  18f6cc:	1b07883a 	add	r3,r3,r12
  18f6d0:	1806d0ba 	srli	r3,r3,2
  18f6d4:	18c00044 	addi	r3,r3,1
  18f6d8:	18c7883a 	add	r3,r3,r3
  18f6dc:	18c7883a 	add	r3,r3,r3
  18f6e0:	58cb883a 	add	r5,r11,r3
  18f6e4:	28ffff04 	addi	r3,r5,-4
  18f6e8:	3800041e 	bne	r7,zero,18f6fc <__mdiff+0x148>
  18f6ec:	18ffff04 	addi	r3,r3,-4
  18f6f0:	19000017 	ldw	r4,0(r3)
  18f6f4:	6b7fffc4 	addi	r13,r13,-1
  18f6f8:	203ffc26 	beq	r4,zero,18f6ec <__alt_data_end+0xfff8f6ec>
  18f6fc:	13400415 	stw	r13,16(r2)
  18f700:	dfc00417 	ldw	ra,16(sp)
  18f704:	dcc00317 	ldw	r19,12(sp)
  18f708:	dc800217 	ldw	r18,8(sp)
  18f70c:	dc400117 	ldw	r17,4(sp)
  18f710:	dc000017 	ldw	r16,0(sp)
  18f714:	dec00504 	addi	sp,sp,20
  18f718:	f800283a 	ret
  18f71c:	8005883a 	mov	r2,r16
  18f720:	04400044 	movi	r17,1
  18f724:	9021883a 	mov	r16,r18
  18f728:	1025883a 	mov	r18,r2
  18f72c:	003fb006 	br	18f5f0 <__alt_data_end+0xfff8f5f0>
  18f730:	9809883a 	mov	r4,r19
  18f734:	000b883a 	mov	r5,zero
  18f738:	018ebc40 	call	18ebc4 <_Balloc>
  18f73c:	00c00044 	movi	r3,1
  18f740:	10c00415 	stw	r3,16(r2)
  18f744:	10000515 	stw	zero,20(r2)
  18f748:	003fed06 	br	18f700 <__alt_data_end+0xfff8f700>

0018f74c <__ulp>:
  18f74c:	295ffc2c 	andhi	r5,r5,32752
  18f750:	00bf3034 	movhi	r2,64704
  18f754:	2887883a 	add	r3,r5,r2
  18f758:	00c0020e 	bge	zero,r3,18f764 <__ulp+0x18>
  18f75c:	0005883a 	mov	r2,zero
  18f760:	f800283a 	ret
  18f764:	00c7c83a 	sub	r3,zero,r3
  18f768:	180bd53a 	srai	r5,r3,20
  18f76c:	008004c4 	movi	r2,19
  18f770:	11400a0e 	bge	r2,r5,18f79c <__ulp+0x50>
  18f774:	00800c84 	movi	r2,50
  18f778:	0007883a 	mov	r3,zero
  18f77c:	11400516 	blt	r2,r5,18f794 <__ulp+0x48>
  18f780:	00800cc4 	movi	r2,51
  18f784:	114bc83a 	sub	r5,r2,r5
  18f788:	00800044 	movi	r2,1
  18f78c:	1144983a 	sll	r2,r2,r5
  18f790:	f800283a 	ret
  18f794:	00800044 	movi	r2,1
  18f798:	f800283a 	ret
  18f79c:	00800234 	movhi	r2,8
  18f7a0:	1147d83a 	sra	r3,r2,r5
  18f7a4:	0005883a 	mov	r2,zero
  18f7a8:	f800283a 	ret

0018f7ac <__b2d>:
  18f7ac:	defffa04 	addi	sp,sp,-24
  18f7b0:	dc000015 	stw	r16,0(sp)
  18f7b4:	24000417 	ldw	r16,16(r4)
  18f7b8:	dc400115 	stw	r17,4(sp)
  18f7bc:	24400504 	addi	r17,r4,20
  18f7c0:	8421883a 	add	r16,r16,r16
  18f7c4:	8421883a 	add	r16,r16,r16
  18f7c8:	8c21883a 	add	r16,r17,r16
  18f7cc:	dc800215 	stw	r18,8(sp)
  18f7d0:	84bfff17 	ldw	r18,-4(r16)
  18f7d4:	dd000415 	stw	r20,16(sp)
  18f7d8:	dcc00315 	stw	r19,12(sp)
  18f7dc:	9009883a 	mov	r4,r18
  18f7e0:	2829883a 	mov	r20,r5
  18f7e4:	dfc00515 	stw	ra,20(sp)
  18f7e8:	018eee00 	call	18eee0 <__hi0bits>
  18f7ec:	00c00804 	movi	r3,32
  18f7f0:	1887c83a 	sub	r3,r3,r2
  18f7f4:	a0c00015 	stw	r3,0(r20)
  18f7f8:	00c00284 	movi	r3,10
  18f7fc:	84ffff04 	addi	r19,r16,-4
  18f800:	18801216 	blt	r3,r2,18f84c <__b2d+0xa0>
  18f804:	014002c4 	movi	r5,11
  18f808:	2889c83a 	sub	r4,r5,r2
  18f80c:	9106d83a 	srl	r3,r18,r4
  18f810:	18cffc34 	orhi	r3,r3,16368
  18f814:	8cc0282e 	bgeu	r17,r19,18f8b8 <__b2d+0x10c>
  18f818:	817ffe17 	ldw	r5,-8(r16)
  18f81c:	290ad83a 	srl	r5,r5,r4
  18f820:	10800544 	addi	r2,r2,21
  18f824:	9084983a 	sll	r2,r18,r2
  18f828:	2884b03a 	or	r2,r5,r2
  18f82c:	dfc00517 	ldw	ra,20(sp)
  18f830:	dd000417 	ldw	r20,16(sp)
  18f834:	dcc00317 	ldw	r19,12(sp)
  18f838:	dc800217 	ldw	r18,8(sp)
  18f83c:	dc400117 	ldw	r17,4(sp)
  18f840:	dc000017 	ldw	r16,0(sp)
  18f844:	dec00604 	addi	sp,sp,24
  18f848:	f800283a 	ret
  18f84c:	113ffd44 	addi	r4,r2,-11
  18f850:	8cc00f2e 	bgeu	r17,r19,18f890 <__b2d+0xe4>
  18f854:	81bffe04 	addi	r6,r16,-8
  18f858:	817ffe17 	ldw	r5,-8(r16)
  18f85c:	20001326 	beq	r4,zero,18f8ac <__b2d+0x100>
  18f860:	00c00ac4 	movi	r3,43
  18f864:	1885c83a 	sub	r2,r3,r2
  18f868:	2886d83a 	srl	r3,r5,r2
  18f86c:	9124983a 	sll	r18,r18,r4
  18f870:	90e4b03a 	or	r18,r18,r3
  18f874:	90cffc34 	orhi	r3,r18,16368
  18f878:	8980112e 	bgeu	r17,r6,18f8c0 <__b2d+0x114>
  18f87c:	81bffd17 	ldw	r6,-12(r16)
  18f880:	308cd83a 	srl	r6,r6,r2
  18f884:	2904983a 	sll	r2,r5,r4
  18f888:	1184b03a 	or	r2,r2,r6
  18f88c:	003fe706 	br	18f82c <__alt_data_end+0xfff8f82c>
  18f890:	20000526 	beq	r4,zero,18f8a8 <__b2d+0xfc>
  18f894:	9124983a 	sll	r18,r18,r4
  18f898:	000d883a 	mov	r6,zero
  18f89c:	000b883a 	mov	r5,zero
  18f8a0:	90cffc34 	orhi	r3,r18,16368
  18f8a4:	003ff706 	br	18f884 <__alt_data_end+0xfff8f884>
  18f8a8:	000b883a 	mov	r5,zero
  18f8ac:	90cffc34 	orhi	r3,r18,16368
  18f8b0:	2805883a 	mov	r2,r5
  18f8b4:	003fdd06 	br	18f82c <__alt_data_end+0xfff8f82c>
  18f8b8:	000b883a 	mov	r5,zero
  18f8bc:	003fd806 	br	18f820 <__alt_data_end+0xfff8f820>
  18f8c0:	000d883a 	mov	r6,zero
  18f8c4:	003fef06 	br	18f884 <__alt_data_end+0xfff8f884>

0018f8c8 <__d2b>:
  18f8c8:	defff704 	addi	sp,sp,-36
  18f8cc:	dc000215 	stw	r16,8(sp)
  18f8d0:	3021883a 	mov	r16,r6
  18f8d4:	dc400315 	stw	r17,12(sp)
  18f8d8:	8022907a 	slli	r17,r16,1
  18f8dc:	dd400715 	stw	r21,28(sp)
  18f8e0:	282b883a 	mov	r21,r5
  18f8e4:	01400044 	movi	r5,1
  18f8e8:	dd000615 	stw	r20,24(sp)
  18f8ec:	dcc00515 	stw	r19,20(sp)
  18f8f0:	dc800415 	stw	r18,16(sp)
  18f8f4:	dfc00815 	stw	ra,32(sp)
  18f8f8:	3829883a 	mov	r20,r7
  18f8fc:	dc800917 	ldw	r18,36(sp)
  18f900:	8822d57a 	srli	r17,r17,21
  18f904:	018ebc40 	call	18ebc4 <_Balloc>
  18f908:	1027883a 	mov	r19,r2
  18f90c:	00800434 	movhi	r2,16
  18f910:	10bfffc4 	addi	r2,r2,-1
  18f914:	808c703a 	and	r6,r16,r2
  18f918:	88000126 	beq	r17,zero,18f920 <__d2b+0x58>
  18f91c:	31800434 	orhi	r6,r6,16
  18f920:	d9800015 	stw	r6,0(sp)
  18f924:	a8001f26 	beq	r21,zero,18f9a4 <__d2b+0xdc>
  18f928:	d9000104 	addi	r4,sp,4
  18f92c:	dd400115 	stw	r21,4(sp)
  18f930:	018ef480 	call	18ef48 <__lo0bits>
  18f934:	d8c00017 	ldw	r3,0(sp)
  18f938:	1000291e 	bne	r2,zero,18f9e0 <__d2b+0x118>
  18f93c:	d9000117 	ldw	r4,4(sp)
  18f940:	99000515 	stw	r4,20(r19)
  18f944:	1820c03a 	cmpne	r16,r3,zero
  18f948:	84000044 	addi	r16,r16,1
  18f94c:	98c00615 	stw	r3,24(r19)
  18f950:	9c000415 	stw	r16,16(r19)
  18f954:	88001b1e 	bne	r17,zero,18f9c4 <__d2b+0xfc>
  18f958:	800690ba 	slli	r3,r16,2
  18f95c:	10bef384 	addi	r2,r2,-1074
  18f960:	a0800015 	stw	r2,0(r20)
  18f964:	98c5883a 	add	r2,r19,r3
  18f968:	11000417 	ldw	r4,16(r2)
  18f96c:	8020917a 	slli	r16,r16,5
  18f970:	018eee00 	call	18eee0 <__hi0bits>
  18f974:	8085c83a 	sub	r2,r16,r2
  18f978:	90800015 	stw	r2,0(r18)
  18f97c:	9805883a 	mov	r2,r19
  18f980:	dfc00817 	ldw	ra,32(sp)
  18f984:	dd400717 	ldw	r21,28(sp)
  18f988:	dd000617 	ldw	r20,24(sp)
  18f98c:	dcc00517 	ldw	r19,20(sp)
  18f990:	dc800417 	ldw	r18,16(sp)
  18f994:	dc400317 	ldw	r17,12(sp)
  18f998:	dc000217 	ldw	r16,8(sp)
  18f99c:	dec00904 	addi	sp,sp,36
  18f9a0:	f800283a 	ret
  18f9a4:	d809883a 	mov	r4,sp
  18f9a8:	018ef480 	call	18ef48 <__lo0bits>
  18f9ac:	d8c00017 	ldw	r3,0(sp)
  18f9b0:	04000044 	movi	r16,1
  18f9b4:	9c000415 	stw	r16,16(r19)
  18f9b8:	98c00515 	stw	r3,20(r19)
  18f9bc:	10800804 	addi	r2,r2,32
  18f9c0:	883fe526 	beq	r17,zero,18f958 <__alt_data_end+0xfff8f958>
  18f9c4:	8c7ef344 	addi	r17,r17,-1075
  18f9c8:	88a3883a 	add	r17,r17,r2
  18f9cc:	00c00d44 	movi	r3,53
  18f9d0:	a4400015 	stw	r17,0(r20)
  18f9d4:	1885c83a 	sub	r2,r3,r2
  18f9d8:	90800015 	stw	r2,0(r18)
  18f9dc:	003fe706 	br	18f97c <__alt_data_end+0xfff8f97c>
  18f9e0:	01000804 	movi	r4,32
  18f9e4:	2089c83a 	sub	r4,r4,r2
  18f9e8:	1908983a 	sll	r4,r3,r4
  18f9ec:	d9400117 	ldw	r5,4(sp)
  18f9f0:	1886d83a 	srl	r3,r3,r2
  18f9f4:	2148b03a 	or	r4,r4,r5
  18f9f8:	99000515 	stw	r4,20(r19)
  18f9fc:	d8c00015 	stw	r3,0(sp)
  18fa00:	003fd006 	br	18f944 <__alt_data_end+0xfff8f944>

0018fa04 <__ratio>:
  18fa04:	defff904 	addi	sp,sp,-28
  18fa08:	dc400315 	stw	r17,12(sp)
  18fa0c:	2823883a 	mov	r17,r5
  18fa10:	d9400104 	addi	r5,sp,4
  18fa14:	dfc00615 	stw	ra,24(sp)
  18fa18:	dcc00515 	stw	r19,20(sp)
  18fa1c:	dc800415 	stw	r18,16(sp)
  18fa20:	2027883a 	mov	r19,r4
  18fa24:	dc000215 	stw	r16,8(sp)
  18fa28:	018f7ac0 	call	18f7ac <__b2d>
  18fa2c:	8809883a 	mov	r4,r17
  18fa30:	d80b883a 	mov	r5,sp
  18fa34:	1025883a 	mov	r18,r2
  18fa38:	1821883a 	mov	r16,r3
  18fa3c:	018f7ac0 	call	18f7ac <__b2d>
  18fa40:	8a400417 	ldw	r9,16(r17)
  18fa44:	9a000417 	ldw	r8,16(r19)
  18fa48:	100d883a 	mov	r6,r2
  18fa4c:	d8800017 	ldw	r2,0(sp)
  18fa50:	4251c83a 	sub	r8,r8,r9
  18fa54:	4012917a 	slli	r9,r8,5
  18fa58:	da000117 	ldw	r8,4(sp)
  18fa5c:	4091c83a 	sub	r8,r8,r2
  18fa60:	4251883a 	add	r8,r8,r9
  18fa64:	02000d0e 	bge	zero,r8,18fa9c <__ratio+0x98>
  18fa68:	4010953a 	slli	r8,r8,20
  18fa6c:	4421883a 	add	r16,r8,r16
  18fa70:	9009883a 	mov	r4,r18
  18fa74:	800b883a 	mov	r5,r16
  18fa78:	180f883a 	mov	r7,r3
  18fa7c:	01938840 	call	193884 <__divdf3>
  18fa80:	dfc00617 	ldw	ra,24(sp)
  18fa84:	dcc00517 	ldw	r19,20(sp)
  18fa88:	dc800417 	ldw	r18,16(sp)
  18fa8c:	dc400317 	ldw	r17,12(sp)
  18fa90:	dc000217 	ldw	r16,8(sp)
  18fa94:	dec00704 	addi	sp,sp,28
  18fa98:	f800283a 	ret
  18fa9c:	4010953a 	slli	r8,r8,20
  18faa0:	1a07c83a 	sub	r3,r3,r8
  18faa4:	003ff206 	br	18fa70 <__alt_data_end+0xfff8fa70>

0018faa8 <_mprec_log10>:
  18faa8:	defffe04 	addi	sp,sp,-8
  18faac:	dc000015 	stw	r16,0(sp)
  18fab0:	dfc00115 	stw	ra,4(sp)
  18fab4:	008005c4 	movi	r2,23
  18fab8:	2021883a 	mov	r16,r4
  18fabc:	11000d0e 	bge	r2,r4,18faf4 <_mprec_log10+0x4c>
  18fac0:	0005883a 	mov	r2,zero
  18fac4:	00cffc34 	movhi	r3,16368
  18fac8:	843fffc4 	addi	r16,r16,-1
  18facc:	1009883a 	mov	r4,r2
  18fad0:	180b883a 	mov	r5,r3
  18fad4:	000d883a 	mov	r6,zero
  18fad8:	01d00934 	movhi	r7,16420
  18fadc:	01944480 	call	194448 <__muldf3>
  18fae0:	803ff91e 	bne	r16,zero,18fac8 <__alt_data_end+0xfff8fac8>
  18fae4:	dfc00117 	ldw	ra,4(sp)
  18fae8:	dc000017 	ldw	r16,0(sp)
  18faec:	dec00204 	addi	sp,sp,8
  18faf0:	f800283a 	ret
  18faf4:	202090fa 	slli	r16,r4,3
  18faf8:	008006b4 	movhi	r2,26
  18fafc:	10bd3604 	addi	r2,r2,-2856
  18fb00:	1421883a 	add	r16,r2,r16
  18fb04:	80800017 	ldw	r2,0(r16)
  18fb08:	80c00117 	ldw	r3,4(r16)
  18fb0c:	dfc00117 	ldw	ra,4(sp)
  18fb10:	dc000017 	ldw	r16,0(sp)
  18fb14:	dec00204 	addi	sp,sp,8
  18fb18:	f800283a 	ret

0018fb1c <__copybits>:
  18fb1c:	297fffc4 	addi	r5,r5,-1
  18fb20:	280fd17a 	srai	r7,r5,5
  18fb24:	30c00417 	ldw	r3,16(r6)
  18fb28:	30800504 	addi	r2,r6,20
  18fb2c:	39c00044 	addi	r7,r7,1
  18fb30:	18c7883a 	add	r3,r3,r3
  18fb34:	39cf883a 	add	r7,r7,r7
  18fb38:	18c7883a 	add	r3,r3,r3
  18fb3c:	39cf883a 	add	r7,r7,r7
  18fb40:	10c7883a 	add	r3,r2,r3
  18fb44:	21cf883a 	add	r7,r4,r7
  18fb48:	10c00d2e 	bgeu	r2,r3,18fb80 <__copybits+0x64>
  18fb4c:	200b883a 	mov	r5,r4
  18fb50:	12000017 	ldw	r8,0(r2)
  18fb54:	29400104 	addi	r5,r5,4
  18fb58:	10800104 	addi	r2,r2,4
  18fb5c:	2a3fff15 	stw	r8,-4(r5)
  18fb60:	10fffb36 	bltu	r2,r3,18fb50 <__alt_data_end+0xfff8fb50>
  18fb64:	1985c83a 	sub	r2,r3,r6
  18fb68:	10bffac4 	addi	r2,r2,-21
  18fb6c:	1004d0ba 	srli	r2,r2,2
  18fb70:	10800044 	addi	r2,r2,1
  18fb74:	1085883a 	add	r2,r2,r2
  18fb78:	1085883a 	add	r2,r2,r2
  18fb7c:	2089883a 	add	r4,r4,r2
  18fb80:	21c0032e 	bgeu	r4,r7,18fb90 <__copybits+0x74>
  18fb84:	20000015 	stw	zero,0(r4)
  18fb88:	21000104 	addi	r4,r4,4
  18fb8c:	21fffd36 	bltu	r4,r7,18fb84 <__alt_data_end+0xfff8fb84>
  18fb90:	f800283a 	ret

0018fb94 <__any_on>:
  18fb94:	20c00417 	ldw	r3,16(r4)
  18fb98:	2805d17a 	srai	r2,r5,5
  18fb9c:	21000504 	addi	r4,r4,20
  18fba0:	18800d0e 	bge	r3,r2,18fbd8 <__any_on+0x44>
  18fba4:	18c7883a 	add	r3,r3,r3
  18fba8:	18c7883a 	add	r3,r3,r3
  18fbac:	20c7883a 	add	r3,r4,r3
  18fbb0:	20c0192e 	bgeu	r4,r3,18fc18 <__any_on+0x84>
  18fbb4:	18bfff17 	ldw	r2,-4(r3)
  18fbb8:	18ffff04 	addi	r3,r3,-4
  18fbbc:	1000041e 	bne	r2,zero,18fbd0 <__any_on+0x3c>
  18fbc0:	20c0142e 	bgeu	r4,r3,18fc14 <__any_on+0x80>
  18fbc4:	18ffff04 	addi	r3,r3,-4
  18fbc8:	19400017 	ldw	r5,0(r3)
  18fbcc:	283ffc26 	beq	r5,zero,18fbc0 <__alt_data_end+0xfff8fbc0>
  18fbd0:	00800044 	movi	r2,1
  18fbd4:	f800283a 	ret
  18fbd8:	10c00a0e 	bge	r2,r3,18fc04 <__any_on+0x70>
  18fbdc:	1085883a 	add	r2,r2,r2
  18fbe0:	1085883a 	add	r2,r2,r2
  18fbe4:	294007cc 	andi	r5,r5,31
  18fbe8:	2087883a 	add	r3,r4,r2
  18fbec:	283ff026 	beq	r5,zero,18fbb0 <__alt_data_end+0xfff8fbb0>
  18fbf0:	19800017 	ldw	r6,0(r3)
  18fbf4:	3144d83a 	srl	r2,r6,r5
  18fbf8:	114a983a 	sll	r5,r2,r5
  18fbfc:	29bff41e 	bne	r5,r6,18fbd0 <__alt_data_end+0xfff8fbd0>
  18fc00:	003feb06 	br	18fbb0 <__alt_data_end+0xfff8fbb0>
  18fc04:	1085883a 	add	r2,r2,r2
  18fc08:	1085883a 	add	r2,r2,r2
  18fc0c:	2087883a 	add	r3,r4,r2
  18fc10:	003fe706 	br	18fbb0 <__alt_data_end+0xfff8fbb0>
  18fc14:	f800283a 	ret
  18fc18:	0005883a 	mov	r2,zero
  18fc1c:	f800283a 	ret

0018fc20 <_putc_r>:
  18fc20:	defffc04 	addi	sp,sp,-16
  18fc24:	dc000215 	stw	r16,8(sp)
  18fc28:	dfc00315 	stw	ra,12(sp)
  18fc2c:	2021883a 	mov	r16,r4
  18fc30:	20000226 	beq	r4,zero,18fc3c <_putc_r+0x1c>
  18fc34:	20800e17 	ldw	r2,56(r4)
  18fc38:	10001b26 	beq	r2,zero,18fca8 <_putc_r+0x88>
  18fc3c:	30800217 	ldw	r2,8(r6)
  18fc40:	10bfffc4 	addi	r2,r2,-1
  18fc44:	30800215 	stw	r2,8(r6)
  18fc48:	10000a16 	blt	r2,zero,18fc74 <_putc_r+0x54>
  18fc4c:	30800017 	ldw	r2,0(r6)
  18fc50:	11400005 	stb	r5,0(r2)
  18fc54:	30800017 	ldw	r2,0(r6)
  18fc58:	10c00044 	addi	r3,r2,1
  18fc5c:	30c00015 	stw	r3,0(r6)
  18fc60:	10800003 	ldbu	r2,0(r2)
  18fc64:	dfc00317 	ldw	ra,12(sp)
  18fc68:	dc000217 	ldw	r16,8(sp)
  18fc6c:	dec00404 	addi	sp,sp,16
  18fc70:	f800283a 	ret
  18fc74:	30c00617 	ldw	r3,24(r6)
  18fc78:	10c00616 	blt	r2,r3,18fc94 <_putc_r+0x74>
  18fc7c:	30800017 	ldw	r2,0(r6)
  18fc80:	00c00284 	movi	r3,10
  18fc84:	11400005 	stb	r5,0(r2)
  18fc88:	30800017 	ldw	r2,0(r6)
  18fc8c:	11400003 	ldbu	r5,0(r2)
  18fc90:	28fff11e 	bne	r5,r3,18fc58 <__alt_data_end+0xfff8fc58>
  18fc94:	8009883a 	mov	r4,r16
  18fc98:	dfc00317 	ldw	ra,12(sp)
  18fc9c:	dc000217 	ldw	r16,8(sp)
  18fca0:	dec00404 	addi	sp,sp,16
  18fca4:	0191a801 	jmpi	191a80 <__swbuf_r>
  18fca8:	d9400015 	stw	r5,0(sp)
  18fcac:	d9800115 	stw	r6,4(sp)
  18fcb0:	018d4880 	call	18d488 <__sinit>
  18fcb4:	d9800117 	ldw	r6,4(sp)
  18fcb8:	d9400017 	ldw	r5,0(sp)
  18fcbc:	003fdf06 	br	18fc3c <__alt_data_end+0xfff8fc3c>

0018fcc0 <putc>:
  18fcc0:	008006b4 	movhi	r2,26
  18fcc4:	defffc04 	addi	sp,sp,-16
  18fcc8:	10846704 	addi	r2,r2,4508
  18fccc:	dc400115 	stw	r17,4(sp)
  18fcd0:	14400017 	ldw	r17,0(r2)
  18fcd4:	dc800215 	stw	r18,8(sp)
  18fcd8:	dc000015 	stw	r16,0(sp)
  18fcdc:	dfc00315 	stw	ra,12(sp)
  18fce0:	2025883a 	mov	r18,r4
  18fce4:	2821883a 	mov	r16,r5
  18fce8:	88000226 	beq	r17,zero,18fcf4 <putc+0x34>
  18fcec:	88800e17 	ldw	r2,56(r17)
  18fcf0:	10001a26 	beq	r2,zero,18fd5c <putc+0x9c>
  18fcf4:	80800217 	ldw	r2,8(r16)
  18fcf8:	10bfffc4 	addi	r2,r2,-1
  18fcfc:	80800215 	stw	r2,8(r16)
  18fd00:	10000c16 	blt	r2,zero,18fd34 <putc+0x74>
  18fd04:	80800017 	ldw	r2,0(r16)
  18fd08:	14800005 	stb	r18,0(r2)
  18fd0c:	80800017 	ldw	r2,0(r16)
  18fd10:	10c00044 	addi	r3,r2,1
  18fd14:	80c00015 	stw	r3,0(r16)
  18fd18:	10800003 	ldbu	r2,0(r2)
  18fd1c:	dfc00317 	ldw	ra,12(sp)
  18fd20:	dc800217 	ldw	r18,8(sp)
  18fd24:	dc400117 	ldw	r17,4(sp)
  18fd28:	dc000017 	ldw	r16,0(sp)
  18fd2c:	dec00404 	addi	sp,sp,16
  18fd30:	f800283a 	ret
  18fd34:	80c00617 	ldw	r3,24(r16)
  18fd38:	10c00b16 	blt	r2,r3,18fd68 <putc+0xa8>
  18fd3c:	80800017 	ldw	r2,0(r16)
  18fd40:	00c00284 	movi	r3,10
  18fd44:	14800005 	stb	r18,0(r2)
  18fd48:	80800017 	ldw	r2,0(r16)
  18fd4c:	11400003 	ldbu	r5,0(r2)
  18fd50:	28ffef1e 	bne	r5,r3,18fd10 <__alt_data_end+0xfff8fd10>
  18fd54:	8809883a 	mov	r4,r17
  18fd58:	00000506 	br	18fd70 <putc+0xb0>
  18fd5c:	8809883a 	mov	r4,r17
  18fd60:	018d4880 	call	18d488 <__sinit>
  18fd64:	003fe306 	br	18fcf4 <__alt_data_end+0xfff8fcf4>
  18fd68:	8809883a 	mov	r4,r17
  18fd6c:	900b883a 	mov	r5,r18
  18fd70:	800d883a 	mov	r6,r16
  18fd74:	dfc00317 	ldw	ra,12(sp)
  18fd78:	dc800217 	ldw	r18,8(sp)
  18fd7c:	dc400117 	ldw	r17,4(sp)
  18fd80:	dc000017 	ldw	r16,0(sp)
  18fd84:	dec00404 	addi	sp,sp,16
  18fd88:	0191a801 	jmpi	191a80 <__swbuf_r>

0018fd8c <_realloc_r>:
  18fd8c:	defff604 	addi	sp,sp,-40
  18fd90:	dd000415 	stw	r20,16(sp)
  18fd94:	dc400115 	stw	r17,4(sp)
  18fd98:	dfc00915 	stw	ra,36(sp)
  18fd9c:	df000815 	stw	fp,32(sp)
  18fda0:	ddc00715 	stw	r23,28(sp)
  18fda4:	dd800615 	stw	r22,24(sp)
  18fda8:	dd400515 	stw	r21,20(sp)
  18fdac:	dcc00315 	stw	r19,12(sp)
  18fdb0:	dc800215 	stw	r18,8(sp)
  18fdb4:	dc000015 	stw	r16,0(sp)
  18fdb8:	2829883a 	mov	r20,r5
  18fdbc:	3023883a 	mov	r17,r6
  18fdc0:	2800ad26 	beq	r5,zero,190078 <_realloc_r+0x2ec>
  18fdc4:	2025883a 	mov	r18,r4
  18fdc8:	0196aec0 	call	196aec <__malloc_lock>
  18fdcc:	a0ffff17 	ldw	r3,-4(r20)
  18fdd0:	043fff04 	movi	r16,-4
  18fdd4:	890002c4 	addi	r4,r17,11
  18fdd8:	01c00584 	movi	r7,22
  18fddc:	a57ffe04 	addi	r21,r20,-8
  18fde0:	1c20703a 	and	r16,r3,r16
  18fde4:	39001d2e 	bgeu	r7,r4,18fe5c <_realloc_r+0xd0>
  18fde8:	05bffe04 	movi	r22,-8
  18fdec:	25ac703a 	and	r22,r4,r22
  18fdf0:	b00f883a 	mov	r7,r22
  18fdf4:	b0006516 	blt	r22,zero,18ff8c <_realloc_r+0x200>
  18fdf8:	b4406436 	bltu	r22,r17,18ff8c <_realloc_r+0x200>
  18fdfc:	81c01a0e 	bge	r16,r7,18fe68 <_realloc_r+0xdc>
  18fe00:	070006b4 	movhi	fp,26
  18fe04:	e73eaf04 	addi	fp,fp,-1348
  18fe08:	e1400217 	ldw	r5,8(fp)
  18fe0c:	ac11883a 	add	r8,r21,r16
  18fe10:	2a006226 	beq	r5,r8,18ff9c <_realloc_r+0x210>
  18fe14:	41800117 	ldw	r6,4(r8)
  18fe18:	027fff84 	movi	r9,-2
  18fe1c:	3252703a 	and	r9,r6,r9
  18fe20:	4253883a 	add	r9,r8,r9
  18fe24:	49000117 	ldw	r4,4(r9)
  18fe28:	2100004c 	andi	r4,r4,1
  18fe2c:	2000281e 	bne	r4,zero,18fed0 <_realloc_r+0x144>
  18fe30:	00bfff04 	movi	r2,-4
  18fe34:	3084703a 	and	r2,r6,r2
  18fe38:	1409883a 	add	r4,r2,r16
  18fe3c:	21c05e16 	blt	r4,r7,18ffb8 <_realloc_r+0x22c>
  18fe40:	40800317 	ldw	r2,12(r8)
  18fe44:	41400217 	ldw	r5,8(r8)
  18fe48:	a023883a 	mov	r17,r20
  18fe4c:	2021883a 	mov	r16,r4
  18fe50:	28800315 	stw	r2,12(r5)
  18fe54:	11400215 	stw	r5,8(r2)
  18fe58:	00000406 	br	18fe6c <_realloc_r+0xe0>
  18fe5c:	01c00404 	movi	r7,16
  18fe60:	382d883a 	mov	r22,r7
  18fe64:	003fe406 	br	18fdf8 <__alt_data_end+0xfff8fdf8>
  18fe68:	a023883a 	mov	r17,r20
  18fe6c:	858fc83a 	sub	r7,r16,r22
  18fe70:	008003c4 	movi	r2,15
  18fe74:	18c0004c 	andi	r3,r3,1
  18fe78:	11c07236 	bltu	r2,r7,190044 <_realloc_r+0x2b8>
  18fe7c:	1c06b03a 	or	r3,r3,r16
  18fe80:	a8c00115 	stw	r3,4(r21)
  18fe84:	ac21883a 	add	r16,r21,r16
  18fe88:	80800117 	ldw	r2,4(r16)
  18fe8c:	10800054 	ori	r2,r2,1
  18fe90:	80800115 	stw	r2,4(r16)
  18fe94:	9009883a 	mov	r4,r18
  18fe98:	0196b0c0 	call	196b0c <__malloc_unlock>
  18fe9c:	8805883a 	mov	r2,r17
  18fea0:	dfc00917 	ldw	ra,36(sp)
  18fea4:	df000817 	ldw	fp,32(sp)
  18fea8:	ddc00717 	ldw	r23,28(sp)
  18feac:	dd800617 	ldw	r22,24(sp)
  18feb0:	dd400517 	ldw	r21,20(sp)
  18feb4:	dd000417 	ldw	r20,16(sp)
  18feb8:	dcc00317 	ldw	r19,12(sp)
  18febc:	dc800217 	ldw	r18,8(sp)
  18fec0:	dc400117 	ldw	r17,4(sp)
  18fec4:	dc000017 	ldw	r16,0(sp)
  18fec8:	dec00a04 	addi	sp,sp,40
  18fecc:	f800283a 	ret
  18fed0:	18c0004c 	andi	r3,r3,1
  18fed4:	1800081e 	bne	r3,zero,18fef8 <_realloc_r+0x16c>
  18fed8:	a4fffe17 	ldw	r19,-8(r20)
  18fedc:	00bfff04 	movi	r2,-4
  18fee0:	ace7c83a 	sub	r19,r21,r19
  18fee4:	98c00117 	ldw	r3,4(r19)
  18fee8:	1886703a 	and	r3,r3,r2
  18feec:	98000226 	beq	r19,zero,18fef8 <_realloc_r+0x16c>
  18fef0:	1c2f883a 	add	r23,r3,r16
  18fef4:	b9c06d0e 	bge	r23,r7,1900ac <_realloc_r+0x320>
  18fef8:	880b883a 	mov	r5,r17
  18fefc:	9009883a 	mov	r4,r18
  18ff00:	018e1d80 	call	18e1d8 <_malloc_r>
  18ff04:	1023883a 	mov	r17,r2
  18ff08:	1000ef26 	beq	r2,zero,1902c8 <_realloc_r+0x53c>
  18ff0c:	a0ffff17 	ldw	r3,-4(r20)
  18ff10:	113ffe04 	addi	r4,r2,-8
  18ff14:	00bfff84 	movi	r2,-2
  18ff18:	1884703a 	and	r2,r3,r2
  18ff1c:	a885883a 	add	r2,r21,r2
  18ff20:	2080bf26 	beq	r4,r2,190220 <_realloc_r+0x494>
  18ff24:	81bfff04 	addi	r6,r16,-4
  18ff28:	00800904 	movi	r2,36
  18ff2c:	11808936 	bltu	r2,r6,190154 <_realloc_r+0x3c8>
  18ff30:	00c004c4 	movi	r3,19
  18ff34:	19806c2e 	bgeu	r3,r6,1900e8 <_realloc_r+0x35c>
  18ff38:	a0c00017 	ldw	r3,0(r20)
  18ff3c:	88c00015 	stw	r3,0(r17)
  18ff40:	a0c00117 	ldw	r3,4(r20)
  18ff44:	88c00115 	stw	r3,4(r17)
  18ff48:	00c006c4 	movi	r3,27
  18ff4c:	1980ac36 	bltu	r3,r6,190200 <_realloc_r+0x474>
  18ff50:	88800204 	addi	r2,r17,8
  18ff54:	a0c00204 	addi	r3,r20,8
  18ff58:	19000017 	ldw	r4,0(r3)
  18ff5c:	11000015 	stw	r4,0(r2)
  18ff60:	19000117 	ldw	r4,4(r3)
  18ff64:	11000115 	stw	r4,4(r2)
  18ff68:	18c00217 	ldw	r3,8(r3)
  18ff6c:	10c00215 	stw	r3,8(r2)
  18ff70:	a00b883a 	mov	r5,r20
  18ff74:	9009883a 	mov	r4,r18
  18ff78:	018d5fc0 	call	18d5fc <_free_r>
  18ff7c:	9009883a 	mov	r4,r18
  18ff80:	0196b0c0 	call	196b0c <__malloc_unlock>
  18ff84:	8805883a 	mov	r2,r17
  18ff88:	003fc506 	br	18fea0 <__alt_data_end+0xfff8fea0>
  18ff8c:	00800304 	movi	r2,12
  18ff90:	90800015 	stw	r2,0(r18)
  18ff94:	0005883a 	mov	r2,zero
  18ff98:	003fc106 	br	18fea0 <__alt_data_end+0xfff8fea0>
  18ff9c:	29800117 	ldw	r6,4(r5)
  18ffa0:	00bfff04 	movi	r2,-4
  18ffa4:	b1000404 	addi	r4,r22,16
  18ffa8:	3084703a 	and	r2,r6,r2
  18ffac:	140d883a 	add	r6,r2,r16
  18ffb0:	31005b0e 	bge	r6,r4,190120 <_realloc_r+0x394>
  18ffb4:	2811883a 	mov	r8,r5
  18ffb8:	18c0004c 	andi	r3,r3,1
  18ffbc:	183fce1e 	bne	r3,zero,18fef8 <__alt_data_end+0xfff8fef8>
  18ffc0:	a4fffe17 	ldw	r19,-8(r20)
  18ffc4:	00ffff04 	movi	r3,-4
  18ffc8:	ace7c83a 	sub	r19,r21,r19
  18ffcc:	99000117 	ldw	r4,4(r19)
  18ffd0:	20c6703a 	and	r3,r4,r3
  18ffd4:	403fc526 	beq	r8,zero,18feec <__alt_data_end+0xfff8feec>
  18ffd8:	1c2f883a 	add	r23,r3,r16
  18ffdc:	b8af883a 	add	r23,r23,r2
  18ffe0:	41406026 	beq	r8,r5,190164 <_realloc_r+0x3d8>
  18ffe4:	b9ffc116 	blt	r23,r7,18feec <__alt_data_end+0xfff8feec>
  18ffe8:	40c00217 	ldw	r3,8(r8)
  18ffec:	40800317 	ldw	r2,12(r8)
  18fff0:	81bfff04 	addi	r6,r16,-4
  18fff4:	01000904 	movi	r4,36
  18fff8:	18800315 	stw	r2,12(r3)
  18fffc:	10c00215 	stw	r3,8(r2)
  190000:	99400217 	ldw	r5,8(r19)
  190004:	98c00317 	ldw	r3,12(r19)
  190008:	9c400204 	addi	r17,r19,8
  19000c:	28c00315 	stw	r3,12(r5)
  190010:	19400215 	stw	r5,8(r3)
  190014:	21802d36 	bltu	r4,r6,1900cc <_realloc_r+0x340>
  190018:	008004c4 	movi	r2,19
  19001c:	1180352e 	bgeu	r2,r6,1900f4 <_realloc_r+0x368>
  190020:	a0800017 	ldw	r2,0(r20)
  190024:	98800215 	stw	r2,8(r19)
  190028:	a0800117 	ldw	r2,4(r20)
  19002c:	98800315 	stw	r2,12(r19)
  190030:	008006c4 	movi	r2,27
  190034:	11808036 	bltu	r2,r6,190238 <_realloc_r+0x4ac>
  190038:	98c00404 	addi	r3,r19,16
  19003c:	a5000204 	addi	r20,r20,8
  190040:	00002d06 	br	1900f8 <_realloc_r+0x36c>
  190044:	1d86b03a 	or	r3,r3,r22
  190048:	ad8b883a 	add	r5,r21,r22
  19004c:	a8c00115 	stw	r3,4(r21)
  190050:	38800054 	ori	r2,r7,1
  190054:	28800115 	stw	r2,4(r5)
  190058:	29cf883a 	add	r7,r5,r7
  19005c:	38800117 	ldw	r2,4(r7)
  190060:	9009883a 	mov	r4,r18
  190064:	29400204 	addi	r5,r5,8
  190068:	10800054 	ori	r2,r2,1
  19006c:	38800115 	stw	r2,4(r7)
  190070:	018d5fc0 	call	18d5fc <_free_r>
  190074:	003f8706 	br	18fe94 <__alt_data_end+0xfff8fe94>
  190078:	300b883a 	mov	r5,r6
  19007c:	dfc00917 	ldw	ra,36(sp)
  190080:	df000817 	ldw	fp,32(sp)
  190084:	ddc00717 	ldw	r23,28(sp)
  190088:	dd800617 	ldw	r22,24(sp)
  19008c:	dd400517 	ldw	r21,20(sp)
  190090:	dd000417 	ldw	r20,16(sp)
  190094:	dcc00317 	ldw	r19,12(sp)
  190098:	dc800217 	ldw	r18,8(sp)
  19009c:	dc400117 	ldw	r17,4(sp)
  1900a0:	dc000017 	ldw	r16,0(sp)
  1900a4:	dec00a04 	addi	sp,sp,40
  1900a8:	018e1d81 	jmpi	18e1d8 <_malloc_r>
  1900ac:	98800317 	ldw	r2,12(r19)
  1900b0:	98c00217 	ldw	r3,8(r19)
  1900b4:	81bfff04 	addi	r6,r16,-4
  1900b8:	01000904 	movi	r4,36
  1900bc:	18800315 	stw	r2,12(r3)
  1900c0:	10c00215 	stw	r3,8(r2)
  1900c4:	9c400204 	addi	r17,r19,8
  1900c8:	21bfd32e 	bgeu	r4,r6,190018 <__alt_data_end+0xfff90018>
  1900cc:	8809883a 	mov	r4,r17
  1900d0:	a00b883a 	mov	r5,r20
  1900d4:	018ea680 	call	18ea68 <memmove>
  1900d8:	98c00117 	ldw	r3,4(r19)
  1900dc:	b821883a 	mov	r16,r23
  1900e0:	982b883a 	mov	r21,r19
  1900e4:	003f6106 	br	18fe6c <__alt_data_end+0xfff8fe6c>
  1900e8:	8805883a 	mov	r2,r17
  1900ec:	a007883a 	mov	r3,r20
  1900f0:	003f9906 	br	18ff58 <__alt_data_end+0xfff8ff58>
  1900f4:	8807883a 	mov	r3,r17
  1900f8:	a0800017 	ldw	r2,0(r20)
  1900fc:	b821883a 	mov	r16,r23
  190100:	982b883a 	mov	r21,r19
  190104:	18800015 	stw	r2,0(r3)
  190108:	a0800117 	ldw	r2,4(r20)
  19010c:	18800115 	stw	r2,4(r3)
  190110:	a0800217 	ldw	r2,8(r20)
  190114:	18800215 	stw	r2,8(r3)
  190118:	98c00117 	ldw	r3,4(r19)
  19011c:	003f5306 	br	18fe6c <__alt_data_end+0xfff8fe6c>
  190120:	adab883a 	add	r21,r21,r22
  190124:	3585c83a 	sub	r2,r6,r22
  190128:	e5400215 	stw	r21,8(fp)
  19012c:	10800054 	ori	r2,r2,1
  190130:	a8800115 	stw	r2,4(r21)
  190134:	a0bfff17 	ldw	r2,-4(r20)
  190138:	9009883a 	mov	r4,r18
  19013c:	1080004c 	andi	r2,r2,1
  190140:	b0acb03a 	or	r22,r22,r2
  190144:	a5bfff15 	stw	r22,-4(r20)
  190148:	0196b0c0 	call	196b0c <__malloc_unlock>
  19014c:	a005883a 	mov	r2,r20
  190150:	003f5306 	br	18fea0 <__alt_data_end+0xfff8fea0>
  190154:	8809883a 	mov	r4,r17
  190158:	a00b883a 	mov	r5,r20
  19015c:	018ea680 	call	18ea68 <memmove>
  190160:	003f8306 	br	18ff70 <__alt_data_end+0xfff8ff70>
  190164:	b0800404 	addi	r2,r22,16
  190168:	b8bf6016 	blt	r23,r2,18feec <__alt_data_end+0xfff8feec>
  19016c:	98800317 	ldw	r2,12(r19)
  190170:	98c00217 	ldw	r3,8(r19)
  190174:	81bfff04 	addi	r6,r16,-4
  190178:	01000904 	movi	r4,36
  19017c:	18800315 	stw	r2,12(r3)
  190180:	10c00215 	stw	r3,8(r2)
  190184:	9c400204 	addi	r17,r19,8
  190188:	21804336 	bltu	r4,r6,190298 <_realloc_r+0x50c>
  19018c:	008004c4 	movi	r2,19
  190190:	11803f2e 	bgeu	r2,r6,190290 <_realloc_r+0x504>
  190194:	a0800017 	ldw	r2,0(r20)
  190198:	98800215 	stw	r2,8(r19)
  19019c:	a0800117 	ldw	r2,4(r20)
  1901a0:	98800315 	stw	r2,12(r19)
  1901a4:	008006c4 	movi	r2,27
  1901a8:	11803f36 	bltu	r2,r6,1902a8 <_realloc_r+0x51c>
  1901ac:	98800404 	addi	r2,r19,16
  1901b0:	a5000204 	addi	r20,r20,8
  1901b4:	a0c00017 	ldw	r3,0(r20)
  1901b8:	10c00015 	stw	r3,0(r2)
  1901bc:	a0c00117 	ldw	r3,4(r20)
  1901c0:	10c00115 	stw	r3,4(r2)
  1901c4:	a0c00217 	ldw	r3,8(r20)
  1901c8:	10c00215 	stw	r3,8(r2)
  1901cc:	9d87883a 	add	r3,r19,r22
  1901d0:	bd85c83a 	sub	r2,r23,r22
  1901d4:	e0c00215 	stw	r3,8(fp)
  1901d8:	10800054 	ori	r2,r2,1
  1901dc:	18800115 	stw	r2,4(r3)
  1901e0:	98800117 	ldw	r2,4(r19)
  1901e4:	9009883a 	mov	r4,r18
  1901e8:	1080004c 	andi	r2,r2,1
  1901ec:	b0acb03a 	or	r22,r22,r2
  1901f0:	9d800115 	stw	r22,4(r19)
  1901f4:	0196b0c0 	call	196b0c <__malloc_unlock>
  1901f8:	8805883a 	mov	r2,r17
  1901fc:	003f2806 	br	18fea0 <__alt_data_end+0xfff8fea0>
  190200:	a0c00217 	ldw	r3,8(r20)
  190204:	88c00215 	stw	r3,8(r17)
  190208:	a0c00317 	ldw	r3,12(r20)
  19020c:	88c00315 	stw	r3,12(r17)
  190210:	30801126 	beq	r6,r2,190258 <_realloc_r+0x4cc>
  190214:	88800404 	addi	r2,r17,16
  190218:	a0c00404 	addi	r3,r20,16
  19021c:	003f4e06 	br	18ff58 <__alt_data_end+0xfff8ff58>
  190220:	893fff17 	ldw	r4,-4(r17)
  190224:	00bfff04 	movi	r2,-4
  190228:	a023883a 	mov	r17,r20
  19022c:	2084703a 	and	r2,r4,r2
  190230:	80a1883a 	add	r16,r16,r2
  190234:	003f0d06 	br	18fe6c <__alt_data_end+0xfff8fe6c>
  190238:	a0800217 	ldw	r2,8(r20)
  19023c:	98800415 	stw	r2,16(r19)
  190240:	a0800317 	ldw	r2,12(r20)
  190244:	98800515 	stw	r2,20(r19)
  190248:	31000a26 	beq	r6,r4,190274 <_realloc_r+0x4e8>
  19024c:	98c00604 	addi	r3,r19,24
  190250:	a5000404 	addi	r20,r20,16
  190254:	003fa806 	br	1900f8 <__alt_data_end+0xfff900f8>
  190258:	a1000417 	ldw	r4,16(r20)
  19025c:	88800604 	addi	r2,r17,24
  190260:	a0c00604 	addi	r3,r20,24
  190264:	89000415 	stw	r4,16(r17)
  190268:	a1000517 	ldw	r4,20(r20)
  19026c:	89000515 	stw	r4,20(r17)
  190270:	003f3906 	br	18ff58 <__alt_data_end+0xfff8ff58>
  190274:	a0800417 	ldw	r2,16(r20)
  190278:	a5000604 	addi	r20,r20,24
  19027c:	98c00804 	addi	r3,r19,32
  190280:	98800615 	stw	r2,24(r19)
  190284:	a0bfff17 	ldw	r2,-4(r20)
  190288:	98800715 	stw	r2,28(r19)
  19028c:	003f9a06 	br	1900f8 <__alt_data_end+0xfff900f8>
  190290:	8805883a 	mov	r2,r17
  190294:	003fc706 	br	1901b4 <__alt_data_end+0xfff901b4>
  190298:	8809883a 	mov	r4,r17
  19029c:	a00b883a 	mov	r5,r20
  1902a0:	018ea680 	call	18ea68 <memmove>
  1902a4:	003fc906 	br	1901cc <__alt_data_end+0xfff901cc>
  1902a8:	a0800217 	ldw	r2,8(r20)
  1902ac:	98800415 	stw	r2,16(r19)
  1902b0:	a0800317 	ldw	r2,12(r20)
  1902b4:	98800515 	stw	r2,20(r19)
  1902b8:	31000726 	beq	r6,r4,1902d8 <_realloc_r+0x54c>
  1902bc:	98800604 	addi	r2,r19,24
  1902c0:	a5000404 	addi	r20,r20,16
  1902c4:	003fbb06 	br	1901b4 <__alt_data_end+0xfff901b4>
  1902c8:	9009883a 	mov	r4,r18
  1902cc:	0196b0c0 	call	196b0c <__malloc_unlock>
  1902d0:	0005883a 	mov	r2,zero
  1902d4:	003ef206 	br	18fea0 <__alt_data_end+0xfff8fea0>
  1902d8:	a0c00417 	ldw	r3,16(r20)
  1902dc:	a5000604 	addi	r20,r20,24
  1902e0:	98800804 	addi	r2,r19,32
  1902e4:	98c00615 	stw	r3,24(r19)
  1902e8:	a0ffff17 	ldw	r3,-4(r20)
  1902ec:	98c00715 	stw	r3,28(r19)
  1902f0:	003fb006 	br	1901b4 <__alt_data_end+0xfff901b4>

001902f4 <__fpclassifyd>:
  1902f4:	00a00034 	movhi	r2,32768
  1902f8:	10bfffc4 	addi	r2,r2,-1
  1902fc:	2884703a 	and	r2,r5,r2
  190300:	10000726 	beq	r2,zero,190320 <__fpclassifyd+0x2c>
  190304:	00fffc34 	movhi	r3,65520
  190308:	019ff834 	movhi	r6,32736
  19030c:	28c7883a 	add	r3,r5,r3
  190310:	31bfffc4 	addi	r6,r6,-1
  190314:	30c00536 	bltu	r6,r3,19032c <__fpclassifyd+0x38>
  190318:	00800104 	movi	r2,4
  19031c:	f800283a 	ret
  190320:	2000021e 	bne	r4,zero,19032c <__fpclassifyd+0x38>
  190324:	00800084 	movi	r2,2
  190328:	f800283a 	ret
  19032c:	00dffc34 	movhi	r3,32752
  190330:	019ff834 	movhi	r6,32736
  190334:	28cb883a 	add	r5,r5,r3
  190338:	31bfffc4 	addi	r6,r6,-1
  19033c:	317ff62e 	bgeu	r6,r5,190318 <__alt_data_end+0xfff90318>
  190340:	01400434 	movhi	r5,16
  190344:	297fffc4 	addi	r5,r5,-1
  190348:	28800236 	bltu	r5,r2,190354 <__fpclassifyd+0x60>
  19034c:	008000c4 	movi	r2,3
  190350:	f800283a 	ret
  190354:	10c00226 	beq	r2,r3,190360 <__fpclassifyd+0x6c>
  190358:	0005883a 	mov	r2,zero
  19035c:	f800283a 	ret
  190360:	2005003a 	cmpeq	r2,r4,zero
  190364:	f800283a 	ret

00190368 <_sbrk_r>:
  190368:	defffd04 	addi	sp,sp,-12
  19036c:	dc000015 	stw	r16,0(sp)
  190370:	040006b4 	movhi	r16,26
  190374:	dc400115 	stw	r17,4(sp)
  190378:	840b6b04 	addi	r16,r16,11692
  19037c:	2023883a 	mov	r17,r4
  190380:	2809883a 	mov	r4,r5
  190384:	dfc00215 	stw	ra,8(sp)
  190388:	80000015 	stw	zero,0(r16)
  19038c:	0196fb00 	call	196fb0 <sbrk>
  190390:	00ffffc4 	movi	r3,-1
  190394:	10c00526 	beq	r2,r3,1903ac <_sbrk_r+0x44>
  190398:	dfc00217 	ldw	ra,8(sp)
  19039c:	dc400117 	ldw	r17,4(sp)
  1903a0:	dc000017 	ldw	r16,0(sp)
  1903a4:	dec00304 	addi	sp,sp,12
  1903a8:	f800283a 	ret
  1903ac:	80c00017 	ldw	r3,0(r16)
  1903b0:	183ff926 	beq	r3,zero,190398 <__alt_data_end+0xfff90398>
  1903b4:	88c00015 	stw	r3,0(r17)
  1903b8:	003ff706 	br	190398 <__alt_data_end+0xfff90398>

001903bc <__sread>:
  1903bc:	defffe04 	addi	sp,sp,-8
  1903c0:	dc000015 	stw	r16,0(sp)
  1903c4:	2821883a 	mov	r16,r5
  1903c8:	2940038f 	ldh	r5,14(r5)
  1903cc:	dfc00115 	stw	ra,4(sp)
  1903d0:	01921480 	call	192148 <_read_r>
  1903d4:	10000716 	blt	r2,zero,1903f4 <__sread+0x38>
  1903d8:	80c01417 	ldw	r3,80(r16)
  1903dc:	1887883a 	add	r3,r3,r2
  1903e0:	80c01415 	stw	r3,80(r16)
  1903e4:	dfc00117 	ldw	ra,4(sp)
  1903e8:	dc000017 	ldw	r16,0(sp)
  1903ec:	dec00204 	addi	sp,sp,8
  1903f0:	f800283a 	ret
  1903f4:	80c0030b 	ldhu	r3,12(r16)
  1903f8:	18fbffcc 	andi	r3,r3,61439
  1903fc:	80c0030d 	sth	r3,12(r16)
  190400:	dfc00117 	ldw	ra,4(sp)
  190404:	dc000017 	ldw	r16,0(sp)
  190408:	dec00204 	addi	sp,sp,8
  19040c:	f800283a 	ret

00190410 <__seofread>:
  190410:	0005883a 	mov	r2,zero
  190414:	f800283a 	ret

00190418 <__swrite>:
  190418:	2880030b 	ldhu	r2,12(r5)
  19041c:	defffb04 	addi	sp,sp,-20
  190420:	dcc00315 	stw	r19,12(sp)
  190424:	dc800215 	stw	r18,8(sp)
  190428:	dc400115 	stw	r17,4(sp)
  19042c:	dc000015 	stw	r16,0(sp)
  190430:	dfc00415 	stw	ra,16(sp)
  190434:	10c0400c 	andi	r3,r2,256
  190438:	2821883a 	mov	r16,r5
  19043c:	2027883a 	mov	r19,r4
  190440:	3025883a 	mov	r18,r6
  190444:	3823883a 	mov	r17,r7
  190448:	18000526 	beq	r3,zero,190460 <__swrite+0x48>
  19044c:	2940038f 	ldh	r5,14(r5)
  190450:	000d883a 	mov	r6,zero
  190454:	01c00084 	movi	r7,2
  190458:	01920ec0 	call	1920ec <_lseek_r>
  19045c:	8080030b 	ldhu	r2,12(r16)
  190460:	8140038f 	ldh	r5,14(r16)
  190464:	10bbffcc 	andi	r2,r2,61439
  190468:	9809883a 	mov	r4,r19
  19046c:	900d883a 	mov	r6,r18
  190470:	880f883a 	mov	r7,r17
  190474:	8080030d 	sth	r2,12(r16)
  190478:	dfc00417 	ldw	ra,16(sp)
  19047c:	dcc00317 	ldw	r19,12(sp)
  190480:	dc800217 	ldw	r18,8(sp)
  190484:	dc400117 	ldw	r17,4(sp)
  190488:	dc000017 	ldw	r16,0(sp)
  19048c:	dec00504 	addi	sp,sp,20
  190490:	0191bd41 	jmpi	191bd4 <_write_r>

00190494 <__sseek>:
  190494:	defffe04 	addi	sp,sp,-8
  190498:	dc000015 	stw	r16,0(sp)
  19049c:	2821883a 	mov	r16,r5
  1904a0:	2940038f 	ldh	r5,14(r5)
  1904a4:	dfc00115 	stw	ra,4(sp)
  1904a8:	01920ec0 	call	1920ec <_lseek_r>
  1904ac:	00ffffc4 	movi	r3,-1
  1904b0:	10c00826 	beq	r2,r3,1904d4 <__sseek+0x40>
  1904b4:	80c0030b 	ldhu	r3,12(r16)
  1904b8:	80801415 	stw	r2,80(r16)
  1904bc:	18c40014 	ori	r3,r3,4096
  1904c0:	80c0030d 	sth	r3,12(r16)
  1904c4:	dfc00117 	ldw	ra,4(sp)
  1904c8:	dc000017 	ldw	r16,0(sp)
  1904cc:	dec00204 	addi	sp,sp,8
  1904d0:	f800283a 	ret
  1904d4:	80c0030b 	ldhu	r3,12(r16)
  1904d8:	18fbffcc 	andi	r3,r3,61439
  1904dc:	80c0030d 	sth	r3,12(r16)
  1904e0:	dfc00117 	ldw	ra,4(sp)
  1904e4:	dc000017 	ldw	r16,0(sp)
  1904e8:	dec00204 	addi	sp,sp,8
  1904ec:	f800283a 	ret

001904f0 <__sclose>:
  1904f0:	2940038f 	ldh	r5,14(r5)
  1904f4:	0191c301 	jmpi	191c30 <_close_r>

001904f8 <strcmp>:
  1904f8:	2144b03a 	or	r2,r4,r5
  1904fc:	108000cc 	andi	r2,r2,3
  190500:	1000171e 	bne	r2,zero,190560 <strcmp+0x68>
  190504:	20800017 	ldw	r2,0(r4)
  190508:	28c00017 	ldw	r3,0(r5)
  19050c:	10c0141e 	bne	r2,r3,190560 <strcmp+0x68>
  190510:	027fbff4 	movhi	r9,65279
  190514:	4a7fbfc4 	addi	r9,r9,-257
  190518:	0086303a 	nor	r3,zero,r2
  19051c:	02202074 	movhi	r8,32897
  190520:	1245883a 	add	r2,r2,r9
  190524:	42202004 	addi	r8,r8,-32640
  190528:	10c4703a 	and	r2,r2,r3
  19052c:	1204703a 	and	r2,r2,r8
  190530:	10000226 	beq	r2,zero,19053c <strcmp+0x44>
  190534:	00001706 	br	190594 <strcmp+0x9c>
  190538:	1000161e 	bne	r2,zero,190594 <strcmp+0x9c>
  19053c:	21000104 	addi	r4,r4,4
  190540:	20c00017 	ldw	r3,0(r4)
  190544:	29400104 	addi	r5,r5,4
  190548:	29800017 	ldw	r6,0(r5)
  19054c:	1a4f883a 	add	r7,r3,r9
  190550:	00c4303a 	nor	r2,zero,r3
  190554:	3884703a 	and	r2,r7,r2
  190558:	1204703a 	and	r2,r2,r8
  19055c:	19bff626 	beq	r3,r6,190538 <__alt_data_end+0xfff90538>
  190560:	20800007 	ldb	r2,0(r4)
  190564:	1000051e 	bne	r2,zero,19057c <strcmp+0x84>
  190568:	00000606 	br	190584 <strcmp+0x8c>
  19056c:	21000044 	addi	r4,r4,1
  190570:	20800007 	ldb	r2,0(r4)
  190574:	29400044 	addi	r5,r5,1
  190578:	10000226 	beq	r2,zero,190584 <strcmp+0x8c>
  19057c:	28c00007 	ldb	r3,0(r5)
  190580:	10fffa26 	beq	r2,r3,19056c <__alt_data_end+0xfff9056c>
  190584:	20800003 	ldbu	r2,0(r4)
  190588:	28c00003 	ldbu	r3,0(r5)
  19058c:	10c5c83a 	sub	r2,r2,r3
  190590:	f800283a 	ret
  190594:	0005883a 	mov	r2,zero
  190598:	f800283a 	ret

0019059c <__sprint_r.part.0>:
  19059c:	28801917 	ldw	r2,100(r5)
  1905a0:	defff604 	addi	sp,sp,-40
  1905a4:	dd400515 	stw	r21,20(sp)
  1905a8:	dcc00315 	stw	r19,12(sp)
  1905ac:	dfc00915 	stw	ra,36(sp)
  1905b0:	df000815 	stw	fp,32(sp)
  1905b4:	ddc00715 	stw	r23,28(sp)
  1905b8:	dd800615 	stw	r22,24(sp)
  1905bc:	dd000415 	stw	r20,16(sp)
  1905c0:	dc800215 	stw	r18,8(sp)
  1905c4:	dc400115 	stw	r17,4(sp)
  1905c8:	dc000015 	stw	r16,0(sp)
  1905cc:	1088000c 	andi	r2,r2,8192
  1905d0:	2827883a 	mov	r19,r5
  1905d4:	302b883a 	mov	r21,r6
  1905d8:	10002d26 	beq	r2,zero,190690 <__sprint_r.part.0+0xf4>
  1905dc:	30800217 	ldw	r2,8(r6)
  1905e0:	35800017 	ldw	r22,0(r6)
  1905e4:	10002826 	beq	r2,zero,190688 <__sprint_r.part.0+0xec>
  1905e8:	2029883a 	mov	r20,r4
  1905ec:	b5c00104 	addi	r23,r22,4
  1905f0:	04bfffc4 	movi	r18,-1
  1905f4:	bc400017 	ldw	r17,0(r23)
  1905f8:	b4000017 	ldw	r16,0(r22)
  1905fc:	0039883a 	mov	fp,zero
  190600:	8822d0ba 	srli	r17,r17,2
  190604:	04400316 	blt	zero,r17,190614 <__sprint_r.part.0+0x78>
  190608:	00001806 	br	19066c <__sprint_r.part.0+0xd0>
  19060c:	84000104 	addi	r16,r16,4
  190610:	8f001526 	beq	r17,fp,190668 <__sprint_r.part.0+0xcc>
  190614:	81400017 	ldw	r5,0(r16)
  190618:	a009883a 	mov	r4,r20
  19061c:	980d883a 	mov	r6,r19
  190620:	0191e600 	call	191e60 <_fputwc_r>
  190624:	e7000044 	addi	fp,fp,1
  190628:	14bff81e 	bne	r2,r18,19060c <__alt_data_end+0xfff9060c>
  19062c:	9005883a 	mov	r2,r18
  190630:	a8000215 	stw	zero,8(r21)
  190634:	a8000115 	stw	zero,4(r21)
  190638:	dfc00917 	ldw	ra,36(sp)
  19063c:	df000817 	ldw	fp,32(sp)
  190640:	ddc00717 	ldw	r23,28(sp)
  190644:	dd800617 	ldw	r22,24(sp)
  190648:	dd400517 	ldw	r21,20(sp)
  19064c:	dd000417 	ldw	r20,16(sp)
  190650:	dcc00317 	ldw	r19,12(sp)
  190654:	dc800217 	ldw	r18,8(sp)
  190658:	dc400117 	ldw	r17,4(sp)
  19065c:	dc000017 	ldw	r16,0(sp)
  190660:	dec00a04 	addi	sp,sp,40
  190664:	f800283a 	ret
  190668:	a8800217 	ldw	r2,8(r21)
  19066c:	8c63883a 	add	r17,r17,r17
  190670:	8c63883a 	add	r17,r17,r17
  190674:	1445c83a 	sub	r2,r2,r17
  190678:	a8800215 	stw	r2,8(r21)
  19067c:	b5800204 	addi	r22,r22,8
  190680:	bdc00204 	addi	r23,r23,8
  190684:	103fdb1e 	bne	r2,zero,1905f4 <__alt_data_end+0xfff905f4>
  190688:	0005883a 	mov	r2,zero
  19068c:	003fe806 	br	190630 <__alt_data_end+0xfff90630>
  190690:	018d8ec0 	call	18d8ec <__sfvwrite_r>
  190694:	003fe606 	br	190630 <__alt_data_end+0xfff90630>

00190698 <__sprint_r>:
  190698:	30c00217 	ldw	r3,8(r6)
  19069c:	18000126 	beq	r3,zero,1906a4 <__sprint_r+0xc>
  1906a0:	019059c1 	jmpi	19059c <__sprint_r.part.0>
  1906a4:	30000115 	stw	zero,4(r6)
  1906a8:	0005883a 	mov	r2,zero
  1906ac:	f800283a 	ret

001906b0 <___vfiprintf_internal_r>:
  1906b0:	deffca04 	addi	sp,sp,-216
  1906b4:	dcc02f15 	stw	r19,188(sp)
  1906b8:	dfc03515 	stw	ra,212(sp)
  1906bc:	df003415 	stw	fp,208(sp)
  1906c0:	ddc03315 	stw	r23,204(sp)
  1906c4:	dd803215 	stw	r22,200(sp)
  1906c8:	dd403115 	stw	r21,196(sp)
  1906cc:	dd003015 	stw	r20,192(sp)
  1906d0:	dc802e15 	stw	r18,184(sp)
  1906d4:	dc402d15 	stw	r17,180(sp)
  1906d8:	dc002c15 	stw	r16,176(sp)
  1906dc:	d9002215 	stw	r4,136(sp)
  1906e0:	d9402115 	stw	r5,132(sp)
  1906e4:	d9c02315 	stw	r7,140(sp)
  1906e8:	3027883a 	mov	r19,r6
  1906ec:	20000226 	beq	r4,zero,1906f8 <___vfiprintf_internal_r+0x48>
  1906f0:	20800e17 	ldw	r2,56(r4)
  1906f4:	10018d26 	beq	r2,zero,190d2c <___vfiprintf_internal_r+0x67c>
  1906f8:	d8c02117 	ldw	r3,132(sp)
  1906fc:	1880030b 	ldhu	r2,12(r3)
  190700:	10c8000c 	andi	r3,r2,8192
  190704:	1800071e 	bne	r3,zero,190724 <___vfiprintf_internal_r+0x74>
  190708:	d9402117 	ldw	r5,132(sp)
  19070c:	00f7ffc4 	movi	r3,-8193
  190710:	10880014 	ori	r2,r2,8192
  190714:	29001917 	ldw	r4,100(r5)
  190718:	2880030d 	sth	r2,12(r5)
  19071c:	20c6703a 	and	r3,r4,r3
  190720:	28c01915 	stw	r3,100(r5)
  190724:	10c0020c 	andi	r3,r2,8
  190728:	18016126 	beq	r3,zero,190cb0 <___vfiprintf_internal_r+0x600>
  19072c:	d9002117 	ldw	r4,132(sp)
  190730:	20c00417 	ldw	r3,16(r4)
  190734:	18015e26 	beq	r3,zero,190cb0 <___vfiprintf_internal_r+0x600>
  190738:	1080068c 	andi	r2,r2,26
  19073c:	00c00284 	movi	r3,10
  190740:	10c16426 	beq	r2,r3,190cd4 <___vfiprintf_internal_r+0x624>
  190744:	d9001a04 	addi	r4,sp,104
  190748:	d94019c4 	addi	r5,sp,103
  19074c:	044006b4 	movhi	r17,26
  190750:	2145c83a 	sub	r2,r4,r5
  190754:	8c7d6804 	addi	r17,r17,-2656
  190758:	d9001e15 	stw	r4,120(sp)
  19075c:	d9401f15 	stw	r5,124(sp)
  190760:	dec01a15 	stw	sp,104(sp)
  190764:	d8001c15 	stw	zero,112(sp)
  190768:	d8001b15 	stw	zero,108(sp)
  19076c:	d8002715 	stw	zero,156(sp)
  190770:	d8002515 	stw	zero,148(sp)
  190774:	d8802815 	stw	r2,160(sp)
  190778:	d829883a 	mov	r20,sp
  19077c:	982d883a 	mov	r22,r19
  190780:	b0800007 	ldb	r2,0(r22)
  190784:	10038126 	beq	r2,zero,19158c <___vfiprintf_internal_r+0xedc>
  190788:	01000944 	movi	r4,37
  19078c:	11037f26 	beq	r2,r4,19158c <___vfiprintf_internal_r+0xedc>
  190790:	b005883a 	mov	r2,r22
  190794:	00000106 	br	19079c <___vfiprintf_internal_r+0xec>
  190798:	19000326 	beq	r3,r4,1907a8 <___vfiprintf_internal_r+0xf8>
  19079c:	10800044 	addi	r2,r2,1
  1907a0:	10c00007 	ldb	r3,0(r2)
  1907a4:	183ffc1e 	bne	r3,zero,190798 <__alt_data_end+0xfff90798>
  1907a8:	15a1c83a 	sub	r16,r2,r22
  1907ac:	102b883a 	mov	r21,r2
  1907b0:	80001026 	beq	r16,zero,1907f4 <___vfiprintf_internal_r+0x144>
  1907b4:	d8c01c17 	ldw	r3,112(sp)
  1907b8:	d8801b17 	ldw	r2,108(sp)
  1907bc:	a5800015 	stw	r22,0(r20)
  1907c0:	80c7883a 	add	r3,r16,r3
  1907c4:	10800044 	addi	r2,r2,1
  1907c8:	a4000115 	stw	r16,4(r20)
  1907cc:	d8c01c15 	stw	r3,112(sp)
  1907d0:	d8801b15 	stw	r2,108(sp)
  1907d4:	010001c4 	movi	r4,7
  1907d8:	2080730e 	bge	r4,r2,1909a8 <___vfiprintf_internal_r+0x2f8>
  1907dc:	1803781e 	bne	r3,zero,1915c0 <___vfiprintf_internal_r+0xf10>
  1907e0:	d8c02517 	ldw	r3,148(sp)
  1907e4:	d8001b15 	stw	zero,108(sp)
  1907e8:	d829883a 	mov	r20,sp
  1907ec:	1c07883a 	add	r3,r3,r16
  1907f0:	d8c02515 	stw	r3,148(sp)
  1907f4:	a8800007 	ldb	r2,0(r21)
  1907f8:	1002a126 	beq	r2,zero,191280 <___vfiprintf_internal_r+0xbd0>
  1907fc:	a8800044 	addi	r2,r21,1
  190800:	a9800047 	ldb	r6,1(r21)
  190804:	d8001d85 	stb	zero,118(sp)
  190808:	d8002005 	stb	zero,128(sp)
  19080c:	043fffc4 	movi	r16,-1
  190810:	d8002415 	stw	zero,144(sp)
  190814:	0025883a 	mov	r18,zero
  190818:	05401604 	movi	r21,88
  19081c:	04c00244 	movi	r19,9
  190820:	15800044 	addi	r22,r2,1
  190824:	30bff804 	addi	r2,r6,-32
  190828:	a8823d36 	bltu	r21,r2,191120 <___vfiprintf_internal_r+0xa70>
  19082c:	100490ba 	slli	r2,r2,2
  190830:	01000674 	movhi	r4,25
  190834:	21021104 	addi	r4,r4,2116
  190838:	1105883a 	add	r2,r2,r4
  19083c:	10800017 	ldw	r2,0(r2)
  190840:	1000683a 	jmp	r2
  190844:	00190f60 	cmpeqi	zero,zero,25661
  190848:	00191120 	cmpeqi	zero,zero,25668
  19084c:	00191120 	cmpeqi	zero,zero,25668
  190850:	00190f7c 	xorhi	zero,zero,25661
  190854:	00191120 	cmpeqi	zero,zero,25668
  190858:	00191120 	cmpeqi	zero,zero,25668
  19085c:	00191120 	cmpeqi	zero,zero,25668
  190860:	00191120 	cmpeqi	zero,zero,25668
  190864:	00191120 	cmpeqi	zero,zero,25668
  190868:	00191120 	cmpeqi	zero,zero,25668
  19086c:	00190f8c 	andi	zero,zero,25662
  190870:	00190fb4 	movhi	zero,25662
  190874:	00191120 	cmpeqi	zero,zero,25668
  190878:	00190d34 	movhi	zero,25652
  19087c:	00190eb8 	rdprs	zero,zero,25658
  190880:	00191120 	cmpeqi	zero,zero,25668
  190884:	00190e28 	cmpgeui	zero,zero,25656
  190888:	00190e38 	rdprs	zero,zero,25656
  19088c:	00190e38 	rdprs	zero,zero,25656
  190890:	00190e38 	rdprs	zero,zero,25656
  190894:	00190e38 	rdprs	zero,zero,25656
  190898:	00190e38 	rdprs	zero,zero,25656
  19089c:	00190e38 	rdprs	zero,zero,25656
  1908a0:	00190e38 	rdprs	zero,zero,25656
  1908a4:	00190e38 	rdprs	zero,zero,25656
  1908a8:	00190e38 	rdprs	zero,zero,25656
  1908ac:	00191120 	cmpeqi	zero,zero,25668
  1908b0:	00191120 	cmpeqi	zero,zero,25668
  1908b4:	00191120 	cmpeqi	zero,zero,25668
  1908b8:	00191120 	cmpeqi	zero,zero,25668
  1908bc:	00191120 	cmpeqi	zero,zero,25668
  1908c0:	00191120 	cmpeqi	zero,zero,25668
  1908c4:	00191120 	cmpeqi	zero,zero,25668
  1908c8:	00191120 	cmpeqi	zero,zero,25668
  1908cc:	00191120 	cmpeqi	zero,zero,25668
  1908d0:	00191120 	cmpeqi	zero,zero,25668
  1908d4:	00190e70 	cmpltui	zero,zero,25657
  1908d8:	00191120 	cmpeqi	zero,zero,25668
  1908dc:	00191120 	cmpeqi	zero,zero,25668
  1908e0:	00191120 	cmpeqi	zero,zero,25668
  1908e4:	00191120 	cmpeqi	zero,zero,25668
  1908e8:	00191120 	cmpeqi	zero,zero,25668
  1908ec:	00191120 	cmpeqi	zero,zero,25668
  1908f0:	00191120 	cmpeqi	zero,zero,25668
  1908f4:	00191120 	cmpeqi	zero,zero,25668
  1908f8:	00191120 	cmpeqi	zero,zero,25668
  1908fc:	00191120 	cmpeqi	zero,zero,25668
  190900:	001909f0 	cmpltui	zero,zero,25639
  190904:	00191120 	cmpeqi	zero,zero,25668
  190908:	00191120 	cmpeqi	zero,zero,25668
  19090c:	00191120 	cmpeqi	zero,zero,25668
  190910:	00191120 	cmpeqi	zero,zero,25668
  190914:	00191120 	cmpeqi	zero,zero,25668
  190918:	001909bc 	xorhi	zero,zero,25638
  19091c:	00191120 	cmpeqi	zero,zero,25668
  190920:	00191120 	cmpeqi	zero,zero,25668
  190924:	00190da4 	muli	zero,zero,25654
  190928:	00191120 	cmpeqi	zero,zero,25668
  19092c:	00191120 	cmpeqi	zero,zero,25668
  190930:	00191120 	cmpeqi	zero,zero,25668
  190934:	00191120 	cmpeqi	zero,zero,25668
  190938:	00191120 	cmpeqi	zero,zero,25668
  19093c:	00191120 	cmpeqi	zero,zero,25668
  190940:	00191120 	cmpeqi	zero,zero,25668
  190944:	00191120 	cmpeqi	zero,zero,25668
  190948:	00191120 	cmpeqi	zero,zero,25668
  19094c:	00191120 	cmpeqi	zero,zero,25668
  190950:	00190dfc 	xorhi	zero,zero,25655
  190954:	00190fc8 	cmpgei	zero,zero,25663
  190958:	00191120 	cmpeqi	zero,zero,25668
  19095c:	00191120 	cmpeqi	zero,zero,25668
  190960:	00191120 	cmpeqi	zero,zero,25668
  190964:	00191084 	movi	zero,25666
  190968:	00190fc8 	cmpgei	zero,zero,25663
  19096c:	00191120 	cmpeqi	zero,zero,25668
  190970:	00191120 	cmpeqi	zero,zero,25668
  190974:	00191094 	movui	zero,25666
  190978:	00191120 	cmpeqi	zero,zero,25668
  19097c:	00190f08 	cmpgei	zero,zero,25660
  190980:	001909f4 	movhi	zero,25639
  190984:	001910ac 	andhi	zero,zero,25666
  190988:	001910ec 	andhi	zero,zero,25667
  19098c:	00191120 	cmpeqi	zero,zero,25668
  190990:	00191000 	call	19100 <__alt_mem_sram-0x166f00>
  190994:	00191120 	cmpeqi	zero,zero,25668
  190998:	001909c0 	call	1909c <__alt_mem_sram-0x166f64>
  19099c:	00191120 	cmpeqi	zero,zero,25668
  1909a0:	00191120 	cmpeqi	zero,zero,25668
  1909a4:	00191048 	cmpgei	zero,zero,25665
  1909a8:	a5000204 	addi	r20,r20,8
  1909ac:	d8c02517 	ldw	r3,148(sp)
  1909b0:	1c07883a 	add	r3,r3,r16
  1909b4:	d8c02515 	stw	r3,148(sp)
  1909b8:	003f8e06 	br	1907f4 <__alt_data_end+0xfff907f4>
  1909bc:	94800414 	ori	r18,r18,16
  1909c0:	9080080c 	andi	r2,r18,32
  1909c4:	1001cd1e 	bne	r2,zero,1910fc <___vfiprintf_internal_r+0xa4c>
  1909c8:	9080040c 	andi	r2,r18,16
  1909cc:	10034e26 	beq	r2,zero,191708 <___vfiprintf_internal_r+0x1058>
  1909d0:	d9002317 	ldw	r4,140(sp)
  1909d4:	002f883a 	mov	r23,zero
  1909d8:	00800044 	movi	r2,1
  1909dc:	24c00017 	ldw	r19,0(r4)
  1909e0:	21000104 	addi	r4,r4,4
  1909e4:	d9002315 	stw	r4,140(sp)
  1909e8:	9807883a 	mov	r3,r19
  1909ec:	00000c06 	br	190a20 <___vfiprintf_internal_r+0x370>
  1909f0:	94800414 	ori	r18,r18,16
  1909f4:	9080080c 	andi	r2,r18,32
  1909f8:	1001501e 	bne	r2,zero,190f3c <___vfiprintf_internal_r+0x88c>
  1909fc:	9080040c 	andi	r2,r18,16
  190a00:	10033726 	beq	r2,zero,1916e0 <___vfiprintf_internal_r+0x1030>
  190a04:	d9002317 	ldw	r4,140(sp)
  190a08:	002f883a 	mov	r23,zero
  190a0c:	0005883a 	mov	r2,zero
  190a10:	24c00017 	ldw	r19,0(r4)
  190a14:	21000104 	addi	r4,r4,4
  190a18:	d9002315 	stw	r4,140(sp)
  190a1c:	9807883a 	mov	r3,r19
  190a20:	d8001d85 	stb	zero,118(sp)
  190a24:	dc002015 	stw	r16,128(sp)
  190a28:	0015883a 	mov	r10,zero
  190a2c:	80000216 	blt	r16,zero,190a38 <___vfiprintf_internal_r+0x388>
  190a30:	013fdfc4 	movi	r4,-129
  190a34:	9124703a 	and	r18,r18,r4
  190a38:	1801ec1e 	bne	r3,zero,1911ec <___vfiprintf_internal_r+0xb3c>
  190a3c:	8002b826 	beq	r16,zero,191520 <___vfiprintf_internal_r+0xe70>
  190a40:	10803fcc 	andi	r2,r2,255
  190a44:	00c00044 	movi	r3,1
  190a48:	10c20726 	beq	r2,r3,191268 <___vfiprintf_internal_r+0xbb8>
  190a4c:	00c00084 	movi	r3,2
  190a50:	df001a04 	addi	fp,sp,104
  190a54:	10c0bb1e 	bne	r2,r3,190d44 <___vfiprintf_internal_r+0x694>
  190a58:	d9002717 	ldw	r4,156(sp)
  190a5c:	988003cc 	andi	r2,r19,15
  190a60:	b806973a 	slli	r3,r23,28
  190a64:	2085883a 	add	r2,r4,r2
  190a68:	9826d13a 	srli	r19,r19,4
  190a6c:	10800003 	ldbu	r2,0(r2)
  190a70:	b82ed13a 	srli	r23,r23,4
  190a74:	e73fffc4 	addi	fp,fp,-1
  190a78:	1ce6b03a 	or	r19,r3,r19
  190a7c:	e0800005 	stb	r2,0(fp)
  190a80:	9dc4b03a 	or	r2,r19,r23
  190a84:	103ff51e 	bne	r2,zero,190a5c <__alt_data_end+0xfff90a5c>
  190a88:	d8c01e17 	ldw	r3,120(sp)
  190a8c:	1f07c83a 	sub	r3,r3,fp
  190a90:	d8c02015 	stw	r3,128(sp)
  190a94:	dd402017 	ldw	r21,128(sp)
  190a98:	ac00010e 	bge	r21,r16,190aa0 <___vfiprintf_internal_r+0x3f0>
  190a9c:	802b883a 	mov	r21,r16
  190aa0:	52803fcc 	andi	r10,r10,255
  190aa4:	5280201c 	xori	r10,r10,128
  190aa8:	52bfe004 	addi	r10,r10,-128
  190aac:	50000126 	beq	r10,zero,190ab4 <___vfiprintf_internal_r+0x404>
  190ab0:	ad400044 	addi	r21,r21,1
  190ab4:	91c0008c 	andi	r7,r18,2
  190ab8:	38000126 	beq	r7,zero,190ac0 <___vfiprintf_internal_r+0x410>
  190abc:	ad400084 	addi	r21,r21,2
  190ac0:	95c0210c 	andi	r23,r18,132
  190ac4:	b801ad1e 	bne	r23,zero,19117c <___vfiprintf_internal_r+0xacc>
  190ac8:	d9002417 	ldw	r4,144(sp)
  190acc:	2567c83a 	sub	r19,r4,r21
  190ad0:	04c1aa0e 	bge	zero,r19,19117c <___vfiprintf_internal_r+0xacc>
  190ad4:	00c00404 	movi	r3,16
  190ad8:	d8801c17 	ldw	r2,112(sp)
  190adc:	1cc37f0e 	bge	r3,r19,1918dc <___vfiprintf_internal_r+0x122c>
  190ae0:	010006b4 	movhi	r4,26
  190ae4:	213d6c04 	addi	r4,r4,-2640
  190ae8:	dc002915 	stw	r16,164(sp)
  190aec:	d9801b17 	ldw	r6,108(sp)
  190af0:	9821883a 	mov	r16,r19
  190af4:	d9002615 	stw	r4,152(sp)
  190af8:	02c001c4 	movi	r11,7
  190afc:	3827883a 	mov	r19,r7
  190b00:	00000506 	br	190b18 <___vfiprintf_internal_r+0x468>
  190b04:	31400084 	addi	r5,r6,2
  190b08:	a5000204 	addi	r20,r20,8
  190b0c:	200d883a 	mov	r6,r4
  190b10:	843ffc04 	addi	r16,r16,-16
  190b14:	1c000f0e 	bge	r3,r16,190b54 <___vfiprintf_internal_r+0x4a4>
  190b18:	014006b4 	movhi	r5,26
  190b1c:	10800404 	addi	r2,r2,16
  190b20:	31000044 	addi	r4,r6,1
  190b24:	297d6c04 	addi	r5,r5,-2640
  190b28:	a1400015 	stw	r5,0(r20)
  190b2c:	a0c00115 	stw	r3,4(r20)
  190b30:	d8801c15 	stw	r2,112(sp)
  190b34:	d9001b15 	stw	r4,108(sp)
  190b38:	593ff20e 	bge	r11,r4,190b04 <__alt_data_end+0xfff90b04>
  190b3c:	1001811e 	bne	r2,zero,191144 <___vfiprintf_internal_r+0xa94>
  190b40:	843ffc04 	addi	r16,r16,-16
  190b44:	000d883a 	mov	r6,zero
  190b48:	01400044 	movi	r5,1
  190b4c:	d829883a 	mov	r20,sp
  190b50:	1c3ff116 	blt	r3,r16,190b18 <__alt_data_end+0xfff90b18>
  190b54:	980f883a 	mov	r7,r19
  190b58:	8027883a 	mov	r19,r16
  190b5c:	dc002917 	ldw	r16,164(sp)
  190b60:	d8c02617 	ldw	r3,152(sp)
  190b64:	9885883a 	add	r2,r19,r2
  190b68:	a4c00115 	stw	r19,4(r20)
  190b6c:	a0c00015 	stw	r3,0(r20)
  190b70:	d8801c15 	stw	r2,112(sp)
  190b74:	d9401b15 	stw	r5,108(sp)
  190b78:	00c001c4 	movi	r3,7
  190b7c:	19427416 	blt	r3,r5,191550 <___vfiprintf_internal_r+0xea0>
  190b80:	d8c01d87 	ldb	r3,118(sp)
  190b84:	a5000204 	addi	r20,r20,8
  190b88:	29000044 	addi	r4,r5,1
  190b8c:	1801801e 	bne	r3,zero,191190 <___vfiprintf_internal_r+0xae0>
  190b90:	38000c26 	beq	r7,zero,190bc4 <___vfiprintf_internal_r+0x514>
  190b94:	d8c01d04 	addi	r3,sp,116
  190b98:	10800084 	addi	r2,r2,2
  190b9c:	a0c00015 	stw	r3,0(r20)
  190ba0:	00c00084 	movi	r3,2
  190ba4:	a0c00115 	stw	r3,4(r20)
  190ba8:	d8801c15 	stw	r2,112(sp)
  190bac:	d9001b15 	stw	r4,108(sp)
  190bb0:	00c001c4 	movi	r3,7
  190bb4:	19025516 	blt	r3,r4,19150c <___vfiprintf_internal_r+0xe5c>
  190bb8:	200b883a 	mov	r5,r4
  190bbc:	a5000204 	addi	r20,r20,8
  190bc0:	21000044 	addi	r4,r4,1
  190bc4:	00c02004 	movi	r3,128
  190bc8:	b8c21326 	beq	r23,r3,191418 <___vfiprintf_internal_r+0xd68>
  190bcc:	d8c02017 	ldw	r3,128(sp)
  190bd0:	80e1c83a 	sub	r16,r16,r3
  190bd4:	0400230e 	bge	zero,r16,190c64 <___vfiprintf_internal_r+0x5b4>
  190bd8:	04c00404 	movi	r19,16
  190bdc:	9c03240e 	bge	r19,r16,191870 <___vfiprintf_internal_r+0x11c0>
  190be0:	00c006b4 	movhi	r3,26
  190be4:	18fd6804 	addi	r3,r3,-2656
  190be8:	d8c02615 	stw	r3,152(sp)
  190bec:	05c001c4 	movi	r23,7
  190bf0:	00000506 	br	190c08 <___vfiprintf_internal_r+0x558>
  190bf4:	29000084 	addi	r4,r5,2
  190bf8:	a5000204 	addi	r20,r20,8
  190bfc:	180b883a 	mov	r5,r3
  190c00:	843ffc04 	addi	r16,r16,-16
  190c04:	9c000d0e 	bge	r19,r16,190c3c <___vfiprintf_internal_r+0x58c>
  190c08:	10800404 	addi	r2,r2,16
  190c0c:	28c00044 	addi	r3,r5,1
  190c10:	a4400015 	stw	r17,0(r20)
  190c14:	a4c00115 	stw	r19,4(r20)
  190c18:	d8801c15 	stw	r2,112(sp)
  190c1c:	d8c01b15 	stw	r3,108(sp)
  190c20:	b8fff40e 	bge	r23,r3,190bf4 <__alt_data_end+0xfff90bf4>
  190c24:	1001671e 	bne	r2,zero,1911c4 <___vfiprintf_internal_r+0xb14>
  190c28:	843ffc04 	addi	r16,r16,-16
  190c2c:	01000044 	movi	r4,1
  190c30:	000b883a 	mov	r5,zero
  190c34:	d829883a 	mov	r20,sp
  190c38:	9c3ff316 	blt	r19,r16,190c08 <__alt_data_end+0xfff90c08>
  190c3c:	d8c02617 	ldw	r3,152(sp)
  190c40:	1405883a 	add	r2,r2,r16
  190c44:	a4000115 	stw	r16,4(r20)
  190c48:	a0c00015 	stw	r3,0(r20)
  190c4c:	d8801c15 	stw	r2,112(sp)
  190c50:	d9001b15 	stw	r4,108(sp)
  190c54:	00c001c4 	movi	r3,7
  190c58:	19019516 	blt	r3,r4,1912b0 <___vfiprintf_internal_r+0xc00>
  190c5c:	a5000204 	addi	r20,r20,8
  190c60:	21000044 	addi	r4,r4,1
  190c64:	d8c02017 	ldw	r3,128(sp)
  190c68:	a7000015 	stw	fp,0(r20)
  190c6c:	d9001b15 	stw	r4,108(sp)
  190c70:	10c5883a 	add	r2,r2,r3
  190c74:	a0c00115 	stw	r3,4(r20)
  190c78:	d8801c15 	stw	r2,112(sp)
  190c7c:	00c001c4 	movi	r3,7
  190c80:	1901930e 	bge	r3,r4,1912d0 <___vfiprintf_internal_r+0xc20>
  190c84:	1002431e 	bne	r2,zero,191594 <___vfiprintf_internal_r+0xee4>
  190c88:	d8001b15 	stw	zero,108(sp)
  190c8c:	9480010c 	andi	r18,r18,4
  190c90:	9002391e 	bne	r18,zero,191578 <___vfiprintf_internal_r+0xec8>
  190c94:	d8802417 	ldw	r2,144(sp)
  190c98:	a880010e 	bge	r21,r2,190ca0 <___vfiprintf_internal_r+0x5f0>
  190c9c:	102b883a 	mov	r21,r2
  190ca0:	d8c02517 	ldw	r3,148(sp)
  190ca4:	1d47883a 	add	r3,r3,r21
  190ca8:	d8c02515 	stw	r3,148(sp)
  190cac:	0001cd06 	br	1913e4 <___vfiprintf_internal_r+0xd34>
  190cb0:	d9002217 	ldw	r4,136(sp)
  190cb4:	d9402117 	ldw	r5,132(sp)
  190cb8:	018b3f00 	call	18b3f0 <__swsetup_r>
  190cbc:	10000e1e 	bne	r2,zero,190cf8 <___vfiprintf_internal_r+0x648>
  190cc0:	d9402117 	ldw	r5,132(sp)
  190cc4:	00c00284 	movi	r3,10
  190cc8:	2880030b 	ldhu	r2,12(r5)
  190ccc:	1080068c 	andi	r2,r2,26
  190cd0:	10fe9c1e 	bne	r2,r3,190744 <__alt_data_end+0xfff90744>
  190cd4:	d8c02117 	ldw	r3,132(sp)
  190cd8:	1880038f 	ldh	r2,14(r3)
  190cdc:	103e9916 	blt	r2,zero,190744 <__alt_data_end+0xfff90744>
  190ce0:	d9002217 	ldw	r4,136(sp)
  190ce4:	d9c02317 	ldw	r7,140(sp)
  190ce8:	180b883a 	mov	r5,r3
  190cec:	980d883a 	mov	r6,r19
  190cf0:	01919c40 	call	1919c4 <__sbprintf>
  190cf4:	00000106 	br	190cfc <___vfiprintf_internal_r+0x64c>
  190cf8:	00bfffc4 	movi	r2,-1
  190cfc:	dfc03517 	ldw	ra,212(sp)
  190d00:	df003417 	ldw	fp,208(sp)
  190d04:	ddc03317 	ldw	r23,204(sp)
  190d08:	dd803217 	ldw	r22,200(sp)
  190d0c:	dd403117 	ldw	r21,196(sp)
  190d10:	dd003017 	ldw	r20,192(sp)
  190d14:	dcc02f17 	ldw	r19,188(sp)
  190d18:	dc802e17 	ldw	r18,184(sp)
  190d1c:	dc402d17 	ldw	r17,180(sp)
  190d20:	dc002c17 	ldw	r16,176(sp)
  190d24:	dec03604 	addi	sp,sp,216
  190d28:	f800283a 	ret
  190d2c:	018d4880 	call	18d488 <__sinit>
  190d30:	003e7106 	br	1906f8 <__alt_data_end+0xfff906f8>
  190d34:	b005883a 	mov	r2,r22
  190d38:	94800114 	ori	r18,r18,4
  190d3c:	b1800007 	ldb	r6,0(r22)
  190d40:	003eb706 	br	190820 <__alt_data_end+0xfff90820>
  190d44:	9806d0fa 	srli	r3,r19,3
  190d48:	b808977a 	slli	r4,r23,29
  190d4c:	b82ed0fa 	srli	r23,r23,3
  190d50:	9cc001cc 	andi	r19,r19,7
  190d54:	98800c04 	addi	r2,r19,48
  190d58:	e73fffc4 	addi	fp,fp,-1
  190d5c:	20e6b03a 	or	r19,r4,r3
  190d60:	e0800005 	stb	r2,0(fp)
  190d64:	9dc6b03a 	or	r3,r19,r23
  190d68:	183ff61e 	bne	r3,zero,190d44 <__alt_data_end+0xfff90d44>
  190d6c:	90c0004c 	andi	r3,r18,1
  190d70:	e009883a 	mov	r4,fp
  190d74:	183f4426 	beq	r3,zero,190a88 <__alt_data_end+0xfff90a88>
  190d78:	10803fcc 	andi	r2,r2,255
  190d7c:	1080201c 	xori	r2,r2,128
  190d80:	10bfe004 	addi	r2,r2,-128
  190d84:	00c00c04 	movi	r3,48
  190d88:	10ff3f26 	beq	r2,r3,190a88 <__alt_data_end+0xfff90a88>
  190d8c:	20ffffc5 	stb	r3,-1(r4)
  190d90:	d8c01e17 	ldw	r3,120(sp)
  190d94:	e73fffc4 	addi	fp,fp,-1
  190d98:	1f07c83a 	sub	r3,r3,fp
  190d9c:	d8c02015 	stw	r3,128(sp)
  190da0:	003f3c06 	br	190a94 <__alt_data_end+0xfff90a94>
  190da4:	d8c02003 	ldbu	r3,128(sp)
  190da8:	010006b4 	movhi	r4,26
  190dac:	213d0504 	addi	r4,r4,-3052
  190db0:	d8c01d85 	stb	r3,118(sp)
  190db4:	d9002715 	stw	r4,156(sp)
  190db8:	9080080c 	andi	r2,r18,32
  190dbc:	1000a926 	beq	r2,zero,191064 <___vfiprintf_internal_r+0x9b4>
  190dc0:	d9002317 	ldw	r4,140(sp)
  190dc4:	24c00017 	ldw	r19,0(r4)
  190dc8:	25c00117 	ldw	r23,4(r4)
  190dcc:	21000204 	addi	r4,r4,8
  190dd0:	d9002315 	stw	r4,140(sp)
  190dd4:	9080004c 	andi	r2,r18,1
  190dd8:	1001f626 	beq	r2,zero,1915b4 <___vfiprintf_internal_r+0xf04>
  190ddc:	9dc6b03a 	or	r3,r19,r23
  190de0:	18023d26 	beq	r3,zero,1916d8 <___vfiprintf_internal_r+0x1028>
  190de4:	00800c04 	movi	r2,48
  190de8:	d8801d05 	stb	r2,116(sp)
  190dec:	d9801d45 	stb	r6,117(sp)
  190df0:	94800094 	ori	r18,r18,2
  190df4:	00800084 	movi	r2,2
  190df8:	003f0906 	br	190a20 <__alt_data_end+0xfff90a20>
  190dfc:	d9002317 	ldw	r4,140(sp)
  190e00:	05400044 	movi	r21,1
  190e04:	d8001d85 	stb	zero,118(sp)
  190e08:	20800017 	ldw	r2,0(r4)
  190e0c:	21000104 	addi	r4,r4,4
  190e10:	d9002315 	stw	r4,140(sp)
  190e14:	d8801005 	stb	r2,64(sp)
  190e18:	dd402015 	stw	r21,128(sp)
  190e1c:	df001004 	addi	fp,sp,64
  190e20:	0021883a 	mov	r16,zero
  190e24:	003f2306 	br	190ab4 <__alt_data_end+0xfff90ab4>
  190e28:	94802014 	ori	r18,r18,128
  190e2c:	b005883a 	mov	r2,r22
  190e30:	b1800007 	ldb	r6,0(r22)
  190e34:	003e7a06 	br	190820 <__alt_data_end+0xfff90820>
  190e38:	b039883a 	mov	fp,r22
  190e3c:	d8002415 	stw	zero,144(sp)
  190e40:	35fff404 	addi	r23,r6,-48
  190e44:	0009883a 	mov	r4,zero
  190e48:	01400284 	movi	r5,10
  190e4c:	0187dd80 	call	187dd8 <__mulsi3>
  190e50:	e1800007 	ldb	r6,0(fp)
  190e54:	15c9883a 	add	r4,r2,r23
  190e58:	b5800044 	addi	r22,r22,1
  190e5c:	35fff404 	addi	r23,r6,-48
  190e60:	b039883a 	mov	fp,r22
  190e64:	9dfff82e 	bgeu	r19,r23,190e48 <__alt_data_end+0xfff90e48>
  190e68:	d9002415 	stw	r4,144(sp)
  190e6c:	003e6d06 	br	190824 <__alt_data_end+0xfff90824>
  190e70:	d8c02003 	ldbu	r3,128(sp)
  190e74:	94800414 	ori	r18,r18,16
  190e78:	9080080c 	andi	r2,r18,32
  190e7c:	d8c01d85 	stb	r3,118(sp)
  190e80:	d8c02317 	ldw	r3,140(sp)
  190e84:	10005526 	beq	r2,zero,190fdc <___vfiprintf_internal_r+0x92c>
  190e88:	d9002317 	ldw	r4,140(sp)
  190e8c:	18800117 	ldw	r2,4(r3)
  190e90:	1cc00017 	ldw	r19,0(r3)
  190e94:	21000204 	addi	r4,r4,8
  190e98:	d9002315 	stw	r4,140(sp)
  190e9c:	102f883a 	mov	r23,r2
  190ea0:	1001f716 	blt	r2,zero,191680 <___vfiprintf_internal_r+0xfd0>
  190ea4:	da801d83 	ldbu	r10,118(sp)
  190ea8:	dc002015 	stw	r16,128(sp)
  190eac:	00800044 	movi	r2,1
  190eb0:	9dc6b03a 	or	r3,r19,r23
  190eb4:	003edd06 	br	190a2c <__alt_data_end+0xfff90a2c>
  190eb8:	b1800007 	ldb	r6,0(r22)
  190ebc:	01000a84 	movi	r4,42
  190ec0:	b0800044 	addi	r2,r22,1
  190ec4:	3102ae26 	beq	r6,r4,191980 <___vfiprintf_internal_r+0x12d0>
  190ec8:	35fff404 	addi	r23,r6,-48
  190ecc:	102d883a 	mov	r22,r2
  190ed0:	0021883a 	mov	r16,zero
  190ed4:	9dfe5336 	bltu	r19,r23,190824 <__alt_data_end+0xfff90824>
  190ed8:	0009883a 	mov	r4,zero
  190edc:	01400284 	movi	r5,10
  190ee0:	0187dd80 	call	187dd8 <__mulsi3>
  190ee4:	b1800007 	ldb	r6,0(r22)
  190ee8:	b889883a 	add	r4,r23,r2
  190eec:	b5800044 	addi	r22,r22,1
  190ef0:	35fff404 	addi	r23,r6,-48
  190ef4:	9dfff92e 	bgeu	r19,r23,190edc <__alt_data_end+0xfff90edc>
  190ef8:	2021883a 	mov	r16,r4
  190efc:	203e490e 	bge	r4,zero,190824 <__alt_data_end+0xfff90824>
  190f00:	043fffc4 	movi	r16,-1
  190f04:	003e4706 	br	190824 <__alt_data_end+0xfff90824>
  190f08:	d8c02003 	ldbu	r3,128(sp)
  190f0c:	9080080c 	andi	r2,r18,32
  190f10:	d8c01d85 	stb	r3,118(sp)
  190f14:	10020e26 	beq	r2,zero,191750 <___vfiprintf_internal_r+0x10a0>
  190f18:	d9002317 	ldw	r4,140(sp)
  190f1c:	d9402517 	ldw	r5,148(sp)
  190f20:	20800017 	ldw	r2,0(r4)
  190f24:	2807d7fa 	srai	r3,r5,31
  190f28:	21000104 	addi	r4,r4,4
  190f2c:	d9002315 	stw	r4,140(sp)
  190f30:	11400015 	stw	r5,0(r2)
  190f34:	10c00115 	stw	r3,4(r2)
  190f38:	003e1106 	br	190780 <__alt_data_end+0xfff90780>
  190f3c:	d8802317 	ldw	r2,140(sp)
  190f40:	d8c02317 	ldw	r3,140(sp)
  190f44:	14c00017 	ldw	r19,0(r2)
  190f48:	15c00117 	ldw	r23,4(r2)
  190f4c:	18c00204 	addi	r3,r3,8
  190f50:	d8c02315 	stw	r3,140(sp)
  190f54:	0005883a 	mov	r2,zero
  190f58:	9dc6b03a 	or	r3,r19,r23
  190f5c:	003eb006 	br	190a20 <__alt_data_end+0xfff90a20>
  190f60:	d8802007 	ldb	r2,128(sp)
  190f64:	1001d91e 	bne	r2,zero,1916cc <___vfiprintf_internal_r+0x101c>
  190f68:	00c00804 	movi	r3,32
  190f6c:	d8c02005 	stb	r3,128(sp)
  190f70:	b005883a 	mov	r2,r22
  190f74:	b1800007 	ldb	r6,0(r22)
  190f78:	003e2906 	br	190820 <__alt_data_end+0xfff90820>
  190f7c:	94800054 	ori	r18,r18,1
  190f80:	b005883a 	mov	r2,r22
  190f84:	b1800007 	ldb	r6,0(r22)
  190f88:	003e2506 	br	190820 <__alt_data_end+0xfff90820>
  190f8c:	d9002317 	ldw	r4,140(sp)
  190f90:	d9402317 	ldw	r5,140(sp)
  190f94:	21000017 	ldw	r4,0(r4)
  190f98:	28c00104 	addi	r3,r5,4
  190f9c:	d9002415 	stw	r4,144(sp)
  190fa0:	20023b16 	blt	r4,zero,191890 <___vfiprintf_internal_r+0x11e0>
  190fa4:	d8c02315 	stw	r3,140(sp)
  190fa8:	b005883a 	mov	r2,r22
  190fac:	b1800007 	ldb	r6,0(r22)
  190fb0:	003e1b06 	br	190820 <__alt_data_end+0xfff90820>
  190fb4:	00c00ac4 	movi	r3,43
  190fb8:	d8c02005 	stb	r3,128(sp)
  190fbc:	b005883a 	mov	r2,r22
  190fc0:	b1800007 	ldb	r6,0(r22)
  190fc4:	003e1606 	br	190820 <__alt_data_end+0xfff90820>
  190fc8:	d8c02003 	ldbu	r3,128(sp)
  190fcc:	9080080c 	andi	r2,r18,32
  190fd0:	d8c01d85 	stb	r3,118(sp)
  190fd4:	d8c02317 	ldw	r3,140(sp)
  190fd8:	103fab1e 	bne	r2,zero,190e88 <__alt_data_end+0xfff90e88>
  190fdc:	9080040c 	andi	r2,r18,16
  190fe0:	1001e626 	beq	r2,zero,19177c <___vfiprintf_internal_r+0x10cc>
  190fe4:	1cc00017 	ldw	r19,0(r3)
  190fe8:	d9402317 	ldw	r5,140(sp)
  190fec:	982fd7fa 	srai	r23,r19,31
  190ff0:	29400104 	addi	r5,r5,4
  190ff4:	d9402315 	stw	r5,140(sp)
  190ff8:	b805883a 	mov	r2,r23
  190ffc:	003fa806 	br	190ea0 <__alt_data_end+0xfff90ea0>
  191000:	d9402317 	ldw	r5,140(sp)
  191004:	d8001d85 	stb	zero,118(sp)
  191008:	2f000017 	ldw	fp,0(r5)
  19100c:	2cc00104 	addi	r19,r5,4
  191010:	e0023826 	beq	fp,zero,1918f4 <___vfiprintf_internal_r+0x1244>
  191014:	e009883a 	mov	r4,fp
  191018:	80022316 	blt	r16,zero,1918a8 <___vfiprintf_internal_r+0x11f8>
  19101c:	000b883a 	mov	r5,zero
  191020:	800d883a 	mov	r6,r16
  191024:	018e9800 	call	18e980 <memchr>
  191028:	10024e26 	beq	r2,zero,191964 <___vfiprintf_internal_r+0x12b4>
  19102c:	1705c83a 	sub	r2,r2,fp
  191030:	d8802015 	stw	r2,128(sp)
  191034:	8081e816 	blt	r16,r2,1917d8 <___vfiprintf_internal_r+0x1128>
  191038:	da801d83 	ldbu	r10,118(sp)
  19103c:	dcc02315 	stw	r19,140(sp)
  191040:	0021883a 	mov	r16,zero
  191044:	003e9306 	br	190a94 <__alt_data_end+0xfff90a94>
  191048:	00c006b4 	movhi	r3,26
  19104c:	18fd0a04 	addi	r3,r3,-3032
  191050:	d8c02715 	stw	r3,156(sp)
  191054:	d8c02003 	ldbu	r3,128(sp)
  191058:	9080080c 	andi	r2,r18,32
  19105c:	d8c01d85 	stb	r3,118(sp)
  191060:	103f571e 	bne	r2,zero,190dc0 <__alt_data_end+0xfff90dc0>
  191064:	9080040c 	andi	r2,r18,16
  191068:	1001b126 	beq	r2,zero,191730 <___vfiprintf_internal_r+0x1080>
  19106c:	d9402317 	ldw	r5,140(sp)
  191070:	002f883a 	mov	r23,zero
  191074:	2cc00017 	ldw	r19,0(r5)
  191078:	29400104 	addi	r5,r5,4
  19107c:	d9402315 	stw	r5,140(sp)
  191080:	003f5406 	br	190dd4 <__alt_data_end+0xfff90dd4>
  191084:	94801014 	ori	r18,r18,64
  191088:	b005883a 	mov	r2,r22
  19108c:	b1800007 	ldb	r6,0(r22)
  191090:	003de306 	br	190820 <__alt_data_end+0xfff90820>
  191094:	b1800007 	ldb	r6,0(r22)
  191098:	00c01b04 	movi	r3,108
  19109c:	b005883a 	mov	r2,r22
  1910a0:	30c1f726 	beq	r6,r3,191880 <___vfiprintf_internal_r+0x11d0>
  1910a4:	94800414 	ori	r18,r18,16
  1910a8:	003ddd06 	br	190820 <__alt_data_end+0xfff90820>
  1910ac:	d8c02317 	ldw	r3,140(sp)
  1910b0:	00800c04 	movi	r2,48
  1910b4:	010006b4 	movhi	r4,26
  1910b8:	1cc00017 	ldw	r19,0(r3)
  1910bc:	d8801d05 	stb	r2,116(sp)
  1910c0:	18c00104 	addi	r3,r3,4
  1910c4:	00801e04 	movi	r2,120
  1910c8:	213d0a04 	addi	r4,r4,-3032
  1910cc:	d8801d45 	stb	r2,117(sp)
  1910d0:	d8c02315 	stw	r3,140(sp)
  1910d4:	002f883a 	mov	r23,zero
  1910d8:	94800094 	ori	r18,r18,2
  1910dc:	d9002715 	stw	r4,156(sp)
  1910e0:	00800084 	movi	r2,2
  1910e4:	9807883a 	mov	r3,r19
  1910e8:	003e4d06 	br	190a20 <__alt_data_end+0xfff90a20>
  1910ec:	94800814 	ori	r18,r18,32
  1910f0:	b005883a 	mov	r2,r22
  1910f4:	b1800007 	ldb	r6,0(r22)
  1910f8:	003dc906 	br	190820 <__alt_data_end+0xfff90820>
  1910fc:	d8802317 	ldw	r2,140(sp)
  191100:	d8c02317 	ldw	r3,140(sp)
  191104:	14c00017 	ldw	r19,0(r2)
  191108:	15c00117 	ldw	r23,4(r2)
  19110c:	18c00204 	addi	r3,r3,8
  191110:	d8c02315 	stw	r3,140(sp)
  191114:	00800044 	movi	r2,1
  191118:	9dc6b03a 	or	r3,r19,r23
  19111c:	003e4006 	br	190a20 <__alt_data_end+0xfff90a20>
  191120:	d8c02003 	ldbu	r3,128(sp)
  191124:	d8c01d85 	stb	r3,118(sp)
  191128:	30005526 	beq	r6,zero,191280 <___vfiprintf_internal_r+0xbd0>
  19112c:	05400044 	movi	r21,1
  191130:	d9801005 	stb	r6,64(sp)
  191134:	d8001d85 	stb	zero,118(sp)
  191138:	dd402015 	stw	r21,128(sp)
  19113c:	df001004 	addi	fp,sp,64
  191140:	003f3706 	br	190e20 <__alt_data_end+0xfff90e20>
  191144:	d9002217 	ldw	r4,136(sp)
  191148:	d9402117 	ldw	r5,132(sp)
  19114c:	d9801a04 	addi	r6,sp,104
  191150:	d8c02a15 	stw	r3,168(sp)
  191154:	dac02b15 	stw	r11,172(sp)
  191158:	019059c0 	call	19059c <__sprint_r.part.0>
  19115c:	d8c02a17 	ldw	r3,168(sp)
  191160:	dac02b17 	ldw	r11,172(sp)
  191164:	10004c1e 	bne	r2,zero,191298 <___vfiprintf_internal_r+0xbe8>
  191168:	d9801b17 	ldw	r6,108(sp)
  19116c:	d8801c17 	ldw	r2,112(sp)
  191170:	d829883a 	mov	r20,sp
  191174:	31400044 	addi	r5,r6,1
  191178:	003e6506 	br	190b10 <__alt_data_end+0xfff90b10>
  19117c:	d9401b17 	ldw	r5,108(sp)
  191180:	d8801c17 	ldw	r2,112(sp)
  191184:	29000044 	addi	r4,r5,1
  191188:	d8c01d87 	ldb	r3,118(sp)
  19118c:	183e8026 	beq	r3,zero,190b90 <__alt_data_end+0xfff90b90>
  191190:	00c00044 	movi	r3,1
  191194:	d9401d84 	addi	r5,sp,118
  191198:	10c5883a 	add	r2,r2,r3
  19119c:	a1400015 	stw	r5,0(r20)
  1911a0:	a0c00115 	stw	r3,4(r20)
  1911a4:	d8801c15 	stw	r2,112(sp)
  1911a8:	d9001b15 	stw	r4,108(sp)
  1911ac:	014001c4 	movi	r5,7
  1911b0:	2900cd16 	blt	r5,r4,1914e8 <___vfiprintf_internal_r+0xe38>
  1911b4:	200b883a 	mov	r5,r4
  1911b8:	a5000204 	addi	r20,r20,8
  1911bc:	21000044 	addi	r4,r4,1
  1911c0:	003e7306 	br	190b90 <__alt_data_end+0xfff90b90>
  1911c4:	d9002217 	ldw	r4,136(sp)
  1911c8:	d9402117 	ldw	r5,132(sp)
  1911cc:	d9801a04 	addi	r6,sp,104
  1911d0:	019059c0 	call	19059c <__sprint_r.part.0>
  1911d4:	1000301e 	bne	r2,zero,191298 <___vfiprintf_internal_r+0xbe8>
  1911d8:	d9401b17 	ldw	r5,108(sp)
  1911dc:	d8801c17 	ldw	r2,112(sp)
  1911e0:	d829883a 	mov	r20,sp
  1911e4:	29000044 	addi	r4,r5,1
  1911e8:	003e8506 	br	190c00 <__alt_data_end+0xfff90c00>
  1911ec:	10803fcc 	andi	r2,r2,255
  1911f0:	00c00044 	movi	r3,1
  1911f4:	10fe151e 	bne	r2,r3,190a4c <__alt_data_end+0xfff90a4c>
  1911f8:	b800021e 	bne	r23,zero,191204 <___vfiprintf_internal_r+0xb54>
  1911fc:	00800244 	movi	r2,9
  191200:	14c0192e 	bgeu	r2,r19,191268 <___vfiprintf_internal_r+0xbb8>
  191204:	dd401a04 	addi	r21,sp,104
  191208:	5039883a 	mov	fp,r10
  19120c:	9809883a 	mov	r4,r19
  191210:	b80b883a 	mov	r5,r23
  191214:	01800284 	movi	r6,10
  191218:	000f883a 	mov	r7,zero
  19121c:	01929cc0 	call	1929cc <__umoddi3>
  191220:	10800c04 	addi	r2,r2,48
  191224:	ad7fffc4 	addi	r21,r21,-1
  191228:	9809883a 	mov	r4,r19
  19122c:	b80b883a 	mov	r5,r23
  191230:	01800284 	movi	r6,10
  191234:	000f883a 	mov	r7,zero
  191238:	a8800005 	stb	r2,0(r21)
  19123c:	019238c0 	call	19238c <__udivdi3>
  191240:	1027883a 	mov	r19,r2
  191244:	10c4b03a 	or	r2,r2,r3
  191248:	182f883a 	mov	r23,r3
  19124c:	103fef1e 	bne	r2,zero,19120c <__alt_data_end+0xfff9120c>
  191250:	d8c01e17 	ldw	r3,120(sp)
  191254:	e015883a 	mov	r10,fp
  191258:	a839883a 	mov	fp,r21
  19125c:	1d47c83a 	sub	r3,r3,r21
  191260:	d8c02015 	stw	r3,128(sp)
  191264:	003e0b06 	br	190a94 <__alt_data_end+0xfff90a94>
  191268:	d9002817 	ldw	r4,160(sp)
  19126c:	9cc00c04 	addi	r19,r19,48
  191270:	dcc019c5 	stb	r19,103(sp)
  191274:	d9002015 	stw	r4,128(sp)
  191278:	df0019c4 	addi	fp,sp,103
  19127c:	003e0506 	br	190a94 <__alt_data_end+0xfff90a94>
  191280:	d8801c17 	ldw	r2,112(sp)
  191284:	10000426 	beq	r2,zero,191298 <___vfiprintf_internal_r+0xbe8>
  191288:	d9002217 	ldw	r4,136(sp)
  19128c:	d9402117 	ldw	r5,132(sp)
  191290:	d9801a04 	addi	r6,sp,104
  191294:	019059c0 	call	19059c <__sprint_r.part.0>
  191298:	d8c02117 	ldw	r3,132(sp)
  19129c:	1880030b 	ldhu	r2,12(r3)
  1912a0:	1080100c 	andi	r2,r2,64
  1912a4:	103e941e 	bne	r2,zero,190cf8 <__alt_data_end+0xfff90cf8>
  1912a8:	d8802517 	ldw	r2,148(sp)
  1912ac:	003e9306 	br	190cfc <__alt_data_end+0xfff90cfc>
  1912b0:	1000e91e 	bne	r2,zero,191658 <___vfiprintf_internal_r+0xfa8>
  1912b4:	d8802017 	ldw	r2,128(sp)
  1912b8:	00c00044 	movi	r3,1
  1912bc:	df000015 	stw	fp,0(sp)
  1912c0:	d8800115 	stw	r2,4(sp)
  1912c4:	d8801c15 	stw	r2,112(sp)
  1912c8:	d8c01b15 	stw	r3,108(sp)
  1912cc:	d829883a 	mov	r20,sp
  1912d0:	a2000204 	addi	r8,r20,8
  1912d4:	9480010c 	andi	r18,r18,4
  1912d8:	90003626 	beq	r18,zero,1913b4 <___vfiprintf_internal_r+0xd04>
  1912dc:	d9002417 	ldw	r4,144(sp)
  1912e0:	2565c83a 	sub	r18,r4,r21
  1912e4:	0480330e 	bge	zero,r18,1913b4 <___vfiprintf_internal_r+0xd04>
  1912e8:	04000404 	movi	r16,16
  1912ec:	84818b0e 	bge	r16,r18,19191c <___vfiprintf_internal_r+0x126c>
  1912f0:	00c006b4 	movhi	r3,26
  1912f4:	18fd6c04 	addi	r3,r3,-2640
  1912f8:	d9001b17 	ldw	r4,108(sp)
  1912fc:	d8c02615 	stw	r3,152(sp)
  191300:	04c001c4 	movi	r19,7
  191304:	dd002217 	ldw	r20,136(sp)
  191308:	ddc02117 	ldw	r23,132(sp)
  19130c:	00000506 	br	191324 <___vfiprintf_internal_r+0xc74>
  191310:	21400084 	addi	r5,r4,2
  191314:	42000204 	addi	r8,r8,8
  191318:	1809883a 	mov	r4,r3
  19131c:	94bffc04 	addi	r18,r18,-16
  191320:	84800f0e 	bge	r16,r18,191360 <___vfiprintf_internal_r+0xcb0>
  191324:	014006b4 	movhi	r5,26
  191328:	10800404 	addi	r2,r2,16
  19132c:	20c00044 	addi	r3,r4,1
  191330:	297d6c04 	addi	r5,r5,-2640
  191334:	41400015 	stw	r5,0(r8)
  191338:	44000115 	stw	r16,4(r8)
  19133c:	d8801c15 	stw	r2,112(sp)
  191340:	d8c01b15 	stw	r3,108(sp)
  191344:	98fff20e 	bge	r19,r3,191310 <__alt_data_end+0xfff91310>
  191348:	1000291e 	bne	r2,zero,1913f0 <___vfiprintf_internal_r+0xd40>
  19134c:	94bffc04 	addi	r18,r18,-16
  191350:	01400044 	movi	r5,1
  191354:	0009883a 	mov	r4,zero
  191358:	d811883a 	mov	r8,sp
  19135c:	84bff116 	blt	r16,r18,191324 <__alt_data_end+0xfff91324>
  191360:	d8c02617 	ldw	r3,152(sp)
  191364:	1485883a 	add	r2,r2,r18
  191368:	44800115 	stw	r18,4(r8)
  19136c:	40c00015 	stw	r3,0(r8)
  191370:	d8801c15 	stw	r2,112(sp)
  191374:	d9401b15 	stw	r5,108(sp)
  191378:	00c001c4 	movi	r3,7
  19137c:	19400d0e 	bge	r3,r5,1913b4 <___vfiprintf_internal_r+0xd04>
  191380:	1000061e 	bne	r2,zero,19139c <___vfiprintf_internal_r+0xcec>
  191384:	d9002417 	ldw	r4,144(sp)
  191388:	a9011116 	blt	r21,r4,1917d0 <___vfiprintf_internal_r+0x1120>
  19138c:	d9402517 	ldw	r5,148(sp)
  191390:	2d4b883a 	add	r5,r5,r21
  191394:	d9402515 	stw	r5,148(sp)
  191398:	00001206 	br	1913e4 <___vfiprintf_internal_r+0xd34>
  19139c:	d9002217 	ldw	r4,136(sp)
  1913a0:	d9402117 	ldw	r5,132(sp)
  1913a4:	d9801a04 	addi	r6,sp,104
  1913a8:	019059c0 	call	19059c <__sprint_r.part.0>
  1913ac:	103fba1e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1913b0:	d8801c17 	ldw	r2,112(sp)
  1913b4:	d9002417 	ldw	r4,144(sp)
  1913b8:	a900010e 	bge	r21,r4,1913c0 <___vfiprintf_internal_r+0xd10>
  1913bc:	202b883a 	mov	r21,r4
  1913c0:	d9402517 	ldw	r5,148(sp)
  1913c4:	2d4b883a 	add	r5,r5,r21
  1913c8:	d9402515 	stw	r5,148(sp)
  1913cc:	10000526 	beq	r2,zero,1913e4 <___vfiprintf_internal_r+0xd34>
  1913d0:	d9002217 	ldw	r4,136(sp)
  1913d4:	d9402117 	ldw	r5,132(sp)
  1913d8:	d9801a04 	addi	r6,sp,104
  1913dc:	019059c0 	call	19059c <__sprint_r.part.0>
  1913e0:	103fad1e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1913e4:	d8001b15 	stw	zero,108(sp)
  1913e8:	d829883a 	mov	r20,sp
  1913ec:	003ce406 	br	190780 <__alt_data_end+0xfff90780>
  1913f0:	a009883a 	mov	r4,r20
  1913f4:	b80b883a 	mov	r5,r23
  1913f8:	d9801a04 	addi	r6,sp,104
  1913fc:	019059c0 	call	19059c <__sprint_r.part.0>
  191400:	103fa51e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  191404:	d9001b17 	ldw	r4,108(sp)
  191408:	d8801c17 	ldw	r2,112(sp)
  19140c:	d811883a 	mov	r8,sp
  191410:	21400044 	addi	r5,r4,1
  191414:	003fc106 	br	19131c <__alt_data_end+0xfff9131c>
  191418:	d8c02417 	ldw	r3,144(sp)
  19141c:	1d6fc83a 	sub	r23,r3,r21
  191420:	05fdea0e 	bge	zero,r23,190bcc <__alt_data_end+0xfff90bcc>
  191424:	04c00404 	movi	r19,16
  191428:	9dc1490e 	bge	r19,r23,191950 <___vfiprintf_internal_r+0x12a0>
  19142c:	010006b4 	movhi	r4,26
  191430:	213d6804 	addi	r4,r4,-2656
  191434:	d9002615 	stw	r4,152(sp)
  191438:	028001c4 	movi	r10,7
  19143c:	00000506 	br	191454 <___vfiprintf_internal_r+0xda4>
  191440:	29800084 	addi	r6,r5,2
  191444:	a5000204 	addi	r20,r20,8
  191448:	180b883a 	mov	r5,r3
  19144c:	bdfffc04 	addi	r23,r23,-16
  191450:	9dc00d0e 	bge	r19,r23,191488 <___vfiprintf_internal_r+0xdd8>
  191454:	10800404 	addi	r2,r2,16
  191458:	28c00044 	addi	r3,r5,1
  19145c:	a4400015 	stw	r17,0(r20)
  191460:	a4c00115 	stw	r19,4(r20)
  191464:	d8801c15 	stw	r2,112(sp)
  191468:	d8c01b15 	stw	r3,108(sp)
  19146c:	50fff40e 	bge	r10,r3,191440 <__alt_data_end+0xfff91440>
  191470:	1000111e 	bne	r2,zero,1914b8 <___vfiprintf_internal_r+0xe08>
  191474:	bdfffc04 	addi	r23,r23,-16
  191478:	01800044 	movi	r6,1
  19147c:	000b883a 	mov	r5,zero
  191480:	d829883a 	mov	r20,sp
  191484:	9dfff316 	blt	r19,r23,191454 <__alt_data_end+0xfff91454>
  191488:	d8c02617 	ldw	r3,152(sp)
  19148c:	15c5883a 	add	r2,r2,r23
  191490:	a5c00115 	stw	r23,4(r20)
  191494:	a0c00015 	stw	r3,0(r20)
  191498:	d8801c15 	stw	r2,112(sp)
  19149c:	d9801b15 	stw	r6,108(sp)
  1914a0:	00c001c4 	movi	r3,7
  1914a4:	19806716 	blt	r3,r6,191644 <___vfiprintf_internal_r+0xf94>
  1914a8:	a5000204 	addi	r20,r20,8
  1914ac:	31000044 	addi	r4,r6,1
  1914b0:	300b883a 	mov	r5,r6
  1914b4:	003dc506 	br	190bcc <__alt_data_end+0xfff90bcc>
  1914b8:	d9002217 	ldw	r4,136(sp)
  1914bc:	d9402117 	ldw	r5,132(sp)
  1914c0:	d9801a04 	addi	r6,sp,104
  1914c4:	da802a15 	stw	r10,168(sp)
  1914c8:	019059c0 	call	19059c <__sprint_r.part.0>
  1914cc:	da802a17 	ldw	r10,168(sp)
  1914d0:	103f711e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1914d4:	d9401b17 	ldw	r5,108(sp)
  1914d8:	d8801c17 	ldw	r2,112(sp)
  1914dc:	d829883a 	mov	r20,sp
  1914e0:	29800044 	addi	r6,r5,1
  1914e4:	003fd906 	br	19144c <__alt_data_end+0xfff9144c>
  1914e8:	1000401e 	bne	r2,zero,1915ec <___vfiprintf_internal_r+0xf3c>
  1914ec:	38003b26 	beq	r7,zero,1915dc <___vfiprintf_internal_r+0xf2c>
  1914f0:	d9001d04 	addi	r4,sp,116
  1914f4:	00800084 	movi	r2,2
  1914f8:	d9000015 	stw	r4,0(sp)
  1914fc:	d8800115 	stw	r2,4(sp)
  191500:	1809883a 	mov	r4,r3
  191504:	d829883a 	mov	r20,sp
  191508:	003dab06 	br	190bb8 <__alt_data_end+0xfff90bb8>
  19150c:	1000431e 	bne	r2,zero,19161c <___vfiprintf_internal_r+0xf6c>
  191510:	01000044 	movi	r4,1
  191514:	000b883a 	mov	r5,zero
  191518:	d829883a 	mov	r20,sp
  19151c:	003da906 	br	190bc4 <__alt_data_end+0xfff90bc4>
  191520:	10803fcc 	andi	r2,r2,255
  191524:	1000081e 	bne	r2,zero,191548 <___vfiprintf_internal_r+0xe98>
  191528:	9080004c 	andi	r2,r18,1
  19152c:	10000626 	beq	r2,zero,191548 <___vfiprintf_internal_r+0xe98>
  191530:	d9002817 	ldw	r4,160(sp)
  191534:	00800c04 	movi	r2,48
  191538:	d88019c5 	stb	r2,103(sp)
  19153c:	d9002015 	stw	r4,128(sp)
  191540:	df0019c4 	addi	fp,sp,103
  191544:	003d5306 	br	190a94 <__alt_data_end+0xfff90a94>
  191548:	df001a04 	addi	fp,sp,104
  19154c:	003d5106 	br	190a94 <__alt_data_end+0xfff90a94>
  191550:	1000931e 	bne	r2,zero,1917a0 <___vfiprintf_internal_r+0x10f0>
  191554:	d8c01d87 	ldb	r3,118(sp)
  191558:	18005326 	beq	r3,zero,1916a8 <___vfiprintf_internal_r+0xff8>
  19155c:	00800044 	movi	r2,1
  191560:	d8c01d84 	addi	r3,sp,118
  191564:	1009883a 	mov	r4,r2
  191568:	d8c00015 	stw	r3,0(sp)
  19156c:	d8800115 	stw	r2,4(sp)
  191570:	d829883a 	mov	r20,sp
  191574:	003f0f06 	br	1911b4 <__alt_data_end+0xfff911b4>
  191578:	d8c02417 	ldw	r3,144(sp)
  19157c:	d811883a 	mov	r8,sp
  191580:	1d65c83a 	sub	r18,r3,r21
  191584:	04bf5816 	blt	zero,r18,1912e8 <__alt_data_end+0xfff912e8>
  191588:	003f7e06 	br	191384 <__alt_data_end+0xfff91384>
  19158c:	b02b883a 	mov	r21,r22
  191590:	003c9806 	br	1907f4 <__alt_data_end+0xfff907f4>
  191594:	d9002217 	ldw	r4,136(sp)
  191598:	d9402117 	ldw	r5,132(sp)
  19159c:	d9801a04 	addi	r6,sp,104
  1915a0:	019059c0 	call	19059c <__sprint_r.part.0>
  1915a4:	103f3c1e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1915a8:	d8801c17 	ldw	r2,112(sp)
  1915ac:	d811883a 	mov	r8,sp
  1915b0:	003f4806 	br	1912d4 <__alt_data_end+0xfff912d4>
  1915b4:	00800084 	movi	r2,2
  1915b8:	9dc6b03a 	or	r3,r19,r23
  1915bc:	003d1806 	br	190a20 <__alt_data_end+0xfff90a20>
  1915c0:	d9002217 	ldw	r4,136(sp)
  1915c4:	d9402117 	ldw	r5,132(sp)
  1915c8:	d9801a04 	addi	r6,sp,104
  1915cc:	019059c0 	call	19059c <__sprint_r.part.0>
  1915d0:	103f311e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1915d4:	d829883a 	mov	r20,sp
  1915d8:	003cf406 	br	1909ac <__alt_data_end+0xfff909ac>
  1915dc:	000b883a 	mov	r5,zero
  1915e0:	1809883a 	mov	r4,r3
  1915e4:	d829883a 	mov	r20,sp
  1915e8:	003d7606 	br	190bc4 <__alt_data_end+0xfff90bc4>
  1915ec:	d9002217 	ldw	r4,136(sp)
  1915f0:	d9402117 	ldw	r5,132(sp)
  1915f4:	d9801a04 	addi	r6,sp,104
  1915f8:	d9c02a15 	stw	r7,168(sp)
  1915fc:	019059c0 	call	19059c <__sprint_r.part.0>
  191600:	d9c02a17 	ldw	r7,168(sp)
  191604:	103f241e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  191608:	d9401b17 	ldw	r5,108(sp)
  19160c:	d8801c17 	ldw	r2,112(sp)
  191610:	d829883a 	mov	r20,sp
  191614:	29000044 	addi	r4,r5,1
  191618:	003d5d06 	br	190b90 <__alt_data_end+0xfff90b90>
  19161c:	d9002217 	ldw	r4,136(sp)
  191620:	d9402117 	ldw	r5,132(sp)
  191624:	d9801a04 	addi	r6,sp,104
  191628:	019059c0 	call	19059c <__sprint_r.part.0>
  19162c:	103f1a1e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  191630:	d9401b17 	ldw	r5,108(sp)
  191634:	d8801c17 	ldw	r2,112(sp)
  191638:	d829883a 	mov	r20,sp
  19163c:	29000044 	addi	r4,r5,1
  191640:	003d6006 	br	190bc4 <__alt_data_end+0xfff90bc4>
  191644:	10009b1e 	bne	r2,zero,1918b4 <___vfiprintf_internal_r+0x1204>
  191648:	01000044 	movi	r4,1
  19164c:	000b883a 	mov	r5,zero
  191650:	d829883a 	mov	r20,sp
  191654:	003d5d06 	br	190bcc <__alt_data_end+0xfff90bcc>
  191658:	d9002217 	ldw	r4,136(sp)
  19165c:	d9402117 	ldw	r5,132(sp)
  191660:	d9801a04 	addi	r6,sp,104
  191664:	019059c0 	call	19059c <__sprint_r.part.0>
  191668:	103f0b1e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  19166c:	d9001b17 	ldw	r4,108(sp)
  191670:	d8801c17 	ldw	r2,112(sp)
  191674:	d829883a 	mov	r20,sp
  191678:	21000044 	addi	r4,r4,1
  19167c:	003d7906 	br	190c64 <__alt_data_end+0xfff90c64>
  191680:	04e7c83a 	sub	r19,zero,r19
  191684:	9804c03a 	cmpne	r2,r19,zero
  191688:	05efc83a 	sub	r23,zero,r23
  19168c:	b8afc83a 	sub	r23,r23,r2
  191690:	02800b44 	movi	r10,45
  191694:	da801d85 	stb	r10,118(sp)
  191698:	dc002015 	stw	r16,128(sp)
  19169c:	00800044 	movi	r2,1
  1916a0:	9dc6b03a 	or	r3,r19,r23
  1916a4:	003ce106 	br	190a2c <__alt_data_end+0xfff90a2c>
  1916a8:	000b883a 	mov	r5,zero
  1916ac:	01000044 	movi	r4,1
  1916b0:	d829883a 	mov	r20,sp
  1916b4:	383d4326 	beq	r7,zero,190bc4 <__alt_data_end+0xfff90bc4>
  1916b8:	00800084 	movi	r2,2
  1916bc:	d8c01d04 	addi	r3,sp,116
  1916c0:	d8c00015 	stw	r3,0(sp)
  1916c4:	d8800115 	stw	r2,4(sp)
  1916c8:	003d3b06 	br	190bb8 <__alt_data_end+0xfff90bb8>
  1916cc:	b1800007 	ldb	r6,0(r22)
  1916d0:	b005883a 	mov	r2,r22
  1916d4:	003c5206 	br	190820 <__alt_data_end+0xfff90820>
  1916d8:	00800084 	movi	r2,2
  1916dc:	003cd006 	br	190a20 <__alt_data_end+0xfff90a20>
  1916e0:	9080100c 	andi	r2,r18,64
  1916e4:	10003e26 	beq	r2,zero,1917e0 <___vfiprintf_internal_r+0x1130>
  1916e8:	d9402317 	ldw	r5,140(sp)
  1916ec:	002f883a 	mov	r23,zero
  1916f0:	0005883a 	mov	r2,zero
  1916f4:	2cc0000b 	ldhu	r19,0(r5)
  1916f8:	29400104 	addi	r5,r5,4
  1916fc:	d9402315 	stw	r5,140(sp)
  191700:	9807883a 	mov	r3,r19
  191704:	003cc606 	br	190a20 <__alt_data_end+0xfff90a20>
  191708:	9080100c 	andi	r2,r18,64
  19170c:	10004226 	beq	r2,zero,191818 <___vfiprintf_internal_r+0x1168>
  191710:	d9402317 	ldw	r5,140(sp)
  191714:	002f883a 	mov	r23,zero
  191718:	00800044 	movi	r2,1
  19171c:	2cc0000b 	ldhu	r19,0(r5)
  191720:	29400104 	addi	r5,r5,4
  191724:	d9402315 	stw	r5,140(sp)
  191728:	9807883a 	mov	r3,r19
  19172c:	003cbc06 	br	190a20 <__alt_data_end+0xfff90a20>
  191730:	9080100c 	andi	r2,r18,64
  191734:	10003226 	beq	r2,zero,191800 <___vfiprintf_internal_r+0x1150>
  191738:	d8802317 	ldw	r2,140(sp)
  19173c:	002f883a 	mov	r23,zero
  191740:	14c0000b 	ldhu	r19,0(r2)
  191744:	10800104 	addi	r2,r2,4
  191748:	d8802315 	stw	r2,140(sp)
  19174c:	003da106 	br	190dd4 <__alt_data_end+0xfff90dd4>
  191750:	9080040c 	andi	r2,r18,16
  191754:	10003f1e 	bne	r2,zero,191854 <___vfiprintf_internal_r+0x11a4>
  191758:	9480100c 	andi	r18,r18,64
  19175c:	90007526 	beq	r18,zero,191934 <___vfiprintf_internal_r+0x1284>
  191760:	d9402317 	ldw	r5,140(sp)
  191764:	d8c02517 	ldw	r3,148(sp)
  191768:	28800017 	ldw	r2,0(r5)
  19176c:	29400104 	addi	r5,r5,4
  191770:	d9402315 	stw	r5,140(sp)
  191774:	10c0000d 	sth	r3,0(r2)
  191778:	003c0106 	br	190780 <__alt_data_end+0xfff90780>
  19177c:	9080100c 	andi	r2,r18,64
  191780:	10002d26 	beq	r2,zero,191838 <___vfiprintf_internal_r+0x1188>
  191784:	1cc0000f 	ldh	r19,0(r3)
  191788:	d8802317 	ldw	r2,140(sp)
  19178c:	982fd7fa 	srai	r23,r19,31
  191790:	10800104 	addi	r2,r2,4
  191794:	d8802315 	stw	r2,140(sp)
  191798:	b805883a 	mov	r2,r23
  19179c:	003dc006 	br	190ea0 <__alt_data_end+0xfff90ea0>
  1917a0:	d9002217 	ldw	r4,136(sp)
  1917a4:	d9402117 	ldw	r5,132(sp)
  1917a8:	d9801a04 	addi	r6,sp,104
  1917ac:	d9c02a15 	stw	r7,168(sp)
  1917b0:	019059c0 	call	19059c <__sprint_r.part.0>
  1917b4:	d9c02a17 	ldw	r7,168(sp)
  1917b8:	103eb71e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1917bc:	d9401b17 	ldw	r5,108(sp)
  1917c0:	d8801c17 	ldw	r2,112(sp)
  1917c4:	d829883a 	mov	r20,sp
  1917c8:	29000044 	addi	r4,r5,1
  1917cc:	003e6e06 	br	191188 <__alt_data_end+0xfff91188>
  1917d0:	202b883a 	mov	r21,r4
  1917d4:	003eed06 	br	19138c <__alt_data_end+0xfff9138c>
  1917d8:	dc002015 	stw	r16,128(sp)
  1917dc:	003e1606 	br	191038 <__alt_data_end+0xfff91038>
  1917e0:	d8802317 	ldw	r2,140(sp)
  1917e4:	002f883a 	mov	r23,zero
  1917e8:	14c00017 	ldw	r19,0(r2)
  1917ec:	10800104 	addi	r2,r2,4
  1917f0:	d8802315 	stw	r2,140(sp)
  1917f4:	9807883a 	mov	r3,r19
  1917f8:	0005883a 	mov	r2,zero
  1917fc:	003c8806 	br	190a20 <__alt_data_end+0xfff90a20>
  191800:	d8c02317 	ldw	r3,140(sp)
  191804:	002f883a 	mov	r23,zero
  191808:	1cc00017 	ldw	r19,0(r3)
  19180c:	18c00104 	addi	r3,r3,4
  191810:	d8c02315 	stw	r3,140(sp)
  191814:	003d6f06 	br	190dd4 <__alt_data_end+0xfff90dd4>
  191818:	d8802317 	ldw	r2,140(sp)
  19181c:	002f883a 	mov	r23,zero
  191820:	14c00017 	ldw	r19,0(r2)
  191824:	10800104 	addi	r2,r2,4
  191828:	d8802315 	stw	r2,140(sp)
  19182c:	9807883a 	mov	r3,r19
  191830:	00800044 	movi	r2,1
  191834:	003c7a06 	br	190a20 <__alt_data_end+0xfff90a20>
  191838:	1cc00017 	ldw	r19,0(r3)
  19183c:	d8c02317 	ldw	r3,140(sp)
  191840:	982fd7fa 	srai	r23,r19,31
  191844:	18c00104 	addi	r3,r3,4
  191848:	d8c02315 	stw	r3,140(sp)
  19184c:	b805883a 	mov	r2,r23
  191850:	003d9306 	br	190ea0 <__alt_data_end+0xfff90ea0>
  191854:	d8c02317 	ldw	r3,140(sp)
  191858:	d9002517 	ldw	r4,148(sp)
  19185c:	18800017 	ldw	r2,0(r3)
  191860:	18c00104 	addi	r3,r3,4
  191864:	d8c02315 	stw	r3,140(sp)
  191868:	11000015 	stw	r4,0(r2)
  19186c:	003bc406 	br	190780 <__alt_data_end+0xfff90780>
  191870:	014006b4 	movhi	r5,26
  191874:	297d6804 	addi	r5,r5,-2656
  191878:	d9402615 	stw	r5,152(sp)
  19187c:	003cef06 	br	190c3c <__alt_data_end+0xfff90c3c>
  191880:	b0800044 	addi	r2,r22,1
  191884:	94800814 	ori	r18,r18,32
  191888:	b1800047 	ldb	r6,1(r22)
  19188c:	003be406 	br	190820 <__alt_data_end+0xfff90820>
  191890:	d8802417 	ldw	r2,144(sp)
  191894:	d8c02315 	stw	r3,140(sp)
  191898:	0085c83a 	sub	r2,zero,r2
  19189c:	d8802415 	stw	r2,144(sp)
  1918a0:	b005883a 	mov	r2,r22
  1918a4:	003d2406 	br	190d38 <__alt_data_end+0xfff90d38>
  1918a8:	01892200 	call	189220 <strlen>
  1918ac:	d8802015 	stw	r2,128(sp)
  1918b0:	003de106 	br	191038 <__alt_data_end+0xfff91038>
  1918b4:	d9002217 	ldw	r4,136(sp)
  1918b8:	d9402117 	ldw	r5,132(sp)
  1918bc:	d9801a04 	addi	r6,sp,104
  1918c0:	019059c0 	call	19059c <__sprint_r.part.0>
  1918c4:	103e741e 	bne	r2,zero,191298 <__alt_data_end+0xfff91298>
  1918c8:	d9401b17 	ldw	r5,108(sp)
  1918cc:	d8801c17 	ldw	r2,112(sp)
  1918d0:	d829883a 	mov	r20,sp
  1918d4:	29000044 	addi	r4,r5,1
  1918d8:	003cbc06 	br	190bcc <__alt_data_end+0xfff90bcc>
  1918dc:	014006b4 	movhi	r5,26
  1918e0:	297d6c04 	addi	r5,r5,-2640
  1918e4:	d9402615 	stw	r5,152(sp)
  1918e8:	d9401b17 	ldw	r5,108(sp)
  1918ec:	29400044 	addi	r5,r5,1
  1918f0:	003c9b06 	br	190b60 <__alt_data_end+0xfff90b60>
  1918f4:	00800184 	movi	r2,6
  1918f8:	1400012e 	bgeu	r2,r16,191900 <___vfiprintf_internal_r+0x1250>
  1918fc:	1021883a 	mov	r16,r2
  191900:	dc002015 	stw	r16,128(sp)
  191904:	802b883a 	mov	r21,r16
  191908:	80001b16 	blt	r16,zero,191978 <___vfiprintf_internal_r+0x12c8>
  19190c:	070006b4 	movhi	fp,26
  191910:	dcc02315 	stw	r19,140(sp)
  191914:	e73d0f04 	addi	fp,fp,-3012
  191918:	003d4106 	br	190e20 <__alt_data_end+0xfff90e20>
  19191c:	014006b4 	movhi	r5,26
  191920:	297d6c04 	addi	r5,r5,-2640
  191924:	d9402615 	stw	r5,152(sp)
  191928:	d9401b17 	ldw	r5,108(sp)
  19192c:	29400044 	addi	r5,r5,1
  191930:	003e8b06 	br	191360 <__alt_data_end+0xfff91360>
  191934:	d9002317 	ldw	r4,140(sp)
  191938:	d9402517 	ldw	r5,148(sp)
  19193c:	20800017 	ldw	r2,0(r4)
  191940:	21000104 	addi	r4,r4,4
  191944:	d9002315 	stw	r4,140(sp)
  191948:	11400015 	stw	r5,0(r2)
  19194c:	003b8c06 	br	190780 <__alt_data_end+0xfff90780>
  191950:	014006b4 	movhi	r5,26
  191954:	297d6804 	addi	r5,r5,-2656
  191958:	d9402615 	stw	r5,152(sp)
  19195c:	200d883a 	mov	r6,r4
  191960:	003ec906 	br	191488 <__alt_data_end+0xfff91488>
  191964:	dc002015 	stw	r16,128(sp)
  191968:	da801d83 	ldbu	r10,118(sp)
  19196c:	dcc02315 	stw	r19,140(sp)
  191970:	0021883a 	mov	r16,zero
  191974:	003c4706 	br	190a94 <__alt_data_end+0xfff90a94>
  191978:	002b883a 	mov	r21,zero
  19197c:	003fe306 	br	19190c <__alt_data_end+0xfff9190c>
  191980:	d9402317 	ldw	r5,140(sp)
  191984:	2c000017 	ldw	r16,0(r5)
  191988:	28c00104 	addi	r3,r5,4
  19198c:	d8c02315 	stw	r3,140(sp)
  191990:	803fbd0e 	bge	r16,zero,191888 <__alt_data_end+0xfff91888>
  191994:	043fffc4 	movi	r16,-1
  191998:	b1800047 	ldb	r6,1(r22)
  19199c:	003ba006 	br	190820 <__alt_data_end+0xfff90820>

001919a0 <__vfiprintf_internal>:
  1919a0:	2007883a 	mov	r3,r4
  1919a4:	010006b4 	movhi	r4,26
  1919a8:	21046704 	addi	r4,r4,4508
  1919ac:	21000017 	ldw	r4,0(r4)
  1919b0:	2805883a 	mov	r2,r5
  1919b4:	300f883a 	mov	r7,r6
  1919b8:	180b883a 	mov	r5,r3
  1919bc:	100d883a 	mov	r6,r2
  1919c0:	01906b01 	jmpi	1906b0 <___vfiprintf_internal_r>

001919c4 <__sbprintf>:
  1919c4:	2880030b 	ldhu	r2,12(r5)
  1919c8:	2ac01917 	ldw	r11,100(r5)
  1919cc:	2a80038b 	ldhu	r10,14(r5)
  1919d0:	2a400717 	ldw	r9,28(r5)
  1919d4:	2a000917 	ldw	r8,36(r5)
  1919d8:	defee204 	addi	sp,sp,-1144
  1919dc:	00c10004 	movi	r3,1024
  1919e0:	dc011a15 	stw	r16,1128(sp)
  1919e4:	10bfff4c 	andi	r2,r2,65533
  1919e8:	2821883a 	mov	r16,r5
  1919ec:	d8cb883a 	add	r5,sp,r3
  1919f0:	dc811c15 	stw	r18,1136(sp)
  1919f4:	dc411b15 	stw	r17,1132(sp)
  1919f8:	dfc11d15 	stw	ra,1140(sp)
  1919fc:	2025883a 	mov	r18,r4
  191a00:	d881030d 	sth	r2,1036(sp)
  191a04:	dac11915 	stw	r11,1124(sp)
  191a08:	da81038d 	sth	r10,1038(sp)
  191a0c:	da410715 	stw	r9,1052(sp)
  191a10:	da010915 	stw	r8,1060(sp)
  191a14:	dec10015 	stw	sp,1024(sp)
  191a18:	dec10415 	stw	sp,1040(sp)
  191a1c:	d8c10215 	stw	r3,1032(sp)
  191a20:	d8c10515 	stw	r3,1044(sp)
  191a24:	d8010615 	stw	zero,1048(sp)
  191a28:	01906b00 	call	1906b0 <___vfiprintf_internal_r>
  191a2c:	1023883a 	mov	r17,r2
  191a30:	10000416 	blt	r2,zero,191a44 <__sbprintf+0x80>
  191a34:	9009883a 	mov	r4,r18
  191a38:	d9410004 	addi	r5,sp,1024
  191a3c:	018d09c0 	call	18d09c <_fflush_r>
  191a40:	10000d1e 	bne	r2,zero,191a78 <__sbprintf+0xb4>
  191a44:	d8c1030b 	ldhu	r3,1036(sp)
  191a48:	18c0100c 	andi	r3,r3,64
  191a4c:	18000326 	beq	r3,zero,191a5c <__sbprintf+0x98>
  191a50:	8080030b 	ldhu	r2,12(r16)
  191a54:	10801014 	ori	r2,r2,64
  191a58:	8080030d 	sth	r2,12(r16)
  191a5c:	8805883a 	mov	r2,r17
  191a60:	dfc11d17 	ldw	ra,1140(sp)
  191a64:	dc811c17 	ldw	r18,1136(sp)
  191a68:	dc411b17 	ldw	r17,1132(sp)
  191a6c:	dc011a17 	ldw	r16,1128(sp)
  191a70:	dec11e04 	addi	sp,sp,1144
  191a74:	f800283a 	ret
  191a78:	047fffc4 	movi	r17,-1
  191a7c:	003ff106 	br	191a44 <__alt_data_end+0xfff91a44>

00191a80 <__swbuf_r>:
  191a80:	defffc04 	addi	sp,sp,-16
  191a84:	dc800215 	stw	r18,8(sp)
  191a88:	dc400115 	stw	r17,4(sp)
  191a8c:	dc000015 	stw	r16,0(sp)
  191a90:	dfc00315 	stw	ra,12(sp)
  191a94:	2025883a 	mov	r18,r4
  191a98:	2823883a 	mov	r17,r5
  191a9c:	3021883a 	mov	r16,r6
  191aa0:	20000226 	beq	r4,zero,191aac <__swbuf_r+0x2c>
  191aa4:	20800e17 	ldw	r2,56(r4)
  191aa8:	10004126 	beq	r2,zero,191bb0 <__swbuf_r+0x130>
  191aac:	80c00617 	ldw	r3,24(r16)
  191ab0:	8180030b 	ldhu	r6,12(r16)
  191ab4:	80c00215 	stw	r3,8(r16)
  191ab8:	30c0020c 	andi	r3,r6,8
  191abc:	18003526 	beq	r3,zero,191b94 <__swbuf_r+0x114>
  191ac0:	80c00417 	ldw	r3,16(r16)
  191ac4:	18003326 	beq	r3,zero,191b94 <__swbuf_r+0x114>
  191ac8:	3088000c 	andi	r2,r6,8192
  191acc:	8c403fcc 	andi	r17,r17,255
  191ad0:	10001726 	beq	r2,zero,191b30 <__swbuf_r+0xb0>
  191ad4:	80800017 	ldw	r2,0(r16)
  191ad8:	81000517 	ldw	r4,20(r16)
  191adc:	10c7c83a 	sub	r3,r2,r3
  191ae0:	19001d0e 	bge	r3,r4,191b58 <__swbuf_r+0xd8>
  191ae4:	18c00044 	addi	r3,r3,1
  191ae8:	81400217 	ldw	r5,8(r16)
  191aec:	11000044 	addi	r4,r2,1
  191af0:	81000015 	stw	r4,0(r16)
  191af4:	297fffc4 	addi	r5,r5,-1
  191af8:	81400215 	stw	r5,8(r16)
  191afc:	14400005 	stb	r17,0(r2)
  191b00:	80800517 	ldw	r2,20(r16)
  191b04:	10c01d26 	beq	r2,r3,191b7c <__swbuf_r+0xfc>
  191b08:	8080030b 	ldhu	r2,12(r16)
  191b0c:	1080004c 	andi	r2,r2,1
  191b10:	1000181e 	bne	r2,zero,191b74 <__swbuf_r+0xf4>
  191b14:	8805883a 	mov	r2,r17
  191b18:	dfc00317 	ldw	ra,12(sp)
  191b1c:	dc800217 	ldw	r18,8(sp)
  191b20:	dc400117 	ldw	r17,4(sp)
  191b24:	dc000017 	ldw	r16,0(sp)
  191b28:	dec00404 	addi	sp,sp,16
  191b2c:	f800283a 	ret
  191b30:	81001917 	ldw	r4,100(r16)
  191b34:	00b7ffc4 	movi	r2,-8193
  191b38:	31880014 	ori	r6,r6,8192
  191b3c:	2084703a 	and	r2,r4,r2
  191b40:	80801915 	stw	r2,100(r16)
  191b44:	80800017 	ldw	r2,0(r16)
  191b48:	81000517 	ldw	r4,20(r16)
  191b4c:	8180030d 	sth	r6,12(r16)
  191b50:	10c7c83a 	sub	r3,r2,r3
  191b54:	193fe316 	blt	r3,r4,191ae4 <__alt_data_end+0xfff91ae4>
  191b58:	9009883a 	mov	r4,r18
  191b5c:	800b883a 	mov	r5,r16
  191b60:	018d09c0 	call	18d09c <_fflush_r>
  191b64:	1000091e 	bne	r2,zero,191b8c <__swbuf_r+0x10c>
  191b68:	80800017 	ldw	r2,0(r16)
  191b6c:	00c00044 	movi	r3,1
  191b70:	003fdd06 	br	191ae8 <__alt_data_end+0xfff91ae8>
  191b74:	00800284 	movi	r2,10
  191b78:	88bfe61e 	bne	r17,r2,191b14 <__alt_data_end+0xfff91b14>
  191b7c:	9009883a 	mov	r4,r18
  191b80:	800b883a 	mov	r5,r16
  191b84:	018d09c0 	call	18d09c <_fflush_r>
  191b88:	103fe226 	beq	r2,zero,191b14 <__alt_data_end+0xfff91b14>
  191b8c:	00bfffc4 	movi	r2,-1
  191b90:	003fe106 	br	191b18 <__alt_data_end+0xfff91b18>
  191b94:	9009883a 	mov	r4,r18
  191b98:	800b883a 	mov	r5,r16
  191b9c:	018b3f00 	call	18b3f0 <__swsetup_r>
  191ba0:	103ffa1e 	bne	r2,zero,191b8c <__alt_data_end+0xfff91b8c>
  191ba4:	8180030b 	ldhu	r6,12(r16)
  191ba8:	80c00417 	ldw	r3,16(r16)
  191bac:	003fc606 	br	191ac8 <__alt_data_end+0xfff91ac8>
  191bb0:	018d4880 	call	18d488 <__sinit>
  191bb4:	003fbd06 	br	191aac <__alt_data_end+0xfff91aac>

00191bb8 <__swbuf>:
  191bb8:	00c006b4 	movhi	r3,26
  191bbc:	18c46704 	addi	r3,r3,4508
  191bc0:	2005883a 	mov	r2,r4
  191bc4:	19000017 	ldw	r4,0(r3)
  191bc8:	280d883a 	mov	r6,r5
  191bcc:	100b883a 	mov	r5,r2
  191bd0:	0191a801 	jmpi	191a80 <__swbuf_r>

00191bd4 <_write_r>:
  191bd4:	defffd04 	addi	sp,sp,-12
  191bd8:	dc000015 	stw	r16,0(sp)
  191bdc:	040006b4 	movhi	r16,26
  191be0:	dc400115 	stw	r17,4(sp)
  191be4:	840b6b04 	addi	r16,r16,11692
  191be8:	2023883a 	mov	r17,r4
  191bec:	2809883a 	mov	r4,r5
  191bf0:	300b883a 	mov	r5,r6
  191bf4:	380d883a 	mov	r6,r7
  191bf8:	dfc00215 	stw	ra,8(sp)
  191bfc:	80000015 	stw	zero,0(r16)
  191c00:	01970b00 	call	1970b0 <write>
  191c04:	00ffffc4 	movi	r3,-1
  191c08:	10c00526 	beq	r2,r3,191c20 <_write_r+0x4c>
  191c0c:	dfc00217 	ldw	ra,8(sp)
  191c10:	dc400117 	ldw	r17,4(sp)
  191c14:	dc000017 	ldw	r16,0(sp)
  191c18:	dec00304 	addi	sp,sp,12
  191c1c:	f800283a 	ret
  191c20:	80c00017 	ldw	r3,0(r16)
  191c24:	183ff926 	beq	r3,zero,191c0c <__alt_data_end+0xfff91c0c>
  191c28:	88c00015 	stw	r3,0(r17)
  191c2c:	003ff706 	br	191c0c <__alt_data_end+0xfff91c0c>

00191c30 <_close_r>:
  191c30:	defffd04 	addi	sp,sp,-12
  191c34:	dc000015 	stw	r16,0(sp)
  191c38:	040006b4 	movhi	r16,26
  191c3c:	dc400115 	stw	r17,4(sp)
  191c40:	840b6b04 	addi	r16,r16,11692
  191c44:	2023883a 	mov	r17,r4
  191c48:	2809883a 	mov	r4,r5
  191c4c:	dfc00215 	stw	ra,8(sp)
  191c50:	80000015 	stw	zero,0(r16)
  191c54:	01962740 	call	196274 <close>
  191c58:	00ffffc4 	movi	r3,-1
  191c5c:	10c00526 	beq	r2,r3,191c74 <_close_r+0x44>
  191c60:	dfc00217 	ldw	ra,8(sp)
  191c64:	dc400117 	ldw	r17,4(sp)
  191c68:	dc000017 	ldw	r16,0(sp)
  191c6c:	dec00304 	addi	sp,sp,12
  191c70:	f800283a 	ret
  191c74:	80c00017 	ldw	r3,0(r16)
  191c78:	183ff926 	beq	r3,zero,191c60 <__alt_data_end+0xfff91c60>
  191c7c:	88c00015 	stw	r3,0(r17)
  191c80:	003ff706 	br	191c60 <__alt_data_end+0xfff91c60>

00191c84 <_calloc_r>:
  191c84:	defffe04 	addi	sp,sp,-8
  191c88:	dc000015 	stw	r16,0(sp)
  191c8c:	2021883a 	mov	r16,r4
  191c90:	2809883a 	mov	r4,r5
  191c94:	300b883a 	mov	r5,r6
  191c98:	dfc00115 	stw	ra,4(sp)
  191c9c:	0187dd80 	call	187dd8 <__mulsi3>
  191ca0:	8009883a 	mov	r4,r16
  191ca4:	100b883a 	mov	r5,r2
  191ca8:	018e1d80 	call	18e1d8 <_malloc_r>
  191cac:	1021883a 	mov	r16,r2
  191cb0:	10002826 	beq	r2,zero,191d54 <_calloc_r+0xd0>
  191cb4:	11bfff17 	ldw	r6,-4(r2)
  191cb8:	00bfff04 	movi	r2,-4
  191cbc:	00c00904 	movi	r3,36
  191cc0:	308c703a 	and	r6,r6,r2
  191cc4:	308d883a 	add	r6,r6,r2
  191cc8:	19801436 	bltu	r3,r6,191d1c <_calloc_r+0x98>
  191ccc:	008004c4 	movi	r2,19
  191cd0:	11800936 	bltu	r2,r6,191cf8 <_calloc_r+0x74>
  191cd4:	8005883a 	mov	r2,r16
  191cd8:	10000015 	stw	zero,0(r2)
  191cdc:	10000115 	stw	zero,4(r2)
  191ce0:	10000215 	stw	zero,8(r2)
  191ce4:	8005883a 	mov	r2,r16
  191ce8:	dfc00117 	ldw	ra,4(sp)
  191cec:	dc000017 	ldw	r16,0(sp)
  191cf0:	dec00204 	addi	sp,sp,8
  191cf4:	f800283a 	ret
  191cf8:	80000015 	stw	zero,0(r16)
  191cfc:	80000115 	stw	zero,4(r16)
  191d00:	008006c4 	movi	r2,27
  191d04:	11800d2e 	bgeu	r2,r6,191d3c <_calloc_r+0xb8>
  191d08:	80000215 	stw	zero,8(r16)
  191d0c:	80000315 	stw	zero,12(r16)
  191d10:	30c00c26 	beq	r6,r3,191d44 <_calloc_r+0xc0>
  191d14:	80800404 	addi	r2,r16,16
  191d18:	003fef06 	br	191cd8 <__alt_data_end+0xfff91cd8>
  191d1c:	8009883a 	mov	r4,r16
  191d20:	000b883a 	mov	r5,zero
  191d24:	0188fb80 	call	188fb8 <memset>
  191d28:	8005883a 	mov	r2,r16
  191d2c:	dfc00117 	ldw	ra,4(sp)
  191d30:	dc000017 	ldw	r16,0(sp)
  191d34:	dec00204 	addi	sp,sp,8
  191d38:	f800283a 	ret
  191d3c:	80800204 	addi	r2,r16,8
  191d40:	003fe506 	br	191cd8 <__alt_data_end+0xfff91cd8>
  191d44:	80000415 	stw	zero,16(r16)
  191d48:	80800604 	addi	r2,r16,24
  191d4c:	80000515 	stw	zero,20(r16)
  191d50:	003fe106 	br	191cd8 <__alt_data_end+0xfff91cd8>
  191d54:	0005883a 	mov	r2,zero
  191d58:	003fe306 	br	191ce8 <__alt_data_end+0xfff91ce8>

00191d5c <_fclose_r>:
  191d5c:	28003926 	beq	r5,zero,191e44 <_fclose_r+0xe8>
  191d60:	defffc04 	addi	sp,sp,-16
  191d64:	dc400115 	stw	r17,4(sp)
  191d68:	dc000015 	stw	r16,0(sp)
  191d6c:	dfc00315 	stw	ra,12(sp)
  191d70:	dc800215 	stw	r18,8(sp)
  191d74:	2023883a 	mov	r17,r4
  191d78:	2821883a 	mov	r16,r5
  191d7c:	20000226 	beq	r4,zero,191d88 <_fclose_r+0x2c>
  191d80:	20800e17 	ldw	r2,56(r4)
  191d84:	10002726 	beq	r2,zero,191e24 <_fclose_r+0xc8>
  191d88:	8080030f 	ldh	r2,12(r16)
  191d8c:	1000071e 	bne	r2,zero,191dac <_fclose_r+0x50>
  191d90:	0005883a 	mov	r2,zero
  191d94:	dfc00317 	ldw	ra,12(sp)
  191d98:	dc800217 	ldw	r18,8(sp)
  191d9c:	dc400117 	ldw	r17,4(sp)
  191da0:	dc000017 	ldw	r16,0(sp)
  191da4:	dec00404 	addi	sp,sp,16
  191da8:	f800283a 	ret
  191dac:	8809883a 	mov	r4,r17
  191db0:	800b883a 	mov	r5,r16
  191db4:	018ce940 	call	18ce94 <__sflush_r>
  191db8:	1025883a 	mov	r18,r2
  191dbc:	80800b17 	ldw	r2,44(r16)
  191dc0:	10000426 	beq	r2,zero,191dd4 <_fclose_r+0x78>
  191dc4:	81400717 	ldw	r5,28(r16)
  191dc8:	8809883a 	mov	r4,r17
  191dcc:	103ee83a 	callr	r2
  191dd0:	10001616 	blt	r2,zero,191e2c <_fclose_r+0xd0>
  191dd4:	8080030b 	ldhu	r2,12(r16)
  191dd8:	1080200c 	andi	r2,r2,128
  191ddc:	1000151e 	bne	r2,zero,191e34 <_fclose_r+0xd8>
  191de0:	81400c17 	ldw	r5,48(r16)
  191de4:	28000526 	beq	r5,zero,191dfc <_fclose_r+0xa0>
  191de8:	80801004 	addi	r2,r16,64
  191dec:	28800226 	beq	r5,r2,191df8 <_fclose_r+0x9c>
  191df0:	8809883a 	mov	r4,r17
  191df4:	018d5fc0 	call	18d5fc <_free_r>
  191df8:	80000c15 	stw	zero,48(r16)
  191dfc:	81401117 	ldw	r5,68(r16)
  191e00:	28000326 	beq	r5,zero,191e10 <_fclose_r+0xb4>
  191e04:	8809883a 	mov	r4,r17
  191e08:	018d5fc0 	call	18d5fc <_free_r>
  191e0c:	80001115 	stw	zero,68(r16)
  191e10:	018d4980 	call	18d498 <__sfp_lock_acquire>
  191e14:	8000030d 	sth	zero,12(r16)
  191e18:	018d49c0 	call	18d49c <__sfp_lock_release>
  191e1c:	9005883a 	mov	r2,r18
  191e20:	003fdc06 	br	191d94 <__alt_data_end+0xfff91d94>
  191e24:	018d4880 	call	18d488 <__sinit>
  191e28:	003fd706 	br	191d88 <__alt_data_end+0xfff91d88>
  191e2c:	04bfffc4 	movi	r18,-1
  191e30:	003fe806 	br	191dd4 <__alt_data_end+0xfff91dd4>
  191e34:	81400417 	ldw	r5,16(r16)
  191e38:	8809883a 	mov	r4,r17
  191e3c:	018d5fc0 	call	18d5fc <_free_r>
  191e40:	003fe706 	br	191de0 <__alt_data_end+0xfff91de0>
  191e44:	0005883a 	mov	r2,zero
  191e48:	f800283a 	ret

00191e4c <fclose>:
  191e4c:	008006b4 	movhi	r2,26
  191e50:	10846704 	addi	r2,r2,4508
  191e54:	200b883a 	mov	r5,r4
  191e58:	11000017 	ldw	r4,0(r2)
  191e5c:	0191d5c1 	jmpi	191d5c <_fclose_r>

00191e60 <_fputwc_r>:
  191e60:	3080030b 	ldhu	r2,12(r6)
  191e64:	defff804 	addi	sp,sp,-32
  191e68:	dcc00415 	stw	r19,16(sp)
  191e6c:	dc800315 	stw	r18,12(sp)
  191e70:	dc000115 	stw	r16,4(sp)
  191e74:	dfc00715 	stw	ra,28(sp)
  191e78:	dd400615 	stw	r21,24(sp)
  191e7c:	dd000515 	stw	r20,20(sp)
  191e80:	dc400215 	stw	r17,8(sp)
  191e84:	10c8000c 	andi	r3,r2,8192
  191e88:	3021883a 	mov	r16,r6
  191e8c:	2027883a 	mov	r19,r4
  191e90:	2825883a 	mov	r18,r5
  191e94:	1800051e 	bne	r3,zero,191eac <_fputwc_r+0x4c>
  191e98:	30c01917 	ldw	r3,100(r6)
  191e9c:	10880014 	ori	r2,r2,8192
  191ea0:	3080030d 	sth	r2,12(r6)
  191ea4:	18880014 	ori	r2,r3,8192
  191ea8:	30801915 	stw	r2,100(r6)
  191eac:	018dfc80 	call	18dfc8 <__locale_mb_cur_max>
  191eb0:	00c00044 	movi	r3,1
  191eb4:	10c03e26 	beq	r2,r3,191fb0 <_fputwc_r+0x150>
  191eb8:	9809883a 	mov	r4,r19
  191ebc:	d80b883a 	mov	r5,sp
  191ec0:	900d883a 	mov	r6,r18
  191ec4:	81c01704 	addi	r7,r16,92
  191ec8:	01921a40 	call	1921a4 <_wcrtomb_r>
  191ecc:	1029883a 	mov	r20,r2
  191ed0:	00bfffc4 	movi	r2,-1
  191ed4:	a0802026 	beq	r20,r2,191f58 <_fputwc_r+0xf8>
  191ed8:	d9400003 	ldbu	r5,0(sp)
  191edc:	a0001c26 	beq	r20,zero,191f50 <_fputwc_r+0xf0>
  191ee0:	0023883a 	mov	r17,zero
  191ee4:	05400284 	movi	r21,10
  191ee8:	00000906 	br	191f10 <_fputwc_r+0xb0>
  191eec:	80800017 	ldw	r2,0(r16)
  191ef0:	11400005 	stb	r5,0(r2)
  191ef4:	80c00017 	ldw	r3,0(r16)
  191ef8:	18c00044 	addi	r3,r3,1
  191efc:	80c00015 	stw	r3,0(r16)
  191f00:	8c400044 	addi	r17,r17,1
  191f04:	dc45883a 	add	r2,sp,r17
  191f08:	8d00112e 	bgeu	r17,r20,191f50 <_fputwc_r+0xf0>
  191f0c:	11400003 	ldbu	r5,0(r2)
  191f10:	80c00217 	ldw	r3,8(r16)
  191f14:	18ffffc4 	addi	r3,r3,-1
  191f18:	80c00215 	stw	r3,8(r16)
  191f1c:	183ff30e 	bge	r3,zero,191eec <__alt_data_end+0xfff91eec>
  191f20:	80800617 	ldw	r2,24(r16)
  191f24:	18801916 	blt	r3,r2,191f8c <_fputwc_r+0x12c>
  191f28:	80800017 	ldw	r2,0(r16)
  191f2c:	11400005 	stb	r5,0(r2)
  191f30:	80800017 	ldw	r2,0(r16)
  191f34:	10c00003 	ldbu	r3,0(r2)
  191f38:	10800044 	addi	r2,r2,1
  191f3c:	1d402326 	beq	r3,r21,191fcc <_fputwc_r+0x16c>
  191f40:	80800015 	stw	r2,0(r16)
  191f44:	8c400044 	addi	r17,r17,1
  191f48:	dc45883a 	add	r2,sp,r17
  191f4c:	8d3fef36 	bltu	r17,r20,191f0c <__alt_data_end+0xfff91f0c>
  191f50:	9005883a 	mov	r2,r18
  191f54:	00000406 	br	191f68 <_fputwc_r+0x108>
  191f58:	80c0030b 	ldhu	r3,12(r16)
  191f5c:	a005883a 	mov	r2,r20
  191f60:	18c01014 	ori	r3,r3,64
  191f64:	80c0030d 	sth	r3,12(r16)
  191f68:	dfc00717 	ldw	ra,28(sp)
  191f6c:	dd400617 	ldw	r21,24(sp)
  191f70:	dd000517 	ldw	r20,20(sp)
  191f74:	dcc00417 	ldw	r19,16(sp)
  191f78:	dc800317 	ldw	r18,12(sp)
  191f7c:	dc400217 	ldw	r17,8(sp)
  191f80:	dc000117 	ldw	r16,4(sp)
  191f84:	dec00804 	addi	sp,sp,32
  191f88:	f800283a 	ret
  191f8c:	9809883a 	mov	r4,r19
  191f90:	29403fcc 	andi	r5,r5,255
  191f94:	800d883a 	mov	r6,r16
  191f98:	0191a800 	call	191a80 <__swbuf_r>
  191f9c:	10bfffe0 	cmpeqi	r2,r2,-1
  191fa0:	10803fcc 	andi	r2,r2,255
  191fa4:	103fd626 	beq	r2,zero,191f00 <__alt_data_end+0xfff91f00>
  191fa8:	00bfffc4 	movi	r2,-1
  191fac:	003fee06 	br	191f68 <__alt_data_end+0xfff91f68>
  191fb0:	90ffffc4 	addi	r3,r18,-1
  191fb4:	01003f84 	movi	r4,254
  191fb8:	20ffbf36 	bltu	r4,r3,191eb8 <__alt_data_end+0xfff91eb8>
  191fbc:	900b883a 	mov	r5,r18
  191fc0:	dc800005 	stb	r18,0(sp)
  191fc4:	1029883a 	mov	r20,r2
  191fc8:	003fc506 	br	191ee0 <__alt_data_end+0xfff91ee0>
  191fcc:	9809883a 	mov	r4,r19
  191fd0:	a80b883a 	mov	r5,r21
  191fd4:	800d883a 	mov	r6,r16
  191fd8:	0191a800 	call	191a80 <__swbuf_r>
  191fdc:	10bfffe0 	cmpeqi	r2,r2,-1
  191fe0:	003fef06 	br	191fa0 <__alt_data_end+0xfff91fa0>

00191fe4 <fputwc>:
  191fe4:	008006b4 	movhi	r2,26
  191fe8:	defffc04 	addi	sp,sp,-16
  191fec:	10846704 	addi	r2,r2,4508
  191ff0:	dc000115 	stw	r16,4(sp)
  191ff4:	14000017 	ldw	r16,0(r2)
  191ff8:	dc400215 	stw	r17,8(sp)
  191ffc:	dfc00315 	stw	ra,12(sp)
  192000:	2023883a 	mov	r17,r4
  192004:	280d883a 	mov	r6,r5
  192008:	80000626 	beq	r16,zero,192024 <fputwc+0x40>
  19200c:	80800e17 	ldw	r2,56(r16)
  192010:	1000041e 	bne	r2,zero,192024 <fputwc+0x40>
  192014:	8009883a 	mov	r4,r16
  192018:	d9400015 	stw	r5,0(sp)
  19201c:	018d4880 	call	18d488 <__sinit>
  192020:	d9800017 	ldw	r6,0(sp)
  192024:	8009883a 	mov	r4,r16
  192028:	880b883a 	mov	r5,r17
  19202c:	dfc00317 	ldw	ra,12(sp)
  192030:	dc400217 	ldw	r17,8(sp)
  192034:	dc000117 	ldw	r16,4(sp)
  192038:	dec00404 	addi	sp,sp,16
  19203c:	0191e601 	jmpi	191e60 <_fputwc_r>

00192040 <_fstat_r>:
  192040:	defffd04 	addi	sp,sp,-12
  192044:	dc000015 	stw	r16,0(sp)
  192048:	040006b4 	movhi	r16,26
  19204c:	dc400115 	stw	r17,4(sp)
  192050:	840b6b04 	addi	r16,r16,11692
  192054:	2023883a 	mov	r17,r4
  192058:	2809883a 	mov	r4,r5
  19205c:	300b883a 	mov	r5,r6
  192060:	dfc00215 	stw	ra,8(sp)
  192064:	80000015 	stw	zero,0(r16)
  192068:	01963c80 	call	1963c8 <fstat>
  19206c:	00ffffc4 	movi	r3,-1
  192070:	10c00526 	beq	r2,r3,192088 <_fstat_r+0x48>
  192074:	dfc00217 	ldw	ra,8(sp)
  192078:	dc400117 	ldw	r17,4(sp)
  19207c:	dc000017 	ldw	r16,0(sp)
  192080:	dec00304 	addi	sp,sp,12
  192084:	f800283a 	ret
  192088:	80c00017 	ldw	r3,0(r16)
  19208c:	183ff926 	beq	r3,zero,192074 <__alt_data_end+0xfff92074>
  192090:	88c00015 	stw	r3,0(r17)
  192094:	003ff706 	br	192074 <__alt_data_end+0xfff92074>

00192098 <_isatty_r>:
  192098:	defffd04 	addi	sp,sp,-12
  19209c:	dc000015 	stw	r16,0(sp)
  1920a0:	040006b4 	movhi	r16,26
  1920a4:	dc400115 	stw	r17,4(sp)
  1920a8:	840b6b04 	addi	r16,r16,11692
  1920ac:	2023883a 	mov	r17,r4
  1920b0:	2809883a 	mov	r4,r5
  1920b4:	dfc00215 	stw	ra,8(sp)
  1920b8:	80000015 	stw	zero,0(r16)
  1920bc:	01967a00 	call	1967a0 <isatty>
  1920c0:	00ffffc4 	movi	r3,-1
  1920c4:	10c00526 	beq	r2,r3,1920dc <_isatty_r+0x44>
  1920c8:	dfc00217 	ldw	ra,8(sp)
  1920cc:	dc400117 	ldw	r17,4(sp)
  1920d0:	dc000017 	ldw	r16,0(sp)
  1920d4:	dec00304 	addi	sp,sp,12
  1920d8:	f800283a 	ret
  1920dc:	80c00017 	ldw	r3,0(r16)
  1920e0:	183ff926 	beq	r3,zero,1920c8 <__alt_data_end+0xfff920c8>
  1920e4:	88c00015 	stw	r3,0(r17)
  1920e8:	003ff706 	br	1920c8 <__alt_data_end+0xfff920c8>

001920ec <_lseek_r>:
  1920ec:	defffd04 	addi	sp,sp,-12
  1920f0:	dc000015 	stw	r16,0(sp)
  1920f4:	040006b4 	movhi	r16,26
  1920f8:	dc400115 	stw	r17,4(sp)
  1920fc:	840b6b04 	addi	r16,r16,11692
  192100:	2023883a 	mov	r17,r4
  192104:	2809883a 	mov	r4,r5
  192108:	300b883a 	mov	r5,r6
  19210c:	380d883a 	mov	r6,r7
  192110:	dfc00215 	stw	ra,8(sp)
  192114:	80000015 	stw	zero,0(r16)
  192118:	01969800 	call	196980 <lseek>
  19211c:	00ffffc4 	movi	r3,-1
  192120:	10c00526 	beq	r2,r3,192138 <_lseek_r+0x4c>
  192124:	dfc00217 	ldw	ra,8(sp)
  192128:	dc400117 	ldw	r17,4(sp)
  19212c:	dc000017 	ldw	r16,0(sp)
  192130:	dec00304 	addi	sp,sp,12
  192134:	f800283a 	ret
  192138:	80c00017 	ldw	r3,0(r16)
  19213c:	183ff926 	beq	r3,zero,192124 <__alt_data_end+0xfff92124>
  192140:	88c00015 	stw	r3,0(r17)
  192144:	003ff706 	br	192124 <__alt_data_end+0xfff92124>

00192148 <_read_r>:
  192148:	defffd04 	addi	sp,sp,-12
  19214c:	dc000015 	stw	r16,0(sp)
  192150:	040006b4 	movhi	r16,26
  192154:	dc400115 	stw	r17,4(sp)
  192158:	840b6b04 	addi	r16,r16,11692
  19215c:	2023883a 	mov	r17,r4
  192160:	2809883a 	mov	r4,r5
  192164:	300b883a 	mov	r5,r6
  192168:	380d883a 	mov	r6,r7
  19216c:	dfc00215 	stw	ra,8(sp)
  192170:	80000015 	stw	zero,0(r16)
  192174:	0196e2c0 	call	196e2c <read>
  192178:	00ffffc4 	movi	r3,-1
  19217c:	10c00526 	beq	r2,r3,192194 <_read_r+0x4c>
  192180:	dfc00217 	ldw	ra,8(sp)
  192184:	dc400117 	ldw	r17,4(sp)
  192188:	dc000017 	ldw	r16,0(sp)
  19218c:	dec00304 	addi	sp,sp,12
  192190:	f800283a 	ret
  192194:	80c00017 	ldw	r3,0(r16)
  192198:	183ff926 	beq	r3,zero,192180 <__alt_data_end+0xfff92180>
  19219c:	88c00015 	stw	r3,0(r17)
  1921a0:	003ff706 	br	192180 <__alt_data_end+0xfff92180>

001921a4 <_wcrtomb_r>:
  1921a4:	defff604 	addi	sp,sp,-40
  1921a8:	008006b4 	movhi	r2,26
  1921ac:	dc800815 	stw	r18,32(sp)
  1921b0:	dc400715 	stw	r17,28(sp)
  1921b4:	dc000615 	stw	r16,24(sp)
  1921b8:	10846b04 	addi	r2,r2,4524
  1921bc:	dfc00915 	stw	ra,36(sp)
  1921c0:	2021883a 	mov	r16,r4
  1921c4:	3823883a 	mov	r17,r7
  1921c8:	14800017 	ldw	r18,0(r2)
  1921cc:	28001426 	beq	r5,zero,192220 <_wcrtomb_r+0x7c>
  1921d0:	d9400415 	stw	r5,16(sp)
  1921d4:	d9800515 	stw	r6,20(sp)
  1921d8:	018dfbc0 	call	18dfbc <__locale_charset>
  1921dc:	d9400417 	ldw	r5,16(sp)
  1921e0:	d9800517 	ldw	r6,20(sp)
  1921e4:	8009883a 	mov	r4,r16
  1921e8:	dc400015 	stw	r17,0(sp)
  1921ec:	100f883a 	mov	r7,r2
  1921f0:	903ee83a 	callr	r18
  1921f4:	00ffffc4 	movi	r3,-1
  1921f8:	10c0031e 	bne	r2,r3,192208 <_wcrtomb_r+0x64>
  1921fc:	88000015 	stw	zero,0(r17)
  192200:	00c02284 	movi	r3,138
  192204:	80c00015 	stw	r3,0(r16)
  192208:	dfc00917 	ldw	ra,36(sp)
  19220c:	dc800817 	ldw	r18,32(sp)
  192210:	dc400717 	ldw	r17,28(sp)
  192214:	dc000617 	ldw	r16,24(sp)
  192218:	dec00a04 	addi	sp,sp,40
  19221c:	f800283a 	ret
  192220:	018dfbc0 	call	18dfbc <__locale_charset>
  192224:	8009883a 	mov	r4,r16
  192228:	dc400015 	stw	r17,0(sp)
  19222c:	d9400104 	addi	r5,sp,4
  192230:	000d883a 	mov	r6,zero
  192234:	100f883a 	mov	r7,r2
  192238:	903ee83a 	callr	r18
  19223c:	003fed06 	br	1921f4 <__alt_data_end+0xfff921f4>

00192240 <wcrtomb>:
  192240:	defff604 	addi	sp,sp,-40
  192244:	008006b4 	movhi	r2,26
  192248:	dc800615 	stw	r18,24(sp)
  19224c:	dc400515 	stw	r17,20(sp)
  192250:	dc000415 	stw	r16,16(sp)
  192254:	10846704 	addi	r2,r2,4508
  192258:	dfc00915 	stw	ra,36(sp)
  19225c:	dd000815 	stw	r20,32(sp)
  192260:	dcc00715 	stw	r19,28(sp)
  192264:	2021883a 	mov	r16,r4
  192268:	3025883a 	mov	r18,r6
  19226c:	14400017 	ldw	r17,0(r2)
  192270:	20001826 	beq	r4,zero,1922d4 <wcrtomb+0x94>
  192274:	008006b4 	movhi	r2,26
  192278:	10846b04 	addi	r2,r2,4524
  19227c:	15000017 	ldw	r20,0(r2)
  192280:	2827883a 	mov	r19,r5
  192284:	018dfbc0 	call	18dfbc <__locale_charset>
  192288:	8809883a 	mov	r4,r17
  19228c:	dc800015 	stw	r18,0(sp)
  192290:	800b883a 	mov	r5,r16
  192294:	980d883a 	mov	r6,r19
  192298:	100f883a 	mov	r7,r2
  19229c:	a03ee83a 	callr	r20
  1922a0:	00ffffc4 	movi	r3,-1
  1922a4:	10c0031e 	bne	r2,r3,1922b4 <wcrtomb+0x74>
  1922a8:	90000015 	stw	zero,0(r18)
  1922ac:	00c02284 	movi	r3,138
  1922b0:	88c00015 	stw	r3,0(r17)
  1922b4:	dfc00917 	ldw	ra,36(sp)
  1922b8:	dd000817 	ldw	r20,32(sp)
  1922bc:	dcc00717 	ldw	r19,28(sp)
  1922c0:	dc800617 	ldw	r18,24(sp)
  1922c4:	dc400517 	ldw	r17,20(sp)
  1922c8:	dc000417 	ldw	r16,16(sp)
  1922cc:	dec00a04 	addi	sp,sp,40
  1922d0:	f800283a 	ret
  1922d4:	008006b4 	movhi	r2,26
  1922d8:	10846b04 	addi	r2,r2,4524
  1922dc:	14000017 	ldw	r16,0(r2)
  1922e0:	018dfbc0 	call	18dfbc <__locale_charset>
  1922e4:	8809883a 	mov	r4,r17
  1922e8:	dc800015 	stw	r18,0(sp)
  1922ec:	d9400104 	addi	r5,sp,4
  1922f0:	000d883a 	mov	r6,zero
  1922f4:	100f883a 	mov	r7,r2
  1922f8:	803ee83a 	callr	r16
  1922fc:	003fe806 	br	1922a0 <__alt_data_end+0xfff922a0>

00192300 <__ascii_wctomb>:
  192300:	28000526 	beq	r5,zero,192318 <__ascii_wctomb+0x18>
  192304:	00803fc4 	movi	r2,255
  192308:	11800536 	bltu	r2,r6,192320 <__ascii_wctomb+0x20>
  19230c:	29800005 	stb	r6,0(r5)
  192310:	00800044 	movi	r2,1
  192314:	f800283a 	ret
  192318:	0005883a 	mov	r2,zero
  19231c:	f800283a 	ret
  192320:	00802284 	movi	r2,138
  192324:	20800015 	stw	r2,0(r4)
  192328:	00bfffc4 	movi	r2,-1
  19232c:	f800283a 	ret

00192330 <_wctomb_r>:
  192330:	008006b4 	movhi	r2,26
  192334:	defff904 	addi	sp,sp,-28
  192338:	10846b04 	addi	r2,r2,4524
  19233c:	dfc00615 	stw	ra,24(sp)
  192340:	dc400515 	stw	r17,20(sp)
  192344:	dc000415 	stw	r16,16(sp)
  192348:	3823883a 	mov	r17,r7
  19234c:	14000017 	ldw	r16,0(r2)
  192350:	d9000115 	stw	r4,4(sp)
  192354:	d9400215 	stw	r5,8(sp)
  192358:	d9800315 	stw	r6,12(sp)
  19235c:	018dfbc0 	call	18dfbc <__locale_charset>
  192360:	d9000117 	ldw	r4,4(sp)
  192364:	d9400217 	ldw	r5,8(sp)
  192368:	d9800317 	ldw	r6,12(sp)
  19236c:	dc400015 	stw	r17,0(sp)
  192370:	100f883a 	mov	r7,r2
  192374:	803ee83a 	callr	r16
  192378:	dfc00617 	ldw	ra,24(sp)
  19237c:	dc400517 	ldw	r17,20(sp)
  192380:	dc000417 	ldw	r16,16(sp)
  192384:	dec00704 	addi	sp,sp,28
  192388:	f800283a 	ret

0019238c <__udivdi3>:
  19238c:	defff504 	addi	sp,sp,-44
  192390:	dcc00415 	stw	r19,16(sp)
  192394:	dc000115 	stw	r16,4(sp)
  192398:	dfc00a15 	stw	ra,40(sp)
  19239c:	df000915 	stw	fp,36(sp)
  1923a0:	ddc00815 	stw	r23,32(sp)
  1923a4:	dd800715 	stw	r22,28(sp)
  1923a8:	dd400615 	stw	r21,24(sp)
  1923ac:	dd000515 	stw	r20,20(sp)
  1923b0:	dc800315 	stw	r18,12(sp)
  1923b4:	dc400215 	stw	r17,8(sp)
  1923b8:	2027883a 	mov	r19,r4
  1923bc:	2821883a 	mov	r16,r5
  1923c0:	3800471e 	bne	r7,zero,1924e0 <__udivdi3+0x154>
  1923c4:	3025883a 	mov	r18,r6
  1923c8:	2023883a 	mov	r17,r4
  1923cc:	2980592e 	bgeu	r5,r6,192534 <__udivdi3+0x1a8>
  1923d0:	00bfffd4 	movui	r2,65535
  1923d4:	2829883a 	mov	r20,r5
  1923d8:	1180b236 	bltu	r2,r6,1926a4 <__udivdi3+0x318>
  1923dc:	00803fc4 	movi	r2,255
  1923e0:	1181622e 	bgeu	r2,r6,19296c <__udivdi3+0x5e0>
  1923e4:	00800204 	movi	r2,8
  1923e8:	1007883a 	mov	r3,r2
  1923ec:	3084d83a 	srl	r2,r6,r2
  1923f0:	010006b4 	movhi	r4,26
  1923f4:	213cc104 	addi	r4,r4,-3324
  1923f8:	2085883a 	add	r2,r4,r2
  1923fc:	11000003 	ldbu	r4,0(r2)
  192400:	20c9883a 	add	r4,r4,r3
  192404:	00c00804 	movi	r3,32
  192408:	1907c83a 	sub	r3,r3,r4
  19240c:	18000526 	beq	r3,zero,192424 <__udivdi3+0x98>
  192410:	80e0983a 	sll	r16,r16,r3
  192414:	9908d83a 	srl	r4,r19,r4
  192418:	30e4983a 	sll	r18,r6,r3
  19241c:	98e2983a 	sll	r17,r19,r3
  192420:	8128b03a 	or	r20,r16,r4
  192424:	902ad43a 	srli	r21,r18,16
  192428:	a009883a 	mov	r4,r20
  19242c:	95bfffcc 	andi	r22,r18,65535
  192430:	a80b883a 	mov	r5,r21
  192434:	0187dd00 	call	187dd0 <__umodsi3>
  192438:	a009883a 	mov	r4,r20
  19243c:	a80b883a 	mov	r5,r21
  192440:	102f883a 	mov	r23,r2
  192444:	0187dc80 	call	187dc8 <__udivsi3>
  192448:	1009883a 	mov	r4,r2
  19244c:	b00b883a 	mov	r5,r22
  192450:	1021883a 	mov	r16,r2
  192454:	0187dd80 	call	187dd8 <__mulsi3>
  192458:	b82e943a 	slli	r23,r23,16
  19245c:	8808d43a 	srli	r4,r17,16
  192460:	b906b03a 	or	r3,r23,r4
  192464:	1880052e 	bgeu	r3,r2,19247c <__udivdi3+0xf0>
  192468:	1c87883a 	add	r3,r3,r18
  19246c:	813fffc4 	addi	r4,r16,-1
  192470:	1c800136 	bltu	r3,r18,192478 <__udivdi3+0xec>
  192474:	18815236 	bltu	r3,r2,1929c0 <__udivdi3+0x634>
  192478:	2021883a 	mov	r16,r4
  19247c:	18a7c83a 	sub	r19,r3,r2
  192480:	9809883a 	mov	r4,r19
  192484:	a80b883a 	mov	r5,r21
  192488:	0187dd00 	call	187dd0 <__umodsi3>
  19248c:	1029883a 	mov	r20,r2
  192490:	9809883a 	mov	r4,r19
  192494:	a80b883a 	mov	r5,r21
  192498:	a028943a 	slli	r20,r20,16
  19249c:	0187dc80 	call	187dc8 <__udivsi3>
  1924a0:	1009883a 	mov	r4,r2
  1924a4:	b00b883a 	mov	r5,r22
  1924a8:	8c7fffcc 	andi	r17,r17,65535
  1924ac:	1027883a 	mov	r19,r2
  1924b0:	a462b03a 	or	r17,r20,r17
  1924b4:	0187dd80 	call	187dd8 <__mulsi3>
  1924b8:	8880052e 	bgeu	r17,r2,1924d0 <__udivdi3+0x144>
  1924bc:	8ca3883a 	add	r17,r17,r18
  1924c0:	98ffffc4 	addi	r3,r19,-1
  1924c4:	8c811036 	bltu	r17,r18,192908 <__udivdi3+0x57c>
  1924c8:	88810f2e 	bgeu	r17,r2,192908 <__udivdi3+0x57c>
  1924cc:	9cffff84 	addi	r19,r19,-2
  1924d0:	8020943a 	slli	r16,r16,16
  1924d4:	0007883a 	mov	r3,zero
  1924d8:	9c04b03a 	or	r2,r19,r16
  1924dc:	00006006 	br	192660 <__udivdi3+0x2d4>
  1924e0:	29c05d36 	bltu	r5,r7,192658 <__udivdi3+0x2cc>
  1924e4:	00bfffd4 	movui	r2,65535
  1924e8:	11c0692e 	bgeu	r2,r7,192690 <__udivdi3+0x304>
  1924ec:	00804034 	movhi	r2,256
  1924f0:	10bfffc4 	addi	r2,r2,-1
  1924f4:	11c10e2e 	bgeu	r2,r7,192930 <__udivdi3+0x5a4>
  1924f8:	01400604 	movi	r5,24
  1924fc:	2811883a 	mov	r8,r5
  192500:	394ad83a 	srl	r5,r7,r5
  192504:	008006b4 	movhi	r2,26
  192508:	10bcc104 	addi	r2,r2,-3324
  19250c:	114b883a 	add	r5,r2,r5
  192510:	29400003 	ldbu	r5,0(r5)
  192514:	00c00804 	movi	r3,32
  192518:	2a0b883a 	add	r5,r5,r8
  19251c:	196fc83a 	sub	r23,r3,r5
  192520:	b8006b1e 	bne	r23,zero,1926d0 <__udivdi3+0x344>
  192524:	3c011436 	bltu	r7,r16,192978 <__udivdi3+0x5ec>
  192528:	9985403a 	cmpgeu	r2,r19,r6
  19252c:	0007883a 	mov	r3,zero
  192530:	00004b06 	br	192660 <__udivdi3+0x2d4>
  192534:	3000041e 	bne	r6,zero,192548 <__udivdi3+0x1bc>
  192538:	01000044 	movi	r4,1
  19253c:	000b883a 	mov	r5,zero
  192540:	0187dc80 	call	187dc8 <__udivsi3>
  192544:	1025883a 	mov	r18,r2
  192548:	00bfffd4 	movui	r2,65535
  19254c:	14805b2e 	bgeu	r2,r18,1926bc <__udivdi3+0x330>
  192550:	00804034 	movhi	r2,256
  192554:	10bfffc4 	addi	r2,r2,-1
  192558:	1480fe2e 	bgeu	r2,r18,192954 <__udivdi3+0x5c8>
  19255c:	00800604 	movi	r2,24
  192560:	1007883a 	mov	r3,r2
  192564:	9084d83a 	srl	r2,r18,r2
  192568:	010006b4 	movhi	r4,26
  19256c:	213cc104 	addi	r4,r4,-3324
  192570:	2085883a 	add	r2,r4,r2
  192574:	11800003 	ldbu	r6,0(r2)
  192578:	01c00804 	movi	r7,32
  19257c:	30c7883a 	add	r3,r6,r3
  192580:	38cfc83a 	sub	r7,r7,r3
  192584:	3800a71e 	bne	r7,zero,192824 <__udivdi3+0x498>
  192588:	9028d43a 	srli	r20,r18,16
  19258c:	84a1c83a 	sub	r16,r16,r18
  192590:	957fffcc 	andi	r21,r18,65535
  192594:	00c00044 	movi	r3,1
  192598:	8009883a 	mov	r4,r16
  19259c:	a00b883a 	mov	r5,r20
  1925a0:	d8c00015 	stw	r3,0(sp)
  1925a4:	0187dd00 	call	187dd0 <__umodsi3>
  1925a8:	8009883a 	mov	r4,r16
  1925ac:	a00b883a 	mov	r5,r20
  1925b0:	102d883a 	mov	r22,r2
  1925b4:	0187dc80 	call	187dc8 <__udivsi3>
  1925b8:	1009883a 	mov	r4,r2
  1925bc:	a80b883a 	mov	r5,r21
  1925c0:	1021883a 	mov	r16,r2
  1925c4:	0187dd80 	call	187dd8 <__mulsi3>
  1925c8:	b02c943a 	slli	r22,r22,16
  1925cc:	880ed43a 	srli	r7,r17,16
  1925d0:	d8c00017 	ldw	r3,0(sp)
  1925d4:	b1ccb03a 	or	r6,r22,r7
  1925d8:	3080052e 	bgeu	r6,r2,1925f0 <__udivdi3+0x264>
  1925dc:	348d883a 	add	r6,r6,r18
  1925e0:	813fffc4 	addi	r4,r16,-1
  1925e4:	34800136 	bltu	r6,r18,1925ec <__udivdi3+0x260>
  1925e8:	3080f236 	bltu	r6,r2,1929b4 <__udivdi3+0x628>
  1925ec:	2021883a 	mov	r16,r4
  1925f0:	30a7c83a 	sub	r19,r6,r2
  1925f4:	9809883a 	mov	r4,r19
  1925f8:	a00b883a 	mov	r5,r20
  1925fc:	d8c00015 	stw	r3,0(sp)
  192600:	0187dd00 	call	187dd0 <__umodsi3>
  192604:	102d883a 	mov	r22,r2
  192608:	9809883a 	mov	r4,r19
  19260c:	a00b883a 	mov	r5,r20
  192610:	b02c943a 	slli	r22,r22,16
  192614:	0187dc80 	call	187dc8 <__udivsi3>
  192618:	1009883a 	mov	r4,r2
  19261c:	a80b883a 	mov	r5,r21
  192620:	8c7fffcc 	andi	r17,r17,65535
  192624:	1027883a 	mov	r19,r2
  192628:	b462b03a 	or	r17,r22,r17
  19262c:	0187dd80 	call	187dd8 <__mulsi3>
  192630:	d8c00017 	ldw	r3,0(sp)
  192634:	8880052e 	bgeu	r17,r2,19264c <__udivdi3+0x2c0>
  192638:	8ca3883a 	add	r17,r17,r18
  19263c:	993fffc4 	addi	r4,r19,-1
  192640:	8c80af36 	bltu	r17,r18,192900 <__udivdi3+0x574>
  192644:	8880ae2e 	bgeu	r17,r2,192900 <__udivdi3+0x574>
  192648:	9cffff84 	addi	r19,r19,-2
  19264c:	8020943a 	slli	r16,r16,16
  192650:	9c04b03a 	or	r2,r19,r16
  192654:	00000206 	br	192660 <__udivdi3+0x2d4>
  192658:	0007883a 	mov	r3,zero
  19265c:	0005883a 	mov	r2,zero
  192660:	dfc00a17 	ldw	ra,40(sp)
  192664:	df000917 	ldw	fp,36(sp)
  192668:	ddc00817 	ldw	r23,32(sp)
  19266c:	dd800717 	ldw	r22,28(sp)
  192670:	dd400617 	ldw	r21,24(sp)
  192674:	dd000517 	ldw	r20,20(sp)
  192678:	dcc00417 	ldw	r19,16(sp)
  19267c:	dc800317 	ldw	r18,12(sp)
  192680:	dc400217 	ldw	r17,8(sp)
  192684:	dc000117 	ldw	r16,4(sp)
  192688:	dec00b04 	addi	sp,sp,44
  19268c:	f800283a 	ret
  192690:	00803fc4 	movi	r2,255
  192694:	11c0a92e 	bgeu	r2,r7,19293c <__udivdi3+0x5b0>
  192698:	01400204 	movi	r5,8
  19269c:	2811883a 	mov	r8,r5
  1926a0:	003f9706 	br	192500 <__alt_data_end+0xfff92500>
  1926a4:	00804034 	movhi	r2,256
  1926a8:	10bfffc4 	addi	r2,r2,-1
  1926ac:	1180a62e 	bgeu	r2,r6,192948 <__udivdi3+0x5bc>
  1926b0:	00800604 	movi	r2,24
  1926b4:	1007883a 	mov	r3,r2
  1926b8:	003f4c06 	br	1923ec <__alt_data_end+0xfff923ec>
  1926bc:	00803fc4 	movi	r2,255
  1926c0:	1480a72e 	bgeu	r2,r18,192960 <__udivdi3+0x5d4>
  1926c4:	00800204 	movi	r2,8
  1926c8:	1007883a 	mov	r3,r2
  1926cc:	003fa506 	br	192564 <__alt_data_end+0xfff92564>
  1926d0:	3178d83a 	srl	fp,r6,r5
  1926d4:	3dce983a 	sll	r7,r7,r23
  1926d8:	8168d83a 	srl	r20,r16,r5
  1926dc:	9950d83a 	srl	r8,r19,r5
  1926e0:	3f38b03a 	or	fp,r7,fp
  1926e4:	e024d43a 	srli	r18,fp,16
  1926e8:	85e0983a 	sll	r16,r16,r23
  1926ec:	a009883a 	mov	r4,r20
  1926f0:	900b883a 	mov	r5,r18
  1926f4:	8220b03a 	or	r16,r16,r8
  1926f8:	35ea983a 	sll	r21,r6,r23
  1926fc:	0187dd00 	call	187dd0 <__umodsi3>
  192700:	a009883a 	mov	r4,r20
  192704:	900b883a 	mov	r5,r18
  192708:	1023883a 	mov	r17,r2
  19270c:	e5bfffcc 	andi	r22,fp,65535
  192710:	0187dc80 	call	187dc8 <__udivsi3>
  192714:	1009883a 	mov	r4,r2
  192718:	b00b883a 	mov	r5,r22
  19271c:	1029883a 	mov	r20,r2
  192720:	0187dd80 	call	187dd8 <__mulsi3>
  192724:	8806943a 	slli	r3,r17,16
  192728:	8014d43a 	srli	r10,r16,16
  19272c:	1a92b03a 	or	r9,r3,r10
  192730:	4880042e 	bgeu	r9,r2,192744 <__udivdi3+0x3b8>
  192734:	4f13883a 	add	r9,r9,fp
  192738:	a0ffffc4 	addi	r3,r20,-1
  19273c:	4f00952e 	bgeu	r9,fp,192994 <__udivdi3+0x608>
  192740:	1829883a 	mov	r20,r3
  192744:	48a3c83a 	sub	r17,r9,r2
  192748:	8809883a 	mov	r4,r17
  19274c:	900b883a 	mov	r5,r18
  192750:	0187dd00 	call	187dd0 <__umodsi3>
  192754:	8809883a 	mov	r4,r17
  192758:	900b883a 	mov	r5,r18
  19275c:	d8800015 	stw	r2,0(sp)
  192760:	0187dc80 	call	187dc8 <__udivsi3>
  192764:	1009883a 	mov	r4,r2
  192768:	b00b883a 	mov	r5,r22
  19276c:	1023883a 	mov	r17,r2
  192770:	0187dd80 	call	187dd8 <__mulsi3>
  192774:	d8c00017 	ldw	r3,0(sp)
  192778:	823fffcc 	andi	r8,r16,65535
  19277c:	1806943a 	slli	r3,r3,16
  192780:	1a20b03a 	or	r16,r3,r8
  192784:	8080042e 	bgeu	r16,r2,192798 <__udivdi3+0x40c>
  192788:	8721883a 	add	r16,r16,fp
  19278c:	88ffffc4 	addi	r3,r17,-1
  192790:	87007c2e 	bgeu	r16,fp,192984 <__udivdi3+0x5f8>
  192794:	1823883a 	mov	r17,r3
  192798:	a028943a 	slli	r20,r20,16
  19279c:	acbfffcc 	andi	r18,r21,65535
  1927a0:	900b883a 	mov	r5,r18
  1927a4:	8d28b03a 	or	r20,r17,r20
  1927a8:	a022d43a 	srli	r17,r20,16
  1927ac:	a5bfffcc 	andi	r22,r20,65535
  1927b0:	b009883a 	mov	r4,r22
  1927b4:	a82ad43a 	srli	r21,r21,16
  1927b8:	80a1c83a 	sub	r16,r16,r2
  1927bc:	0187dd80 	call	187dd8 <__mulsi3>
  1927c0:	8809883a 	mov	r4,r17
  1927c4:	900b883a 	mov	r5,r18
  1927c8:	1039883a 	mov	fp,r2
  1927cc:	0187dd80 	call	187dd8 <__mulsi3>
  1927d0:	8809883a 	mov	r4,r17
  1927d4:	a80b883a 	mov	r5,r21
  1927d8:	1025883a 	mov	r18,r2
  1927dc:	0187dd80 	call	187dd8 <__mulsi3>
  1927e0:	b009883a 	mov	r4,r22
  1927e4:	a80b883a 	mov	r5,r21
  1927e8:	1023883a 	mov	r17,r2
  1927ec:	0187dd80 	call	187dd8 <__mulsi3>
  1927f0:	e006d43a 	srli	r3,fp,16
  1927f4:	9085883a 	add	r2,r18,r2
  1927f8:	10c7883a 	add	r3,r2,r3
  1927fc:	1c80022e 	bgeu	r3,r18,192808 <__udivdi3+0x47c>
  192800:	00800074 	movhi	r2,1
  192804:	88a3883a 	add	r17,r17,r2
  192808:	1808d43a 	srli	r4,r3,16
  19280c:	8909883a 	add	r4,r17,r4
  192810:	81004436 	bltu	r16,r4,192924 <__udivdi3+0x598>
  192814:	81003e26 	beq	r16,r4,192910 <__udivdi3+0x584>
  192818:	a005883a 	mov	r2,r20
  19281c:	0007883a 	mov	r3,zero
  192820:	003f8f06 	br	192660 <__alt_data_end+0xfff92660>
  192824:	91e4983a 	sll	r18,r18,r7
  192828:	80eed83a 	srl	r23,r16,r3
  19282c:	81cc983a 	sll	r6,r16,r7
  192830:	9028d43a 	srli	r20,r18,16
  192834:	98c6d83a 	srl	r3,r19,r3
  192838:	b809883a 	mov	r4,r23
  19283c:	a00b883a 	mov	r5,r20
  192840:	30ecb03a 	or	r22,r6,r3
  192844:	99e2983a 	sll	r17,r19,r7
  192848:	0187dd00 	call	187dd0 <__umodsi3>
  19284c:	b809883a 	mov	r4,r23
  192850:	a00b883a 	mov	r5,r20
  192854:	1021883a 	mov	r16,r2
  192858:	957fffcc 	andi	r21,r18,65535
  19285c:	0187dc80 	call	187dc8 <__udivsi3>
  192860:	a80b883a 	mov	r5,r21
  192864:	1009883a 	mov	r4,r2
  192868:	102f883a 	mov	r23,r2
  19286c:	0187dd80 	call	187dd8 <__mulsi3>
  192870:	8020943a 	slli	r16,r16,16
  192874:	b00ad43a 	srli	r5,r22,16
  192878:	814cb03a 	or	r6,r16,r5
  19287c:	3080062e 	bgeu	r6,r2,192898 <__udivdi3+0x50c>
  192880:	348d883a 	add	r6,r6,r18
  192884:	b8ffffc4 	addi	r3,r23,-1
  192888:	34804836 	bltu	r6,r18,1929ac <__udivdi3+0x620>
  19288c:	3080472e 	bgeu	r6,r2,1929ac <__udivdi3+0x620>
  192890:	bdffff84 	addi	r23,r23,-2
  192894:	348d883a 	add	r6,r6,r18
  192898:	30a7c83a 	sub	r19,r6,r2
  19289c:	9809883a 	mov	r4,r19
  1928a0:	a00b883a 	mov	r5,r20
  1928a4:	0187dd00 	call	187dd0 <__umodsi3>
  1928a8:	9809883a 	mov	r4,r19
  1928ac:	a00b883a 	mov	r5,r20
  1928b0:	1039883a 	mov	fp,r2
  1928b4:	0187dc80 	call	187dc8 <__udivsi3>
  1928b8:	1009883a 	mov	r4,r2
  1928bc:	a80b883a 	mov	r5,r21
  1928c0:	e038943a 	slli	fp,fp,16
  1928c4:	1027883a 	mov	r19,r2
  1928c8:	0187dd80 	call	187dd8 <__mulsi3>
  1928cc:	b1bfffcc 	andi	r6,r22,65535
  1928d0:	e18cb03a 	or	r6,fp,r6
  1928d4:	3080062e 	bgeu	r6,r2,1928f0 <__udivdi3+0x564>
  1928d8:	348d883a 	add	r6,r6,r18
  1928dc:	98ffffc4 	addi	r3,r19,-1
  1928e0:	34803036 	bltu	r6,r18,1929a4 <__udivdi3+0x618>
  1928e4:	30802f2e 	bgeu	r6,r2,1929a4 <__udivdi3+0x618>
  1928e8:	9cffff84 	addi	r19,r19,-2
  1928ec:	348d883a 	add	r6,r6,r18
  1928f0:	b82e943a 	slli	r23,r23,16
  1928f4:	30a1c83a 	sub	r16,r6,r2
  1928f8:	9dc6b03a 	or	r3,r19,r23
  1928fc:	003f2606 	br	192598 <__alt_data_end+0xfff92598>
  192900:	2027883a 	mov	r19,r4
  192904:	003f5106 	br	19264c <__alt_data_end+0xfff9264c>
  192908:	1827883a 	mov	r19,r3
  19290c:	003ef006 	br	1924d0 <__alt_data_end+0xfff924d0>
  192910:	1808943a 	slli	r4,r3,16
  192914:	9dc6983a 	sll	r3,r19,r23
  192918:	e73fffcc 	andi	fp,fp,65535
  19291c:	2709883a 	add	r4,r4,fp
  192920:	193fbd2e 	bgeu	r3,r4,192818 <__alt_data_end+0xfff92818>
  192924:	a0bfffc4 	addi	r2,r20,-1
  192928:	0007883a 	mov	r3,zero
  19292c:	003f4c06 	br	192660 <__alt_data_end+0xfff92660>
  192930:	01400404 	movi	r5,16
  192934:	2811883a 	mov	r8,r5
  192938:	003ef106 	br	192500 <__alt_data_end+0xfff92500>
  19293c:	000b883a 	mov	r5,zero
  192940:	0011883a 	mov	r8,zero
  192944:	003eee06 	br	192500 <__alt_data_end+0xfff92500>
  192948:	00800404 	movi	r2,16
  19294c:	1007883a 	mov	r3,r2
  192950:	003ea606 	br	1923ec <__alt_data_end+0xfff923ec>
  192954:	00800404 	movi	r2,16
  192958:	1007883a 	mov	r3,r2
  19295c:	003f0106 	br	192564 <__alt_data_end+0xfff92564>
  192960:	0005883a 	mov	r2,zero
  192964:	0007883a 	mov	r3,zero
  192968:	003efe06 	br	192564 <__alt_data_end+0xfff92564>
  19296c:	0005883a 	mov	r2,zero
  192970:	0007883a 	mov	r3,zero
  192974:	003e9d06 	br	1923ec <__alt_data_end+0xfff923ec>
  192978:	0007883a 	mov	r3,zero
  19297c:	00800044 	movi	r2,1
  192980:	003f3706 	br	192660 <__alt_data_end+0xfff92660>
  192984:	80bf832e 	bgeu	r16,r2,192794 <__alt_data_end+0xfff92794>
  192988:	8c7fff84 	addi	r17,r17,-2
  19298c:	8721883a 	add	r16,r16,fp
  192990:	003f8106 	br	192798 <__alt_data_end+0xfff92798>
  192994:	48bf6a2e 	bgeu	r9,r2,192740 <__alt_data_end+0xfff92740>
  192998:	a53fff84 	addi	r20,r20,-2
  19299c:	4f13883a 	add	r9,r9,fp
  1929a0:	003f6806 	br	192744 <__alt_data_end+0xfff92744>
  1929a4:	1827883a 	mov	r19,r3
  1929a8:	003fd106 	br	1928f0 <__alt_data_end+0xfff928f0>
  1929ac:	182f883a 	mov	r23,r3
  1929b0:	003fb906 	br	192898 <__alt_data_end+0xfff92898>
  1929b4:	843fff84 	addi	r16,r16,-2
  1929b8:	348d883a 	add	r6,r6,r18
  1929bc:	003f0c06 	br	1925f0 <__alt_data_end+0xfff925f0>
  1929c0:	843fff84 	addi	r16,r16,-2
  1929c4:	1c87883a 	add	r3,r3,r18
  1929c8:	003eac06 	br	19247c <__alt_data_end+0xfff9247c>

001929cc <__umoddi3>:
  1929cc:	defff404 	addi	sp,sp,-48
  1929d0:	dd800815 	stw	r22,32(sp)
  1929d4:	dc400315 	stw	r17,12(sp)
  1929d8:	dc000215 	stw	r16,8(sp)
  1929dc:	dfc00b15 	stw	ra,44(sp)
  1929e0:	df000a15 	stw	fp,40(sp)
  1929e4:	ddc00915 	stw	r23,36(sp)
  1929e8:	dd400715 	stw	r21,28(sp)
  1929ec:	dd000615 	stw	r20,24(sp)
  1929f0:	dcc00515 	stw	r19,20(sp)
  1929f4:	dc800415 	stw	r18,16(sp)
  1929f8:	2021883a 	mov	r16,r4
  1929fc:	2823883a 	mov	r17,r5
  192a00:	282d883a 	mov	r22,r5
  192a04:	38003c1e 	bne	r7,zero,192af8 <__umoddi3+0x12c>
  192a08:	3027883a 	mov	r19,r6
  192a0c:	2029883a 	mov	r20,r4
  192a10:	2980522e 	bgeu	r5,r6,192b5c <__umoddi3+0x190>
  192a14:	00bfffd4 	movui	r2,65535
  192a18:	1180a436 	bltu	r2,r6,192cac <__umoddi3+0x2e0>
  192a1c:	00803fc4 	movi	r2,255
  192a20:	11815e2e 	bgeu	r2,r6,192f9c <__umoddi3+0x5d0>
  192a24:	01400204 	movi	r5,8
  192a28:	2805883a 	mov	r2,r5
  192a2c:	314ad83a 	srl	r5,r6,r5
  192a30:	00c006b4 	movhi	r3,26
  192a34:	18fcc104 	addi	r3,r3,-3324
  192a38:	194b883a 	add	r5,r3,r5
  192a3c:	29000003 	ldbu	r4,0(r5)
  192a40:	2089883a 	add	r4,r4,r2
  192a44:	00800804 	movi	r2,32
  192a48:	1105c83a 	sub	r2,r2,r4
  192a4c:	10010c26 	beq	r2,zero,192e80 <__umoddi3+0x4b4>
  192a50:	88a2983a 	sll	r17,r17,r2
  192a54:	8108d83a 	srl	r4,r16,r4
  192a58:	30a6983a 	sll	r19,r6,r2
  192a5c:	80a8983a 	sll	r20,r16,r2
  192a60:	1025883a 	mov	r18,r2
  192a64:	892cb03a 	or	r22,r17,r4
  192a68:	9822d43a 	srli	r17,r19,16
  192a6c:	b009883a 	mov	r4,r22
  192a70:	9d7fffcc 	andi	r21,r19,65535
  192a74:	880b883a 	mov	r5,r17
  192a78:	0187dd00 	call	187dd0 <__umodsi3>
  192a7c:	b009883a 	mov	r4,r22
  192a80:	880b883a 	mov	r5,r17
  192a84:	102f883a 	mov	r23,r2
  192a88:	0187dc80 	call	187dc8 <__udivsi3>
  192a8c:	1009883a 	mov	r4,r2
  192a90:	a80b883a 	mov	r5,r21
  192a94:	0187dd80 	call	187dd8 <__mulsi3>
  192a98:	b82e943a 	slli	r23,r23,16
  192a9c:	a008d43a 	srli	r4,r20,16
  192aa0:	b906b03a 	or	r3,r23,r4
  192aa4:	1880042e 	bgeu	r3,r2,192ab8 <__umoddi3+0xec>
  192aa8:	1cc7883a 	add	r3,r3,r19
  192aac:	1cc00236 	bltu	r3,r19,192ab8 <__umoddi3+0xec>
  192ab0:	1880012e 	bgeu	r3,r2,192ab8 <__umoddi3+0xec>
  192ab4:	1cc7883a 	add	r3,r3,r19
  192ab8:	18a1c83a 	sub	r16,r3,r2
  192abc:	8009883a 	mov	r4,r16
  192ac0:	880b883a 	mov	r5,r17
  192ac4:	0187dd00 	call	187dd0 <__umodsi3>
  192ac8:	8009883a 	mov	r4,r16
  192acc:	880b883a 	mov	r5,r17
  192ad0:	102d883a 	mov	r22,r2
  192ad4:	0187dc80 	call	187dc8 <__udivsi3>
  192ad8:	1009883a 	mov	r4,r2
  192adc:	a80b883a 	mov	r5,r21
  192ae0:	b02c943a 	slli	r22,r22,16
  192ae4:	0187dd80 	call	187dd8 <__mulsi3>
  192ae8:	a13fffcc 	andi	r4,r20,65535
  192aec:	b106b03a 	or	r3,r22,r4
  192af0:	1880572e 	bgeu	r3,r2,192c50 <__umoddi3+0x284>
  192af4:	00005206 	br	192c40 <__umoddi3+0x274>
  192af8:	29c05936 	bltu	r5,r7,192c60 <__umoddi3+0x294>
  192afc:	00bfffd4 	movui	r2,65535
  192b00:	11c0652e 	bgeu	r2,r7,192c98 <__umoddi3+0x2cc>
  192b04:	00804034 	movhi	r2,256
  192b08:	10bfffc4 	addi	r2,r2,-1
  192b0c:	11c1172e 	bgeu	r2,r7,192f6c <__umoddi3+0x5a0>
  192b10:	01400604 	movi	r5,24
  192b14:	282b883a 	mov	r21,r5
  192b18:	394ad83a 	srl	r5,r7,r5
  192b1c:	00c006b4 	movhi	r3,26
  192b20:	18fcc104 	addi	r3,r3,-3324
  192b24:	194b883a 	add	r5,r3,r5
  192b28:	28800003 	ldbu	r2,0(r5)
  192b2c:	00c00804 	movi	r3,32
  192b30:	156b883a 	add	r21,r2,r21
  192b34:	1d69c83a 	sub	r20,r3,r21
  192b38:	a000671e 	bne	r20,zero,192cd8 <__umoddi3+0x30c>
  192b3c:	3c400136 	bltu	r7,r17,192b44 <__umoddi3+0x178>
  192b40:	81812336 	bltu	r16,r6,192fd0 <__umoddi3+0x604>
  192b44:	8185c83a 	sub	r2,r16,r6
  192b48:	89e3c83a 	sub	r17,r17,r7
  192b4c:	8087803a 	cmpltu	r3,r16,r2
  192b50:	88edc83a 	sub	r22,r17,r3
  192b54:	b007883a 	mov	r3,r22
  192b58:	00004306 	br	192c68 <__umoddi3+0x29c>
  192b5c:	3000041e 	bne	r6,zero,192b70 <__umoddi3+0x1a4>
  192b60:	01000044 	movi	r4,1
  192b64:	000b883a 	mov	r5,zero
  192b68:	0187dc80 	call	187dc8 <__udivsi3>
  192b6c:	1027883a 	mov	r19,r2
  192b70:	00bfffd4 	movui	r2,65535
  192b74:	14c0532e 	bgeu	r2,r19,192cc4 <__umoddi3+0x2f8>
  192b78:	00804034 	movhi	r2,256
  192b7c:	10bfffc4 	addi	r2,r2,-1
  192b80:	14c1032e 	bgeu	r2,r19,192f90 <__umoddi3+0x5c4>
  192b84:	00800604 	movi	r2,24
  192b88:	1007883a 	mov	r3,r2
  192b8c:	9884d83a 	srl	r2,r19,r2
  192b90:	010006b4 	movhi	r4,26
  192b94:	213cc104 	addi	r4,r4,-3324
  192b98:	2085883a 	add	r2,r4,r2
  192b9c:	11000003 	ldbu	r4,0(r2)
  192ba0:	00800804 	movi	r2,32
  192ba4:	20c7883a 	add	r3,r4,r3
  192ba8:	10c5c83a 	sub	r2,r2,r3
  192bac:	1000b61e 	bne	r2,zero,192e88 <__umoddi3+0x4bc>
  192bb0:	982ad43a 	srli	r21,r19,16
  192bb4:	8ce3c83a 	sub	r17,r17,r19
  192bb8:	9dbfffcc 	andi	r22,r19,65535
  192bbc:	0025883a 	mov	r18,zero
  192bc0:	8809883a 	mov	r4,r17
  192bc4:	a80b883a 	mov	r5,r21
  192bc8:	0187dd00 	call	187dd0 <__umodsi3>
  192bcc:	8809883a 	mov	r4,r17
  192bd0:	a80b883a 	mov	r5,r21
  192bd4:	102f883a 	mov	r23,r2
  192bd8:	0187dc80 	call	187dc8 <__udivsi3>
  192bdc:	1009883a 	mov	r4,r2
  192be0:	b00b883a 	mov	r5,r22
  192be4:	0187dd80 	call	187dd8 <__mulsi3>
  192be8:	b82e943a 	slli	r23,r23,16
  192bec:	a008d43a 	srli	r4,r20,16
  192bf0:	b906b03a 	or	r3,r23,r4
  192bf4:	1880032e 	bgeu	r3,r2,192c04 <__umoddi3+0x238>
  192bf8:	1cc7883a 	add	r3,r3,r19
  192bfc:	1cc00136 	bltu	r3,r19,192c04 <__umoddi3+0x238>
  192c00:	1880f136 	bltu	r3,r2,192fc8 <__umoddi3+0x5fc>
  192c04:	18a1c83a 	sub	r16,r3,r2
  192c08:	8009883a 	mov	r4,r16
  192c0c:	a80b883a 	mov	r5,r21
  192c10:	0187dd00 	call	187dd0 <__umodsi3>
  192c14:	8009883a 	mov	r4,r16
  192c18:	a80b883a 	mov	r5,r21
  192c1c:	1023883a 	mov	r17,r2
  192c20:	0187dc80 	call	187dc8 <__udivsi3>
  192c24:	1009883a 	mov	r4,r2
  192c28:	b00b883a 	mov	r5,r22
  192c2c:	8822943a 	slli	r17,r17,16
  192c30:	0187dd80 	call	187dd8 <__mulsi3>
  192c34:	a13fffcc 	andi	r4,r20,65535
  192c38:	8906b03a 	or	r3,r17,r4
  192c3c:	1880042e 	bgeu	r3,r2,192c50 <__umoddi3+0x284>
  192c40:	1cc7883a 	add	r3,r3,r19
  192c44:	1cc00236 	bltu	r3,r19,192c50 <__umoddi3+0x284>
  192c48:	1880012e 	bgeu	r3,r2,192c50 <__umoddi3+0x284>
  192c4c:	1cc7883a 	add	r3,r3,r19
  192c50:	1887c83a 	sub	r3,r3,r2
  192c54:	1c84d83a 	srl	r2,r3,r18
  192c58:	0007883a 	mov	r3,zero
  192c5c:	00000206 	br	192c68 <__umoddi3+0x29c>
  192c60:	2005883a 	mov	r2,r4
  192c64:	2807883a 	mov	r3,r5
  192c68:	dfc00b17 	ldw	ra,44(sp)
  192c6c:	df000a17 	ldw	fp,40(sp)
  192c70:	ddc00917 	ldw	r23,36(sp)
  192c74:	dd800817 	ldw	r22,32(sp)
  192c78:	dd400717 	ldw	r21,28(sp)
  192c7c:	dd000617 	ldw	r20,24(sp)
  192c80:	dcc00517 	ldw	r19,20(sp)
  192c84:	dc800417 	ldw	r18,16(sp)
  192c88:	dc400317 	ldw	r17,12(sp)
  192c8c:	dc000217 	ldw	r16,8(sp)
  192c90:	dec00c04 	addi	sp,sp,48
  192c94:	f800283a 	ret
  192c98:	00803fc4 	movi	r2,255
  192c9c:	11c0b02e 	bgeu	r2,r7,192f60 <__umoddi3+0x594>
  192ca0:	01400204 	movi	r5,8
  192ca4:	282b883a 	mov	r21,r5
  192ca8:	003f9b06 	br	192b18 <__alt_data_end+0xfff92b18>
  192cac:	00804034 	movhi	r2,256
  192cb0:	10bfffc4 	addi	r2,r2,-1
  192cb4:	1180b02e 	bgeu	r2,r6,192f78 <__umoddi3+0x5ac>
  192cb8:	01400604 	movi	r5,24
  192cbc:	2805883a 	mov	r2,r5
  192cc0:	003f5a06 	br	192a2c <__alt_data_end+0xfff92a2c>
  192cc4:	00803fc4 	movi	r2,255
  192cc8:	14c0ae2e 	bgeu	r2,r19,192f84 <__umoddi3+0x5b8>
  192ccc:	00800204 	movi	r2,8
  192cd0:	1007883a 	mov	r3,r2
  192cd4:	003fad06 	br	192b8c <__alt_data_end+0xfff92b8c>
  192cd8:	3d0a983a 	sll	r5,r7,r20
  192cdc:	356cd83a 	srl	r22,r6,r21
  192ce0:	8d78d83a 	srl	fp,r17,r21
  192ce4:	8d10983a 	sll	r8,r17,r20
  192ce8:	2dacb03a 	or	r22,r5,r22
  192cec:	b02ed43a 	srli	r23,r22,16
  192cf0:	8564d83a 	srl	r18,r16,r21
  192cf4:	e009883a 	mov	r4,fp
  192cf8:	b80b883a 	mov	r5,r23
  192cfc:	44a4b03a 	or	r18,r8,r18
  192d00:	3526983a 	sll	r19,r6,r20
  192d04:	0187dd00 	call	187dd0 <__umodsi3>
  192d08:	e009883a 	mov	r4,fp
  192d0c:	b80b883a 	mov	r5,r23
  192d10:	b47fffcc 	andi	r17,r22,65535
  192d14:	d8800015 	stw	r2,0(sp)
  192d18:	0187dc80 	call	187dc8 <__udivsi3>
  192d1c:	1009883a 	mov	r4,r2
  192d20:	880b883a 	mov	r5,r17
  192d24:	1039883a 	mov	fp,r2
  192d28:	0187dd80 	call	187dd8 <__mulsi3>
  192d2c:	d9800017 	ldw	r6,0(sp)
  192d30:	9008d43a 	srli	r4,r18,16
  192d34:	8520983a 	sll	r16,r16,r20
  192d38:	300c943a 	slli	r6,r6,16
  192d3c:	3106b03a 	or	r3,r6,r4
  192d40:	1880042e 	bgeu	r3,r2,192d54 <__umoddi3+0x388>
  192d44:	1d87883a 	add	r3,r3,r22
  192d48:	e13fffc4 	addi	r4,fp,-1
  192d4c:	1d809a2e 	bgeu	r3,r22,192fb8 <__umoddi3+0x5ec>
  192d50:	2039883a 	mov	fp,r4
  192d54:	1887c83a 	sub	r3,r3,r2
  192d58:	1809883a 	mov	r4,r3
  192d5c:	b80b883a 	mov	r5,r23
  192d60:	d8c00115 	stw	r3,4(sp)
  192d64:	0187dd00 	call	187dd0 <__umodsi3>
  192d68:	d8c00117 	ldw	r3,4(sp)
  192d6c:	b80b883a 	mov	r5,r23
  192d70:	d8800015 	stw	r2,0(sp)
  192d74:	1809883a 	mov	r4,r3
  192d78:	0187dc80 	call	187dc8 <__udivsi3>
  192d7c:	880b883a 	mov	r5,r17
  192d80:	1009883a 	mov	r4,r2
  192d84:	102f883a 	mov	r23,r2
  192d88:	0187dd80 	call	187dd8 <__mulsi3>
  192d8c:	d9800017 	ldw	r6,0(sp)
  192d90:	947fffcc 	andi	r17,r18,65535
  192d94:	300c943a 	slli	r6,r6,16
  192d98:	3464b03a 	or	r18,r6,r17
  192d9c:	9080042e 	bgeu	r18,r2,192db0 <__umoddi3+0x3e4>
  192da0:	95a5883a 	add	r18,r18,r22
  192da4:	b8ffffc4 	addi	r3,r23,-1
  192da8:	95807f2e 	bgeu	r18,r22,192fa8 <__umoddi3+0x5dc>
  192dac:	182f883a 	mov	r23,r3
  192db0:	e038943a 	slli	fp,fp,16
  192db4:	980cd43a 	srli	r6,r19,16
  192db8:	98ffffcc 	andi	r3,r19,65535
  192dbc:	bf38b03a 	or	fp,r23,fp
  192dc0:	e02ed43a 	srli	r23,fp,16
  192dc4:	e73fffcc 	andi	fp,fp,65535
  192dc8:	180b883a 	mov	r5,r3
  192dcc:	e009883a 	mov	r4,fp
  192dd0:	d9800015 	stw	r6,0(sp)
  192dd4:	d8c00115 	stw	r3,4(sp)
  192dd8:	90a5c83a 	sub	r18,r18,r2
  192ddc:	0187dd80 	call	187dd8 <__mulsi3>
  192de0:	d8c00117 	ldw	r3,4(sp)
  192de4:	b809883a 	mov	r4,r23
  192de8:	1023883a 	mov	r17,r2
  192dec:	180b883a 	mov	r5,r3
  192df0:	0187dd80 	call	187dd8 <__mulsi3>
  192df4:	d9800017 	ldw	r6,0(sp)
  192df8:	b809883a 	mov	r4,r23
  192dfc:	d8800115 	stw	r2,4(sp)
  192e00:	300b883a 	mov	r5,r6
  192e04:	302f883a 	mov	r23,r6
  192e08:	0187dd80 	call	187dd8 <__mulsi3>
  192e0c:	e009883a 	mov	r4,fp
  192e10:	b80b883a 	mov	r5,r23
  192e14:	d8800015 	stw	r2,0(sp)
  192e18:	0187dd80 	call	187dd8 <__mulsi3>
  192e1c:	d8c00117 	ldw	r3,4(sp)
  192e20:	880cd43a 	srli	r6,r17,16
  192e24:	d9c00017 	ldw	r7,0(sp)
  192e28:	1885883a 	add	r2,r3,r2
  192e2c:	118d883a 	add	r6,r2,r6
  192e30:	30c0022e 	bgeu	r6,r3,192e3c <__umoddi3+0x470>
  192e34:	00800074 	movhi	r2,1
  192e38:	388f883a 	add	r7,r7,r2
  192e3c:	3006d43a 	srli	r3,r6,16
  192e40:	300c943a 	slli	r6,r6,16
  192e44:	8c7fffcc 	andi	r17,r17,65535
  192e48:	38c7883a 	add	r3,r7,r3
  192e4c:	3463883a 	add	r17,r6,r17
  192e50:	90c03d36 	bltu	r18,r3,192f48 <__umoddi3+0x57c>
  192e54:	90c06026 	beq	r18,r3,192fd8 <__umoddi3+0x60c>
  192e58:	90c9c83a 	sub	r4,r18,r3
  192e5c:	880f883a 	mov	r7,r17
  192e60:	81cfc83a 	sub	r7,r16,r7
  192e64:	81c7803a 	cmpltu	r3,r16,r7
  192e68:	20c7c83a 	sub	r3,r4,r3
  192e6c:	1d44983a 	sll	r2,r3,r21
  192e70:	3d0ed83a 	srl	r7,r7,r20
  192e74:	1d06d83a 	srl	r3,r3,r20
  192e78:	11c4b03a 	or	r2,r2,r7
  192e7c:	003f7a06 	br	192c68 <__alt_data_end+0xfff92c68>
  192e80:	0025883a 	mov	r18,zero
  192e84:	003ef806 	br	192a68 <__alt_data_end+0xfff92a68>
  192e88:	98a6983a 	sll	r19,r19,r2
  192e8c:	88e8d83a 	srl	r20,r17,r3
  192e90:	80c6d83a 	srl	r3,r16,r3
  192e94:	982ad43a 	srli	r21,r19,16
  192e98:	88a2983a 	sll	r17,r17,r2
  192e9c:	a009883a 	mov	r4,r20
  192ea0:	a80b883a 	mov	r5,r21
  192ea4:	88eeb03a 	or	r23,r17,r3
  192ea8:	1025883a 	mov	r18,r2
  192eac:	0187dd00 	call	187dd0 <__umodsi3>
  192eb0:	a009883a 	mov	r4,r20
  192eb4:	a80b883a 	mov	r5,r21
  192eb8:	1023883a 	mov	r17,r2
  192ebc:	9dbfffcc 	andi	r22,r19,65535
  192ec0:	0187dc80 	call	187dc8 <__udivsi3>
  192ec4:	1009883a 	mov	r4,r2
  192ec8:	b00b883a 	mov	r5,r22
  192ecc:	0187dd80 	call	187dd8 <__mulsi3>
  192ed0:	8822943a 	slli	r17,r17,16
  192ed4:	b808d43a 	srli	r4,r23,16
  192ed8:	84a8983a 	sll	r20,r16,r18
  192edc:	8906b03a 	or	r3,r17,r4
  192ee0:	1880042e 	bgeu	r3,r2,192ef4 <__umoddi3+0x528>
  192ee4:	1cc7883a 	add	r3,r3,r19
  192ee8:	1cc00236 	bltu	r3,r19,192ef4 <__umoddi3+0x528>
  192eec:	1880012e 	bgeu	r3,r2,192ef4 <__umoddi3+0x528>
  192ef0:	1cc7883a 	add	r3,r3,r19
  192ef4:	18a1c83a 	sub	r16,r3,r2
  192ef8:	8009883a 	mov	r4,r16
  192efc:	a80b883a 	mov	r5,r21
  192f00:	0187dd00 	call	187dd0 <__umodsi3>
  192f04:	8009883a 	mov	r4,r16
  192f08:	a80b883a 	mov	r5,r21
  192f0c:	1039883a 	mov	fp,r2
  192f10:	0187dc80 	call	187dc8 <__udivsi3>
  192f14:	1009883a 	mov	r4,r2
  192f18:	b00b883a 	mov	r5,r22
  192f1c:	0187dd80 	call	187dd8 <__mulsi3>
  192f20:	e006943a 	slli	r3,fp,16
  192f24:	b93fffcc 	andi	r4,r23,65535
  192f28:	1906b03a 	or	r3,r3,r4
  192f2c:	1880042e 	bgeu	r3,r2,192f40 <__umoddi3+0x574>
  192f30:	1cc7883a 	add	r3,r3,r19
  192f34:	1cc00236 	bltu	r3,r19,192f40 <__umoddi3+0x574>
  192f38:	1880012e 	bgeu	r3,r2,192f40 <__umoddi3+0x574>
  192f3c:	1cc7883a 	add	r3,r3,r19
  192f40:	18a3c83a 	sub	r17,r3,r2
  192f44:	003f1e06 	br	192bc0 <__alt_data_end+0xfff92bc0>
  192f48:	8ccfc83a 	sub	r7,r17,r19
  192f4c:	1d89c83a 	sub	r4,r3,r22
  192f50:	89e3803a 	cmpltu	r17,r17,r7
  192f54:	2463c83a 	sub	r17,r4,r17
  192f58:	9449c83a 	sub	r4,r18,r17
  192f5c:	003fc006 	br	192e60 <__alt_data_end+0xfff92e60>
  192f60:	000b883a 	mov	r5,zero
  192f64:	002b883a 	mov	r21,zero
  192f68:	003eeb06 	br	192b18 <__alt_data_end+0xfff92b18>
  192f6c:	01400404 	movi	r5,16
  192f70:	282b883a 	mov	r21,r5
  192f74:	003ee806 	br	192b18 <__alt_data_end+0xfff92b18>
  192f78:	01400404 	movi	r5,16
  192f7c:	2805883a 	mov	r2,r5
  192f80:	003eaa06 	br	192a2c <__alt_data_end+0xfff92a2c>
  192f84:	0005883a 	mov	r2,zero
  192f88:	0007883a 	mov	r3,zero
  192f8c:	003eff06 	br	192b8c <__alt_data_end+0xfff92b8c>
  192f90:	00800404 	movi	r2,16
  192f94:	1007883a 	mov	r3,r2
  192f98:	003efc06 	br	192b8c <__alt_data_end+0xfff92b8c>
  192f9c:	000b883a 	mov	r5,zero
  192fa0:	0005883a 	mov	r2,zero
  192fa4:	003ea106 	br	192a2c <__alt_data_end+0xfff92a2c>
  192fa8:	90bf802e 	bgeu	r18,r2,192dac <__alt_data_end+0xfff92dac>
  192fac:	bdffff84 	addi	r23,r23,-2
  192fb0:	95a5883a 	add	r18,r18,r22
  192fb4:	003f7e06 	br	192db0 <__alt_data_end+0xfff92db0>
  192fb8:	18bf652e 	bgeu	r3,r2,192d50 <__alt_data_end+0xfff92d50>
  192fbc:	e73fff84 	addi	fp,fp,-2
  192fc0:	1d87883a 	add	r3,r3,r22
  192fc4:	003f6306 	br	192d54 <__alt_data_end+0xfff92d54>
  192fc8:	1cc7883a 	add	r3,r3,r19
  192fcc:	003f0d06 	br	192c04 <__alt_data_end+0xfff92c04>
  192fd0:	8005883a 	mov	r2,r16
  192fd4:	003edf06 	br	192b54 <__alt_data_end+0xfff92b54>
  192fd8:	847fdb36 	bltu	r16,r17,192f48 <__alt_data_end+0xfff92f48>
  192fdc:	880f883a 	mov	r7,r17
  192fe0:	0009883a 	mov	r4,zero
  192fe4:	003f9e06 	br	192e60 <__alt_data_end+0xfff92e60>

00192fe8 <__adddf3>:
  192fe8:	02000434 	movhi	r8,16
  192fec:	423fffc4 	addi	r8,r8,-1
  192ff0:	defffb04 	addi	sp,sp,-20
  192ff4:	2a12703a 	and	r9,r5,r8
  192ff8:	2806d7fa 	srli	r3,r5,31
  192ffc:	3a10703a 	and	r8,r7,r8
  193000:	3804d53a 	srli	r2,r7,20
  193004:	3014d77a 	srli	r10,r6,29
  193008:	dc000015 	stw	r16,0(sp)
  19300c:	481290fa 	slli	r9,r9,3
  193010:	2820d53a 	srli	r16,r5,20
  193014:	401090fa 	slli	r8,r8,3
  193018:	200ad77a 	srli	r5,r4,29
  19301c:	380ed7fa 	srli	r7,r7,31
  193020:	dc800215 	stw	r18,8(sp)
  193024:	dc400115 	stw	r17,4(sp)
  193028:	dfc00415 	stw	ra,16(sp)
  19302c:	dcc00315 	stw	r19,12(sp)
  193030:	1c803fcc 	andi	r18,r3,255
  193034:	8401ffcc 	andi	r16,r16,2047
  193038:	494ab03a 	or	r5,r9,r5
  19303c:	202290fa 	slli	r17,r4,3
  193040:	1081ffcc 	andi	r2,r2,2047
  193044:	4290b03a 	or	r8,r8,r10
  193048:	300c90fa 	slli	r6,r6,3
  19304c:	91c07026 	beq	r18,r7,193210 <__adddf3+0x228>
  193050:	8087c83a 	sub	r3,r16,r2
  193054:	00c0b30e 	bge	zero,r3,193324 <__adddf3+0x33c>
  193058:	10002a1e 	bne	r2,zero,193104 <__adddf3+0x11c>
  19305c:	4184b03a 	or	r2,r8,r6
  193060:	1000991e 	bne	r2,zero,1932c8 <__adddf3+0x2e0>
  193064:	888001cc 	andi	r2,r17,7
  193068:	10005b26 	beq	r2,zero,1931d8 <__adddf3+0x1f0>
  19306c:	88c003cc 	andi	r3,r17,15
  193070:	00800104 	movi	r2,4
  193074:	18805826 	beq	r3,r2,1931d8 <__adddf3+0x1f0>
  193078:	89800104 	addi	r6,r17,4
  19307c:	3463803a 	cmpltu	r17,r6,r17
  193080:	2c4b883a 	add	r5,r5,r17
  193084:	2880202c 	andhi	r2,r5,128
  193088:	9007883a 	mov	r3,r18
  19308c:	3023883a 	mov	r17,r6
  193090:	10005426 	beq	r2,zero,1931e4 <__adddf3+0x1fc>
  193094:	84000044 	addi	r16,r16,1
  193098:	0081ffc4 	movi	r2,2047
  19309c:	8080c126 	beq	r16,r2,1933a4 <__adddf3+0x3bc>
  1930a0:	013fe034 	movhi	r4,65408
  1930a4:	213fffc4 	addi	r4,r4,-1
  1930a8:	290a703a 	and	r5,r5,r4
  1930ac:	2804977a 	slli	r2,r5,29
  1930b0:	280a927a 	slli	r5,r5,9
  1930b4:	8822d0fa 	srli	r17,r17,3
  1930b8:	8401ffcc 	andi	r16,r16,2047
  1930bc:	2808d33a 	srli	r4,r5,12
  1930c0:	1444b03a 	or	r2,r2,r17
  1930c4:	8401ffcc 	andi	r16,r16,2047
  1930c8:	800a953a 	slli	r5,r16,20
  1930cc:	18c03fcc 	andi	r3,r3,255
  1930d0:	04000434 	movhi	r16,16
  1930d4:	180697fa 	slli	r3,r3,31
  1930d8:	843fffc4 	addi	r16,r16,-1
  1930dc:	2420703a 	and	r16,r4,r16
  1930e0:	8160b03a 	or	r16,r16,r5
  1930e4:	80c6b03a 	or	r3,r16,r3
  1930e8:	dfc00417 	ldw	ra,16(sp)
  1930ec:	dcc00317 	ldw	r19,12(sp)
  1930f0:	dc800217 	ldw	r18,8(sp)
  1930f4:	dc400117 	ldw	r17,4(sp)
  1930f8:	dc000017 	ldw	r16,0(sp)
  1930fc:	dec00504 	addi	sp,sp,20
  193100:	f800283a 	ret
  193104:	0081ffc4 	movi	r2,2047
  193108:	80bfd626 	beq	r16,r2,193064 <__alt_data_end+0xfff93064>
  19310c:	42002034 	orhi	r8,r8,128
  193110:	00800e04 	movi	r2,56
  193114:	10c0a616 	blt	r2,r3,1933b0 <__adddf3+0x3c8>
  193118:	008007c4 	movi	r2,31
  19311c:	10c0c916 	blt	r2,r3,193444 <__adddf3+0x45c>
  193120:	00800804 	movi	r2,32
  193124:	10c5c83a 	sub	r2,r2,r3
  193128:	408e983a 	sll	r7,r8,r2
  19312c:	30c8d83a 	srl	r4,r6,r3
  193130:	3084983a 	sll	r2,r6,r2
  193134:	40c6d83a 	srl	r3,r8,r3
  193138:	390cb03a 	or	r6,r7,r4
  19313c:	1004c03a 	cmpne	r2,r2,zero
  193140:	308cb03a 	or	r6,r6,r2
  193144:	898dc83a 	sub	r6,r17,r6
  193148:	89a3803a 	cmpltu	r17,r17,r6
  19314c:	28cbc83a 	sub	r5,r5,r3
  193150:	2c4bc83a 	sub	r5,r5,r17
  193154:	3023883a 	mov	r17,r6
  193158:	2880202c 	andhi	r2,r5,128
  19315c:	10006d26 	beq	r2,zero,193314 <__adddf3+0x32c>
  193160:	04c02034 	movhi	r19,128
  193164:	9cffffc4 	addi	r19,r19,-1
  193168:	2ce6703a 	and	r19,r5,r19
  19316c:	98007e26 	beq	r19,zero,193368 <__adddf3+0x380>
  193170:	9809883a 	mov	r4,r19
  193174:	0188da00 	call	188da0 <__clzsi2>
  193178:	10fffe04 	addi	r3,r2,-8
  19317c:	010007c4 	movi	r4,31
  193180:	20c07f16 	blt	r4,r3,193380 <__adddf3+0x398>
  193184:	01400a04 	movi	r5,40
  193188:	2885c83a 	sub	r2,r5,r2
  19318c:	888ad83a 	srl	r5,r17,r2
  193190:	98e6983a 	sll	r19,r19,r3
  193194:	88e2983a 	sll	r17,r17,r3
  193198:	2ce6b03a 	or	r19,r5,r19
  19319c:	1c007c16 	blt	r3,r16,193390 <__adddf3+0x3a8>
  1931a0:	1c21c83a 	sub	r16,r3,r16
  1931a4:	81400044 	addi	r5,r16,1
  1931a8:	00c007c4 	movi	r3,31
  1931ac:	19409816 	blt	r3,r5,193410 <__adddf3+0x428>
  1931b0:	1c21c83a 	sub	r16,r3,r16
  1931b4:	8c08983a 	sll	r4,r17,r16
  1931b8:	8946d83a 	srl	r3,r17,r5
  1931bc:	9c20983a 	sll	r16,r19,r16
  1931c0:	2008c03a 	cmpne	r4,r4,zero
  1931c4:	994ad83a 	srl	r5,r19,r5
  1931c8:	1c06b03a 	or	r3,r3,r16
  1931cc:	1922b03a 	or	r17,r3,r4
  1931d0:	0021883a 	mov	r16,zero
  1931d4:	003fa306 	br	193064 <__alt_data_end+0xfff93064>
  1931d8:	2880202c 	andhi	r2,r5,128
  1931dc:	9007883a 	mov	r3,r18
  1931e0:	103fac1e 	bne	r2,zero,193094 <__alt_data_end+0xfff93094>
  1931e4:	2804977a 	slli	r2,r5,29
  1931e8:	8822d0fa 	srli	r17,r17,3
  1931ec:	0101ffc4 	movi	r4,2047
  1931f0:	280ad0fa 	srli	r5,r5,3
  1931f4:	1444b03a 	or	r2,r2,r17
  1931f8:	81002c26 	beq	r16,r4,1932ac <__adddf3+0x2c4>
  1931fc:	8120703a 	and	r16,r16,r4
  193200:	01000434 	movhi	r4,16
  193204:	213fffc4 	addi	r4,r4,-1
  193208:	2908703a 	and	r4,r5,r4
  19320c:	003fad06 	br	1930c4 <__alt_data_end+0xfff930c4>
  193210:	8089c83a 	sub	r4,r16,r2
  193214:	01006a0e 	bge	zero,r4,1933c0 <__adddf3+0x3d8>
  193218:	10003326 	beq	r2,zero,1932e8 <__adddf3+0x300>
  19321c:	0081ffc4 	movi	r2,2047
  193220:	80bf9026 	beq	r16,r2,193064 <__alt_data_end+0xfff93064>
  193224:	42002034 	orhi	r8,r8,128
  193228:	00800e04 	movi	r2,56
  19322c:	1100b116 	blt	r2,r4,1934f4 <__adddf3+0x50c>
  193230:	008007c4 	movi	r2,31
  193234:	1100e216 	blt	r2,r4,1935c0 <__adddf3+0x5d8>
  193238:	00800804 	movi	r2,32
  19323c:	1105c83a 	sub	r2,r2,r4
  193240:	4092983a 	sll	r9,r8,r2
  193244:	310ed83a 	srl	r7,r6,r4
  193248:	3084983a 	sll	r2,r6,r2
  19324c:	4110d83a 	srl	r8,r8,r4
  193250:	49ccb03a 	or	r6,r9,r7
  193254:	1004c03a 	cmpne	r2,r2,zero
  193258:	308cb03a 	or	r6,r6,r2
  19325c:	344d883a 	add	r6,r6,r17
  193260:	3463803a 	cmpltu	r17,r6,r17
  193264:	414b883a 	add	r5,r8,r5
  193268:	2c4b883a 	add	r5,r5,r17
  19326c:	3023883a 	mov	r17,r6
  193270:	2880202c 	andhi	r2,r5,128
  193274:	10002726 	beq	r2,zero,193314 <__adddf3+0x32c>
  193278:	84000044 	addi	r16,r16,1
  19327c:	0081ffc4 	movi	r2,2047
  193280:	8080ae26 	beq	r16,r2,19353c <__adddf3+0x554>
  193284:	00bfe034 	movhi	r2,65408
  193288:	10bfffc4 	addi	r2,r2,-1
  19328c:	288a703a 	and	r5,r5,r2
  193290:	880cd07a 	srli	r6,r17,1
  193294:	280897fa 	slli	r4,r5,31
  193298:	88c0004c 	andi	r3,r17,1
  19329c:	30e2b03a 	or	r17,r6,r3
  1932a0:	280ad07a 	srli	r5,r5,1
  1932a4:	8922b03a 	or	r17,r17,r4
  1932a8:	003f6e06 	br	193064 <__alt_data_end+0xfff93064>
  1932ac:	1148b03a 	or	r4,r2,r5
  1932b0:	20003c26 	beq	r4,zero,1933a4 <__adddf3+0x3bc>
  1932b4:	29000234 	orhi	r4,r5,8
  1932b8:	01400434 	movhi	r5,16
  1932bc:	297fffc4 	addi	r5,r5,-1
  1932c0:	2148703a 	and	r4,r4,r5
  1932c4:	003f7f06 	br	1930c4 <__alt_data_end+0xfff930c4>
  1932c8:	18ffffc4 	addi	r3,r3,-1
  1932cc:	18004d1e 	bne	r3,zero,193404 <__adddf3+0x41c>
  1932d0:	898dc83a 	sub	r6,r17,r6
  1932d4:	89a3803a 	cmpltu	r17,r17,r6
  1932d8:	2a0bc83a 	sub	r5,r5,r8
  1932dc:	2c4bc83a 	sub	r5,r5,r17
  1932e0:	3023883a 	mov	r17,r6
  1932e4:	003f9c06 	br	193158 <__alt_data_end+0xfff93158>
  1932e8:	4184b03a 	or	r2,r8,r6
  1932ec:	103f5d26 	beq	r2,zero,193064 <__alt_data_end+0xfff93064>
  1932f0:	213fffc4 	addi	r4,r4,-1
  1932f4:	203fd926 	beq	r4,zero,19325c <__alt_data_end+0xfff9325c>
  1932f8:	0081ffc4 	movi	r2,2047
  1932fc:	80bfca1e 	bne	r16,r2,193228 <__alt_data_end+0xfff93228>
  193300:	003f5806 	br	193064 <__alt_data_end+0xfff93064>
  193304:	10c8b03a 	or	r4,r2,r3
  193308:	20008b26 	beq	r4,zero,193538 <__adddf3+0x550>
  19330c:	100b883a 	mov	r5,r2
  193310:	1823883a 	mov	r17,r3
  193314:	888001cc 	andi	r2,r17,7
  193318:	103f541e 	bne	r2,zero,19306c <__alt_data_end+0xfff9306c>
  19331c:	9007883a 	mov	r3,r18
  193320:	003fb006 	br	1931e4 <__alt_data_end+0xfff931e4>
  193324:	1800531e 	bne	r3,zero,193474 <__adddf3+0x48c>
  193328:	80800044 	addi	r2,r16,1
  19332c:	1081ffcc 	andi	r2,r2,2047
  193330:	00c00044 	movi	r3,1
  193334:	1880990e 	bge	r3,r2,19359c <__adddf3+0x5b4>
  193338:	8985c83a 	sub	r2,r17,r6
  19333c:	8887803a 	cmpltu	r3,r17,r2
  193340:	2a27c83a 	sub	r19,r5,r8
  193344:	98e7c83a 	sub	r19,r19,r3
  193348:	98c0202c 	andhi	r3,r19,128
  19334c:	18006226 	beq	r3,zero,1934d8 <__adddf3+0x4f0>
  193350:	3463c83a 	sub	r17,r6,r17
  193354:	4151c83a 	sub	r8,r8,r5
  193358:	344d803a 	cmpltu	r6,r6,r17
  19335c:	41a7c83a 	sub	r19,r8,r6
  193360:	3825883a 	mov	r18,r7
  193364:	983f821e 	bne	r19,zero,193170 <__alt_data_end+0xfff93170>
  193368:	8809883a 	mov	r4,r17
  19336c:	0188da00 	call	188da0 <__clzsi2>
  193370:	10800804 	addi	r2,r2,32
  193374:	10fffe04 	addi	r3,r2,-8
  193378:	010007c4 	movi	r4,31
  19337c:	20ff810e 	bge	r4,r3,193184 <__alt_data_end+0xfff93184>
  193380:	14fff604 	addi	r19,r2,-40
  193384:	8ce6983a 	sll	r19,r17,r19
  193388:	0023883a 	mov	r17,zero
  19338c:	1c3f840e 	bge	r3,r16,1931a0 <__alt_data_end+0xfff931a0>
  193390:	017fe034 	movhi	r5,65408
  193394:	297fffc4 	addi	r5,r5,-1
  193398:	80e1c83a 	sub	r16,r16,r3
  19339c:	994a703a 	and	r5,r19,r5
  1933a0:	003f3006 	br	193064 <__alt_data_end+0xfff93064>
  1933a4:	0009883a 	mov	r4,zero
  1933a8:	0005883a 	mov	r2,zero
  1933ac:	003f4506 	br	1930c4 <__alt_data_end+0xfff930c4>
  1933b0:	418cb03a 	or	r6,r8,r6
  1933b4:	300cc03a 	cmpne	r6,r6,zero
  1933b8:	0007883a 	mov	r3,zero
  1933bc:	003f6106 	br	193144 <__alt_data_end+0xfff93144>
  1933c0:	2000921e 	bne	r4,zero,19360c <__adddf3+0x624>
  1933c4:	80800044 	addi	r2,r16,1
  1933c8:	11c1ffcc 	andi	r7,r2,2047
  1933cc:	01000044 	movi	r4,1
  1933d0:	21c0610e 	bge	r4,r7,193558 <__adddf3+0x570>
  1933d4:	0101ffc4 	movi	r4,2047
  1933d8:	1100a326 	beq	r2,r4,193668 <__adddf3+0x680>
  1933dc:	344d883a 	add	r6,r6,r17
  1933e0:	3463803a 	cmpltu	r17,r6,r17
  1933e4:	414b883a 	add	r5,r8,r5
  1933e8:	2c4b883a 	add	r5,r5,r17
  1933ec:	282297fa 	slli	r17,r5,31
  1933f0:	300cd07a 	srli	r6,r6,1
  1933f4:	280ad07a 	srli	r5,r5,1
  1933f8:	1021883a 	mov	r16,r2
  1933fc:	89a2b03a 	or	r17,r17,r6
  193400:	003f1806 	br	193064 <__alt_data_end+0xfff93064>
  193404:	0081ffc4 	movi	r2,2047
  193408:	80bf411e 	bne	r16,r2,193110 <__alt_data_end+0xfff93110>
  19340c:	003f1506 	br	193064 <__alt_data_end+0xfff93064>
  193410:	80bff844 	addi	r2,r16,-31
  193414:	00c00804 	movi	r3,32
  193418:	9884d83a 	srl	r2,r19,r2
  19341c:	28c04a26 	beq	r5,r3,193548 <__adddf3+0x560>
  193420:	00c00fc4 	movi	r3,63
  193424:	1c21c83a 	sub	r16,r3,r16
  193428:	9c26983a 	sll	r19,r19,r16
  19342c:	9c62b03a 	or	r17,r19,r17
  193430:	8822c03a 	cmpne	r17,r17,zero
  193434:	88a2b03a 	or	r17,r17,r2
  193438:	000b883a 	mov	r5,zero
  19343c:	0021883a 	mov	r16,zero
  193440:	003fb406 	br	193314 <__alt_data_end+0xfff93314>
  193444:	18bff804 	addi	r2,r3,-32
  193448:	01000804 	movi	r4,32
  19344c:	4084d83a 	srl	r2,r8,r2
  193450:	19003f26 	beq	r3,r4,193550 <__adddf3+0x568>
  193454:	01001004 	movi	r4,64
  193458:	20c7c83a 	sub	r3,r4,r3
  19345c:	40d0983a 	sll	r8,r8,r3
  193460:	418cb03a 	or	r6,r8,r6
  193464:	300cc03a 	cmpne	r6,r6,zero
  193468:	308cb03a 	or	r6,r6,r2
  19346c:	0007883a 	mov	r3,zero
  193470:	003f3406 	br	193144 <__alt_data_end+0xfff93144>
  193474:	80002326 	beq	r16,zero,193504 <__adddf3+0x51c>
  193478:	0101ffc4 	movi	r4,2047
  19347c:	11005e26 	beq	r2,r4,1935f8 <__adddf3+0x610>
  193480:	00c7c83a 	sub	r3,zero,r3
  193484:	29402034 	orhi	r5,r5,128
  193488:	01000e04 	movi	r4,56
  19348c:	20c07216 	blt	r4,r3,193658 <__adddf3+0x670>
  193490:	010007c4 	movi	r4,31
  193494:	20c0ce16 	blt	r4,r3,1937d0 <__adddf3+0x7e8>
  193498:	01000804 	movi	r4,32
  19349c:	20c9c83a 	sub	r4,r4,r3
  1934a0:	2914983a 	sll	r10,r5,r4
  1934a4:	88d2d83a 	srl	r9,r17,r3
  1934a8:	8908983a 	sll	r4,r17,r4
  1934ac:	28c6d83a 	srl	r3,r5,r3
  1934b0:	5262b03a 	or	r17,r10,r9
  1934b4:	2008c03a 	cmpne	r4,r4,zero
  1934b8:	8922b03a 	or	r17,r17,r4
  1934bc:	3463c83a 	sub	r17,r6,r17
  1934c0:	40c7c83a 	sub	r3,r8,r3
  1934c4:	344d803a 	cmpltu	r6,r6,r17
  1934c8:	198bc83a 	sub	r5,r3,r6
  1934cc:	1021883a 	mov	r16,r2
  1934d0:	3825883a 	mov	r18,r7
  1934d4:	003f2006 	br	193158 <__alt_data_end+0xfff93158>
  1934d8:	9886b03a 	or	r3,r19,r2
  1934dc:	1800141e 	bne	r3,zero,193530 <__adddf3+0x548>
  1934e0:	0007883a 	mov	r3,zero
  1934e4:	000b883a 	mov	r5,zero
  1934e8:	0023883a 	mov	r17,zero
  1934ec:	0021883a 	mov	r16,zero
  1934f0:	003f3c06 	br	1931e4 <__alt_data_end+0xfff931e4>
  1934f4:	418cb03a 	or	r6,r8,r6
  1934f8:	300cc03a 	cmpne	r6,r6,zero
  1934fc:	0011883a 	mov	r8,zero
  193500:	003f5606 	br	19325c <__alt_data_end+0xfff9325c>
  193504:	2c48b03a 	or	r4,r5,r17
  193508:	20003b26 	beq	r4,zero,1935f8 <__adddf3+0x610>
  19350c:	00c6303a 	nor	r3,zero,r3
  193510:	1800371e 	bne	r3,zero,1935f0 <__adddf3+0x608>
  193514:	3463c83a 	sub	r17,r6,r17
  193518:	414bc83a 	sub	r5,r8,r5
  19351c:	344d803a 	cmpltu	r6,r6,r17
  193520:	298bc83a 	sub	r5,r5,r6
  193524:	1021883a 	mov	r16,r2
  193528:	3825883a 	mov	r18,r7
  19352c:	003f0a06 	br	193158 <__alt_data_end+0xfff93158>
  193530:	1023883a 	mov	r17,r2
  193534:	003f0d06 	br	19316c <__alt_data_end+0xfff9316c>
  193538:	0007883a 	mov	r3,zero
  19353c:	000b883a 	mov	r5,zero
  193540:	0023883a 	mov	r17,zero
  193544:	003f2706 	br	1931e4 <__alt_data_end+0xfff931e4>
  193548:	0027883a 	mov	r19,zero
  19354c:	003fb706 	br	19342c <__alt_data_end+0xfff9342c>
  193550:	0011883a 	mov	r8,zero
  193554:	003fc206 	br	193460 <__alt_data_end+0xfff93460>
  193558:	2c44b03a 	or	r2,r5,r17
  19355c:	8000871e 	bne	r16,zero,19377c <__adddf3+0x794>
  193560:	1000b126 	beq	r2,zero,193828 <__adddf3+0x840>
  193564:	4184b03a 	or	r2,r8,r6
  193568:	103ebe26 	beq	r2,zero,193064 <__alt_data_end+0xfff93064>
  19356c:	3445883a 	add	r2,r6,r17
  193570:	1463803a 	cmpltu	r17,r2,r17
  193574:	414b883a 	add	r5,r8,r5
  193578:	2c4b883a 	add	r5,r5,r17
  19357c:	28c0202c 	andhi	r3,r5,128
  193580:	1023883a 	mov	r17,r2
  193584:	183f6326 	beq	r3,zero,193314 <__alt_data_end+0xfff93314>
  193588:	00bfe034 	movhi	r2,65408
  19358c:	10bfffc4 	addi	r2,r2,-1
  193590:	2021883a 	mov	r16,r4
  193594:	288a703a 	and	r5,r5,r2
  193598:	003eb206 	br	193064 <__alt_data_end+0xfff93064>
  19359c:	2c44b03a 	or	r2,r5,r17
  1935a0:	8000251e 	bne	r16,zero,193638 <__adddf3+0x650>
  1935a4:	10004b1e 	bne	r2,zero,1936d4 <__adddf3+0x6ec>
  1935a8:	4184b03a 	or	r2,r8,r6
  1935ac:	103fe226 	beq	r2,zero,193538 <__alt_data_end+0xfff93538>
  1935b0:	400b883a 	mov	r5,r8
  1935b4:	3023883a 	mov	r17,r6
  1935b8:	3825883a 	mov	r18,r7
  1935bc:	003ea906 	br	193064 <__alt_data_end+0xfff93064>
  1935c0:	20bff804 	addi	r2,r4,-32
  1935c4:	01c00804 	movi	r7,32
  1935c8:	4084d83a 	srl	r2,r8,r2
  1935cc:	21c07e26 	beq	r4,r7,1937c8 <__adddf3+0x7e0>
  1935d0:	01c01004 	movi	r7,64
  1935d4:	3909c83a 	sub	r4,r7,r4
  1935d8:	4110983a 	sll	r8,r8,r4
  1935dc:	418cb03a 	or	r6,r8,r6
  1935e0:	300cc03a 	cmpne	r6,r6,zero
  1935e4:	308cb03a 	or	r6,r6,r2
  1935e8:	0011883a 	mov	r8,zero
  1935ec:	003f1b06 	br	19325c <__alt_data_end+0xfff9325c>
  1935f0:	0101ffc4 	movi	r4,2047
  1935f4:	113fa41e 	bne	r2,r4,193488 <__alt_data_end+0xfff93488>
  1935f8:	400b883a 	mov	r5,r8
  1935fc:	3023883a 	mov	r17,r6
  193600:	1021883a 	mov	r16,r2
  193604:	3825883a 	mov	r18,r7
  193608:	003e9606 	br	193064 <__alt_data_end+0xfff93064>
  19360c:	80001a1e 	bne	r16,zero,193678 <__adddf3+0x690>
  193610:	2c4eb03a 	or	r7,r5,r17
  193614:	38005526 	beq	r7,zero,19376c <__adddf3+0x784>
  193618:	0108303a 	nor	r4,zero,r4
  19361c:	2000511e 	bne	r4,zero,193764 <__adddf3+0x77c>
  193620:	89a3883a 	add	r17,r17,r6
  193624:	414b883a 	add	r5,r8,r5
  193628:	898d803a 	cmpltu	r6,r17,r6
  19362c:	298b883a 	add	r5,r5,r6
  193630:	1021883a 	mov	r16,r2
  193634:	003f0e06 	br	193270 <__alt_data_end+0xfff93270>
  193638:	1000341e 	bne	r2,zero,19370c <__adddf3+0x724>
  19363c:	4184b03a 	or	r2,r8,r6
  193640:	10006f26 	beq	r2,zero,193800 <__adddf3+0x818>
  193644:	400b883a 	mov	r5,r8
  193648:	3023883a 	mov	r17,r6
  19364c:	3825883a 	mov	r18,r7
  193650:	0401ffc4 	movi	r16,2047
  193654:	003e8306 	br	193064 <__alt_data_end+0xfff93064>
  193658:	2c62b03a 	or	r17,r5,r17
  19365c:	8822c03a 	cmpne	r17,r17,zero
  193660:	0007883a 	mov	r3,zero
  193664:	003f9506 	br	1934bc <__alt_data_end+0xfff934bc>
  193668:	1021883a 	mov	r16,r2
  19366c:	000b883a 	mov	r5,zero
  193670:	0023883a 	mov	r17,zero
  193674:	003edb06 	br	1931e4 <__alt_data_end+0xfff931e4>
  193678:	01c1ffc4 	movi	r7,2047
  19367c:	11c03b26 	beq	r2,r7,19376c <__adddf3+0x784>
  193680:	0109c83a 	sub	r4,zero,r4
  193684:	29402034 	orhi	r5,r5,128
  193688:	01c00e04 	movi	r7,56
  19368c:	39006216 	blt	r7,r4,193818 <__adddf3+0x830>
  193690:	01c007c4 	movi	r7,31
  193694:	39006b16 	blt	r7,r4,193844 <__adddf3+0x85c>
  193698:	01c00804 	movi	r7,32
  19369c:	390fc83a 	sub	r7,r7,r4
  1936a0:	29d4983a 	sll	r10,r5,r7
  1936a4:	8912d83a 	srl	r9,r17,r4
  1936a8:	89ce983a 	sll	r7,r17,r7
  1936ac:	2908d83a 	srl	r4,r5,r4
  1936b0:	5262b03a 	or	r17,r10,r9
  1936b4:	380ac03a 	cmpne	r5,r7,zero
  1936b8:	8962b03a 	or	r17,r17,r5
  1936bc:	89a3883a 	add	r17,r17,r6
  1936c0:	2211883a 	add	r8,r4,r8
  1936c4:	898d803a 	cmpltu	r6,r17,r6
  1936c8:	418b883a 	add	r5,r8,r6
  1936cc:	1021883a 	mov	r16,r2
  1936d0:	003ee706 	br	193270 <__alt_data_end+0xfff93270>
  1936d4:	4184b03a 	or	r2,r8,r6
  1936d8:	103e6226 	beq	r2,zero,193064 <__alt_data_end+0xfff93064>
  1936dc:	8987c83a 	sub	r3,r17,r6
  1936e0:	88c9803a 	cmpltu	r4,r17,r3
  1936e4:	2a05c83a 	sub	r2,r5,r8
  1936e8:	1105c83a 	sub	r2,r2,r4
  1936ec:	1100202c 	andhi	r4,r2,128
  1936f0:	203f0426 	beq	r4,zero,193304 <__alt_data_end+0xfff93304>
  1936f4:	3463c83a 	sub	r17,r6,r17
  1936f8:	414bc83a 	sub	r5,r8,r5
  1936fc:	344d803a 	cmpltu	r6,r6,r17
  193700:	298bc83a 	sub	r5,r5,r6
  193704:	3825883a 	mov	r18,r7
  193708:	003e5606 	br	193064 <__alt_data_end+0xfff93064>
  19370c:	4184b03a 	or	r2,r8,r6
  193710:	10002b26 	beq	r2,zero,1937c0 <__adddf3+0x7d8>
  193714:	2804d0fa 	srli	r2,r5,3
  193718:	8822d0fa 	srli	r17,r17,3
  19371c:	280a977a 	slli	r5,r5,29
  193720:	10c0022c 	andhi	r3,r2,8
  193724:	2c62b03a 	or	r17,r5,r17
  193728:	18000826 	beq	r3,zero,19374c <__adddf3+0x764>
  19372c:	4008d0fa 	srli	r4,r8,3
  193730:	20c0022c 	andhi	r3,r4,8
  193734:	1800051e 	bne	r3,zero,19374c <__adddf3+0x764>
  193738:	300cd0fa 	srli	r6,r6,3
  19373c:	4010977a 	slli	r8,r8,29
  193740:	2005883a 	mov	r2,r4
  193744:	3825883a 	mov	r18,r7
  193748:	41a2b03a 	or	r17,r8,r6
  19374c:	880ad77a 	srli	r5,r17,29
  193750:	100490fa 	slli	r2,r2,3
  193754:	882290fa 	slli	r17,r17,3
  193758:	0401ffc4 	movi	r16,2047
  19375c:	288ab03a 	or	r5,r5,r2
  193760:	003e4006 	br	193064 <__alt_data_end+0xfff93064>
  193764:	01c1ffc4 	movi	r7,2047
  193768:	11ffc71e 	bne	r2,r7,193688 <__alt_data_end+0xfff93688>
  19376c:	400b883a 	mov	r5,r8
  193770:	3023883a 	mov	r17,r6
  193774:	1021883a 	mov	r16,r2
  193778:	003e3a06 	br	193064 <__alt_data_end+0xfff93064>
  19377c:	10002d26 	beq	r2,zero,193834 <__adddf3+0x84c>
  193780:	4184b03a 	or	r2,r8,r6
  193784:	10000e26 	beq	r2,zero,1937c0 <__adddf3+0x7d8>
  193788:	2804d0fa 	srli	r2,r5,3
  19378c:	8822d0fa 	srli	r17,r17,3
  193790:	280a977a 	slli	r5,r5,29
  193794:	10c0022c 	andhi	r3,r2,8
  193798:	2c62b03a 	or	r17,r5,r17
  19379c:	183feb26 	beq	r3,zero,19374c <__alt_data_end+0xfff9374c>
  1937a0:	4008d0fa 	srli	r4,r8,3
  1937a4:	20c0022c 	andhi	r3,r4,8
  1937a8:	183fe81e 	bne	r3,zero,19374c <__alt_data_end+0xfff9374c>
  1937ac:	300cd0fa 	srli	r6,r6,3
  1937b0:	4010977a 	slli	r8,r8,29
  1937b4:	2005883a 	mov	r2,r4
  1937b8:	41a2b03a 	or	r17,r8,r6
  1937bc:	003fe306 	br	19374c <__alt_data_end+0xfff9374c>
  1937c0:	0401ffc4 	movi	r16,2047
  1937c4:	003e2706 	br	193064 <__alt_data_end+0xfff93064>
  1937c8:	0011883a 	mov	r8,zero
  1937cc:	003f8306 	br	1935dc <__alt_data_end+0xfff935dc>
  1937d0:	193ff804 	addi	r4,r3,-32
  1937d4:	02400804 	movi	r9,32
  1937d8:	2908d83a 	srl	r4,r5,r4
  1937dc:	1a402526 	beq	r3,r9,193874 <__adddf3+0x88c>
  1937e0:	02401004 	movi	r9,64
  1937e4:	48c7c83a 	sub	r3,r9,r3
  1937e8:	28ca983a 	sll	r5,r5,r3
  1937ec:	2c62b03a 	or	r17,r5,r17
  1937f0:	8822c03a 	cmpne	r17,r17,zero
  1937f4:	8922b03a 	or	r17,r17,r4
  1937f8:	0007883a 	mov	r3,zero
  1937fc:	003f2f06 	br	1934bc <__alt_data_end+0xfff934bc>
  193800:	01402034 	movhi	r5,128
  193804:	0007883a 	mov	r3,zero
  193808:	297fffc4 	addi	r5,r5,-1
  19380c:	047ffe04 	movi	r17,-8
  193810:	0401ffc4 	movi	r16,2047
  193814:	003e7306 	br	1931e4 <__alt_data_end+0xfff931e4>
  193818:	2c62b03a 	or	r17,r5,r17
  19381c:	8822c03a 	cmpne	r17,r17,zero
  193820:	0009883a 	mov	r4,zero
  193824:	003fa506 	br	1936bc <__alt_data_end+0xfff936bc>
  193828:	400b883a 	mov	r5,r8
  19382c:	3023883a 	mov	r17,r6
  193830:	003e0c06 	br	193064 <__alt_data_end+0xfff93064>
  193834:	400b883a 	mov	r5,r8
  193838:	3023883a 	mov	r17,r6
  19383c:	0401ffc4 	movi	r16,2047
  193840:	003e0806 	br	193064 <__alt_data_end+0xfff93064>
  193844:	21fff804 	addi	r7,r4,-32
  193848:	02400804 	movi	r9,32
  19384c:	29ced83a 	srl	r7,r5,r7
  193850:	22400a26 	beq	r4,r9,19387c <__adddf3+0x894>
  193854:	02401004 	movi	r9,64
  193858:	4909c83a 	sub	r4,r9,r4
  19385c:	290a983a 	sll	r5,r5,r4
  193860:	2c62b03a 	or	r17,r5,r17
  193864:	8822c03a 	cmpne	r17,r17,zero
  193868:	89e2b03a 	or	r17,r17,r7
  19386c:	0009883a 	mov	r4,zero
  193870:	003f9206 	br	1936bc <__alt_data_end+0xfff936bc>
  193874:	000b883a 	mov	r5,zero
  193878:	003fdc06 	br	1937ec <__alt_data_end+0xfff937ec>
  19387c:	000b883a 	mov	r5,zero
  193880:	003ff706 	br	193860 <__alt_data_end+0xfff93860>

00193884 <__divdf3>:
  193884:	defff004 	addi	sp,sp,-64
  193888:	dc800815 	stw	r18,32(sp)
  19388c:	2824d53a 	srli	r18,r5,20
  193890:	dd800c15 	stw	r22,48(sp)
  193894:	282cd7fa 	srli	r22,r5,31
  193898:	dc000615 	stw	r16,24(sp)
  19389c:	04000434 	movhi	r16,16
  1938a0:	df000e15 	stw	fp,56(sp)
  1938a4:	dd000a15 	stw	r20,40(sp)
  1938a8:	dcc00915 	stw	r19,36(sp)
  1938ac:	dc400715 	stw	r17,28(sp)
  1938b0:	843fffc4 	addi	r16,r16,-1
  1938b4:	dfc00f15 	stw	ra,60(sp)
  1938b8:	ddc00d15 	stw	r23,52(sp)
  1938bc:	dd400b15 	stw	r21,44(sp)
  1938c0:	9481ffcc 	andi	r18,r18,2047
  1938c4:	2029883a 	mov	r20,r4
  1938c8:	2027883a 	mov	r19,r4
  1938cc:	2c22703a 	and	r17,r5,r16
  1938d0:	b7003fcc 	andi	fp,r22,255
  1938d4:	90005e26 	beq	r18,zero,193a50 <__divdf3+0x1cc>
  1938d8:	0081ffc4 	movi	r2,2047
  1938dc:	90803526 	beq	r18,r2,1939b4 <__divdf3+0x130>
  1938e0:	8c000434 	orhi	r16,r17,16
  1938e4:	2004d77a 	srli	r2,r4,29
  1938e8:	802090fa 	slli	r16,r16,3
  1938ec:	202690fa 	slli	r19,r4,3
  1938f0:	94bf0044 	addi	r18,r18,-1023
  1938f4:	80a2b03a 	or	r17,r16,r2
  1938f8:	0029883a 	mov	r20,zero
  1938fc:	0011883a 	mov	r8,zero
  193900:	380ad53a 	srli	r5,r7,20
  193904:	382ed7fa 	srli	r23,r7,31
  193908:	04000434 	movhi	r16,16
  19390c:	843fffc4 	addi	r16,r16,-1
  193910:	2941ffcc 	andi	r5,r5,2047
  193914:	302b883a 	mov	r21,r6
  193918:	3c20703a 	and	r16,r7,r16
  19391c:	ba403fcc 	andi	r9,r23,255
  193920:	28006726 	beq	r5,zero,193ac0 <__divdf3+0x23c>
  193924:	0081ffc4 	movi	r2,2047
  193928:	28805f26 	beq	r5,r2,193aa8 <__divdf3+0x224>
  19392c:	84000434 	orhi	r16,r16,16
  193930:	3004d77a 	srli	r2,r6,29
  193934:	802090fa 	slli	r16,r16,3
  193938:	302a90fa 	slli	r21,r6,3
  19393c:	297f0044 	addi	r5,r5,-1023
  193940:	80a0b03a 	or	r16,r16,r2
  193944:	000f883a 	mov	r7,zero
  193948:	3d06b03a 	or	r3,r7,r20
  19394c:	180690ba 	slli	r3,r3,2
  193950:	00800674 	movhi	r2,25
  193954:	108e5d04 	addi	r2,r2,14708
  193958:	1885883a 	add	r2,r3,r2
  19395c:	10800017 	ldw	r2,0(r2)
  193960:	b5c8f03a 	xor	r4,r22,r23
  193964:	200d883a 	mov	r6,r4
  193968:	25003fcc 	andi	r20,r4,255
  19396c:	9165c83a 	sub	r18,r18,r5
  193970:	1000683a 	jmp	r2
  193974:	00193bbc 	xorhi	zero,zero,25838
  193978:	001939ec 	andhi	zero,zero,25831
  19397c:	00193b80 	call	193b8 <__alt_mem_sram-0x166c48>
  193980:	001939d0 	cmplti	zero,zero,25831
  193984:	00193b80 	call	193b8 <__alt_mem_sram-0x166c48>
  193988:	00193b54 	movui	zero,25837
  19398c:	00193b80 	call	193b8 <__alt_mem_sram-0x166c48>
  193990:	001939d0 	cmplti	zero,zero,25831
  193994:	001939ec 	andhi	zero,zero,25831
  193998:	001939ec 	andhi	zero,zero,25831
  19399c:	00193b54 	movui	zero,25837
  1939a0:	001939d0 	cmplti	zero,zero,25831
  1939a4:	001939e0 	cmpeqi	zero,zero,25831
  1939a8:	001939e0 	cmpeqi	zero,zero,25831
  1939ac:	001939e0 	cmpeqi	zero,zero,25831
  1939b0:	00193b90 	cmplti	zero,zero,25838
  1939b4:	8904b03a 	or	r2,r17,r4
  1939b8:	1000631e 	bne	r2,zero,193b48 <__divdf3+0x2c4>
  1939bc:	05000204 	movi	r20,8
  1939c0:	0023883a 	mov	r17,zero
  1939c4:	0027883a 	mov	r19,zero
  1939c8:	02000084 	movi	r8,2
  1939cc:	003fcc06 	br	193900 <__alt_data_end+0xfff93900>
  1939d0:	8023883a 	mov	r17,r16
  1939d4:	a827883a 	mov	r19,r21
  1939d8:	4839883a 	mov	fp,r9
  1939dc:	3811883a 	mov	r8,r7
  1939e0:	00800084 	movi	r2,2
  1939e4:	4081531e 	bne	r8,r2,193f34 <__divdf3+0x6b0>
  1939e8:	e029883a 	mov	r20,fp
  1939ec:	a180004c 	andi	r6,r20,1
  1939f0:	0201ffc4 	movi	r8,2047
  1939f4:	000b883a 	mov	r5,zero
  1939f8:	0027883a 	mov	r19,zero
  1939fc:	4010953a 	slli	r8,r8,20
  193a00:	30c03fcc 	andi	r3,r6,255
  193a04:	04000434 	movhi	r16,16
  193a08:	180697fa 	slli	r3,r3,31
  193a0c:	843fffc4 	addi	r16,r16,-1
  193a10:	2c20703a 	and	r16,r5,r16
  193a14:	8220b03a 	or	r16,r16,r8
  193a18:	80c6b03a 	or	r3,r16,r3
  193a1c:	9805883a 	mov	r2,r19
  193a20:	dfc00f17 	ldw	ra,60(sp)
  193a24:	df000e17 	ldw	fp,56(sp)
  193a28:	ddc00d17 	ldw	r23,52(sp)
  193a2c:	dd800c17 	ldw	r22,48(sp)
  193a30:	dd400b17 	ldw	r21,44(sp)
  193a34:	dd000a17 	ldw	r20,40(sp)
  193a38:	dcc00917 	ldw	r19,36(sp)
  193a3c:	dc800817 	ldw	r18,32(sp)
  193a40:	dc400717 	ldw	r17,28(sp)
  193a44:	dc000617 	ldw	r16,24(sp)
  193a48:	dec01004 	addi	sp,sp,64
  193a4c:	f800283a 	ret
  193a50:	8904b03a 	or	r2,r17,r4
  193a54:	10003726 	beq	r2,zero,193b34 <__divdf3+0x2b0>
  193a58:	88014d26 	beq	r17,zero,193f90 <__divdf3+0x70c>
  193a5c:	8809883a 	mov	r4,r17
  193a60:	d9800215 	stw	r6,8(sp)
  193a64:	d9c00515 	stw	r7,20(sp)
  193a68:	0188da00 	call	188da0 <__clzsi2>
  193a6c:	d9800217 	ldw	r6,8(sp)
  193a70:	d9c00517 	ldw	r7,20(sp)
  193a74:	1007883a 	mov	r3,r2
  193a78:	01000a04 	movi	r4,40
  193a7c:	1cfffe04 	addi	r19,r3,-8
  193a80:	20c9c83a 	sub	r4,r4,r3
  193a84:	8cca983a 	sll	r5,r17,r19
  193a88:	a108d83a 	srl	r4,r20,r4
  193a8c:	a4e6983a 	sll	r19,r20,r19
  193a90:	2162b03a 	or	r17,r4,r5
  193a94:	04bf0344 	movi	r18,-1011
  193a98:	90e5c83a 	sub	r18,r18,r3
  193a9c:	0029883a 	mov	r20,zero
  193aa0:	0011883a 	mov	r8,zero
  193aa4:	003f9606 	br	193900 <__alt_data_end+0xfff93900>
  193aa8:	8184b03a 	or	r2,r16,r6
  193aac:	10001f1e 	bne	r2,zero,193b2c <__divdf3+0x2a8>
  193ab0:	0021883a 	mov	r16,zero
  193ab4:	002b883a 	mov	r21,zero
  193ab8:	01c00084 	movi	r7,2
  193abc:	003fa206 	br	193948 <__alt_data_end+0xfff93948>
  193ac0:	8184b03a 	or	r2,r16,r6
  193ac4:	10001526 	beq	r2,zero,193b1c <__divdf3+0x298>
  193ac8:	80013d26 	beq	r16,zero,193fc0 <__divdf3+0x73c>
  193acc:	8009883a 	mov	r4,r16
  193ad0:	d9800215 	stw	r6,8(sp)
  193ad4:	da000315 	stw	r8,12(sp)
  193ad8:	da400415 	stw	r9,16(sp)
  193adc:	0188da00 	call	188da0 <__clzsi2>
  193ae0:	d9800217 	ldw	r6,8(sp)
  193ae4:	da000317 	ldw	r8,12(sp)
  193ae8:	da400417 	ldw	r9,16(sp)
  193aec:	1007883a 	mov	r3,r2
  193af0:	01000a04 	movi	r4,40
  193af4:	1d7ffe04 	addi	r21,r3,-8
  193af8:	20c9c83a 	sub	r4,r4,r3
  193afc:	8560983a 	sll	r16,r16,r21
  193b00:	3108d83a 	srl	r4,r6,r4
  193b04:	356a983a 	sll	r21,r6,r21
  193b08:	2420b03a 	or	r16,r4,r16
  193b0c:	017f0344 	movi	r5,-1011
  193b10:	28cbc83a 	sub	r5,r5,r3
  193b14:	000f883a 	mov	r7,zero
  193b18:	003f8b06 	br	193948 <__alt_data_end+0xfff93948>
  193b1c:	0021883a 	mov	r16,zero
  193b20:	002b883a 	mov	r21,zero
  193b24:	01c00044 	movi	r7,1
  193b28:	003f8706 	br	193948 <__alt_data_end+0xfff93948>
  193b2c:	01c000c4 	movi	r7,3
  193b30:	003f8506 	br	193948 <__alt_data_end+0xfff93948>
  193b34:	05000104 	movi	r20,4
  193b38:	0023883a 	mov	r17,zero
  193b3c:	0027883a 	mov	r19,zero
  193b40:	02000044 	movi	r8,1
  193b44:	003f6e06 	br	193900 <__alt_data_end+0xfff93900>
  193b48:	05000304 	movi	r20,12
  193b4c:	020000c4 	movi	r8,3
  193b50:	003f6b06 	br	193900 <__alt_data_end+0xfff93900>
  193b54:	01400434 	movhi	r5,16
  193b58:	000d883a 	mov	r6,zero
  193b5c:	297fffc4 	addi	r5,r5,-1
  193b60:	04ffffc4 	movi	r19,-1
  193b64:	0201ffc4 	movi	r8,2047
  193b68:	003fa406 	br	1939fc <__alt_data_end+0xfff939fc>
  193b6c:	043f0084 	movi	r16,-1022
  193b70:	84a1c83a 	sub	r16,r16,r18
  193b74:	00800e04 	movi	r2,56
  193b78:	14014d0e 	bge	r2,r16,1940b0 <__divdf3+0x82c>
  193b7c:	a180004c 	andi	r6,r20,1
  193b80:	0011883a 	mov	r8,zero
  193b84:	000b883a 	mov	r5,zero
  193b88:	0027883a 	mov	r19,zero
  193b8c:	003f9b06 	br	1939fc <__alt_data_end+0xfff939fc>
  193b90:	8880022c 	andhi	r2,r17,8
  193b94:	1000f026 	beq	r2,zero,193f58 <__divdf3+0x6d4>
  193b98:	8080022c 	andhi	r2,r16,8
  193b9c:	1000ee1e 	bne	r2,zero,193f58 <__divdf3+0x6d4>
  193ba0:	00800434 	movhi	r2,16
  193ba4:	81400234 	orhi	r5,r16,8
  193ba8:	10bfffc4 	addi	r2,r2,-1
  193bac:	b80d883a 	mov	r6,r23
  193bb0:	288a703a 	and	r5,r5,r2
  193bb4:	a827883a 	mov	r19,r21
  193bb8:	003fea06 	br	193b64 <__alt_data_end+0xfff93b64>
  193bbc:	84411c36 	bltu	r16,r17,194030 <__divdf3+0x7ac>
  193bc0:	8c011a26 	beq	r17,r16,19402c <__divdf3+0x7a8>
  193bc4:	94bfffc4 	addi	r18,r18,-1
  193bc8:	dcc00015 	stw	r19,0(sp)
  193bcc:	8811883a 	mov	r8,r17
  193bd0:	002d883a 	mov	r22,zero
  193bd4:	a80cd63a 	srli	r6,r21,24
  193bd8:	8020923a 	slli	r16,r16,8
  193bdc:	a82a923a 	slli	r21,r21,8
  193be0:	4009883a 	mov	r4,r8
  193be4:	342eb03a 	or	r23,r6,r16
  193be8:	dd400115 	stw	r21,4(sp)
  193bec:	b82ad43a 	srli	r21,r23,16
  193bf0:	da000315 	stw	r8,12(sp)
  193bf4:	bcffffcc 	andi	r19,r23,65535
  193bf8:	a80b883a 	mov	r5,r21
  193bfc:	0187dc80 	call	187dc8 <__udivsi3>
  193c00:	1009883a 	mov	r4,r2
  193c04:	980b883a 	mov	r5,r19
  193c08:	1023883a 	mov	r17,r2
  193c0c:	0187dd80 	call	187dd8 <__mulsi3>
  193c10:	da000317 	ldw	r8,12(sp)
  193c14:	a80b883a 	mov	r5,r21
  193c18:	1039883a 	mov	fp,r2
  193c1c:	4009883a 	mov	r4,r8
  193c20:	0187dd00 	call	187dd0 <__umodsi3>
  193c24:	d8c00017 	ldw	r3,0(sp)
  193c28:	1004943a 	slli	r2,r2,16
  193c2c:	1810d43a 	srli	r8,r3,16
  193c30:	120eb03a 	or	r7,r2,r8
  193c34:	3f00062e 	bgeu	r7,fp,193c50 <__divdf3+0x3cc>
  193c38:	3dcf883a 	add	r7,r7,r23
  193c3c:	88bfffc4 	addi	r2,r17,-1
  193c40:	3dc10a36 	bltu	r7,r23,19406c <__divdf3+0x7e8>
  193c44:	3f01092e 	bgeu	r7,fp,19406c <__divdf3+0x7e8>
  193c48:	8c7fff84 	addi	r17,r17,-2
  193c4c:	3dcf883a 	add	r7,r7,r23
  193c50:	3f39c83a 	sub	fp,r7,fp
  193c54:	e009883a 	mov	r4,fp
  193c58:	a80b883a 	mov	r5,r21
  193c5c:	0187dc80 	call	187dc8 <__udivsi3>
  193c60:	1009883a 	mov	r4,r2
  193c64:	980b883a 	mov	r5,r19
  193c68:	1021883a 	mov	r16,r2
  193c6c:	0187dd80 	call	187dd8 <__mulsi3>
  193c70:	e009883a 	mov	r4,fp
  193c74:	a80b883a 	mov	r5,r21
  193c78:	d8800315 	stw	r2,12(sp)
  193c7c:	0187dd00 	call	187dd0 <__umodsi3>
  193c80:	d9000017 	ldw	r4,0(sp)
  193c84:	1004943a 	slli	r2,r2,16
  193c88:	da000317 	ldw	r8,12(sp)
  193c8c:	20ffffcc 	andi	r3,r4,65535
  193c90:	10ceb03a 	or	r7,r2,r3
  193c94:	3a00062e 	bgeu	r7,r8,193cb0 <__divdf3+0x42c>
  193c98:	3dcf883a 	add	r7,r7,r23
  193c9c:	80bfffc4 	addi	r2,r16,-1
  193ca0:	3dc0f036 	bltu	r7,r23,194064 <__divdf3+0x7e0>
  193ca4:	3a00ef2e 	bgeu	r7,r8,194064 <__divdf3+0x7e0>
  193ca8:	843fff84 	addi	r16,r16,-2
  193cac:	3dcf883a 	add	r7,r7,r23
  193cb0:	d8c00117 	ldw	r3,4(sp)
  193cb4:	8822943a 	slli	r17,r17,16
  193cb8:	3a0fc83a 	sub	r7,r7,r8
  193cbc:	1806d43a 	srli	r3,r3,16
  193cc0:	8462b03a 	or	r17,r16,r17
  193cc4:	8affffcc 	andi	r11,r17,65535
  193cc8:	d8c00015 	stw	r3,0(sp)
  193ccc:	d8c00117 	ldw	r3,4(sp)
  193cd0:	8820d43a 	srli	r16,r17,16
  193cd4:	5809883a 	mov	r4,r11
  193cd8:	1f3fffcc 	andi	fp,r3,65535
  193cdc:	e00b883a 	mov	r5,fp
  193ce0:	d9c00515 	stw	r7,20(sp)
  193ce4:	dac00215 	stw	r11,8(sp)
  193ce8:	0187dd80 	call	187dd8 <__mulsi3>
  193cec:	8009883a 	mov	r4,r16
  193cf0:	e00b883a 	mov	r5,fp
  193cf4:	d8800415 	stw	r2,16(sp)
  193cf8:	0187dd80 	call	187dd8 <__mulsi3>
  193cfc:	d9400017 	ldw	r5,0(sp)
  193d00:	8009883a 	mov	r4,r16
  193d04:	d8800315 	stw	r2,12(sp)
  193d08:	0187dd80 	call	187dd8 <__mulsi3>
  193d0c:	dac00217 	ldw	r11,8(sp)
  193d10:	d9400017 	ldw	r5,0(sp)
  193d14:	d8800215 	stw	r2,8(sp)
  193d18:	5809883a 	mov	r4,r11
  193d1c:	0187dd80 	call	187dd8 <__mulsi3>
  193d20:	da400417 	ldw	r9,16(sp)
  193d24:	da800317 	ldw	r10,12(sp)
  193d28:	d9c00517 	ldw	r7,20(sp)
  193d2c:	480ad43a 	srli	r5,r9,16
  193d30:	5085883a 	add	r2,r10,r2
  193d34:	db000217 	ldw	r12,8(sp)
  193d38:	1151883a 	add	r8,r2,r5
  193d3c:	4280022e 	bgeu	r8,r10,193d48 <__divdf3+0x4c4>
  193d40:	00800074 	movhi	r2,1
  193d44:	6099883a 	add	r12,r12,r2
  193d48:	400ad43a 	srli	r5,r8,16
  193d4c:	4010943a 	slli	r8,r8,16
  193d50:	4c3fffcc 	andi	r16,r9,65535
  193d54:	6149883a 	add	r4,r12,r5
  193d58:	4411883a 	add	r8,r8,r16
  193d5c:	3900a736 	bltu	r7,r4,193ffc <__divdf3+0x778>
  193d60:	3900c426 	beq	r7,r4,194074 <__divdf3+0x7f0>
  193d64:	3909c83a 	sub	r4,r7,r4
  193d68:	b221c83a 	sub	r16,r22,r8
  193d6c:	b42d803a 	cmpltu	r22,r22,r16
  193d70:	25adc83a 	sub	r22,r4,r22
  193d74:	b5c0c626 	beq	r22,r23,194090 <__divdf3+0x80c>
  193d78:	b009883a 	mov	r4,r22
  193d7c:	a80b883a 	mov	r5,r21
  193d80:	0187dc80 	call	187dc8 <__udivsi3>
  193d84:	1009883a 	mov	r4,r2
  193d88:	980b883a 	mov	r5,r19
  193d8c:	d8800315 	stw	r2,12(sp)
  193d90:	0187dd80 	call	187dd8 <__mulsi3>
  193d94:	a80b883a 	mov	r5,r21
  193d98:	b009883a 	mov	r4,r22
  193d9c:	d8800415 	stw	r2,16(sp)
  193da0:	0187dd00 	call	187dd0 <__umodsi3>
  193da4:	1004943a 	slli	r2,r2,16
  193da8:	800ed43a 	srli	r7,r16,16
  193dac:	da400417 	ldw	r9,16(sp)
  193db0:	da000317 	ldw	r8,12(sp)
  193db4:	11cab03a 	or	r5,r2,r7
  193db8:	2a40062e 	bgeu	r5,r9,193dd4 <__divdf3+0x550>
  193dbc:	2dcb883a 	add	r5,r5,r23
  193dc0:	40bfffc4 	addi	r2,r8,-1
  193dc4:	2dc0b436 	bltu	r5,r23,194098 <__divdf3+0x814>
  193dc8:	2a40b32e 	bgeu	r5,r9,194098 <__divdf3+0x814>
  193dcc:	423fff84 	addi	r8,r8,-2
  193dd0:	2dcb883a 	add	r5,r5,r23
  193dd4:	2a6dc83a 	sub	r22,r5,r9
  193dd8:	b009883a 	mov	r4,r22
  193ddc:	a80b883a 	mov	r5,r21
  193de0:	da000315 	stw	r8,12(sp)
  193de4:	0187dc80 	call	187dc8 <__udivsi3>
  193de8:	980b883a 	mov	r5,r19
  193dec:	1009883a 	mov	r4,r2
  193df0:	d8800415 	stw	r2,16(sp)
  193df4:	0187dd80 	call	187dd8 <__mulsi3>
  193df8:	b009883a 	mov	r4,r22
  193dfc:	a80b883a 	mov	r5,r21
  193e00:	1027883a 	mov	r19,r2
  193e04:	0187dd00 	call	187dd0 <__umodsi3>
  193e08:	1004943a 	slli	r2,r2,16
  193e0c:	843fffcc 	andi	r16,r16,65535
  193e10:	da000317 	ldw	r8,12(sp)
  193e14:	140eb03a 	or	r7,r2,r16
  193e18:	da400417 	ldw	r9,16(sp)
  193e1c:	3cc0062e 	bgeu	r7,r19,193e38 <__divdf3+0x5b4>
  193e20:	3dcf883a 	add	r7,r7,r23
  193e24:	48bfffc4 	addi	r2,r9,-1
  193e28:	3dc09d36 	bltu	r7,r23,1940a0 <__divdf3+0x81c>
  193e2c:	3cc09c2e 	bgeu	r7,r19,1940a0 <__divdf3+0x81c>
  193e30:	4a7fff84 	addi	r9,r9,-2
  193e34:	3dcf883a 	add	r7,r7,r23
  193e38:	4010943a 	slli	r8,r8,16
  193e3c:	3cebc83a 	sub	r21,r7,r19
  193e40:	e00b883a 	mov	r5,fp
  193e44:	4a26b03a 	or	r19,r9,r8
  193e48:	99ffffcc 	andi	r7,r19,65535
  193e4c:	9820d43a 	srli	r16,r19,16
  193e50:	3809883a 	mov	r4,r7
  193e54:	d9c00515 	stw	r7,20(sp)
  193e58:	0187dd80 	call	187dd8 <__mulsi3>
  193e5c:	8009883a 	mov	r4,r16
  193e60:	e00b883a 	mov	r5,fp
  193e64:	102d883a 	mov	r22,r2
  193e68:	0187dd80 	call	187dd8 <__mulsi3>
  193e6c:	d9400017 	ldw	r5,0(sp)
  193e70:	8009883a 	mov	r4,r16
  193e74:	1039883a 	mov	fp,r2
  193e78:	0187dd80 	call	187dd8 <__mulsi3>
  193e7c:	d9c00517 	ldw	r7,20(sp)
  193e80:	d9400017 	ldw	r5,0(sp)
  193e84:	1021883a 	mov	r16,r2
  193e88:	3809883a 	mov	r4,r7
  193e8c:	0187dd80 	call	187dd8 <__mulsi3>
  193e90:	b008d43a 	srli	r4,r22,16
  193e94:	e085883a 	add	r2,fp,r2
  193e98:	1109883a 	add	r4,r2,r4
  193e9c:	2700022e 	bgeu	r4,fp,193ea8 <__divdf3+0x624>
  193ea0:	00800074 	movhi	r2,1
  193ea4:	80a1883a 	add	r16,r16,r2
  193ea8:	200ad43a 	srli	r5,r4,16
  193eac:	2008943a 	slli	r4,r4,16
  193eb0:	b5bfffcc 	andi	r22,r22,65535
  193eb4:	8145883a 	add	r2,r16,r5
  193eb8:	2589883a 	add	r4,r4,r22
  193ebc:	a8802c36 	bltu	r21,r2,193f70 <__divdf3+0x6ec>
  193ec0:	a880a426 	beq	r21,r2,194154 <__divdf3+0x8d0>
  193ec4:	9cc00054 	ori	r19,r19,1
  193ec8:	9200ffc4 	addi	r8,r18,1023
  193ecc:	023f270e 	bge	zero,r8,193b6c <__alt_data_end+0xfff93b6c>
  193ed0:	988001cc 	andi	r2,r19,7
  193ed4:	10000726 	beq	r2,zero,193ef4 <__divdf3+0x670>
  193ed8:	990003cc 	andi	r4,r19,15
  193edc:	00800104 	movi	r2,4
  193ee0:	20800426 	beq	r4,r2,193ef4 <__divdf3+0x670>
  193ee4:	9885883a 	add	r2,r19,r2
  193ee8:	14e7803a 	cmpltu	r19,r2,r19
  193eec:	8ce3883a 	add	r17,r17,r19
  193ef0:	1027883a 	mov	r19,r2
  193ef4:	8880402c 	andhi	r2,r17,256
  193ef8:	10000426 	beq	r2,zero,193f0c <__divdf3+0x688>
  193efc:	00bfc034 	movhi	r2,65280
  193f00:	10bfffc4 	addi	r2,r2,-1
  193f04:	92010004 	addi	r8,r18,1024
  193f08:	88a2703a 	and	r17,r17,r2
  193f0c:	0081ff84 	movi	r2,2046
  193f10:	123eb616 	blt	r2,r8,1939ec <__alt_data_end+0xfff939ec>
  193f14:	9826d0fa 	srli	r19,r19,3
  193f18:	8804977a 	slli	r2,r17,29
  193f1c:	8820927a 	slli	r16,r17,9
  193f20:	4201ffcc 	andi	r8,r8,2047
  193f24:	14e6b03a 	or	r19,r2,r19
  193f28:	800ad33a 	srli	r5,r16,12
  193f2c:	a180004c 	andi	r6,r20,1
  193f30:	003eb206 	br	1939fc <__alt_data_end+0xfff939fc>
  193f34:	008000c4 	movi	r2,3
  193f38:	4080ac26 	beq	r8,r2,1941ec <__divdf3+0x968>
  193f3c:	00800044 	movi	r2,1
  193f40:	4080591e 	bne	r8,r2,1940a8 <__divdf3+0x824>
  193f44:	e00d883a 	mov	r6,fp
  193f48:	0011883a 	mov	r8,zero
  193f4c:	000b883a 	mov	r5,zero
  193f50:	0027883a 	mov	r19,zero
  193f54:	003ea906 	br	1939fc <__alt_data_end+0xfff939fc>
  193f58:	00800434 	movhi	r2,16
  193f5c:	89400234 	orhi	r5,r17,8
  193f60:	10bfffc4 	addi	r2,r2,-1
  193f64:	b00d883a 	mov	r6,r22
  193f68:	288a703a 	and	r5,r5,r2
  193f6c:	003efd06 	br	193b64 <__alt_data_end+0xfff93b64>
  193f70:	adcf883a 	add	r7,r21,r23
  193f74:	997fffc4 	addi	r5,r19,-1
  193f78:	3dc0412e 	bgeu	r7,r23,194080 <__divdf3+0x7fc>
  193f7c:	2827883a 	mov	r19,r5
  193f80:	38bfd01e 	bne	r7,r2,193ec4 <__alt_data_end+0xfff93ec4>
  193f84:	d8c00117 	ldw	r3,4(sp)
  193f88:	193fce1e 	bne	r3,r4,193ec4 <__alt_data_end+0xfff93ec4>
  193f8c:	003fce06 	br	193ec8 <__alt_data_end+0xfff93ec8>
  193f90:	d9800215 	stw	r6,8(sp)
  193f94:	d9c00515 	stw	r7,20(sp)
  193f98:	0188da00 	call	188da0 <__clzsi2>
  193f9c:	10c00804 	addi	r3,r2,32
  193fa0:	010009c4 	movi	r4,39
  193fa4:	d9800217 	ldw	r6,8(sp)
  193fa8:	d9c00517 	ldw	r7,20(sp)
  193fac:	20feb20e 	bge	r4,r3,193a78 <__alt_data_end+0xfff93a78>
  193fb0:	117ffe04 	addi	r5,r2,-8
  193fb4:	a162983a 	sll	r17,r20,r5
  193fb8:	0027883a 	mov	r19,zero
  193fbc:	003eb506 	br	193a94 <__alt_data_end+0xfff93a94>
  193fc0:	3009883a 	mov	r4,r6
  193fc4:	d9800215 	stw	r6,8(sp)
  193fc8:	da000315 	stw	r8,12(sp)
  193fcc:	da400415 	stw	r9,16(sp)
  193fd0:	0188da00 	call	188da0 <__clzsi2>
  193fd4:	10c00804 	addi	r3,r2,32
  193fd8:	010009c4 	movi	r4,39
  193fdc:	d9800217 	ldw	r6,8(sp)
  193fe0:	da000317 	ldw	r8,12(sp)
  193fe4:	da400417 	ldw	r9,16(sp)
  193fe8:	20fec10e 	bge	r4,r3,193af0 <__alt_data_end+0xfff93af0>
  193fec:	10bffe04 	addi	r2,r2,-8
  193ff0:	a8a0983a 	sll	r16,r21,r2
  193ff4:	002b883a 	mov	r21,zero
  193ff8:	003ec406 	br	193b0c <__alt_data_end+0xfff93b0c>
  193ffc:	d8c00117 	ldw	r3,4(sp)
  194000:	b0ed883a 	add	r22,r22,r3
  194004:	b0c5803a 	cmpltu	r2,r22,r3
  194008:	15c5883a 	add	r2,r2,r23
  19400c:	11cf883a 	add	r7,r2,r7
  194010:	88bfffc4 	addi	r2,r17,-1
  194014:	b9c00d2e 	bgeu	r23,r7,19404c <__divdf3+0x7c8>
  194018:	39003f36 	bltu	r7,r4,194118 <__divdf3+0x894>
  19401c:	21c06a26 	beq	r4,r7,1941c8 <__divdf3+0x944>
  194020:	3909c83a 	sub	r4,r7,r4
  194024:	1023883a 	mov	r17,r2
  194028:	003f4f06 	br	193d68 <__alt_data_end+0xfff93d68>
  19402c:	9d7ee536 	bltu	r19,r21,193bc4 <__alt_data_end+0xfff93bc4>
  194030:	982ed07a 	srli	r23,r19,1
  194034:	880497fa 	slli	r2,r17,31
  194038:	8810d07a 	srli	r8,r17,1
  19403c:	982c97fa 	slli	r22,r19,31
  194040:	b884b03a 	or	r2,r23,r2
  194044:	d8800015 	stw	r2,0(sp)
  194048:	003ee206 	br	193bd4 <__alt_data_end+0xfff93bd4>
  19404c:	3dfff41e 	bne	r7,r23,194020 <__alt_data_end+0xfff94020>
  194050:	d8c00117 	ldw	r3,4(sp)
  194054:	b0fff02e 	bgeu	r22,r3,194018 <__alt_data_end+0xfff94018>
  194058:	b909c83a 	sub	r4,r23,r4
  19405c:	1023883a 	mov	r17,r2
  194060:	003f4106 	br	193d68 <__alt_data_end+0xfff93d68>
  194064:	1021883a 	mov	r16,r2
  194068:	003f1106 	br	193cb0 <__alt_data_end+0xfff93cb0>
  19406c:	1023883a 	mov	r17,r2
  194070:	003ef706 	br	193c50 <__alt_data_end+0xfff93c50>
  194074:	b23fe136 	bltu	r22,r8,193ffc <__alt_data_end+0xfff93ffc>
  194078:	0009883a 	mov	r4,zero
  19407c:	003f3a06 	br	193d68 <__alt_data_end+0xfff93d68>
  194080:	38802c36 	bltu	r7,r2,194134 <__divdf3+0x8b0>
  194084:	11c05326 	beq	r2,r7,1941d4 <__divdf3+0x950>
  194088:	2827883a 	mov	r19,r5
  19408c:	003f8d06 	br	193ec4 <__alt_data_end+0xfff93ec4>
  194090:	04ffffc4 	movi	r19,-1
  194094:	003f8c06 	br	193ec8 <__alt_data_end+0xfff93ec8>
  194098:	1011883a 	mov	r8,r2
  19409c:	003f4d06 	br	193dd4 <__alt_data_end+0xfff93dd4>
  1940a0:	1013883a 	mov	r9,r2
  1940a4:	003f6406 	br	193e38 <__alt_data_end+0xfff93e38>
  1940a8:	e029883a 	mov	r20,fp
  1940ac:	003f8606 	br	193ec8 <__alt_data_end+0xfff93ec8>
  1940b0:	008007c4 	movi	r2,31
  1940b4:	14002a16 	blt	r2,r16,194160 <__divdf3+0x8dc>
  1940b8:	91410784 	addi	r5,r18,1054
  1940bc:	9c0cd83a 	srl	r6,r19,r16
  1940c0:	8948983a 	sll	r4,r17,r5
  1940c4:	9944983a 	sll	r2,r19,r5
  1940c8:	8c20d83a 	srl	r16,r17,r16
  1940cc:	3108b03a 	or	r4,r6,r4
  1940d0:	1004c03a 	cmpne	r2,r2,zero
  1940d4:	2084b03a 	or	r2,r4,r2
  1940d8:	110001cc 	andi	r4,r2,7
  1940dc:	20000726 	beq	r4,zero,1940fc <__divdf3+0x878>
  1940e0:	114003cc 	andi	r5,r2,15
  1940e4:	01000104 	movi	r4,4
  1940e8:	29000426 	beq	r5,r4,1940fc <__divdf3+0x878>
  1940ec:	11000104 	addi	r4,r2,4
  1940f0:	2085803a 	cmpltu	r2,r4,r2
  1940f4:	80a1883a 	add	r16,r16,r2
  1940f8:	2005883a 	mov	r2,r4
  1940fc:	8100202c 	andhi	r4,r16,128
  194100:	20002d26 	beq	r4,zero,1941b8 <__divdf3+0x934>
  194104:	a180004c 	andi	r6,r20,1
  194108:	02000044 	movi	r8,1
  19410c:	000b883a 	mov	r5,zero
  194110:	0027883a 	mov	r19,zero
  194114:	003e3906 	br	1939fc <__alt_data_end+0xfff939fc>
  194118:	d8c00117 	ldw	r3,4(sp)
  19411c:	8c7fff84 	addi	r17,r17,-2
  194120:	b0ed883a 	add	r22,r22,r3
  194124:	b0c5803a 	cmpltu	r2,r22,r3
  194128:	15c5883a 	add	r2,r2,r23
  19412c:	11cf883a 	add	r7,r2,r7
  194130:	003f0c06 	br	193d64 <__alt_data_end+0xfff93d64>
  194134:	d8c00117 	ldw	r3,4(sp)
  194138:	997fff84 	addi	r5,r19,-2
  19413c:	18d1883a 	add	r8,r3,r3
  194140:	40c7803a 	cmpltu	r3,r8,r3
  194144:	1dcd883a 	add	r6,r3,r23
  194148:	398f883a 	add	r7,r7,r6
  19414c:	da000115 	stw	r8,4(sp)
  194150:	003f8a06 	br	193f7c <__alt_data_end+0xfff93f7c>
  194154:	203f861e 	bne	r4,zero,193f70 <__alt_data_end+0xfff93f70>
  194158:	d8000115 	stw	zero,4(sp)
  19415c:	003f8906 	br	193f84 <__alt_data_end+0xfff93f84>
  194160:	00bef884 	movi	r2,-1054
  194164:	1485c83a 	sub	r2,r2,r18
  194168:	01000804 	movi	r4,32
  19416c:	8884d83a 	srl	r2,r17,r2
  194170:	81001c26 	beq	r16,r4,1941e4 <__divdf3+0x960>
  194174:	91010f84 	addi	r4,r18,1086
  194178:	8908983a 	sll	r4,r17,r4
  19417c:	24c8b03a 	or	r4,r4,r19
  194180:	2008c03a 	cmpne	r4,r4,zero
  194184:	2084b03a 	or	r2,r4,r2
  194188:	140001cc 	andi	r16,r2,7
  19418c:	8000061e 	bne	r16,zero,1941a8 <__divdf3+0x924>
  194190:	000b883a 	mov	r5,zero
  194194:	1004d0fa 	srli	r2,r2,3
  194198:	a180004c 	andi	r6,r20,1
  19419c:	0011883a 	mov	r8,zero
  1941a0:	1426b03a 	or	r19,r2,r16
  1941a4:	003e1506 	br	1939fc <__alt_data_end+0xfff939fc>
  1941a8:	114003cc 	andi	r5,r2,15
  1941ac:	01000104 	movi	r4,4
  1941b0:	0021883a 	mov	r16,zero
  1941b4:	293fcd1e 	bne	r5,r4,1940ec <__alt_data_end+0xfff940ec>
  1941b8:	800a927a 	slli	r5,r16,9
  1941bc:	8020977a 	slli	r16,r16,29
  1941c0:	280ad33a 	srli	r5,r5,12
  1941c4:	003ff306 	br	194194 <__alt_data_end+0xfff94194>
  1941c8:	b23fd336 	bltu	r22,r8,194118 <__alt_data_end+0xfff94118>
  1941cc:	1023883a 	mov	r17,r2
  1941d0:	003fa906 	br	194078 <__alt_data_end+0xfff94078>
  1941d4:	d8c00117 	ldw	r3,4(sp)
  1941d8:	193fd636 	bltu	r3,r4,194134 <__alt_data_end+0xfff94134>
  1941dc:	2827883a 	mov	r19,r5
  1941e0:	003f6806 	br	193f84 <__alt_data_end+0xfff93f84>
  1941e4:	0009883a 	mov	r4,zero
  1941e8:	003fe406 	br	19417c <__alt_data_end+0xfff9417c>
  1941ec:	00800434 	movhi	r2,16
  1941f0:	89400234 	orhi	r5,r17,8
  1941f4:	10bfffc4 	addi	r2,r2,-1
  1941f8:	e00d883a 	mov	r6,fp
  1941fc:	288a703a 	and	r5,r5,r2
  194200:	003e5806 	br	193b64 <__alt_data_end+0xfff93b64>

00194204 <__eqdf2>:
  194204:	2804d53a 	srli	r2,r5,20
  194208:	3806d53a 	srli	r3,r7,20
  19420c:	02000434 	movhi	r8,16
  194210:	423fffc4 	addi	r8,r8,-1
  194214:	1081ffcc 	andi	r2,r2,2047
  194218:	0241ffc4 	movi	r9,2047
  19421c:	2a14703a 	and	r10,r5,r8
  194220:	18c1ffcc 	andi	r3,r3,2047
  194224:	3a10703a 	and	r8,r7,r8
  194228:	280ad7fa 	srli	r5,r5,31
  19422c:	380ed7fa 	srli	r7,r7,31
  194230:	12400f26 	beq	r2,r9,194270 <__eqdf2+0x6c>
  194234:	0241ffc4 	movi	r9,2047
  194238:	1a400326 	beq	r3,r9,194248 <__eqdf2+0x44>
  19423c:	10c00526 	beq	r2,r3,194254 <__eqdf2+0x50>
  194240:	00800044 	movi	r2,1
  194244:	f800283a 	ret
  194248:	4192b03a 	or	r9,r8,r6
  19424c:	483ffc1e 	bne	r9,zero,194240 <__alt_data_end+0xfff94240>
  194250:	10fffb1e 	bne	r2,r3,194240 <__alt_data_end+0xfff94240>
  194254:	523ffa1e 	bne	r10,r8,194240 <__alt_data_end+0xfff94240>
  194258:	21bff91e 	bne	r4,r6,194240 <__alt_data_end+0xfff94240>
  19425c:	29c00826 	beq	r5,r7,194280 <__eqdf2+0x7c>
  194260:	103ff71e 	bne	r2,zero,194240 <__alt_data_end+0xfff94240>
  194264:	5104b03a 	or	r2,r10,r4
  194268:	1004c03a 	cmpne	r2,r2,zero
  19426c:	f800283a 	ret
  194270:	5112b03a 	or	r9,r10,r4
  194274:	483fef26 	beq	r9,zero,194234 <__alt_data_end+0xfff94234>
  194278:	00800044 	movi	r2,1
  19427c:	f800283a 	ret
  194280:	0005883a 	mov	r2,zero
  194284:	f800283a 	ret

00194288 <__gedf2>:
  194288:	2804d53a 	srli	r2,r5,20
  19428c:	3806d53a 	srli	r3,r7,20
  194290:	02000434 	movhi	r8,16
  194294:	423fffc4 	addi	r8,r8,-1
  194298:	0241ffc4 	movi	r9,2047
  19429c:	1081ffcc 	andi	r2,r2,2047
  1942a0:	2a14703a 	and	r10,r5,r8
  1942a4:	1a46703a 	and	r3,r3,r9
  1942a8:	3a10703a 	and	r8,r7,r8
  1942ac:	280ad7fa 	srli	r5,r5,31
  1942b0:	380ed7fa 	srli	r7,r7,31
  1942b4:	12400b26 	beq	r2,r9,1942e4 <__gedf2+0x5c>
  1942b8:	1a401626 	beq	r3,r9,194314 <__gedf2+0x8c>
  1942bc:	10000c1e 	bne	r2,zero,1942f0 <__gedf2+0x68>
  1942c0:	5112b03a 	or	r9,r10,r4
  1942c4:	4813003a 	cmpeq	r9,r9,zero
  1942c8:	4817883a 	mov	r11,r9
  1942cc:	18000c1e 	bne	r3,zero,194300 <__gedf2+0x78>
  1942d0:	4198b03a 	or	r12,r8,r6
  1942d4:	60000a1e 	bne	r12,zero,194300 <__gedf2+0x78>
  1942d8:	48001326 	beq	r9,zero,194328 <__gedf2+0xa0>
  1942dc:	0005883a 	mov	r2,zero
  1942e0:	f800283a 	ret
  1942e4:	5112b03a 	or	r9,r10,r4
  1942e8:	4800191e 	bne	r9,zero,194350 <__gedf2+0xc8>
  1942ec:	18800926 	beq	r3,r2,194314 <__gedf2+0x8c>
  1942f0:	18000b1e 	bne	r3,zero,194320 <__gedf2+0x98>
  1942f4:	4192b03a 	or	r9,r8,r6
  1942f8:	0017883a 	mov	r11,zero
  1942fc:	48000a26 	beq	r9,zero,194328 <__gedf2+0xa0>
  194300:	39c03fcc 	andi	r7,r7,255
  194304:	58000726 	beq	r11,zero,194324 <__gedf2+0x9c>
  194308:	3800081e 	bne	r7,zero,19432c <__gedf2+0xa4>
  19430c:	00bfffc4 	movi	r2,-1
  194310:	f800283a 	ret
  194314:	4192b03a 	or	r9,r8,r6
  194318:	48000d1e 	bne	r9,zero,194350 <__gedf2+0xc8>
  19431c:	103fe826 	beq	r2,zero,1942c0 <__alt_data_end+0xfff942c0>
  194320:	39c03fcc 	andi	r7,r7,255
  194324:	29c00326 	beq	r5,r7,194334 <__gedf2+0xac>
  194328:	283ff81e 	bne	r5,zero,19430c <__alt_data_end+0xfff9430c>
  19432c:	00800044 	movi	r2,1
  194330:	f800283a 	ret
  194334:	18bffc16 	blt	r3,r2,194328 <__alt_data_end+0xfff94328>
  194338:	10c00316 	blt	r2,r3,194348 <__gedf2+0xc0>
  19433c:	42bffa36 	bltu	r8,r10,194328 <__alt_data_end+0xfff94328>
  194340:	52000526 	beq	r10,r8,194358 <__gedf2+0xd0>
  194344:	523fe52e 	bgeu	r10,r8,1942dc <__alt_data_end+0xfff942dc>
  194348:	283ff026 	beq	r5,zero,19430c <__alt_data_end+0xfff9430c>
  19434c:	003ff706 	br	19432c <__alt_data_end+0xfff9432c>
  194350:	00bfff84 	movi	r2,-2
  194354:	f800283a 	ret
  194358:	313ff336 	bltu	r6,r4,194328 <__alt_data_end+0xfff94328>
  19435c:	21bfdf2e 	bgeu	r4,r6,1942dc <__alt_data_end+0xfff942dc>
  194360:	283fea26 	beq	r5,zero,19430c <__alt_data_end+0xfff9430c>
  194364:	003ff106 	br	19432c <__alt_data_end+0xfff9432c>

00194368 <__ledf2>:
  194368:	2804d53a 	srli	r2,r5,20
  19436c:	3810d53a 	srli	r8,r7,20
  194370:	00c00434 	movhi	r3,16
  194374:	18ffffc4 	addi	r3,r3,-1
  194378:	0241ffc4 	movi	r9,2047
  19437c:	1081ffcc 	andi	r2,r2,2047
  194380:	28d4703a 	and	r10,r5,r3
  194384:	4250703a 	and	r8,r8,r9
  194388:	38c6703a 	and	r3,r7,r3
  19438c:	280ad7fa 	srli	r5,r5,31
  194390:	380ed7fa 	srli	r7,r7,31
  194394:	12400b26 	beq	r2,r9,1943c4 <__ledf2+0x5c>
  194398:	42401926 	beq	r8,r9,194400 <__ledf2+0x98>
  19439c:	10000c1e 	bne	r2,zero,1943d0 <__ledf2+0x68>
  1943a0:	5112b03a 	or	r9,r10,r4
  1943a4:	4813003a 	cmpeq	r9,r9,zero
  1943a8:	4817883a 	mov	r11,r9
  1943ac:	40000f26 	beq	r8,zero,1943ec <__ledf2+0x84>
  1943b0:	39c03fcc 	andi	r7,r7,255
  1943b4:	58001826 	beq	r11,zero,194418 <__ledf2+0xb0>
  1943b8:	38000a1e 	bne	r7,zero,1943e4 <__ledf2+0x7c>
  1943bc:	00bfffc4 	movi	r2,-1
  1943c0:	f800283a 	ret
  1943c4:	5112b03a 	or	r9,r10,r4
  1943c8:	48000f1e 	bne	r9,zero,194408 <__ledf2+0xa0>
  1943cc:	40800c26 	beq	r8,r2,194400 <__ledf2+0x98>
  1943d0:	4000101e 	bne	r8,zero,194414 <__ledf2+0xac>
  1943d4:	1992b03a 	or	r9,r3,r6
  1943d8:	0017883a 	mov	r11,zero
  1943dc:	483ff41e 	bne	r9,zero,1943b0 <__alt_data_end+0xfff943b0>
  1943e0:	283ff61e 	bne	r5,zero,1943bc <__alt_data_end+0xfff943bc>
  1943e4:	00800044 	movi	r2,1
  1943e8:	f800283a 	ret
  1943ec:	1998b03a 	or	r12,r3,r6
  1943f0:	603fef1e 	bne	r12,zero,1943b0 <__alt_data_end+0xfff943b0>
  1943f4:	483ffa26 	beq	r9,zero,1943e0 <__alt_data_end+0xfff943e0>
  1943f8:	0005883a 	mov	r2,zero
  1943fc:	f800283a 	ret
  194400:	1992b03a 	or	r9,r3,r6
  194404:	48000226 	beq	r9,zero,194410 <__ledf2+0xa8>
  194408:	00800084 	movi	r2,2
  19440c:	f800283a 	ret
  194410:	103fe326 	beq	r2,zero,1943a0 <__alt_data_end+0xfff943a0>
  194414:	39c03fcc 	andi	r7,r7,255
  194418:	29fff11e 	bne	r5,r7,1943e0 <__alt_data_end+0xfff943e0>
  19441c:	40bff016 	blt	r8,r2,1943e0 <__alt_data_end+0xfff943e0>
  194420:	12000316 	blt	r2,r8,194430 <__ledf2+0xc8>
  194424:	1abfee36 	bltu	r3,r10,1943e0 <__alt_data_end+0xfff943e0>
  194428:	50c00326 	beq	r10,r3,194438 <__ledf2+0xd0>
  19442c:	50fff22e 	bgeu	r10,r3,1943f8 <__alt_data_end+0xfff943f8>
  194430:	283fe226 	beq	r5,zero,1943bc <__alt_data_end+0xfff943bc>
  194434:	003feb06 	br	1943e4 <__alt_data_end+0xfff943e4>
  194438:	313fe936 	bltu	r6,r4,1943e0 <__alt_data_end+0xfff943e0>
  19443c:	21bfee2e 	bgeu	r4,r6,1943f8 <__alt_data_end+0xfff943f8>
  194440:	283fde26 	beq	r5,zero,1943bc <__alt_data_end+0xfff943bc>
  194444:	003fe706 	br	1943e4 <__alt_data_end+0xfff943e4>

00194448 <__muldf3>:
  194448:	deffee04 	addi	sp,sp,-72
  19444c:	dd000c15 	stw	r20,48(sp)
  194450:	2828d53a 	srli	r20,r5,20
  194454:	dd400d15 	stw	r21,52(sp)
  194458:	282ad7fa 	srli	r21,r5,31
  19445c:	dc000815 	stw	r16,32(sp)
  194460:	04000434 	movhi	r16,16
  194464:	ddc00f15 	stw	r23,60(sp)
  194468:	dcc00b15 	stw	r19,44(sp)
  19446c:	dc800a15 	stw	r18,40(sp)
  194470:	843fffc4 	addi	r16,r16,-1
  194474:	dfc01115 	stw	ra,68(sp)
  194478:	df001015 	stw	fp,64(sp)
  19447c:	dd800e15 	stw	r22,56(sp)
  194480:	dc400915 	stw	r17,36(sp)
  194484:	a501ffcc 	andi	r20,r20,2047
  194488:	2025883a 	mov	r18,r4
  19448c:	202f883a 	mov	r23,r4
  194490:	2c20703a 	and	r16,r5,r16
  194494:	a827883a 	mov	r19,r21
  194498:	aa403fcc 	andi	r9,r21,255
  19449c:	a0005926 	beq	r20,zero,194604 <__muldf3+0x1bc>
  1944a0:	0081ffc4 	movi	r2,2047
  1944a4:	a0803426 	beq	r20,r2,194578 <__muldf3+0x130>
  1944a8:	84000434 	orhi	r16,r16,16
  1944ac:	2004d77a 	srli	r2,r4,29
  1944b0:	802090fa 	slli	r16,r16,3
  1944b4:	202e90fa 	slli	r23,r4,3
  1944b8:	a53f0044 	addi	r20,r20,-1023
  1944bc:	80a0b03a 	or	r16,r16,r2
  1944c0:	000b883a 	mov	r5,zero
  1944c4:	0039883a 	mov	fp,zero
  1944c8:	3806d53a 	srli	r3,r7,20
  1944cc:	382cd7fa 	srli	r22,r7,31
  1944d0:	00800434 	movhi	r2,16
  1944d4:	10bfffc4 	addi	r2,r2,-1
  1944d8:	18c1ffcc 	andi	r3,r3,2047
  1944dc:	3025883a 	mov	r18,r6
  1944e0:	38a2703a 	and	r17,r7,r2
  1944e4:	b2803fcc 	andi	r10,r22,255
  1944e8:	18006426 	beq	r3,zero,19467c <__muldf3+0x234>
  1944ec:	0081ffc4 	movi	r2,2047
  1944f0:	18805c26 	beq	r3,r2,194664 <__muldf3+0x21c>
  1944f4:	8c400434 	orhi	r17,r17,16
  1944f8:	3004d77a 	srli	r2,r6,29
  1944fc:	882290fa 	slli	r17,r17,3
  194500:	302490fa 	slli	r18,r6,3
  194504:	18ff0044 	addi	r3,r3,-1023
  194508:	88a2b03a 	or	r17,r17,r2
  19450c:	000f883a 	mov	r7,zero
  194510:	394ab03a 	or	r5,r7,r5
  194514:	280a90ba 	slli	r5,r5,2
  194518:	00800674 	movhi	r2,25
  19451c:	10914e04 	addi	r2,r2,17720
  194520:	288b883a 	add	r5,r5,r2
  194524:	28800017 	ldw	r2,0(r5)
  194528:	a0c7883a 	add	r3,r20,r3
  19452c:	b54cf03a 	xor	r6,r22,r21
  194530:	1a000044 	addi	r8,r3,1
  194534:	1000683a 	jmp	r2
  194538:	0019477c 	xorhi	zero,zero,25885
  19453c:	00194768 	cmpgeui	zero,zero,25885
  194540:	00194768 	cmpgeui	zero,zero,25885
  194544:	00194754 	movui	zero,25885
  194548:	00194594 	movui	zero,25878
  19454c:	00194594 	movui	zero,25878
  194550:	0019473c 	xorhi	zero,zero,25884
  194554:	00194754 	movui	zero,25885
  194558:	00194594 	movui	zero,25878
  19455c:	0019473c 	xorhi	zero,zero,25884
  194560:	00194594 	movui	zero,25878
  194564:	00194754 	movui	zero,25885
  194568:	00194598 	cmpnei	zero,zero,25878
  19456c:	00194598 	cmpnei	zero,zero,25878
  194570:	00194598 	cmpnei	zero,zero,25878
  194574:	00194ab8 	rdprs	zero,zero,25898
  194578:	8104b03a 	or	r2,r16,r4
  19457c:	10006c1e 	bne	r2,zero,194730 <__muldf3+0x2e8>
  194580:	01400204 	movi	r5,8
  194584:	0021883a 	mov	r16,zero
  194588:	002f883a 	mov	r23,zero
  19458c:	07000084 	movi	fp,2
  194590:	003fcd06 	br	1944c8 <__alt_data_end+0xfff944c8>
  194594:	3013883a 	mov	r9,r6
  194598:	00800084 	movi	r2,2
  19459c:	e080501e 	bne	fp,r2,1946e0 <__muldf3+0x298>
  1945a0:	4cc0004c 	andi	r19,r9,1
  1945a4:	0101ffc4 	movi	r4,2047
  1945a8:	0021883a 	mov	r16,zero
  1945ac:	002f883a 	mov	r23,zero
  1945b0:	2008953a 	slli	r4,r4,20
  1945b4:	98c03fcc 	andi	r3,r19,255
  1945b8:	04400434 	movhi	r17,16
  1945bc:	8c7fffc4 	addi	r17,r17,-1
  1945c0:	180697fa 	slli	r3,r3,31
  1945c4:	8460703a 	and	r16,r16,r17
  1945c8:	8120b03a 	or	r16,r16,r4
  1945cc:	80c6b03a 	or	r3,r16,r3
  1945d0:	b805883a 	mov	r2,r23
  1945d4:	dfc01117 	ldw	ra,68(sp)
  1945d8:	df001017 	ldw	fp,64(sp)
  1945dc:	ddc00f17 	ldw	r23,60(sp)
  1945e0:	dd800e17 	ldw	r22,56(sp)
  1945e4:	dd400d17 	ldw	r21,52(sp)
  1945e8:	dd000c17 	ldw	r20,48(sp)
  1945ec:	dcc00b17 	ldw	r19,44(sp)
  1945f0:	dc800a17 	ldw	r18,40(sp)
  1945f4:	dc400917 	ldw	r17,36(sp)
  1945f8:	dc000817 	ldw	r16,32(sp)
  1945fc:	dec01204 	addi	sp,sp,72
  194600:	f800283a 	ret
  194604:	8104b03a 	or	r2,r16,r4
  194608:	10004426 	beq	r2,zero,19471c <__muldf3+0x2d4>
  19460c:	80014b26 	beq	r16,zero,194b3c <__muldf3+0x6f4>
  194610:	8009883a 	mov	r4,r16
  194614:	d9800715 	stw	r6,28(sp)
  194618:	d9c00215 	stw	r7,8(sp)
  19461c:	da400415 	stw	r9,16(sp)
  194620:	0188da00 	call	188da0 <__clzsi2>
  194624:	d9800717 	ldw	r6,28(sp)
  194628:	d9c00217 	ldw	r7,8(sp)
  19462c:	da400417 	ldw	r9,16(sp)
  194630:	1007883a 	mov	r3,r2
  194634:	01000a04 	movi	r4,40
  194638:	1dfffe04 	addi	r23,r3,-8
  19463c:	20c9c83a 	sub	r4,r4,r3
  194640:	85e0983a 	sll	r16,r16,r23
  194644:	9108d83a 	srl	r4,r18,r4
  194648:	95ee983a 	sll	r23,r18,r23
  19464c:	2420b03a 	or	r16,r4,r16
  194650:	053f0344 	movi	r20,-1011
  194654:	a0e9c83a 	sub	r20,r20,r3
  194658:	000b883a 	mov	r5,zero
  19465c:	0039883a 	mov	fp,zero
  194660:	003f9906 	br	1944c8 <__alt_data_end+0xfff944c8>
  194664:	8984b03a 	or	r2,r17,r6
  194668:	10002a1e 	bne	r2,zero,194714 <__muldf3+0x2cc>
  19466c:	0023883a 	mov	r17,zero
  194670:	0025883a 	mov	r18,zero
  194674:	01c00084 	movi	r7,2
  194678:	003fa506 	br	194510 <__alt_data_end+0xfff94510>
  19467c:	8984b03a 	or	r2,r17,r6
  194680:	10002026 	beq	r2,zero,194704 <__muldf3+0x2bc>
  194684:	88011c26 	beq	r17,zero,194af8 <__muldf3+0x6b0>
  194688:	8809883a 	mov	r4,r17
  19468c:	d9400215 	stw	r5,8(sp)
  194690:	d9800715 	stw	r6,28(sp)
  194694:	da400415 	stw	r9,16(sp)
  194698:	da800315 	stw	r10,12(sp)
  19469c:	0188da00 	call	188da0 <__clzsi2>
  1946a0:	d9400217 	ldw	r5,8(sp)
  1946a4:	d9800717 	ldw	r6,28(sp)
  1946a8:	da400417 	ldw	r9,16(sp)
  1946ac:	da800317 	ldw	r10,12(sp)
  1946b0:	1007883a 	mov	r3,r2
  1946b4:	01000a04 	movi	r4,40
  1946b8:	1cbffe04 	addi	r18,r3,-8
  1946bc:	20c9c83a 	sub	r4,r4,r3
  1946c0:	8ca2983a 	sll	r17,r17,r18
  1946c4:	3108d83a 	srl	r4,r6,r4
  1946c8:	34a4983a 	sll	r18,r6,r18
  1946cc:	2462b03a 	or	r17,r4,r17
  1946d0:	00bf0344 	movi	r2,-1011
  1946d4:	10c7c83a 	sub	r3,r2,r3
  1946d8:	000f883a 	mov	r7,zero
  1946dc:	003f8c06 	br	194510 <__alt_data_end+0xfff94510>
  1946e0:	008000c4 	movi	r2,3
  1946e4:	e0816d26 	beq	fp,r2,194c9c <__muldf3+0x854>
  1946e8:	00800044 	movi	r2,1
  1946ec:	e081321e 	bne	fp,r2,194bb8 <__muldf3+0x770>
  1946f0:	48a6703a 	and	r19,r9,r2
  1946f4:	0009883a 	mov	r4,zero
  1946f8:	0021883a 	mov	r16,zero
  1946fc:	002f883a 	mov	r23,zero
  194700:	003fab06 	br	1945b0 <__alt_data_end+0xfff945b0>
  194704:	0023883a 	mov	r17,zero
  194708:	0025883a 	mov	r18,zero
  19470c:	01c00044 	movi	r7,1
  194710:	003f7f06 	br	194510 <__alt_data_end+0xfff94510>
  194714:	01c000c4 	movi	r7,3
  194718:	003f7d06 	br	194510 <__alt_data_end+0xfff94510>
  19471c:	01400104 	movi	r5,4
  194720:	0021883a 	mov	r16,zero
  194724:	002f883a 	mov	r23,zero
  194728:	07000044 	movi	fp,1
  19472c:	003f6606 	br	1944c8 <__alt_data_end+0xfff944c8>
  194730:	01400304 	movi	r5,12
  194734:	070000c4 	movi	fp,3
  194738:	003f6306 	br	1944c8 <__alt_data_end+0xfff944c8>
  19473c:	04000434 	movhi	r16,16
  194740:	0027883a 	mov	r19,zero
  194744:	843fffc4 	addi	r16,r16,-1
  194748:	05ffffc4 	movi	r23,-1
  19474c:	0101ffc4 	movi	r4,2047
  194750:	003f9706 	br	1945b0 <__alt_data_end+0xfff945b0>
  194754:	8821883a 	mov	r16,r17
  194758:	902f883a 	mov	r23,r18
  19475c:	5013883a 	mov	r9,r10
  194760:	3839883a 	mov	fp,r7
  194764:	003f8c06 	br	194598 <__alt_data_end+0xfff94598>
  194768:	8821883a 	mov	r16,r17
  19476c:	902f883a 	mov	r23,r18
  194770:	3013883a 	mov	r9,r6
  194774:	3839883a 	mov	fp,r7
  194778:	003f8706 	br	194598 <__alt_data_end+0xfff94598>
  19477c:	b82ad43a 	srli	r21,r23,16
  194780:	9038d43a 	srli	fp,r18,16
  194784:	bdffffcc 	andi	r23,r23,65535
  194788:	94bfffcc 	andi	r18,r18,65535
  19478c:	9009883a 	mov	r4,r18
  194790:	b80b883a 	mov	r5,r23
  194794:	d8c00515 	stw	r3,20(sp)
  194798:	d9800715 	stw	r6,28(sp)
  19479c:	da000615 	stw	r8,24(sp)
  1947a0:	0187dd80 	call	187dd8 <__mulsi3>
  1947a4:	9009883a 	mov	r4,r18
  1947a8:	a80b883a 	mov	r5,r21
  1947ac:	1029883a 	mov	r20,r2
  1947b0:	0187dd80 	call	187dd8 <__mulsi3>
  1947b4:	e009883a 	mov	r4,fp
  1947b8:	a80b883a 	mov	r5,r21
  1947bc:	102d883a 	mov	r22,r2
  1947c0:	0187dd80 	call	187dd8 <__mulsi3>
  1947c4:	e009883a 	mov	r4,fp
  1947c8:	b80b883a 	mov	r5,r23
  1947cc:	1027883a 	mov	r19,r2
  1947d0:	0187dd80 	call	187dd8 <__mulsi3>
  1947d4:	a008d43a 	srli	r4,r20,16
  1947d8:	b085883a 	add	r2,r22,r2
  1947dc:	d8c00517 	ldw	r3,20(sp)
  1947e0:	110f883a 	add	r7,r2,r4
  1947e4:	d9800717 	ldw	r6,28(sp)
  1947e8:	da000617 	ldw	r8,24(sp)
  1947ec:	3d80022e 	bgeu	r7,r22,1947f8 <__muldf3+0x3b0>
  1947f0:	00800074 	movhi	r2,1
  1947f4:	98a7883a 	add	r19,r19,r2
  1947f8:	3804943a 	slli	r2,r7,16
  1947fc:	380ed43a 	srli	r7,r7,16
  194800:	882cd43a 	srli	r22,r17,16
  194804:	a53fffcc 	andi	r20,r20,65535
  194808:	8c7fffcc 	andi	r17,r17,65535
  19480c:	1529883a 	add	r20,r2,r20
  194810:	8809883a 	mov	r4,r17
  194814:	b80b883a 	mov	r5,r23
  194818:	d8c00515 	stw	r3,20(sp)
  19481c:	d9800715 	stw	r6,28(sp)
  194820:	da000615 	stw	r8,24(sp)
  194824:	d9c00015 	stw	r7,0(sp)
  194828:	dd000115 	stw	r20,4(sp)
  19482c:	0187dd80 	call	187dd8 <__mulsi3>
  194830:	a80b883a 	mov	r5,r21
  194834:	8809883a 	mov	r4,r17
  194838:	d8800415 	stw	r2,16(sp)
  19483c:	0187dd80 	call	187dd8 <__mulsi3>
  194840:	a80b883a 	mov	r5,r21
  194844:	b009883a 	mov	r4,r22
  194848:	1029883a 	mov	r20,r2
  19484c:	0187dd80 	call	187dd8 <__mulsi3>
  194850:	b009883a 	mov	r4,r22
  194854:	b80b883a 	mov	r5,r23
  194858:	102b883a 	mov	r21,r2
  19485c:	0187dd80 	call	187dd8 <__mulsi3>
  194860:	da400417 	ldw	r9,16(sp)
  194864:	a085883a 	add	r2,r20,r2
  194868:	d8c00517 	ldw	r3,20(sp)
  19486c:	4808d43a 	srli	r4,r9,16
  194870:	d9800717 	ldw	r6,28(sp)
  194874:	da000617 	ldw	r8,24(sp)
  194878:	1109883a 	add	r4,r2,r4
  19487c:	2500022e 	bgeu	r4,r20,194888 <__muldf3+0x440>
  194880:	00800074 	movhi	r2,1
  194884:	a8ab883a 	add	r21,r21,r2
  194888:	200e943a 	slli	r7,r4,16
  19488c:	2004d43a 	srli	r2,r4,16
  194890:	802ed43a 	srli	r23,r16,16
  194894:	843fffcc 	andi	r16,r16,65535
  194898:	4d3fffcc 	andi	r20,r9,65535
  19489c:	9009883a 	mov	r4,r18
  1948a0:	800b883a 	mov	r5,r16
  1948a4:	3d29883a 	add	r20,r7,r20
  1948a8:	d8c00515 	stw	r3,20(sp)
  1948ac:	d9800715 	stw	r6,28(sp)
  1948b0:	da000615 	stw	r8,24(sp)
  1948b4:	a8ab883a 	add	r21,r21,r2
  1948b8:	0187dd80 	call	187dd8 <__mulsi3>
  1948bc:	9009883a 	mov	r4,r18
  1948c0:	b80b883a 	mov	r5,r23
  1948c4:	d8800315 	stw	r2,12(sp)
  1948c8:	0187dd80 	call	187dd8 <__mulsi3>
  1948cc:	e009883a 	mov	r4,fp
  1948d0:	b80b883a 	mov	r5,r23
  1948d4:	1025883a 	mov	r18,r2
  1948d8:	0187dd80 	call	187dd8 <__mulsi3>
  1948dc:	e009883a 	mov	r4,fp
  1948e0:	800b883a 	mov	r5,r16
  1948e4:	d8800215 	stw	r2,8(sp)
  1948e8:	0187dd80 	call	187dd8 <__mulsi3>
  1948ec:	da800317 	ldw	r10,12(sp)
  1948f0:	d9400017 	ldw	r5,0(sp)
  1948f4:	9085883a 	add	r2,r18,r2
  1948f8:	5008d43a 	srli	r4,r10,16
  1948fc:	a153883a 	add	r9,r20,r5
  194900:	d8c00517 	ldw	r3,20(sp)
  194904:	1109883a 	add	r4,r2,r4
  194908:	d9800717 	ldw	r6,28(sp)
  19490c:	da000617 	ldw	r8,24(sp)
  194910:	dac00217 	ldw	r11,8(sp)
  194914:	2480022e 	bgeu	r4,r18,194920 <__muldf3+0x4d8>
  194918:	00800074 	movhi	r2,1
  19491c:	5897883a 	add	r11,r11,r2
  194920:	200e943a 	slli	r7,r4,16
  194924:	2038d43a 	srli	fp,r4,16
  194928:	52bfffcc 	andi	r10,r10,65535
  19492c:	3a8f883a 	add	r7,r7,r10
  194930:	8809883a 	mov	r4,r17
  194934:	800b883a 	mov	r5,r16
  194938:	d8c00515 	stw	r3,20(sp)
  19493c:	d9800715 	stw	r6,28(sp)
  194940:	d9c00215 	stw	r7,8(sp)
  194944:	da000615 	stw	r8,24(sp)
  194948:	da400415 	stw	r9,16(sp)
  19494c:	5f39883a 	add	fp,r11,fp
  194950:	0187dd80 	call	187dd8 <__mulsi3>
  194954:	8809883a 	mov	r4,r17
  194958:	b80b883a 	mov	r5,r23
  19495c:	1025883a 	mov	r18,r2
  194960:	0187dd80 	call	187dd8 <__mulsi3>
  194964:	b009883a 	mov	r4,r22
  194968:	b80b883a 	mov	r5,r23
  19496c:	d8800315 	stw	r2,12(sp)
  194970:	0187dd80 	call	187dd8 <__mulsi3>
  194974:	b009883a 	mov	r4,r22
  194978:	800b883a 	mov	r5,r16
  19497c:	1023883a 	mov	r17,r2
  194980:	0187dd80 	call	187dd8 <__mulsi3>
  194984:	da800317 	ldw	r10,12(sp)
  194988:	9008d43a 	srli	r4,r18,16
  19498c:	d8c00517 	ldw	r3,20(sp)
  194990:	5085883a 	add	r2,r10,r2
  194994:	1109883a 	add	r4,r2,r4
  194998:	d9800717 	ldw	r6,28(sp)
  19499c:	d9c00217 	ldw	r7,8(sp)
  1949a0:	da000617 	ldw	r8,24(sp)
  1949a4:	da400417 	ldw	r9,16(sp)
  1949a8:	2280022e 	bgeu	r4,r10,1949b4 <__muldf3+0x56c>
  1949ac:	00800074 	movhi	r2,1
  1949b0:	88a3883a 	add	r17,r17,r2
  1949b4:	2004943a 	slli	r2,r4,16
  1949b8:	94bfffcc 	andi	r18,r18,65535
  1949bc:	4ce7883a 	add	r19,r9,r19
  1949c0:	14a5883a 	add	r18,r2,r18
  1949c4:	9d29803a 	cmpltu	r20,r19,r20
  1949c8:	9565883a 	add	r18,r18,r21
  1949cc:	9505883a 	add	r2,r18,r20
  1949d0:	99e7883a 	add	r19,r19,r7
  1949d4:	99cf803a 	cmpltu	r7,r19,r7
  1949d8:	e08b883a 	add	r5,fp,r2
  1949dc:	2008d43a 	srli	r4,r4,16
  1949e0:	29ef883a 	add	r23,r5,r7
  1949e4:	1529803a 	cmpltu	r20,r2,r20
  1949e8:	956b803a 	cmpltu	r21,r18,r21
  1949ec:	b9cf803a 	cmpltu	r7,r23,r7
  1949f0:	a564b03a 	or	r18,r20,r21
  1949f4:	2f39803a 	cmpltu	fp,r5,fp
  1949f8:	9125883a 	add	r18,r18,r4
  1949fc:	3f38b03a 	or	fp,r7,fp
  194a00:	9725883a 	add	r18,r18,fp
  194a04:	9804927a 	slli	r2,r19,9
  194a08:	9463883a 	add	r17,r18,r17
  194a0c:	d9000117 	ldw	r4,4(sp)
  194a10:	b820d5fa 	srli	r16,r23,23
  194a14:	8822927a 	slli	r17,r17,9
  194a18:	9826d5fa 	srli	r19,r19,23
  194a1c:	1104b03a 	or	r2,r2,r4
  194a20:	b82e927a 	slli	r23,r23,9
  194a24:	1004c03a 	cmpne	r2,r2,zero
  194a28:	8c20b03a 	or	r16,r17,r16
  194a2c:	14e6b03a 	or	r19,r2,r19
  194a30:	8080402c 	andhi	r2,r16,256
  194a34:	9deeb03a 	or	r23,r19,r23
  194a38:	10000726 	beq	r2,zero,194a58 <__muldf3+0x610>
  194a3c:	b804d07a 	srli	r2,r23,1
  194a40:	800697fa 	slli	r3,r16,31
  194a44:	bdc0004c 	andi	r23,r23,1
  194a48:	8020d07a 	srli	r16,r16,1
  194a4c:	b8aeb03a 	or	r23,r23,r2
  194a50:	b8eeb03a 	or	r23,r23,r3
  194a54:	4007883a 	mov	r3,r8
  194a58:	1900ffc4 	addi	r4,r3,1023
  194a5c:	01004d0e 	bge	zero,r4,194b94 <__muldf3+0x74c>
  194a60:	b88001cc 	andi	r2,r23,7
  194a64:	10000726 	beq	r2,zero,194a84 <__muldf3+0x63c>
  194a68:	b94003cc 	andi	r5,r23,15
  194a6c:	00800104 	movi	r2,4
  194a70:	28800426 	beq	r5,r2,194a84 <__muldf3+0x63c>
  194a74:	b885883a 	add	r2,r23,r2
  194a78:	15ef803a 	cmpltu	r23,r2,r23
  194a7c:	85e1883a 	add	r16,r16,r23
  194a80:	102f883a 	mov	r23,r2
  194a84:	8080402c 	andhi	r2,r16,256
  194a88:	10000426 	beq	r2,zero,194a9c <__muldf3+0x654>
  194a8c:	00bfc034 	movhi	r2,65280
  194a90:	10bfffc4 	addi	r2,r2,-1
  194a94:	19010004 	addi	r4,r3,1024
  194a98:	80a0703a 	and	r16,r16,r2
  194a9c:	0081ff84 	movi	r2,2046
  194aa0:	1100340e 	bge	r2,r4,194b74 <__muldf3+0x72c>
  194aa4:	34c0004c 	andi	r19,r6,1
  194aa8:	0101ffc4 	movi	r4,2047
  194aac:	0021883a 	mov	r16,zero
  194ab0:	002f883a 	mov	r23,zero
  194ab4:	003ebe06 	br	1945b0 <__alt_data_end+0xfff945b0>
  194ab8:	8080022c 	andhi	r2,r16,8
  194abc:	10000926 	beq	r2,zero,194ae4 <__muldf3+0x69c>
  194ac0:	8880022c 	andhi	r2,r17,8
  194ac4:	1000071e 	bne	r2,zero,194ae4 <__muldf3+0x69c>
  194ac8:	00800434 	movhi	r2,16
  194acc:	8c000234 	orhi	r16,r17,8
  194ad0:	10bfffc4 	addi	r2,r2,-1
  194ad4:	b027883a 	mov	r19,r22
  194ad8:	80a0703a 	and	r16,r16,r2
  194adc:	902f883a 	mov	r23,r18
  194ae0:	003f1a06 	br	19474c <__alt_data_end+0xfff9474c>
  194ae4:	00800434 	movhi	r2,16
  194ae8:	84000234 	orhi	r16,r16,8
  194aec:	10bfffc4 	addi	r2,r2,-1
  194af0:	80a0703a 	and	r16,r16,r2
  194af4:	003f1506 	br	19474c <__alt_data_end+0xfff9474c>
  194af8:	3009883a 	mov	r4,r6
  194afc:	d9400215 	stw	r5,8(sp)
  194b00:	d9800715 	stw	r6,28(sp)
  194b04:	da400415 	stw	r9,16(sp)
  194b08:	da800315 	stw	r10,12(sp)
  194b0c:	0188da00 	call	188da0 <__clzsi2>
  194b10:	10c00804 	addi	r3,r2,32
  194b14:	010009c4 	movi	r4,39
  194b18:	d9400217 	ldw	r5,8(sp)
  194b1c:	d9800717 	ldw	r6,28(sp)
  194b20:	da400417 	ldw	r9,16(sp)
  194b24:	da800317 	ldw	r10,12(sp)
  194b28:	20fee20e 	bge	r4,r3,1946b4 <__alt_data_end+0xfff946b4>
  194b2c:	147ffe04 	addi	r17,r2,-8
  194b30:	9462983a 	sll	r17,r18,r17
  194b34:	0025883a 	mov	r18,zero
  194b38:	003ee506 	br	1946d0 <__alt_data_end+0xfff946d0>
  194b3c:	d9800715 	stw	r6,28(sp)
  194b40:	d9c00215 	stw	r7,8(sp)
  194b44:	da400415 	stw	r9,16(sp)
  194b48:	0188da00 	call	188da0 <__clzsi2>
  194b4c:	10c00804 	addi	r3,r2,32
  194b50:	010009c4 	movi	r4,39
  194b54:	d9800717 	ldw	r6,28(sp)
  194b58:	d9c00217 	ldw	r7,8(sp)
  194b5c:	da400417 	ldw	r9,16(sp)
  194b60:	20feb40e 	bge	r4,r3,194634 <__alt_data_end+0xfff94634>
  194b64:	143ffe04 	addi	r16,r2,-8
  194b68:	9420983a 	sll	r16,r18,r16
  194b6c:	002f883a 	mov	r23,zero
  194b70:	003eb706 	br	194650 <__alt_data_end+0xfff94650>
  194b74:	8004977a 	slli	r2,r16,29
  194b78:	b82ed0fa 	srli	r23,r23,3
  194b7c:	8020927a 	slli	r16,r16,9
  194b80:	2101ffcc 	andi	r4,r4,2047
  194b84:	15eeb03a 	or	r23,r2,r23
  194b88:	8020d33a 	srli	r16,r16,12
  194b8c:	34c0004c 	andi	r19,r6,1
  194b90:	003e8706 	br	1945b0 <__alt_data_end+0xfff945b0>
  194b94:	00bf0084 	movi	r2,-1022
  194b98:	10c5c83a 	sub	r2,r2,r3
  194b9c:	01000e04 	movi	r4,56
  194ba0:	2080080e 	bge	r4,r2,194bc4 <__muldf3+0x77c>
  194ba4:	34c0004c 	andi	r19,r6,1
  194ba8:	0009883a 	mov	r4,zero
  194bac:	0021883a 	mov	r16,zero
  194bb0:	002f883a 	mov	r23,zero
  194bb4:	003e7e06 	br	1945b0 <__alt_data_end+0xfff945b0>
  194bb8:	4007883a 	mov	r3,r8
  194bbc:	480d883a 	mov	r6,r9
  194bc0:	003fa506 	br	194a58 <__alt_data_end+0xfff94a58>
  194bc4:	010007c4 	movi	r4,31
  194bc8:	20801816 	blt	r4,r2,194c2c <__muldf3+0x7e4>
  194bcc:	18c10784 	addi	r3,r3,1054
  194bd0:	80c8983a 	sll	r4,r16,r3
  194bd4:	b88ad83a 	srl	r5,r23,r2
  194bd8:	b8c6983a 	sll	r3,r23,r3
  194bdc:	80a0d83a 	srl	r16,r16,r2
  194be0:	2908b03a 	or	r4,r5,r4
  194be4:	1804c03a 	cmpne	r2,r3,zero
  194be8:	2088b03a 	or	r4,r4,r2
  194bec:	208001cc 	andi	r2,r4,7
  194bf0:	10000726 	beq	r2,zero,194c10 <__muldf3+0x7c8>
  194bf4:	20c003cc 	andi	r3,r4,15
  194bf8:	00800104 	movi	r2,4
  194bfc:	18800426 	beq	r3,r2,194c10 <__muldf3+0x7c8>
  194c00:	20c00104 	addi	r3,r4,4
  194c04:	1905803a 	cmpltu	r2,r3,r4
  194c08:	80a1883a 	add	r16,r16,r2
  194c0c:	1809883a 	mov	r4,r3
  194c10:	8080202c 	andhi	r2,r16,128
  194c14:	10001b26 	beq	r2,zero,194c84 <__muldf3+0x83c>
  194c18:	34c0004c 	andi	r19,r6,1
  194c1c:	01000044 	movi	r4,1
  194c20:	0021883a 	mov	r16,zero
  194c24:	002f883a 	mov	r23,zero
  194c28:	003e6106 	br	1945b0 <__alt_data_end+0xfff945b0>
  194c2c:	013ef884 	movi	r4,-1054
  194c30:	20c9c83a 	sub	r4,r4,r3
  194c34:	01400804 	movi	r5,32
  194c38:	8108d83a 	srl	r4,r16,r4
  194c3c:	11401526 	beq	r2,r5,194c94 <__muldf3+0x84c>
  194c40:	18c10f84 	addi	r3,r3,1086
  194c44:	80e0983a 	sll	r16,r16,r3
  194c48:	85eeb03a 	or	r23,r16,r23
  194c4c:	b804c03a 	cmpne	r2,r23,zero
  194c50:	1108b03a 	or	r4,r2,r4
  194c54:	20c001cc 	andi	r3,r4,7
  194c58:	1800061e 	bne	r3,zero,194c74 <__muldf3+0x82c>
  194c5c:	0021883a 	mov	r16,zero
  194c60:	202ed0fa 	srli	r23,r4,3
  194c64:	34c0004c 	andi	r19,r6,1
  194c68:	0009883a 	mov	r4,zero
  194c6c:	b8eeb03a 	or	r23,r23,r3
  194c70:	003e4f06 	br	1945b0 <__alt_data_end+0xfff945b0>
  194c74:	20c003cc 	andi	r3,r4,15
  194c78:	00800104 	movi	r2,4
  194c7c:	0021883a 	mov	r16,zero
  194c80:	18bfdf1e 	bne	r3,r2,194c00 <__alt_data_end+0xfff94c00>
  194c84:	8004927a 	slli	r2,r16,9
  194c88:	8006977a 	slli	r3,r16,29
  194c8c:	1020d33a 	srli	r16,r2,12
  194c90:	003ff306 	br	194c60 <__alt_data_end+0xfff94c60>
  194c94:	0021883a 	mov	r16,zero
  194c98:	003feb06 	br	194c48 <__alt_data_end+0xfff94c48>
  194c9c:	00800434 	movhi	r2,16
  194ca0:	84000234 	orhi	r16,r16,8
  194ca4:	10bfffc4 	addi	r2,r2,-1
  194ca8:	4cc0004c 	andi	r19,r9,1
  194cac:	80a0703a 	and	r16,r16,r2
  194cb0:	003ea606 	br	19474c <__alt_data_end+0xfff9474c>

00194cb4 <__subdf3>:
  194cb4:	00c00434 	movhi	r3,16
  194cb8:	18ffffc4 	addi	r3,r3,-1
  194cbc:	defffb04 	addi	sp,sp,-20
  194cc0:	28d2703a 	and	r9,r5,r3
  194cc4:	3814d53a 	srli	r10,r7,20
  194cc8:	38c6703a 	and	r3,r7,r3
  194ccc:	3004d77a 	srli	r2,r6,29
  194cd0:	dc800215 	stw	r18,8(sp)
  194cd4:	dc000015 	stw	r16,0(sp)
  194cd8:	2824d7fa 	srli	r18,r5,31
  194cdc:	2820d53a 	srli	r16,r5,20
  194ce0:	481290fa 	slli	r9,r9,3
  194ce4:	200ad77a 	srli	r5,r4,29
  194ce8:	180690fa 	slli	r3,r3,3
  194cec:	dc400115 	stw	r17,4(sp)
  194cf0:	dfc00415 	stw	ra,16(sp)
  194cf4:	202290fa 	slli	r17,r4,3
  194cf8:	dcc00315 	stw	r19,12(sp)
  194cfc:	5281ffcc 	andi	r10,r10,2047
  194d00:	0101ffc4 	movi	r4,2047
  194d04:	9011883a 	mov	r8,r18
  194d08:	8401ffcc 	andi	r16,r16,2047
  194d0c:	94803fcc 	andi	r18,r18,255
  194d10:	494ab03a 	or	r5,r9,r5
  194d14:	380ed7fa 	srli	r7,r7,31
  194d18:	1886b03a 	or	r3,r3,r2
  194d1c:	300c90fa 	slli	r6,r6,3
  194d20:	51009026 	beq	r10,r4,194f64 <__subdf3+0x2b0>
  194d24:	39c0005c 	xori	r7,r7,1
  194d28:	8285c83a 	sub	r2,r16,r10
  194d2c:	91c06f26 	beq	r18,r7,194eec <__subdf3+0x238>
  194d30:	0080b10e 	bge	zero,r2,194ff8 <__subdf3+0x344>
  194d34:	50002a1e 	bne	r10,zero,194de0 <__subdf3+0x12c>
  194d38:	1988b03a 	or	r4,r3,r6
  194d3c:	2000941e 	bne	r4,zero,194f90 <__subdf3+0x2dc>
  194d40:	888001cc 	andi	r2,r17,7
  194d44:	10005b26 	beq	r2,zero,194eb4 <__subdf3+0x200>
  194d48:	88c003cc 	andi	r3,r17,15
  194d4c:	00800104 	movi	r2,4
  194d50:	18805826 	beq	r3,r2,194eb4 <__subdf3+0x200>
  194d54:	88c00104 	addi	r3,r17,4
  194d58:	1c63803a 	cmpltu	r17,r3,r17
  194d5c:	2c4b883a 	add	r5,r5,r17
  194d60:	2880202c 	andhi	r2,r5,128
  194d64:	9200004c 	andi	r8,r18,1
  194d68:	1823883a 	mov	r17,r3
  194d6c:	10005426 	beq	r2,zero,194ec0 <__subdf3+0x20c>
  194d70:	84000044 	addi	r16,r16,1
  194d74:	0081ffc4 	movi	r2,2047
  194d78:	8080bf26 	beq	r16,r2,195078 <__subdf3+0x3c4>
  194d7c:	013fe034 	movhi	r4,65408
  194d80:	213fffc4 	addi	r4,r4,-1
  194d84:	290a703a 	and	r5,r5,r4
  194d88:	2804977a 	slli	r2,r5,29
  194d8c:	280a927a 	slli	r5,r5,9
  194d90:	8822d0fa 	srli	r17,r17,3
  194d94:	8401ffcc 	andi	r16,r16,2047
  194d98:	2808d33a 	srli	r4,r5,12
  194d9c:	1444b03a 	or	r2,r2,r17
  194da0:	8401ffcc 	andi	r16,r16,2047
  194da4:	800a953a 	slli	r5,r16,20
  194da8:	40c03fcc 	andi	r3,r8,255
  194dac:	04000434 	movhi	r16,16
  194db0:	180697fa 	slli	r3,r3,31
  194db4:	843fffc4 	addi	r16,r16,-1
  194db8:	2420703a 	and	r16,r4,r16
  194dbc:	8160b03a 	or	r16,r16,r5
  194dc0:	80c6b03a 	or	r3,r16,r3
  194dc4:	dfc00417 	ldw	ra,16(sp)
  194dc8:	dcc00317 	ldw	r19,12(sp)
  194dcc:	dc800217 	ldw	r18,8(sp)
  194dd0:	dc400117 	ldw	r17,4(sp)
  194dd4:	dc000017 	ldw	r16,0(sp)
  194dd8:	dec00504 	addi	sp,sp,20
  194ddc:	f800283a 	ret
  194de0:	0101ffc4 	movi	r4,2047
  194de4:	813fd626 	beq	r16,r4,194d40 <__alt_data_end+0xfff94d40>
  194de8:	18c02034 	orhi	r3,r3,128
  194dec:	01000e04 	movi	r4,56
  194df0:	2080a416 	blt	r4,r2,195084 <__subdf3+0x3d0>
  194df4:	010007c4 	movi	r4,31
  194df8:	2080c716 	blt	r4,r2,195118 <__subdf3+0x464>
  194dfc:	01000804 	movi	r4,32
  194e00:	2089c83a 	sub	r4,r4,r2
  194e04:	1910983a 	sll	r8,r3,r4
  194e08:	308ed83a 	srl	r7,r6,r2
  194e0c:	3108983a 	sll	r4,r6,r4
  194e10:	1884d83a 	srl	r2,r3,r2
  194e14:	41ccb03a 	or	r6,r8,r7
  194e18:	2008c03a 	cmpne	r4,r4,zero
  194e1c:	310cb03a 	or	r6,r6,r4
  194e20:	898dc83a 	sub	r6,r17,r6
  194e24:	89a3803a 	cmpltu	r17,r17,r6
  194e28:	288bc83a 	sub	r5,r5,r2
  194e2c:	2c4bc83a 	sub	r5,r5,r17
  194e30:	3023883a 	mov	r17,r6
  194e34:	2880202c 	andhi	r2,r5,128
  194e38:	10006b26 	beq	r2,zero,194fe8 <__subdf3+0x334>
  194e3c:	04c02034 	movhi	r19,128
  194e40:	9cffffc4 	addi	r19,r19,-1
  194e44:	2ce6703a 	and	r19,r5,r19
  194e48:	98007c26 	beq	r19,zero,19503c <__subdf3+0x388>
  194e4c:	9809883a 	mov	r4,r19
  194e50:	0188da00 	call	188da0 <__clzsi2>
  194e54:	10fffe04 	addi	r3,r2,-8
  194e58:	010007c4 	movi	r4,31
  194e5c:	20c07d16 	blt	r4,r3,195054 <__subdf3+0x3a0>
  194e60:	01400a04 	movi	r5,40
  194e64:	2885c83a 	sub	r2,r5,r2
  194e68:	888ad83a 	srl	r5,r17,r2
  194e6c:	98e6983a 	sll	r19,r19,r3
  194e70:	88e2983a 	sll	r17,r17,r3
  194e74:	2ce6b03a 	or	r19,r5,r19
  194e78:	1c007a16 	blt	r3,r16,195064 <__subdf3+0x3b0>
  194e7c:	1c21c83a 	sub	r16,r3,r16
  194e80:	81400044 	addi	r5,r16,1
  194e84:	00c007c4 	movi	r3,31
  194e88:	19409616 	blt	r3,r5,1950e4 <__subdf3+0x430>
  194e8c:	1c21c83a 	sub	r16,r3,r16
  194e90:	8c08983a 	sll	r4,r17,r16
  194e94:	8946d83a 	srl	r3,r17,r5
  194e98:	9c20983a 	sll	r16,r19,r16
  194e9c:	2008c03a 	cmpne	r4,r4,zero
  194ea0:	994ad83a 	srl	r5,r19,r5
  194ea4:	1c06b03a 	or	r3,r3,r16
  194ea8:	1922b03a 	or	r17,r3,r4
  194eac:	0021883a 	mov	r16,zero
  194eb0:	003fa306 	br	194d40 <__alt_data_end+0xfff94d40>
  194eb4:	2880202c 	andhi	r2,r5,128
  194eb8:	9200004c 	andi	r8,r18,1
  194ebc:	103fac1e 	bne	r2,zero,194d70 <__alt_data_end+0xfff94d70>
  194ec0:	2804977a 	slli	r2,r5,29
  194ec4:	8822d0fa 	srli	r17,r17,3
  194ec8:	00c1ffc4 	movi	r3,2047
  194ecc:	280ad0fa 	srli	r5,r5,3
  194ed0:	1444b03a 	or	r2,r2,r17
  194ed4:	80c02726 	beq	r16,r3,194f74 <__subdf3+0x2c0>
  194ed8:	01000434 	movhi	r4,16
  194edc:	213fffc4 	addi	r4,r4,-1
  194ee0:	80e0703a 	and	r16,r16,r3
  194ee4:	2908703a 	and	r4,r5,r4
  194ee8:	003fad06 	br	194da0 <__alt_data_end+0xfff94da0>
  194eec:	0080690e 	bge	zero,r2,195094 <__subdf3+0x3e0>
  194ef0:	50002f26 	beq	r10,zero,194fb0 <__subdf3+0x2fc>
  194ef4:	0101ffc4 	movi	r4,2047
  194ef8:	813f9126 	beq	r16,r4,194d40 <__alt_data_end+0xfff94d40>
  194efc:	18c02034 	orhi	r3,r3,128
  194f00:	01000e04 	movi	r4,56
  194f04:	2080b00e 	bge	r4,r2,1951c8 <__subdf3+0x514>
  194f08:	198cb03a 	or	r6,r3,r6
  194f0c:	300ec03a 	cmpne	r7,r6,zero
  194f10:	0005883a 	mov	r2,zero
  194f14:	3c4f883a 	add	r7,r7,r17
  194f18:	3c63803a 	cmpltu	r17,r7,r17
  194f1c:	114b883a 	add	r5,r2,r5
  194f20:	2c4b883a 	add	r5,r5,r17
  194f24:	3823883a 	mov	r17,r7
  194f28:	2880202c 	andhi	r2,r5,128
  194f2c:	10002e26 	beq	r2,zero,194fe8 <__subdf3+0x334>
  194f30:	84000044 	addi	r16,r16,1
  194f34:	0081ffc4 	movi	r2,2047
  194f38:	8080de26 	beq	r16,r2,1952b4 <__subdf3+0x600>
  194f3c:	00bfe034 	movhi	r2,65408
  194f40:	10bfffc4 	addi	r2,r2,-1
  194f44:	288a703a 	and	r5,r5,r2
  194f48:	880cd07a 	srli	r6,r17,1
  194f4c:	280897fa 	slli	r4,r5,31
  194f50:	88c0004c 	andi	r3,r17,1
  194f54:	30e2b03a 	or	r17,r6,r3
  194f58:	280ad07a 	srli	r5,r5,1
  194f5c:	8922b03a 	or	r17,r17,r4
  194f60:	003f7706 	br	194d40 <__alt_data_end+0xfff94d40>
  194f64:	1984b03a 	or	r2,r3,r6
  194f68:	103f6e26 	beq	r2,zero,194d24 <__alt_data_end+0xfff94d24>
  194f6c:	39c03fcc 	andi	r7,r7,255
  194f70:	003f6d06 	br	194d28 <__alt_data_end+0xfff94d28>
  194f74:	1146b03a 	or	r3,r2,r5
  194f78:	18003f26 	beq	r3,zero,195078 <__subdf3+0x3c4>
  194f7c:	00c00434 	movhi	r3,16
  194f80:	29000234 	orhi	r4,r5,8
  194f84:	18ffffc4 	addi	r3,r3,-1
  194f88:	20c8703a 	and	r4,r4,r3
  194f8c:	003f8406 	br	194da0 <__alt_data_end+0xfff94da0>
  194f90:	10bfffc4 	addi	r2,r2,-1
  194f94:	1000501e 	bne	r2,zero,1950d8 <__subdf3+0x424>
  194f98:	898fc83a 	sub	r7,r17,r6
  194f9c:	89e3803a 	cmpltu	r17,r17,r7
  194fa0:	28cbc83a 	sub	r5,r5,r3
  194fa4:	2c4bc83a 	sub	r5,r5,r17
  194fa8:	3823883a 	mov	r17,r7
  194fac:	003fa106 	br	194e34 <__alt_data_end+0xfff94e34>
  194fb0:	1988b03a 	or	r4,r3,r6
  194fb4:	203f6226 	beq	r4,zero,194d40 <__alt_data_end+0xfff94d40>
  194fb8:	10bfffc4 	addi	r2,r2,-1
  194fbc:	10009b1e 	bne	r2,zero,19522c <__subdf3+0x578>
  194fc0:	344d883a 	add	r6,r6,r17
  194fc4:	3463803a 	cmpltu	r17,r6,r17
  194fc8:	194b883a 	add	r5,r3,r5
  194fcc:	2c4b883a 	add	r5,r5,r17
  194fd0:	3023883a 	mov	r17,r6
  194fd4:	003fd406 	br	194f28 <__alt_data_end+0xfff94f28>
  194fd8:	1106b03a 	or	r3,r2,r4
  194fdc:	1800b426 	beq	r3,zero,1952b0 <__subdf3+0x5fc>
  194fe0:	100b883a 	mov	r5,r2
  194fe4:	2023883a 	mov	r17,r4
  194fe8:	888001cc 	andi	r2,r17,7
  194fec:	103f561e 	bne	r2,zero,194d48 <__alt_data_end+0xfff94d48>
  194ff0:	9200004c 	andi	r8,r18,1
  194ff4:	003fb206 	br	194ec0 <__alt_data_end+0xfff94ec0>
  194ff8:	1000531e 	bne	r2,zero,195148 <__subdf3+0x494>
  194ffc:	80800044 	addi	r2,r16,1
  195000:	1081ffcc 	andi	r2,r2,2047
  195004:	01000044 	movi	r4,1
  195008:	2080a00e 	bge	r4,r2,19528c <__subdf3+0x5d8>
  19500c:	8985c83a 	sub	r2,r17,r6
  195010:	8889803a 	cmpltu	r4,r17,r2
  195014:	28e7c83a 	sub	r19,r5,r3
  195018:	9927c83a 	sub	r19,r19,r4
  19501c:	9900202c 	andhi	r4,r19,128
  195020:	20006226 	beq	r4,zero,1951ac <__subdf3+0x4f8>
  195024:	3463c83a 	sub	r17,r6,r17
  195028:	194bc83a 	sub	r5,r3,r5
  19502c:	344d803a 	cmpltu	r6,r6,r17
  195030:	29a7c83a 	sub	r19,r5,r6
  195034:	3825883a 	mov	r18,r7
  195038:	983f841e 	bne	r19,zero,194e4c <__alt_data_end+0xfff94e4c>
  19503c:	8809883a 	mov	r4,r17
  195040:	0188da00 	call	188da0 <__clzsi2>
  195044:	10800804 	addi	r2,r2,32
  195048:	10fffe04 	addi	r3,r2,-8
  19504c:	010007c4 	movi	r4,31
  195050:	20ff830e 	bge	r4,r3,194e60 <__alt_data_end+0xfff94e60>
  195054:	14fff604 	addi	r19,r2,-40
  195058:	8ce6983a 	sll	r19,r17,r19
  19505c:	0023883a 	mov	r17,zero
  195060:	1c3f860e 	bge	r3,r16,194e7c <__alt_data_end+0xfff94e7c>
  195064:	017fe034 	movhi	r5,65408
  195068:	297fffc4 	addi	r5,r5,-1
  19506c:	80e1c83a 	sub	r16,r16,r3
  195070:	994a703a 	and	r5,r19,r5
  195074:	003f3206 	br	194d40 <__alt_data_end+0xfff94d40>
  195078:	0009883a 	mov	r4,zero
  19507c:	0005883a 	mov	r2,zero
  195080:	003f4706 	br	194da0 <__alt_data_end+0xfff94da0>
  195084:	198cb03a 	or	r6,r3,r6
  195088:	300cc03a 	cmpne	r6,r6,zero
  19508c:	0005883a 	mov	r2,zero
  195090:	003f6306 	br	194e20 <__alt_data_end+0xfff94e20>
  195094:	10009d1e 	bne	r2,zero,19530c <__subdf3+0x658>
  195098:	81c00044 	addi	r7,r16,1
  19509c:	3881ffcc 	andi	r2,r7,2047
  1950a0:	02400044 	movi	r9,1
  1950a4:	4880680e 	bge	r9,r2,195248 <__subdf3+0x594>
  1950a8:	0081ffc4 	movi	r2,2047
  1950ac:	3880ae26 	beq	r7,r2,195368 <__subdf3+0x6b4>
  1950b0:	344d883a 	add	r6,r6,r17
  1950b4:	3463803a 	cmpltu	r17,r6,r17
  1950b8:	194b883a 	add	r5,r3,r5
  1950bc:	2c4b883a 	add	r5,r5,r17
  1950c0:	282297fa 	slli	r17,r5,31
  1950c4:	300cd07a 	srli	r6,r6,1
  1950c8:	280ad07a 	srli	r5,r5,1
  1950cc:	3821883a 	mov	r16,r7
  1950d0:	89a2b03a 	or	r17,r17,r6
  1950d4:	003f1a06 	br	194d40 <__alt_data_end+0xfff94d40>
  1950d8:	0101ffc4 	movi	r4,2047
  1950dc:	813f431e 	bne	r16,r4,194dec <__alt_data_end+0xfff94dec>
  1950e0:	003f1706 	br	194d40 <__alt_data_end+0xfff94d40>
  1950e4:	80bff844 	addi	r2,r16,-31
  1950e8:	00c00804 	movi	r3,32
  1950ec:	9884d83a 	srl	r2,r19,r2
  1950f0:	28c05126 	beq	r5,r3,195238 <__subdf3+0x584>
  1950f4:	00c00fc4 	movi	r3,63
  1950f8:	1c21c83a 	sub	r16,r3,r16
  1950fc:	9c26983a 	sll	r19,r19,r16
  195100:	9c62b03a 	or	r17,r19,r17
  195104:	8822c03a 	cmpne	r17,r17,zero
  195108:	88a2b03a 	or	r17,r17,r2
  19510c:	000b883a 	mov	r5,zero
  195110:	0021883a 	mov	r16,zero
  195114:	003fb406 	br	194fe8 <__alt_data_end+0xfff94fe8>
  195118:	113ff804 	addi	r4,r2,-32
  19511c:	01c00804 	movi	r7,32
  195120:	1908d83a 	srl	r4,r3,r4
  195124:	11c04626 	beq	r2,r7,195240 <__subdf3+0x58c>
  195128:	01c01004 	movi	r7,64
  19512c:	3885c83a 	sub	r2,r7,r2
  195130:	1884983a 	sll	r2,r3,r2
  195134:	118cb03a 	or	r6,r2,r6
  195138:	300cc03a 	cmpne	r6,r6,zero
  19513c:	310cb03a 	or	r6,r6,r4
  195140:	0005883a 	mov	r2,zero
  195144:	003f3606 	br	194e20 <__alt_data_end+0xfff94e20>
  195148:	80002b26 	beq	r16,zero,1951f8 <__subdf3+0x544>
  19514c:	0101ffc4 	movi	r4,2047
  195150:	51006926 	beq	r10,r4,1952f8 <__subdf3+0x644>
  195154:	0085c83a 	sub	r2,zero,r2
  195158:	29402034 	orhi	r5,r5,128
  19515c:	01000e04 	movi	r4,56
  195160:	20807d16 	blt	r4,r2,195358 <__subdf3+0x6a4>
  195164:	010007c4 	movi	r4,31
  195168:	2080d916 	blt	r4,r2,1954d0 <__subdf3+0x81c>
  19516c:	01000804 	movi	r4,32
  195170:	2089c83a 	sub	r4,r4,r2
  195174:	2912983a 	sll	r9,r5,r4
  195178:	8890d83a 	srl	r8,r17,r2
  19517c:	8908983a 	sll	r4,r17,r4
  195180:	2884d83a 	srl	r2,r5,r2
  195184:	4a22b03a 	or	r17,r9,r8
  195188:	2008c03a 	cmpne	r4,r4,zero
  19518c:	8922b03a 	or	r17,r17,r4
  195190:	3463c83a 	sub	r17,r6,r17
  195194:	1885c83a 	sub	r2,r3,r2
  195198:	344d803a 	cmpltu	r6,r6,r17
  19519c:	118bc83a 	sub	r5,r2,r6
  1951a0:	5021883a 	mov	r16,r10
  1951a4:	3825883a 	mov	r18,r7
  1951a8:	003f2206 	br	194e34 <__alt_data_end+0xfff94e34>
  1951ac:	9886b03a 	or	r3,r19,r2
  1951b0:	18001c1e 	bne	r3,zero,195224 <__subdf3+0x570>
  1951b4:	0011883a 	mov	r8,zero
  1951b8:	000b883a 	mov	r5,zero
  1951bc:	0023883a 	mov	r17,zero
  1951c0:	0021883a 	mov	r16,zero
  1951c4:	003f3e06 	br	194ec0 <__alt_data_end+0xfff94ec0>
  1951c8:	010007c4 	movi	r4,31
  1951cc:	20803c16 	blt	r4,r2,1952c0 <__subdf3+0x60c>
  1951d0:	01000804 	movi	r4,32
  1951d4:	2089c83a 	sub	r4,r4,r2
  1951d8:	1912983a 	sll	r9,r3,r4
  1951dc:	308ed83a 	srl	r7,r6,r2
  1951e0:	3108983a 	sll	r4,r6,r4
  1951e4:	1884d83a 	srl	r2,r3,r2
  1951e8:	49ceb03a 	or	r7,r9,r7
  1951ec:	2008c03a 	cmpne	r4,r4,zero
  1951f0:	390eb03a 	or	r7,r7,r4
  1951f4:	003f4706 	br	194f14 <__alt_data_end+0xfff94f14>
  1951f8:	2c48b03a 	or	r4,r5,r17
  1951fc:	20003e26 	beq	r4,zero,1952f8 <__subdf3+0x644>
  195200:	0084303a 	nor	r2,zero,r2
  195204:	10003a1e 	bne	r2,zero,1952f0 <__subdf3+0x63c>
  195208:	3463c83a 	sub	r17,r6,r17
  19520c:	194bc83a 	sub	r5,r3,r5
  195210:	344d803a 	cmpltu	r6,r6,r17
  195214:	298bc83a 	sub	r5,r5,r6
  195218:	5021883a 	mov	r16,r10
  19521c:	3825883a 	mov	r18,r7
  195220:	003f0406 	br	194e34 <__alt_data_end+0xfff94e34>
  195224:	1023883a 	mov	r17,r2
  195228:	003f0706 	br	194e48 <__alt_data_end+0xfff94e48>
  19522c:	0101ffc4 	movi	r4,2047
  195230:	813f331e 	bne	r16,r4,194f00 <__alt_data_end+0xfff94f00>
  195234:	003ec206 	br	194d40 <__alt_data_end+0xfff94d40>
  195238:	0027883a 	mov	r19,zero
  19523c:	003fb006 	br	195100 <__alt_data_end+0xfff95100>
  195240:	0005883a 	mov	r2,zero
  195244:	003fbb06 	br	195134 <__alt_data_end+0xfff95134>
  195248:	2c44b03a 	or	r2,r5,r17
  19524c:	80008b1e 	bne	r16,zero,19547c <__subdf3+0x7c8>
  195250:	1000b526 	beq	r2,zero,195528 <__subdf3+0x874>
  195254:	1984b03a 	or	r2,r3,r6
  195258:	103eb926 	beq	r2,zero,194d40 <__alt_data_end+0xfff94d40>
  19525c:	3449883a 	add	r4,r6,r17
  195260:	2463803a 	cmpltu	r17,r4,r17
  195264:	194b883a 	add	r5,r3,r5
  195268:	2c4b883a 	add	r5,r5,r17
  19526c:	2880202c 	andhi	r2,r5,128
  195270:	2023883a 	mov	r17,r4
  195274:	103f5c26 	beq	r2,zero,194fe8 <__alt_data_end+0xfff94fe8>
  195278:	00bfe034 	movhi	r2,65408
  19527c:	10bfffc4 	addi	r2,r2,-1
  195280:	4821883a 	mov	r16,r9
  195284:	288a703a 	and	r5,r5,r2
  195288:	003ead06 	br	194d40 <__alt_data_end+0xfff94d40>
  19528c:	2c44b03a 	or	r2,r5,r17
  195290:	8000291e 	bne	r16,zero,195338 <__subdf3+0x684>
  195294:	10004f1e 	bne	r2,zero,1953d4 <__subdf3+0x720>
  195298:	1984b03a 	or	r2,r3,r6
  19529c:	10000426 	beq	r2,zero,1952b0 <__subdf3+0x5fc>
  1952a0:	180b883a 	mov	r5,r3
  1952a4:	3023883a 	mov	r17,r6
  1952a8:	3825883a 	mov	r18,r7
  1952ac:	003ea406 	br	194d40 <__alt_data_end+0xfff94d40>
  1952b0:	0011883a 	mov	r8,zero
  1952b4:	000b883a 	mov	r5,zero
  1952b8:	0023883a 	mov	r17,zero
  1952bc:	003f0006 	br	194ec0 <__alt_data_end+0xfff94ec0>
  1952c0:	11fff804 	addi	r7,r2,-32
  1952c4:	19c8d83a 	srl	r4,r3,r7
  1952c8:	01c00804 	movi	r7,32
  1952cc:	11c07e26 	beq	r2,r7,1954c8 <__subdf3+0x814>
  1952d0:	01c01004 	movi	r7,64
  1952d4:	3885c83a 	sub	r2,r7,r2
  1952d8:	1884983a 	sll	r2,r3,r2
  1952dc:	118cb03a 	or	r6,r2,r6
  1952e0:	300ec03a 	cmpne	r7,r6,zero
  1952e4:	390eb03a 	or	r7,r7,r4
  1952e8:	0005883a 	mov	r2,zero
  1952ec:	003f0906 	br	194f14 <__alt_data_end+0xfff94f14>
  1952f0:	0101ffc4 	movi	r4,2047
  1952f4:	513f991e 	bne	r10,r4,19515c <__alt_data_end+0xfff9515c>
  1952f8:	180b883a 	mov	r5,r3
  1952fc:	3023883a 	mov	r17,r6
  195300:	5021883a 	mov	r16,r10
  195304:	3825883a 	mov	r18,r7
  195308:	003e8d06 	br	194d40 <__alt_data_end+0xfff94d40>
  19530c:	80001a1e 	bne	r16,zero,195378 <__subdf3+0x6c4>
  195310:	2c48b03a 	or	r4,r5,r17
  195314:	20005526 	beq	r4,zero,19546c <__subdf3+0x7b8>
  195318:	0084303a 	nor	r2,zero,r2
  19531c:	1000511e 	bne	r2,zero,195464 <__subdf3+0x7b0>
  195320:	89a3883a 	add	r17,r17,r6
  195324:	194b883a 	add	r5,r3,r5
  195328:	898d803a 	cmpltu	r6,r17,r6
  19532c:	298b883a 	add	r5,r5,r6
  195330:	5021883a 	mov	r16,r10
  195334:	003efc06 	br	194f28 <__alt_data_end+0xfff94f28>
  195338:	1000341e 	bne	r2,zero,19540c <__subdf3+0x758>
  19533c:	1984b03a 	or	r2,r3,r6
  195340:	10006f26 	beq	r2,zero,195500 <__subdf3+0x84c>
  195344:	180b883a 	mov	r5,r3
  195348:	3023883a 	mov	r17,r6
  19534c:	3825883a 	mov	r18,r7
  195350:	0401ffc4 	movi	r16,2047
  195354:	003e7a06 	br	194d40 <__alt_data_end+0xfff94d40>
  195358:	2c62b03a 	or	r17,r5,r17
  19535c:	8822c03a 	cmpne	r17,r17,zero
  195360:	0005883a 	mov	r2,zero
  195364:	003f8a06 	br	195190 <__alt_data_end+0xfff95190>
  195368:	3821883a 	mov	r16,r7
  19536c:	000b883a 	mov	r5,zero
  195370:	0023883a 	mov	r17,zero
  195374:	003ed206 	br	194ec0 <__alt_data_end+0xfff94ec0>
  195378:	0101ffc4 	movi	r4,2047
  19537c:	51003b26 	beq	r10,r4,19546c <__subdf3+0x7b8>
  195380:	0085c83a 	sub	r2,zero,r2
  195384:	29402034 	orhi	r5,r5,128
  195388:	01000e04 	movi	r4,56
  19538c:	20806216 	blt	r4,r2,195518 <__subdf3+0x864>
  195390:	010007c4 	movi	r4,31
  195394:	20806b16 	blt	r4,r2,195544 <__subdf3+0x890>
  195398:	01000804 	movi	r4,32
  19539c:	2089c83a 	sub	r4,r4,r2
  1953a0:	2912983a 	sll	r9,r5,r4
  1953a4:	888ed83a 	srl	r7,r17,r2
  1953a8:	8908983a 	sll	r4,r17,r4
  1953ac:	2884d83a 	srl	r2,r5,r2
  1953b0:	49e2b03a 	or	r17,r9,r7
  1953b4:	2008c03a 	cmpne	r4,r4,zero
  1953b8:	8922b03a 	or	r17,r17,r4
  1953bc:	89a3883a 	add	r17,r17,r6
  1953c0:	10c5883a 	add	r2,r2,r3
  1953c4:	898d803a 	cmpltu	r6,r17,r6
  1953c8:	118b883a 	add	r5,r2,r6
  1953cc:	5021883a 	mov	r16,r10
  1953d0:	003ed506 	br	194f28 <__alt_data_end+0xfff94f28>
  1953d4:	1984b03a 	or	r2,r3,r6
  1953d8:	103e5926 	beq	r2,zero,194d40 <__alt_data_end+0xfff94d40>
  1953dc:	8989c83a 	sub	r4,r17,r6
  1953e0:	8911803a 	cmpltu	r8,r17,r4
  1953e4:	28c5c83a 	sub	r2,r5,r3
  1953e8:	1205c83a 	sub	r2,r2,r8
  1953ec:	1200202c 	andhi	r8,r2,128
  1953f0:	403ef926 	beq	r8,zero,194fd8 <__alt_data_end+0xfff94fd8>
  1953f4:	3463c83a 	sub	r17,r6,r17
  1953f8:	194bc83a 	sub	r5,r3,r5
  1953fc:	344d803a 	cmpltu	r6,r6,r17
  195400:	298bc83a 	sub	r5,r5,r6
  195404:	3825883a 	mov	r18,r7
  195408:	003e4d06 	br	194d40 <__alt_data_end+0xfff94d40>
  19540c:	1984b03a 	or	r2,r3,r6
  195410:	10002b26 	beq	r2,zero,1954c0 <__subdf3+0x80c>
  195414:	2808d0fa 	srli	r4,r5,3
  195418:	8822d0fa 	srli	r17,r17,3
  19541c:	280a977a 	slli	r5,r5,29
  195420:	2080022c 	andhi	r2,r4,8
  195424:	2c62b03a 	or	r17,r5,r17
  195428:	10000826 	beq	r2,zero,19544c <__subdf3+0x798>
  19542c:	1810d0fa 	srli	r8,r3,3
  195430:	4080022c 	andhi	r2,r8,8
  195434:	1000051e 	bne	r2,zero,19544c <__subdf3+0x798>
  195438:	300cd0fa 	srli	r6,r6,3
  19543c:	1804977a 	slli	r2,r3,29
  195440:	4009883a 	mov	r4,r8
  195444:	3825883a 	mov	r18,r7
  195448:	11a2b03a 	or	r17,r2,r6
  19544c:	880ad77a 	srli	r5,r17,29
  195450:	200890fa 	slli	r4,r4,3
  195454:	882290fa 	slli	r17,r17,3
  195458:	0401ffc4 	movi	r16,2047
  19545c:	290ab03a 	or	r5,r5,r4
  195460:	003e3706 	br	194d40 <__alt_data_end+0xfff94d40>
  195464:	0101ffc4 	movi	r4,2047
  195468:	513fc71e 	bne	r10,r4,195388 <__alt_data_end+0xfff95388>
  19546c:	180b883a 	mov	r5,r3
  195470:	3023883a 	mov	r17,r6
  195474:	5021883a 	mov	r16,r10
  195478:	003e3106 	br	194d40 <__alt_data_end+0xfff94d40>
  19547c:	10002d26 	beq	r2,zero,195534 <__subdf3+0x880>
  195480:	1984b03a 	or	r2,r3,r6
  195484:	10000e26 	beq	r2,zero,1954c0 <__subdf3+0x80c>
  195488:	2808d0fa 	srli	r4,r5,3
  19548c:	8822d0fa 	srli	r17,r17,3
  195490:	280a977a 	slli	r5,r5,29
  195494:	2080022c 	andhi	r2,r4,8
  195498:	2c62b03a 	or	r17,r5,r17
  19549c:	103feb26 	beq	r2,zero,19544c <__alt_data_end+0xfff9544c>
  1954a0:	180ed0fa 	srli	r7,r3,3
  1954a4:	3880022c 	andhi	r2,r7,8
  1954a8:	103fe81e 	bne	r2,zero,19544c <__alt_data_end+0xfff9544c>
  1954ac:	300cd0fa 	srli	r6,r6,3
  1954b0:	1804977a 	slli	r2,r3,29
  1954b4:	3809883a 	mov	r4,r7
  1954b8:	11a2b03a 	or	r17,r2,r6
  1954bc:	003fe306 	br	19544c <__alt_data_end+0xfff9544c>
  1954c0:	0401ffc4 	movi	r16,2047
  1954c4:	003e1e06 	br	194d40 <__alt_data_end+0xfff94d40>
  1954c8:	0005883a 	mov	r2,zero
  1954cc:	003f8306 	br	1952dc <__alt_data_end+0xfff952dc>
  1954d0:	113ff804 	addi	r4,r2,-32
  1954d4:	02000804 	movi	r8,32
  1954d8:	2908d83a 	srl	r4,r5,r4
  1954dc:	12002526 	beq	r2,r8,195574 <__subdf3+0x8c0>
  1954e0:	02001004 	movi	r8,64
  1954e4:	4085c83a 	sub	r2,r8,r2
  1954e8:	288a983a 	sll	r5,r5,r2
  1954ec:	2c62b03a 	or	r17,r5,r17
  1954f0:	8822c03a 	cmpne	r17,r17,zero
  1954f4:	8922b03a 	or	r17,r17,r4
  1954f8:	0005883a 	mov	r2,zero
  1954fc:	003f2406 	br	195190 <__alt_data_end+0xfff95190>
  195500:	01402034 	movhi	r5,128
  195504:	0011883a 	mov	r8,zero
  195508:	297fffc4 	addi	r5,r5,-1
  19550c:	047ffe04 	movi	r17,-8
  195510:	0401ffc4 	movi	r16,2047
  195514:	003e6a06 	br	194ec0 <__alt_data_end+0xfff94ec0>
  195518:	2c62b03a 	or	r17,r5,r17
  19551c:	8822c03a 	cmpne	r17,r17,zero
  195520:	0005883a 	mov	r2,zero
  195524:	003fa506 	br	1953bc <__alt_data_end+0xfff953bc>
  195528:	180b883a 	mov	r5,r3
  19552c:	3023883a 	mov	r17,r6
  195530:	003e0306 	br	194d40 <__alt_data_end+0xfff94d40>
  195534:	180b883a 	mov	r5,r3
  195538:	3023883a 	mov	r17,r6
  19553c:	0401ffc4 	movi	r16,2047
  195540:	003dff06 	br	194d40 <__alt_data_end+0xfff94d40>
  195544:	113ff804 	addi	r4,r2,-32
  195548:	01c00804 	movi	r7,32
  19554c:	2908d83a 	srl	r4,r5,r4
  195550:	11c00a26 	beq	r2,r7,19557c <__subdf3+0x8c8>
  195554:	01c01004 	movi	r7,64
  195558:	3885c83a 	sub	r2,r7,r2
  19555c:	288a983a 	sll	r5,r5,r2
  195560:	2c62b03a 	or	r17,r5,r17
  195564:	8822c03a 	cmpne	r17,r17,zero
  195568:	8922b03a 	or	r17,r17,r4
  19556c:	0005883a 	mov	r2,zero
  195570:	003f9206 	br	1953bc <__alt_data_end+0xfff953bc>
  195574:	000b883a 	mov	r5,zero
  195578:	003fdc06 	br	1954ec <__alt_data_end+0xfff954ec>
  19557c:	000b883a 	mov	r5,zero
  195580:	003ff706 	br	195560 <__alt_data_end+0xfff95560>

00195584 <__fixdfsi>:
  195584:	2806d53a 	srli	r3,r5,20
  195588:	00800434 	movhi	r2,16
  19558c:	10bfffc4 	addi	r2,r2,-1
  195590:	18c1ffcc 	andi	r3,r3,2047
  195594:	0180ff84 	movi	r6,1022
  195598:	2884703a 	and	r2,r5,r2
  19559c:	280ad7fa 	srli	r5,r5,31
  1955a0:	30c0130e 	bge	r6,r3,1955f0 <__fixdfsi+0x6c>
  1955a4:	01810744 	movi	r6,1053
  1955a8:	30c00d16 	blt	r6,r3,1955e0 <__fixdfsi+0x5c>
  1955ac:	01810cc4 	movi	r6,1075
  1955b0:	30cdc83a 	sub	r6,r6,r3
  1955b4:	01c007c4 	movi	r7,31
  1955b8:	10800434 	orhi	r2,r2,16
  1955bc:	39800e0e 	bge	r7,r6,1955f8 <__fixdfsi+0x74>
  1955c0:	010104c4 	movi	r4,1043
  1955c4:	20c7c83a 	sub	r3,r4,r3
  1955c8:	10c6d83a 	srl	r3,r2,r3
  1955cc:	29403fcc 	andi	r5,r5,255
  1955d0:	0145c83a 	sub	r2,zero,r5
  1955d4:	1884f03a 	xor	r2,r3,r2
  1955d8:	1145883a 	add	r2,r2,r5
  1955dc:	f800283a 	ret
  1955e0:	00a00034 	movhi	r2,32768
  1955e4:	10bfffc4 	addi	r2,r2,-1
  1955e8:	2885883a 	add	r2,r5,r2
  1955ec:	f800283a 	ret
  1955f0:	0005883a 	mov	r2,zero
  1955f4:	f800283a 	ret
  1955f8:	18fefb44 	addi	r3,r3,-1043
  1955fc:	2188d83a 	srl	r4,r4,r6
  195600:	10c6983a 	sll	r3,r2,r3
  195604:	20c6b03a 	or	r3,r4,r3
  195608:	003ff006 	br	1955cc <__alt_data_end+0xfff955cc>

0019560c <__floatsidf>:
  19560c:	defffd04 	addi	sp,sp,-12
  195610:	dc400115 	stw	r17,4(sp)
  195614:	dfc00215 	stw	ra,8(sp)
  195618:	dc000015 	stw	r16,0(sp)
  19561c:	2023883a 	mov	r17,r4
  195620:	20001426 	beq	r4,zero,195674 <__floatsidf+0x68>
  195624:	2020d7fa 	srli	r16,r4,31
  195628:	80000126 	beq	r16,zero,195630 <__floatsidf+0x24>
  19562c:	0123c83a 	sub	r17,zero,r4
  195630:	8809883a 	mov	r4,r17
  195634:	0188da00 	call	188da0 <__clzsi2>
  195638:	01410784 	movi	r5,1054
  19563c:	00c00284 	movi	r3,10
  195640:	288bc83a 	sub	r5,r5,r2
  195644:	18801c16 	blt	r3,r2,1956b8 <__floatsidf+0xac>
  195648:	00c002c4 	movi	r3,11
  19564c:	1887c83a 	sub	r3,r3,r2
  195650:	88c8d83a 	srl	r4,r17,r3
  195654:	00c00434 	movhi	r3,16
  195658:	18ffffc4 	addi	r3,r3,-1
  19565c:	10800544 	addi	r2,r2,21
  195660:	20c8703a 	and	r4,r4,r3
  195664:	8884983a 	sll	r2,r17,r2
  195668:	28c1ffcc 	andi	r3,r5,2047
  19566c:	800d883a 	mov	r6,r16
  195670:	00000406 	br	195684 <__floatsidf+0x78>
  195674:	000d883a 	mov	r6,zero
  195678:	0007883a 	mov	r3,zero
  19567c:	0009883a 	mov	r4,zero
  195680:	0005883a 	mov	r2,zero
  195684:	180a953a 	slli	r5,r3,20
  195688:	31803fcc 	andi	r6,r6,255
  19568c:	00c00434 	movhi	r3,16
  195690:	300c97fa 	slli	r6,r6,31
  195694:	18ffffc4 	addi	r3,r3,-1
  195698:	20c6703a 	and	r3,r4,r3
  19569c:	1946b03a 	or	r3,r3,r5
  1956a0:	1986b03a 	or	r3,r3,r6
  1956a4:	dfc00217 	ldw	ra,8(sp)
  1956a8:	dc400117 	ldw	r17,4(sp)
  1956ac:	dc000017 	ldw	r16,0(sp)
  1956b0:	dec00304 	addi	sp,sp,12
  1956b4:	f800283a 	ret
  1956b8:	10fffd44 	addi	r3,r2,-11
  1956bc:	88c8983a 	sll	r4,r17,r3
  1956c0:	00800434 	movhi	r2,16
  1956c4:	10bfffc4 	addi	r2,r2,-1
  1956c8:	2088703a 	and	r4,r4,r2
  1956cc:	28c1ffcc 	andi	r3,r5,2047
  1956d0:	800d883a 	mov	r6,r16
  1956d4:	0005883a 	mov	r2,zero
  1956d8:	003fea06 	br	195684 <__alt_data_end+0xfff95684>

001956dc <__floatunsidf>:
  1956dc:	defffe04 	addi	sp,sp,-8
  1956e0:	dc000015 	stw	r16,0(sp)
  1956e4:	dfc00115 	stw	ra,4(sp)
  1956e8:	2021883a 	mov	r16,r4
  1956ec:	20001026 	beq	r4,zero,195730 <__floatunsidf+0x54>
  1956f0:	0188da00 	call	188da0 <__clzsi2>
  1956f4:	01410784 	movi	r5,1054
  1956f8:	100d883a 	mov	r6,r2
  1956fc:	288bc83a 	sub	r5,r5,r2
  195700:	00800284 	movi	r2,10
  195704:	11801616 	blt	r2,r6,195760 <__floatunsidf+0x84>
  195708:	008002c4 	movi	r2,11
  19570c:	1185c83a 	sub	r2,r2,r6
  195710:	8084d83a 	srl	r2,r16,r2
  195714:	00c00434 	movhi	r3,16
  195718:	31c00544 	addi	r7,r6,21
  19571c:	18ffffc4 	addi	r3,r3,-1
  195720:	81e0983a 	sll	r16,r16,r7
  195724:	10cc703a 	and	r6,r2,r3
  195728:	2941ffcc 	andi	r5,r5,2047
  19572c:	00000206 	br	195738 <__floatunsidf+0x5c>
  195730:	000b883a 	mov	r5,zero
  195734:	000d883a 	mov	r6,zero
  195738:	280a953a 	slli	r5,r5,20
  19573c:	00c00434 	movhi	r3,16
  195740:	18ffffc4 	addi	r3,r3,-1
  195744:	30c6703a 	and	r3,r6,r3
  195748:	8005883a 	mov	r2,r16
  19574c:	1946b03a 	or	r3,r3,r5
  195750:	dfc00117 	ldw	ra,4(sp)
  195754:	dc000017 	ldw	r16,0(sp)
  195758:	dec00204 	addi	sp,sp,8
  19575c:	f800283a 	ret
  195760:	31bffd44 	addi	r6,r6,-11
  195764:	818c983a 	sll	r6,r16,r6
  195768:	00800434 	movhi	r2,16
  19576c:	10bfffc4 	addi	r2,r2,-1
  195770:	2941ffcc 	andi	r5,r5,2047
  195774:	0021883a 	mov	r16,zero
  195778:	308c703a 	and	r6,r6,r2
  19577c:	003fee06 	br	195738 <__alt_data_end+0xfff95738>

00195780 <list_insert>:
  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
  return tp;
}

static INLINE void list_insert(Thread *tp, ThreadsList *tlp) {
  195780:	defffd04 	addi	sp,sp,-12
  195784:	df000215 	stw	fp,8(sp)
  195788:	df000204 	addi	fp,sp,8
  19578c:	e13ffe15 	stw	r4,-8(fp)
  195790:	e17fff15 	stw	r5,-4(fp)

  tp->p_next = tlp->p_next;
  195794:	e0bfff17 	ldw	r2,-4(fp)
  195798:	10c00017 	ldw	r3,0(r2)
  19579c:	e0bffe17 	ldw	r2,-8(fp)
  1957a0:	10c00015 	stw	r3,0(r2)
  tlp->p_next = tp;
  1957a4:	e0bfff17 	ldw	r2,-4(fp)
  1957a8:	e0fffe17 	ldw	r3,-8(fp)
  1957ac:	10c00015 	stw	r3,0(r2)
}
  1957b0:	e037883a 	mov	sp,fp
  1957b4:	df000017 	ldw	fp,0(sp)
  1957b8:	dec00104 	addi	sp,sp,4
  1957bc:	f800283a 	ret

001957c0 <list_remove>:

static INLINE Thread *list_remove(ThreadsList *tlp) {
  1957c0:	defffd04 	addi	sp,sp,-12
  1957c4:	df000215 	stw	fp,8(sp)
  1957c8:	df000204 	addi	fp,sp,8
  1957cc:	e13fff15 	stw	r4,-4(fp)

  Thread *tp = tlp->p_next;
  1957d0:	e0bfff17 	ldw	r2,-4(fp)
  1957d4:	10800017 	ldw	r2,0(r2)
  1957d8:	e0bffe15 	stw	r2,-8(fp)
  tlp->p_next = tp->p_next;
  1957dc:	e0bffe17 	ldw	r2,-8(fp)
  1957e0:	10c00017 	ldw	r3,0(r2)
  1957e4:	e0bfff17 	ldw	r2,-4(fp)
  1957e8:	10c00015 	stw	r3,0(r2)
  return tp;
  1957ec:	e0bffe17 	ldw	r2,-8(fp)
}
  1957f0:	e037883a 	mov	sp,fp
  1957f4:	df000017 	ldw	fp,0(sp)
  1957f8:	dec00104 	addi	sp,sp,4
  1957fc:	f800283a 	ret

00195800 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
Thread *_thread_init(Thread *tp, tprio_t prio) {
  195800:	defffd04 	addi	sp,sp,-12
  195804:	df000215 	stw	fp,8(sp)
  195808:	df000204 	addi	fp,sp,8
  19580c:	e13ffe15 	stw	r4,-8(fp)
  195810:	e17fff15 	stw	r5,-4(fp)

  tp->p_prio = prio;
  195814:	e0bffe17 	ldw	r2,-8(fp)
  195818:	e0ffff17 	ldw	r3,-4(fp)
  19581c:	10c00215 	stw	r3,8(r2)
  tp->p_state = THD_STATE_SUSPENDED;
  195820:	e0bffe17 	ldw	r2,-8(fp)
  195824:	00c00084 	movi	r3,2
  195828:	10c00705 	stb	r3,28(r2)
  tp->p_flags = THD_MEM_MODE_STATIC;
  19582c:	e0bffe17 	ldw	r2,-8(fp)
  195830:	10000745 	stb	zero,29(r2)
#if CH_TIME_QUANTUM > 0
  tp->p_preempt = CH_TIME_QUANTUM;
  195834:	e0bffe17 	ldw	r2,-8(fp)
  195838:	00c00504 	movi	r3,20
  19583c:	10c007c5 	stb	r3,31(r2)
#endif
#if CH_USE_MUTEXES
  tp->p_realprio = prio;
  195840:	e0bffe17 	ldw	r2,-8(fp)
  195844:	e0ffff17 	ldw	r3,-4(fp)
  195848:	10c01015 	stw	r3,64(r2)
  tp->p_mtxlist = NULL;
  19584c:	e0bffe17 	ldw	r2,-8(fp)
  195850:	10000f15 	stw	zero,60(r2)
#endif
#if CH_USE_EVENTS
  tp->p_epending = 0;
  195854:	e0bffe17 	ldw	r2,-8(fp)
  195858:	10000e15 	stw	zero,56(r2)
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
  19585c:	e0bffe17 	ldw	r2,-8(fp)
  195860:	10000815 	stw	zero,32(r2)
#endif
#if CH_USE_DYNAMIC
  tp->p_refs = 1;
  195864:	e0bffe17 	ldw	r2,-8(fp)
  195868:	00c00044 	movi	r3,1
  19586c:	10c00785 	stb	r3,30(r2)
#endif
#if CH_USE_REGISTRY
  tp->p_name = NULL;
  195870:	e0bffe17 	ldw	r2,-8(fp)
  195874:	10000615 	stw	zero,24(r2)
  REG_INSERT(tp);
  195878:	e0fffe17 	ldw	r3,-8(fp)
  19587c:	008006b4 	movhi	r2,26
  195880:	108c3b04 	addi	r2,r2,12524
  195884:	18800415 	stw	r2,16(r3)
  195888:	008006b4 	movhi	r2,26
  19588c:	108c3b04 	addi	r2,r2,12524
  195890:	10c00517 	ldw	r3,20(r2)
  195894:	e0bffe17 	ldw	r2,-8(fp)
  195898:	10c00515 	stw	r3,20(r2)
  19589c:	e0bffe17 	ldw	r2,-8(fp)
  1958a0:	10c00517 	ldw	r3,20(r2)
  1958a4:	008006b4 	movhi	r2,26
  1958a8:	108c3b04 	addi	r2,r2,12524
  1958ac:	e13ffe17 	ldw	r4,-8(fp)
  1958b0:	11000515 	stw	r4,20(r2)
  1958b4:	008006b4 	movhi	r2,26
  1958b8:	108c3b04 	addi	r2,r2,12524
  1958bc:	10800517 	ldw	r2,20(r2)
  1958c0:	18800415 	stw	r2,16(r3)
#endif
#if CH_USE_WAITEXIT
  list_init(&tp->p_waiting);
  1958c4:	e0bffe17 	ldw	r2,-8(fp)
  1958c8:	10c00a04 	addi	r3,r2,40
  1958cc:	e0bffe17 	ldw	r2,-8(fp)
  1958d0:	10c00a15 	stw	r3,40(r2)
#endif
#if CH_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
  1958d4:	e0bffe17 	ldw	r2,-8(fp)
  1958d8:	10c00b04 	addi	r3,r2,44
  1958dc:	e0bffe17 	ldw	r2,-8(fp)
  1958e0:	10c00c15 	stw	r3,48(r2)
  1958e4:	e0bffe17 	ldw	r2,-8(fp)
  1958e8:	10c00c17 	ldw	r3,48(r2)
  1958ec:	e0bffe17 	ldw	r2,-8(fp)
  1958f0:	10c00b15 	stw	r3,44(r2)
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if defined(THREAD_EXT_INIT_HOOK)
  THREAD_EXT_INIT_HOOK(tp);
#endif
  return tp;
  1958f4:	e0bffe17 	ldw	r2,-8(fp)
}
  1958f8:	e037883a 	mov	sp,fp
  1958fc:	df000017 	ldw	fp,0(sp)
  195900:	dec00104 	addi	sp,sp,4
  195904:	f800283a 	ret

00195908 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
Thread *chThdCreateI(void *wsp, size_t size,
                     tprio_t prio, tfunc_t pf, void *arg) {
  195908:	defff904 	addi	sp,sp,-28
  19590c:	dfc00615 	stw	ra,24(sp)
  195910:	df000515 	stw	fp,20(sp)
  195914:	df000504 	addi	fp,sp,20
  195918:	e13ffc15 	stw	r4,-16(fp)
  19591c:	e17ffd15 	stw	r5,-12(fp)
  195920:	e1bffe15 	stw	r6,-8(fp)
  195924:	e1ffff15 	stw	r7,-4(fp)
  /* Thread structure is laid out in the lower part of the thread workspace.*/
  Thread *tp = wsp;
  195928:	e0bffc17 	ldw	r2,-16(fp)
  19592c:	e0bffb15 	stw	r2,-20(fp)

  chDbgCheckClassI();

  chDbgCheck((wsp != NULL) && (size >= THD_WA_SIZE(0)) &&
  195930:	e0bffc17 	ldw	r2,-16(fp)
  195934:	10000926 	beq	r2,zero,19595c <chThdCreateI+0x54>
  195938:	e0bffd17 	ldw	r2,-12(fp)
  19593c:	10805230 	cmpltui	r2,r2,328
  195940:	1000061e 	bne	r2,zero,19595c <chThdCreateI+0x54>
  195944:	e0bffe17 	ldw	r2,-8(fp)
  195948:	10802028 	cmpgeui	r2,r2,128
  19594c:	1000031e 	bne	r2,zero,19595c <chThdCreateI+0x54>
  195950:	e0bfff17 	ldw	r2,-4(fp)
  195954:	10000126 	beq	r2,zero,19595c <chThdCreateI+0x54>
  195958:	0001883a 	nop
             (prio <= HIGHPRIO) && (pf != NULL),
             "chThdCreateI");
  SETUP_CONTEXT(wsp, size, pf, arg);
  19595c:	e0bffd17 	ldw	r2,-12(fp)
  195960:	10bff504 	addi	r2,r2,-44
  195964:	e0fffc17 	ldw	r3,-16(fp)
  195968:	1887883a 	add	r3,r3,r2
  19596c:	e0bffb17 	ldw	r2,-20(fp)
  195970:	10c00315 	stw	r3,12(r2)
  195974:	e0bffb17 	ldw	r2,-20(fp)
  195978:	10800317 	ldw	r2,12(r2)
  19597c:	e0ffff17 	ldw	r3,-4(fp)
  195980:	10c00215 	stw	r3,8(r2)
  195984:	e0bffb17 	ldw	r2,-20(fp)
  195988:	10800317 	ldw	r2,12(r2)
  19598c:	e0c00217 	ldw	r3,8(fp)
  195990:	10c00315 	stw	r3,12(r2)
  195994:	e0bffb17 	ldw	r2,-20(fp)
  195998:	10c00317 	ldw	r3,12(r2)
  19599c:	00860634 	movhi	r2,6168
  1959a0:	10860604 	addi	r2,r2,6168
  1959a4:	18800415 	stw	r2,16(r3)
  1959a8:	e0bffb17 	ldw	r2,-20(fp)
  1959ac:	10c00317 	ldw	r3,12(r2)
  1959b0:	00864674 	movhi	r2,6425
  1959b4:	10864644 	addi	r2,r2,6425
  1959b8:	18800515 	stw	r2,20(r3)
  1959bc:	e0bffb17 	ldw	r2,-20(fp)
  1959c0:	10c00317 	ldw	r3,12(r2)
  1959c4:	00880834 	movhi	r2,8224
  1959c8:	10880804 	addi	r2,r2,8224
  1959cc:	18800615 	stw	r2,24(r3)
  1959d0:	e0bffb17 	ldw	r2,-20(fp)
  1959d4:	10c00317 	ldw	r3,12(r2)
  1959d8:	00884874 	movhi	r2,8481
  1959dc:	10884844 	addi	r2,r2,8481
  1959e0:	18800715 	stw	r2,28(r3)
  1959e4:	e0bffb17 	ldw	r2,-20(fp)
  1959e8:	10c00317 	ldw	r3,12(r2)
  1959ec:	008888b4 	movhi	r2,8738
  1959f0:	10888884 	addi	r2,r2,8738
  1959f4:	18800815 	stw	r2,32(r3)
  1959f8:	e0bffb17 	ldw	r2,-20(fp)
  1959fc:	10c00317 	ldw	r3,12(r2)
  195a00:	0088c8f4 	movhi	r2,8995
  195a04:	1088c8c4 	addi	r2,r2,8995
  195a08:	18800915 	stw	r2,36(r3)
  195a0c:	e0bffb17 	ldw	r2,-20(fp)
  195a10:	10800317 	ldw	r2,12(r2)
  195a14:	00c00044 	movi	r3,1
  195a18:	10c00a15 	stw	r3,40(r2)
  195a1c:	e0bffb17 	ldw	r2,-20(fp)
  195a20:	10c00317 	ldw	r3,12(r2)
  195a24:	008a0a34 	movhi	r2,10280
  195a28:	108a0a04 	addi	r2,r2,10280
  195a2c:	18800115 	stw	r2,4(r3)
  195a30:	e0bffb17 	ldw	r2,-20(fp)
  195a34:	10c00317 	ldw	r3,12(r2)
  195a38:	00800674 	movhi	r2,25
  195a3c:	10986604 	addi	r2,r2,24984
  195a40:	18800015 	stw	r2,0(r3)
  195a44:	e0bffc17 	ldw	r2,-16(fp)
  195a48:	10c01404 	addi	r3,r2,80
  195a4c:	e0bffb17 	ldw	r2,-20(fp)
  195a50:	10c01215 	stw	r3,72(r2)
  195a54:	e0fffc17 	ldw	r3,-16(fp)
  195a58:	e0bffd17 	ldw	r2,-12(fp)
  195a5c:	1887883a 	add	r3,r3,r2
  195a60:	e0bffb17 	ldw	r2,-20(fp)
  195a64:	10c01315 	stw	r3,76(r2)
  return _thread_init(tp, prio);
  195a68:	e13ffb17 	ldw	r4,-20(fp)
  195a6c:	e17ffe17 	ldw	r5,-8(fp)
  195a70:	01958000 	call	195800 <_thread_init>
}
  195a74:	e037883a 	mov	sp,fp
  195a78:	dfc00117 	ldw	ra,4(sp)
  195a7c:	df000017 	ldw	fp,0(sp)
  195a80:	dec00204 	addi	sp,sp,8
  195a84:	f800283a 	ret

00195a88 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
Thread *chThdCreateStatic(void *wsp, size_t size,
                          tprio_t prio, tfunc_t pf, void *arg) {
  195a88:	defff604 	addi	sp,sp,-40
  195a8c:	dfc00915 	stw	ra,36(sp)
  195a90:	df000815 	stw	fp,32(sp)
  195a94:	df000804 	addi	fp,sp,32
  195a98:	e13ffc15 	stw	r4,-16(fp)
  195a9c:	e17ffd15 	stw	r5,-12(fp)
  195aa0:	e1bffe15 	stw	r6,-8(fp)
  195aa4:	e1ffff15 	stw	r7,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195aa8:	0005303a 	rdctl	r2,status
  195aac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195ab0:	e0fffa17 	ldw	r3,-24(fp)
  195ab4:	00bfff84 	movi	r2,-2
  195ab8:	1884703a 	and	r2,r3,r2
  195abc:	1001703a 	wrctl	status,r2
  _thread_memfill((uint8_t *)wsp + sizeof(Thread),
                  (uint8_t *)wsp + size,
                  CH_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), RDY_OK);
  195ac0:	e0800217 	ldw	r2,8(fp)
  195ac4:	d8800015 	stw	r2,0(sp)
  195ac8:	e13ffc17 	ldw	r4,-16(fp)
  195acc:	e17ffd17 	ldw	r5,-12(fp)
  195ad0:	e1bffe17 	ldw	r6,-8(fp)
  195ad4:	e1ffff17 	ldw	r7,-4(fp)
  195ad8:	01959080 	call	195908 <chThdCreateI>
  195adc:	e0bff915 	stw	r2,-28(fp)
  195ae0:	e13ff917 	ldw	r4,-28(fp)
  195ae4:	000b883a 	mov	r5,zero
  195ae8:	0199db40 	call	199db4 <chSchWakeupS>
  195aec:	00800044 	movi	r2,1
  195af0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195af4:	e0bffb17 	ldw	r2,-20(fp)
  195af8:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return tp;
  195afc:	e0bff917 	ldw	r2,-28(fp)
}
  195b00:	e037883a 	mov	sp,fp
  195b04:	dfc00117 	ldw	ra,4(sp)
  195b08:	df000017 	ldw	fp,0(sp)
  195b0c:	dec00204 	addi	sp,sp,8
  195b10:	f800283a 	ret

00195b14 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
  195b14:	defffa04 	addi	sp,sp,-24
  195b18:	dfc00515 	stw	ra,20(sp)
  195b1c:	df000415 	stw	fp,16(sp)
  195b20:	df000404 	addi	fp,sp,16
  195b24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195b28:	0005303a 	rdctl	r2,status
  195b2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195b30:	e0fffd17 	ldw	r3,-12(fp)
  195b34:	00bfff84 	movi	r2,-2
  195b38:	1884703a 	and	r2,r3,r2
  195b3c:	1001703a 	wrctl	status,r2

  chDbgCheck(newprio <= HIGHPRIO, "chThdSetPriority");

  chSysLock();
#if CH_USE_MUTEXES
  oldprio = currp->p_realprio;
  195b40:	008006b4 	movhi	r2,26
  195b44:	108c3b04 	addi	r2,r2,12524
  195b48:	10800617 	ldw	r2,24(r2)
  195b4c:	10801017 	ldw	r2,64(r2)
  195b50:	e0bffc15 	stw	r2,-16(fp)
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
  195b54:	008006b4 	movhi	r2,26
  195b58:	108c3b04 	addi	r2,r2,12524
  195b5c:	10800617 	ldw	r2,24(r2)
  195b60:	10c00217 	ldw	r3,8(r2)
  195b64:	008006b4 	movhi	r2,26
  195b68:	108c3b04 	addi	r2,r2,12524
  195b6c:	10800617 	ldw	r2,24(r2)
  195b70:	10801017 	ldw	r2,64(r2)
  195b74:	18800626 	beq	r3,r2,195b90 <chThdSetPriority+0x7c>
  195b78:	008006b4 	movhi	r2,26
  195b7c:	108c3b04 	addi	r2,r2,12524
  195b80:	10800617 	ldw	r2,24(r2)
  195b84:	10c00217 	ldw	r3,8(r2)
  195b88:	e0bfff17 	ldw	r2,-4(fp)
  195b8c:	1880052e 	bgeu	r3,r2,195ba4 <chThdSetPriority+0x90>
    currp->p_prio = newprio;
  195b90:	008006b4 	movhi	r2,26
  195b94:	108c3b04 	addi	r2,r2,12524
  195b98:	10800617 	ldw	r2,24(r2)
  195b9c:	e0ffff17 	ldw	r3,-4(fp)
  195ba0:	10c00215 	stw	r3,8(r2)
  currp->p_realprio = newprio;
  195ba4:	008006b4 	movhi	r2,26
  195ba8:	108c3b04 	addi	r2,r2,12524
  195bac:	10800617 	ldw	r2,24(r2)
  195bb0:	e0ffff17 	ldw	r3,-4(fp)
  195bb4:	10c01015 	stw	r3,64(r2)
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
  195bb8:	0199e540 	call	199e54 <chSchRescheduleS>
  195bbc:	00800044 	movi	r2,1
  195bc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195bc4:	e0bffe17 	ldw	r2,-8(fp)
  195bc8:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return oldprio;
  195bcc:	e0bffc17 	ldw	r2,-16(fp)
}
  195bd0:	e037883a 	mov	sp,fp
  195bd4:	dfc00117 	ldw	ra,4(sp)
  195bd8:	df000017 	ldw	fp,0(sp)
  195bdc:	dec00204 	addi	sp,sp,8
  195be0:	f800283a 	ret

00195be4 <chThdResume>:
 * @param[in] tp        pointer to the thread
 * @return              The pointer to the thread.
 *
 * @api
 */
Thread *chThdResume(Thread *tp) {
  195be4:	defffb04 	addi	sp,sp,-20
  195be8:	dfc00415 	stw	ra,16(sp)
  195bec:	df000315 	stw	fp,12(sp)
  195bf0:	df000304 	addi	fp,sp,12
  195bf4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195bf8:	0005303a 	rdctl	r2,status
  195bfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195c00:	e0fffd17 	ldw	r3,-12(fp)
  195c04:	00bfff84 	movi	r2,-2
  195c08:	1884703a 	and	r2,r3,r2
  195c0c:	1001703a 	wrctl	status,r2

  chSysLock();
  chDbgAssert(tp->p_state == THD_STATE_SUSPENDED,
              "chThdResume(), #1",
              "thread not in THD_STATE_SUSPENDED state");
  chSchWakeupS(tp, RDY_OK);
  195c10:	e13fff17 	ldw	r4,-4(fp)
  195c14:	000b883a 	mov	r5,zero
  195c18:	0199db40 	call	199db4 <chSchWakeupS>
  195c1c:	00800044 	movi	r2,1
  195c20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195c24:	e0bffe17 	ldw	r2,-8(fp)
  195c28:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return tp;
  195c2c:	e0bfff17 	ldw	r2,-4(fp)
}
  195c30:	e037883a 	mov	sp,fp
  195c34:	dfc00117 	ldw	ra,4(sp)
  195c38:	df000017 	ldw	fp,0(sp)
  195c3c:	dec00204 	addi	sp,sp,8
  195c40:	f800283a 	ret

00195c44 <chThdTerminate>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdTerminate(Thread *tp) {
  195c44:	defffc04 	addi	sp,sp,-16
  195c48:	df000315 	stw	fp,12(sp)
  195c4c:	df000304 	addi	fp,sp,12
  195c50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195c54:	0005303a 	rdctl	r2,status
  195c58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195c5c:	e0fffd17 	ldw	r3,-12(fp)
  195c60:	00bfff84 	movi	r2,-2
  195c64:	1884703a 	and	r2,r3,r2
  195c68:	1001703a 	wrctl	status,r2

  chSysLock();
  tp->p_flags |= THD_TERMINATE;
  195c6c:	e0bfff17 	ldw	r2,-4(fp)
  195c70:	10800743 	ldbu	r2,29(r2)
  195c74:	10800114 	ori	r2,r2,4
  195c78:	1007883a 	mov	r3,r2
  195c7c:	e0bfff17 	ldw	r2,-4(fp)
  195c80:	10c00745 	stb	r3,29(r2)
  195c84:	00800044 	movi	r2,1
  195c88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195c8c:	e0bffe17 	ldw	r2,-8(fp)
  195c90:	1001703a 	wrctl	status,r2
  chSysUnlock();
}
  195c94:	e037883a 	mov	sp,fp
  195c98:	df000017 	ldw	fp,0(sp)
  195c9c:	dec00104 	addi	sp,sp,4
  195ca0:	f800283a 	ret

00195ca4 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
  195ca4:	defffb04 	addi	sp,sp,-20
  195ca8:	dfc00415 	stw	ra,16(sp)
  195cac:	df000315 	stw	fp,12(sp)
  195cb0:	df000304 	addi	fp,sp,12
  195cb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195cb8:	0005303a 	rdctl	r2,status
  195cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195cc0:	e0fffd17 	ldw	r3,-12(fp)
  195cc4:	00bfff84 	movi	r2,-2
  195cc8:	1884703a 	and	r2,r3,r2
  195ccc:	1001703a 	wrctl	status,r2

  chDbgCheck(time != TIME_IMMEDIATE, "chThdSleep");

  chSysLock();
  chThdSleepS(time);
  195cd0:	01000184 	movi	r4,6
  195cd4:	e17fff17 	ldw	r5,-4(fp)
  195cd8:	0199d140 	call	199d14 <chSchGoSleepTimeoutS>
  195cdc:	00800044 	movi	r2,1
  195ce0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195ce4:	e0bffe17 	ldw	r2,-8(fp)
  195ce8:	1001703a 	wrctl	status,r2
  chSysUnlock();
}
  195cec:	e037883a 	mov	sp,fp
  195cf0:	dfc00117 	ldw	ra,4(sp)
  195cf4:	df000017 	ldw	fp,0(sp)
  195cf8:	dec00204 	addi	sp,sp,8
  195cfc:	f800283a 	ret

00195d00 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
  195d00:	defffb04 	addi	sp,sp,-20
  195d04:	dfc00415 	stw	ra,16(sp)
  195d08:	df000315 	stw	fp,12(sp)
  195d0c:	df000304 	addi	fp,sp,12
  195d10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195d14:	0005303a 	rdctl	r2,status
  195d18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195d1c:	e0fffd17 	ldw	r3,-12(fp)
  195d20:	00bfff84 	movi	r2,-2
  195d24:	1884703a 	and	r2,r3,r2
  195d28:	1001703a 	wrctl	status,r2

  chSysLock();
  if ((time -= chTimeNow()) > 0)
  195d2c:	008006b4 	movhi	r2,26
  195d30:	108bf704 	addi	r2,r2,12252
  195d34:	10800317 	ldw	r2,12(r2)
  195d38:	e0ffff17 	ldw	r3,-4(fp)
  195d3c:	1885c83a 	sub	r2,r3,r2
  195d40:	e0bfff15 	stw	r2,-4(fp)
  195d44:	e0bfff17 	ldw	r2,-4(fp)
  195d48:	10000326 	beq	r2,zero,195d58 <chThdSleepUntil+0x58>
    chThdSleepS(time);
  195d4c:	01000184 	movi	r4,6
  195d50:	e17fff17 	ldw	r5,-4(fp)
  195d54:	0199d140 	call	199d14 <chSchGoSleepTimeoutS>
  195d58:	00800044 	movi	r2,1
  195d5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195d60:	e0bffe17 	ldw	r2,-8(fp)
  195d64:	1001703a 	wrctl	status,r2
  chSysUnlock();
}
  195d68:	e037883a 	mov	sp,fp
  195d6c:	dfc00117 	ldw	ra,4(sp)
  195d70:	df000017 	ldw	fp,0(sp)
  195d74:	dec00204 	addi	sp,sp,8
  195d78:	f800283a 	ret

00195d7c <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
  195d7c:	defffc04 	addi	sp,sp,-16
  195d80:	dfc00315 	stw	ra,12(sp)
  195d84:	df000215 	stw	fp,8(sp)
  195d88:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195d8c:	0005303a 	rdctl	r2,status
  195d90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195d94:	e0fffe17 	ldw	r3,-8(fp)
  195d98:	00bfff84 	movi	r2,-2
  195d9c:	1884703a 	and	r2,r3,r2
  195da0:	1001703a 	wrctl	status,r2

  chSysLock();
  chSchDoYieldS();
  195da4:	008006b4 	movhi	r2,26
  195da8:	108c3b04 	addi	r2,r2,12524
  195dac:	10800017 	ldw	r2,0(r2)
  195db0:	10c00217 	ldw	r3,8(r2)
  195db4:	008006b4 	movhi	r2,26
  195db8:	108c3b04 	addi	r2,r2,12524
  195dbc:	10800617 	ldw	r2,24(r2)
  195dc0:	10800217 	ldw	r2,8(r2)
  195dc4:	18800136 	bltu	r3,r2,195dcc <chThdYield+0x50>
  195dc8:	0199f180 	call	199f18 <chSchDoRescheduleBehind>
  195dcc:	00800044 	movi	r2,1
  195dd0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195dd4:	e0bfff17 	ldw	r2,-4(fp)
  195dd8:	1001703a 	wrctl	status,r2
  chSysUnlock();
}
  195ddc:	e037883a 	mov	sp,fp
  195de0:	dfc00117 	ldw	ra,4(sp)
  195de4:	df000017 	ldw	fp,0(sp)
  195de8:	dec00204 	addi	sp,sp,8
  195dec:	f800283a 	ret

00195df0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
  195df0:	defffc04 	addi	sp,sp,-16
  195df4:	dfc00315 	stw	ra,12(sp)
  195df8:	df000215 	stw	fp,8(sp)
  195dfc:	df000204 	addi	fp,sp,8
  195e00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195e04:	0005303a 	rdctl	r2,status
  195e08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195e0c:	e0fffe17 	ldw	r3,-8(fp)
  195e10:	00bfff84 	movi	r2,-2
  195e14:	1884703a 	and	r2,r3,r2
  195e18:	1001703a 	wrctl	status,r2

  chSysLock();
  chThdExitS(msg);
  195e1c:	e13fff17 	ldw	r4,-4(fp)
  195e20:	0195e380 	call	195e38 <chThdExitS>
  /* The thread never returns here.*/
}
  195e24:	e037883a 	mov	sp,fp
  195e28:	dfc00117 	ldw	ra,4(sp)
  195e2c:	df000017 	ldw	fp,0(sp)
  195e30:	dec00204 	addi	sp,sp,8
  195e34:	f800283a 	ret

00195e38 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  195e38:	defffc04 	addi	sp,sp,-16
  195e3c:	dfc00315 	stw	ra,12(sp)
  195e40:	df000215 	stw	fp,8(sp)
  195e44:	df000204 	addi	fp,sp,8
  195e48:	e13fff15 	stw	r4,-4(fp)
  Thread *tp = currp;
  195e4c:	008006b4 	movhi	r2,26
  195e50:	108c3b04 	addi	r2,r2,12524
  195e54:	10800617 	ldw	r2,24(r2)
  195e58:	e0bffe15 	stw	r2,-8(fp)

  tp->p_u.exitcode = msg;
  195e5c:	e0bffe17 	ldw	r2,-8(fp)
  195e60:	e0ffff17 	ldw	r3,-4(fp)
  195e64:	10c00915 	stw	r3,36(r2)
#if defined(THREAD_EXT_EXIT_HOOK)
  THREAD_EXT_EXIT_HOOK(tp);
#endif
#if CH_USE_WAITEXIT
  while (notempty(&tp->p_waiting))
  195e68:	00000606 	br	195e84 <chThdExitS+0x4c>
    chSchReadyI(list_remove(&tp->p_waiting));
  195e6c:	e0bffe17 	ldw	r2,-8(fp)
  195e70:	10800a04 	addi	r2,r2,40
  195e74:	1009883a 	mov	r4,r2
  195e78:	01957c00 	call	1957c0 <list_remove>
  195e7c:	1009883a 	mov	r4,r2
  195e80:	0199b1c0 	call	199b1c <chSchReadyI>
  tp->p_u.exitcode = msg;
#if defined(THREAD_EXT_EXIT_HOOK)
  THREAD_EXT_EXIT_HOOK(tp);
#endif
#if CH_USE_WAITEXIT
  while (notempty(&tp->p_waiting))
  195e84:	e0bffe17 	ldw	r2,-8(fp)
  195e88:	10c00a17 	ldw	r3,40(r2)
  195e8c:	e0bffe17 	ldw	r2,-8(fp)
  195e90:	10800a04 	addi	r2,r2,40
  195e94:	18bff51e 	bne	r3,r2,195e6c <__alt_data_end+0xfff95e6c>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & THD_MEM_MODE_MASK) == THD_MEM_MODE_STATIC)
  195e98:	e0bffe17 	ldw	r2,-8(fp)
  195e9c:	10800743 	ldbu	r2,29(r2)
  195ea0:	10803fcc 	andi	r2,r2,255
  195ea4:	108000cc 	andi	r2,r2,3
  195ea8:	10000a1e 	bne	r2,zero,195ed4 <chThdExitS+0x9c>
    REG_REMOVE(tp);
  195eac:	e0bffe17 	ldw	r2,-8(fp)
  195eb0:	10800517 	ldw	r2,20(r2)
  195eb4:	e0fffe17 	ldw	r3,-8(fp)
  195eb8:	18c00417 	ldw	r3,16(r3)
  195ebc:	10c00415 	stw	r3,16(r2)
  195ec0:	e0bffe17 	ldw	r2,-8(fp)
  195ec4:	10800417 	ldw	r2,16(r2)
  195ec8:	e0fffe17 	ldw	r3,-8(fp)
  195ecc:	18c00517 	ldw	r3,20(r3)
  195ed0:	10c00515 	stw	r3,20(r2)
#endif
  chSchGoSleepS(THD_STATE_FINAL);
  195ed4:	01000384 	movi	r4,14
  195ed8:	0199bd80 	call	199bd8 <chSchGoSleepS>
  /* The thread never returns here.*/
  chDbgAssert(FALSE, "chThdExitS(), #1", "zombies apocalypse");
}
  195edc:	e037883a 	mov	sp,fp
  195ee0:	dfc00117 	ldw	ra,4(sp)
  195ee4:	df000017 	ldw	fp,0(sp)
  195ee8:	dec00204 	addi	sp,sp,8
  195eec:	f800283a 	ret

00195ef0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(Thread *tp) {
  195ef0:	defffa04 	addi	sp,sp,-24
  195ef4:	dfc00515 	stw	ra,20(sp)
  195ef8:	df000415 	stw	fp,16(sp)
  195efc:	df000404 	addi	fp,sp,16
  195f00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  195f04:	0005303a 	rdctl	r2,status
  195f08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  195f0c:	e0fffd17 	ldw	r3,-12(fp)
  195f10:	00bfff84 	movi	r2,-2
  195f14:	1884703a 	and	r2,r3,r2
  195f18:	1001703a 	wrctl	status,r2
  chSysLock();
  chDbgAssert(tp != currp, "chThdWait(), #1", "waiting self");
#if CH_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "chThdWait(), #2", "not referenced");
#endif
  if (tp->p_state != THD_STATE_FINAL) {
  195f1c:	e0bfff17 	ldw	r2,-4(fp)
  195f20:	10800703 	ldbu	r2,28(r2)
  195f24:	10803fcc 	andi	r2,r2,255
  195f28:	108003a0 	cmpeqi	r2,r2,14
  195f2c:	10000a1e 	bne	r2,zero,195f58 <chThdWait+0x68>
    list_insert(currp, &tp->p_waiting);
  195f30:	008006b4 	movhi	r2,26
  195f34:	108c3b04 	addi	r2,r2,12524
  195f38:	10c00617 	ldw	r3,24(r2)
  195f3c:	e0bfff17 	ldw	r2,-4(fp)
  195f40:	10800a04 	addi	r2,r2,40
  195f44:	1809883a 	mov	r4,r3
  195f48:	100b883a 	mov	r5,r2
  195f4c:	01957800 	call	195780 <list_insert>
    chSchGoSleepS(THD_STATE_WTEXIT);
  195f50:	010001c4 	movi	r4,7
  195f54:	0199bd80 	call	199bd8 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
  195f58:	e0bfff17 	ldw	r2,-4(fp)
  195f5c:	10800917 	ldw	r2,36(r2)
  195f60:	e0bffc15 	stw	r2,-16(fp)
  195f64:	00800044 	movi	r2,1
  195f68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  195f6c:	e0bffe17 	ldw	r2,-8(fp)
  195f70:	1001703a 	wrctl	status,r2
  chSysUnlock();
#if CH_USE_DYNAMIC
  chThdRelease(tp);
  195f74:	e13fff17 	ldw	r4,-4(fp)
  195f78:	01987340 	call	198734 <chThdRelease>
#endif
  return msg;
  195f7c:	e0bffc17 	ldw	r2,-16(fp)
}
  195f80:	e037883a 	mov	sp,fp
  195f84:	dfc00117 	ldw	ra,4(sp)
  195f88:	df000017 	ldw	fp,0(sp)
  195f8c:	dec00204 	addi	sp,sp,8
  195f90:	f800283a 	ret

00195f94 <_vt_init>:
 * @brief   Virtual Timers initialization.
 * @note    Internal use only.
 *
 * @notapi
 */
void _vt_init(void) {
  195f94:	deffff04 	addi	sp,sp,-4
  195f98:	df000015 	stw	fp,0(sp)
  195f9c:	d839883a 	mov	fp,sp

  vtlist.vt_next = vtlist.vt_prev = (void *)&vtlist;
  195fa0:	008006b4 	movhi	r2,26
  195fa4:	108bf704 	addi	r2,r2,12252
  195fa8:	00c006b4 	movhi	r3,26
  195fac:	18cbf704 	addi	r3,r3,12252
  195fb0:	10c00115 	stw	r3,4(r2)
  195fb4:	008006b4 	movhi	r2,26
  195fb8:	108bf704 	addi	r2,r2,12252
  195fbc:	10c00117 	ldw	r3,4(r2)
  195fc0:	008006b4 	movhi	r2,26
  195fc4:	108bf704 	addi	r2,r2,12252
  195fc8:	10c00015 	stw	r3,0(r2)
  vtlist.vt_time = (systime_t)-1;
  195fcc:	008006b4 	movhi	r2,26
  195fd0:	108bf704 	addi	r2,r2,12252
  195fd4:	00ffffc4 	movi	r3,-1
  195fd8:	10c00215 	stw	r3,8(r2)
  vtlist.vt_systime = 0;
  195fdc:	008006b4 	movhi	r2,26
  195fe0:	108bf704 	addi	r2,r2,12252
  195fe4:	10000315 	stw	zero,12(r2)
}
  195fe8:	e037883a 	mov	sp,fp
  195fec:	df000017 	ldw	fp,0(sp)
  195ff0:	dec00104 	addi	sp,sp,4
  195ff4:	f800283a 	ret

00195ff8 <chVTSetI>:
 * @param[in] par       a parameter that will be passed to the callback
 *                      function
 *
 * @iclass
 */
void chVTSetI(VirtualTimer *vtp, systime_t time, vtfunc_t vtfunc, void *par) {
  195ff8:	defffa04 	addi	sp,sp,-24
  195ffc:	df000515 	stw	fp,20(sp)
  196000:	df000504 	addi	fp,sp,20
  196004:	e13ffc15 	stw	r4,-16(fp)
  196008:	e17ffd15 	stw	r5,-12(fp)
  19600c:	e1bffe15 	stw	r6,-8(fp)
  196010:	e1ffff15 	stw	r7,-4(fp)
  VirtualTimer *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (time != TIME_IMMEDIATE),
  196014:	e0bffc17 	ldw	r2,-16(fp)
  196018:	10000526 	beq	r2,zero,196030 <chVTSetI+0x38>
  19601c:	e0bffe17 	ldw	r2,-8(fp)
  196020:	10000326 	beq	r2,zero,196030 <chVTSetI+0x38>
  196024:	e0bffd17 	ldw	r2,-12(fp)
  196028:	10000126 	beq	r2,zero,196030 <chVTSetI+0x38>
  19602c:	0001883a 	nop
             "chVTSetI");

  vtp->vt_par = par;
  196030:	e0bffc17 	ldw	r2,-16(fp)
  196034:	e0ffff17 	ldw	r3,-4(fp)
  196038:	10c00415 	stw	r3,16(r2)
  vtp->vt_func = vtfunc;
  19603c:	e0bffc17 	ldw	r2,-16(fp)
  196040:	e0fffe17 	ldw	r3,-8(fp)
  196044:	10c00315 	stw	r3,12(r2)
  p = vtlist.vt_next;
  196048:	008006b4 	movhi	r2,26
  19604c:	108bf704 	addi	r2,r2,12252
  196050:	10800017 	ldw	r2,0(r2)
  196054:	e0bffb15 	stw	r2,-20(fp)
  while (p->vt_time < time) {
  196058:	00000806 	br	19607c <chVTSetI+0x84>
    time -= p->vt_time;
  19605c:	e0bffb17 	ldw	r2,-20(fp)
  196060:	10800217 	ldw	r2,8(r2)
  196064:	e0fffd17 	ldw	r3,-12(fp)
  196068:	1885c83a 	sub	r2,r3,r2
  19606c:	e0bffd15 	stw	r2,-12(fp)
    p = p->vt_next;
  196070:	e0bffb17 	ldw	r2,-20(fp)
  196074:	10800017 	ldw	r2,0(r2)
  196078:	e0bffb15 	stw	r2,-20(fp)
             "chVTSetI");

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = vtlist.vt_next;
  while (p->vt_time < time) {
  19607c:	e0bffb17 	ldw	r2,-20(fp)
  196080:	10c00217 	ldw	r3,8(r2)
  196084:	e0bffd17 	ldw	r2,-12(fp)
  196088:	18bff436 	bltu	r3,r2,19605c <__alt_data_end+0xfff9605c>
    time -= p->vt_time;
    p = p->vt_next;
  }

  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
  19608c:	e0bffc17 	ldw	r2,-16(fp)
  196090:	e0fffb17 	ldw	r3,-20(fp)
  196094:	10c00015 	stw	r3,0(r2)
  196098:	e0bffc17 	ldw	r2,-16(fp)
  19609c:	10800017 	ldw	r2,0(r2)
  1960a0:	10c00117 	ldw	r3,4(r2)
  1960a4:	e0bffc17 	ldw	r2,-16(fp)
  1960a8:	10c00115 	stw	r3,4(r2)
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  1960ac:	e0bffc17 	ldw	r2,-16(fp)
  1960b0:	10800117 	ldw	r2,4(r2)
  1960b4:	e0fffb17 	ldw	r3,-20(fp)
  1960b8:	e13ffc17 	ldw	r4,-16(fp)
  1960bc:	19000115 	stw	r4,4(r3)
  1960c0:	e0fffb17 	ldw	r3,-20(fp)
  1960c4:	18c00117 	ldw	r3,4(r3)
  1960c8:	10c00015 	stw	r3,0(r2)
  vtp->vt_time = time;
  1960cc:	e0bffc17 	ldw	r2,-16(fp)
  1960d0:	e0fffd17 	ldw	r3,-12(fp)
  1960d4:	10c00215 	stw	r3,8(r2)
  if (p != (void *)&vtlist)
  1960d8:	e0fffb17 	ldw	r3,-20(fp)
  1960dc:	008006b4 	movhi	r2,26
  1960e0:	108bf704 	addi	r2,r2,12252
  1960e4:	18800626 	beq	r3,r2,196100 <chVTSetI+0x108>
    p->vt_time -= time;
  1960e8:	e0bffb17 	ldw	r2,-20(fp)
  1960ec:	10c00217 	ldw	r3,8(r2)
  1960f0:	e0bffd17 	ldw	r2,-12(fp)
  1960f4:	1887c83a 	sub	r3,r3,r2
  1960f8:	e0bffb17 	ldw	r2,-20(fp)
  1960fc:	10c00215 	stw	r3,8(r2)
}
  196100:	e037883a 	mov	sp,fp
  196104:	df000017 	ldw	fp,0(sp)
  196108:	dec00104 	addi	sp,sp,4
  19610c:	f800283a 	ret

00196110 <chVTResetI>:
 *
 * @param[in] vtp       the @p VirtualTimer structure pointer
 *
 * @iclass
 */
void chVTResetI(VirtualTimer *vtp) {
  196110:	defffe04 	addi	sp,sp,-8
  196114:	df000115 	stw	fp,4(sp)
  196118:	df000104 	addi	fp,sp,4
  19611c:	e13fff15 	stw	r4,-4(fp)
  chDbgCheck(vtp != NULL, "chVTResetI");
  chDbgAssert(vtp->vt_func != NULL,
              "chVTResetI(), #1",
              "timer not set or already triggered");

  if (vtp->vt_next != (void *)&vtlist)
  196120:	e0bfff17 	ldw	r2,-4(fp)
  196124:	10c00017 	ldw	r3,0(r2)
  196128:	008006b4 	movhi	r2,26
  19612c:	108bf704 	addi	r2,r2,12252
  196130:	18800926 	beq	r3,r2,196158 <chVTResetI+0x48>
    vtp->vt_next->vt_time += vtp->vt_time;
  196134:	e0bfff17 	ldw	r2,-4(fp)
  196138:	10800017 	ldw	r2,0(r2)
  19613c:	e0ffff17 	ldw	r3,-4(fp)
  196140:	18c00017 	ldw	r3,0(r3)
  196144:	19000217 	ldw	r4,8(r3)
  196148:	e0ffff17 	ldw	r3,-4(fp)
  19614c:	18c00217 	ldw	r3,8(r3)
  196150:	20c7883a 	add	r3,r4,r3
  196154:	10c00215 	stw	r3,8(r2)
  vtp->vt_prev->vt_next = vtp->vt_next;
  196158:	e0bfff17 	ldw	r2,-4(fp)
  19615c:	10800117 	ldw	r2,4(r2)
  196160:	e0ffff17 	ldw	r3,-4(fp)
  196164:	18c00017 	ldw	r3,0(r3)
  196168:	10c00015 	stw	r3,0(r2)
  vtp->vt_next->vt_prev = vtp->vt_prev;
  19616c:	e0bfff17 	ldw	r2,-4(fp)
  196170:	10800017 	ldw	r2,0(r2)
  196174:	e0ffff17 	ldw	r3,-4(fp)
  196178:	18c00117 	ldw	r3,4(r3)
  19617c:	10c00115 	stw	r3,4(r2)
  vtp->vt_func = (vtfunc_t)NULL;
  196180:	e0bfff17 	ldw	r2,-4(fp)
  196184:	10000315 	stw	zero,12(r2)
}
  196188:	e037883a 	mov	sp,fp
  19618c:	df000017 	ldw	fp,0(sp)
  196190:	dec00104 	addi	sp,sp,4
  196194:	f800283a 	ret

00196198 <_port_thread_start>:
/*                                                                         */
/*  Start a thread by invoking its work function.                          */
/***************************************************************************/
_port_thread_start:

      mov   r4, r17        /* r4 = Register Arguments (First 32 bits) */
  196198:	8809883a 	mov	r4,r17
      mov   r5, r16        /* Store thread pointer for the callr,     */
  19619c:	800b883a 	mov	r5,r16
      callr r5             /* and call the thread */
  1961a0:	283ee83a 	callr	r5
      call  chThdExit      /* This is the thread exit function. */
  1961a4:	0195df00 	call	195df0 <chThdExit>

001961a8 <_port_thread_start_loop>:
      
_port_thread_start_loop:      
      br    _port_thread_start_loop
  1961a8:	003fff06 	br	1961a8 <__alt_data_end+0xfff961a8>

001961ac <port_switch>:
/***************************************************************************/
port_switch:

      /* r4 = ntp, r5 = otp */

      addi  sp, sp, -44    /* Size of the intctx structure */
  1961ac:	defff504 	addi	sp,sp,-44
      
      stw   ra,   0(sp)
  1961b0:	dfc00015 	stw	ra,0(sp)
      stw   fp,   4(sp)
  1961b4:	df000115 	stw	fp,4(sp)
      stw   r16,  8(sp)
  1961b8:	dc000215 	stw	r16,8(sp)
      stw   r17, 12(sp)
  1961bc:	dc400315 	stw	r17,12(sp)
      stw   r18, 16(sp)
  1961c0:	dc800415 	stw	r18,16(sp)
      stw   r19, 20(sp)
  1961c4:	dcc00515 	stw	r19,20(sp)
      stw   r20, 24(sp)
  1961c8:	dd000615 	stw	r20,24(sp)
      stw   r21, 28(sp)
  1961cc:	dd400715 	stw	r21,28(sp)
      stw   r22, 32(sp)
  1961d0:	dd800815 	stw	r22,32(sp)
      stw   r23, 36(sp)
  1961d4:	ddc00915 	stw	r23,36(sp)
      
      rdctl r23, status    /* r23 is not more needed and can */
  1961d8:	002f303a 	rdctl	r23,status
      stw   r23, 40(sp)    /* be used here to store the status */
  1961dc:	ddc00a15 	stw	r23,40(sp)
      
      stw   sp, 12(r5)     /* Save old stack: otp->p_ctx.sp = sp */
  1961e0:	2ec00315 	stw	sp,12(r5)
      
      ldw   sp, 12(r4)     /* Get new stack: sp = ntp->p_ctx.sp */
  1961e4:	26c00317 	ldw	sp,12(r4)
      
      ldw   ra,   0(sp)
  1961e8:	dfc00017 	ldw	ra,0(sp)
      ldw   fp,   4(sp)
  1961ec:	df000117 	ldw	fp,4(sp)
      ldw   r16,  8(sp)
  1961f0:	dc000217 	ldw	r16,8(sp)
      ldw   r17, 12(sp)
  1961f4:	dc400317 	ldw	r17,12(sp)
      ldw   r18, 16(sp)
  1961f8:	dc800417 	ldw	r18,16(sp)
      ldw   r19, 20(sp)
  1961fc:	dcc00517 	ldw	r19,20(sp)
      ldw   r20, 24(sp)
  196200:	dd000617 	ldw	r20,24(sp)
      ldw   r21, 28(sp)
  196204:	dd400717 	ldw	r21,28(sp)
      ldw   r22, 32(sp)
  196208:	dd800817 	ldw	r22,32(sp)
      ldw   r23, 36(sp)
  19620c:	ddc00917 	ldw	r23,36(sp)
      
      ldw   r4,  40(sp)    /* r4 is not more needed and can */
  196210:	d9000a17 	ldw	r4,40(sp)
      wrctl status, r4     /* be used here to store the status */
  196214:	2001703a 	wrctl	status,r4
      
      addi  sp, sp, 44     /* Size of the intctx structure */
  196218:	dec00b04 	addi	sp,sp,44
      
      ret
  19621c:	f800283a 	ret
   
      nop
  196220:	0001883a 	nop

00196224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  196224:	defffe04 	addi	sp,sp,-8
  196228:	dfc00115 	stw	ra,4(sp)
  19622c:	df000015 	stw	fp,0(sp)
  196230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  196234:	008006b4 	movhi	r2,26
  196238:	10847104 	addi	r2,r2,4548
  19623c:	10800017 	ldw	r2,0(r2)
  196240:	10000526 	beq	r2,zero,196258 <alt_get_errno+0x34>
  196244:	008006b4 	movhi	r2,26
  196248:	10847104 	addi	r2,r2,4548
  19624c:	10800017 	ldw	r2,0(r2)
  196250:	103ee83a 	callr	r2
  196254:	00000206 	br	196260 <alt_get_errno+0x3c>
  196258:	008006b4 	movhi	r2,26
  19625c:	108b6b04 	addi	r2,r2,11692
}
  196260:	e037883a 	mov	sp,fp
  196264:	dfc00117 	ldw	ra,4(sp)
  196268:	df000017 	ldw	fp,0(sp)
  19626c:	dec00204 	addi	sp,sp,8
  196270:	f800283a 	ret

00196274 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  196274:	defffb04 	addi	sp,sp,-20
  196278:	dfc00415 	stw	ra,16(sp)
  19627c:	df000315 	stw	fp,12(sp)
  196280:	df000304 	addi	fp,sp,12
  196284:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  196288:	e0bfff17 	ldw	r2,-4(fp)
  19628c:	10000816 	blt	r2,zero,1962b0 <close+0x3c>
  196290:	e13fff17 	ldw	r4,-4(fp)
  196294:	01400304 	movi	r5,12
  196298:	0187dd80 	call	187dd8 <__mulsi3>
  19629c:	1007883a 	mov	r3,r2
  1962a0:	008006b4 	movhi	r2,26
  1962a4:	10bfbb04 	addi	r2,r2,-276
  1962a8:	1885883a 	add	r2,r3,r2
  1962ac:	00000106 	br	1962b4 <close+0x40>
  1962b0:	0005883a 	mov	r2,zero
  1962b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  1962b8:	e0bffd17 	ldw	r2,-12(fp)
  1962bc:	10001926 	beq	r2,zero,196324 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  1962c0:	e0bffd17 	ldw	r2,-12(fp)
  1962c4:	10800017 	ldw	r2,0(r2)
  1962c8:	10800417 	ldw	r2,16(r2)
  1962cc:	10000626 	beq	r2,zero,1962e8 <close+0x74>
  1962d0:	e0bffd17 	ldw	r2,-12(fp)
  1962d4:	10800017 	ldw	r2,0(r2)
  1962d8:	10800417 	ldw	r2,16(r2)
  1962dc:	e13ffd17 	ldw	r4,-12(fp)
  1962e0:	103ee83a 	callr	r2
  1962e4:	00000106 	br	1962ec <close+0x78>
  1962e8:	0005883a 	mov	r2,zero
  1962ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  1962f0:	e13fff17 	ldw	r4,-4(fp)
  1962f4:	0196f300 	call	196f30 <alt_release_fd>
    if (rval < 0)
  1962f8:	e0bffe17 	ldw	r2,-8(fp)
  1962fc:	1000070e 	bge	r2,zero,19631c <close+0xa8>
    {
      ALT_ERRNO = -rval;
  196300:	01962240 	call	196224 <alt_get_errno>
  196304:	1007883a 	mov	r3,r2
  196308:	e0bffe17 	ldw	r2,-8(fp)
  19630c:	0085c83a 	sub	r2,zero,r2
  196310:	18800015 	stw	r2,0(r3)
      return -1;
  196314:	00bfffc4 	movi	r2,-1
  196318:	00000706 	br	196338 <close+0xc4>
    }
    return 0;
  19631c:	0005883a 	mov	r2,zero
  196320:	00000506 	br	196338 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  196324:	01962240 	call	196224 <alt_get_errno>
  196328:	1007883a 	mov	r3,r2
  19632c:	00801444 	movi	r2,81
  196330:	18800015 	stw	r2,0(r3)
    return -1;
  196334:	00bfffc4 	movi	r2,-1
  }
}
  196338:	e037883a 	mov	sp,fp
  19633c:	dfc00117 	ldw	ra,4(sp)
  196340:	df000017 	ldw	fp,0(sp)
  196344:	dec00204 	addi	sp,sp,8
  196348:	f800283a 	ret

0019634c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  19634c:	defffc04 	addi	sp,sp,-16
  196350:	df000315 	stw	fp,12(sp)
  196354:	df000304 	addi	fp,sp,12
  196358:	e13ffd15 	stw	r4,-12(fp)
  19635c:	e17ffe15 	stw	r5,-8(fp)
  196360:	e1bfff15 	stw	r6,-4(fp)
  return len;
  196364:	e0bfff17 	ldw	r2,-4(fp)
}
  196368:	e037883a 	mov	sp,fp
  19636c:	df000017 	ldw	fp,0(sp)
  196370:	dec00104 	addi	sp,sp,4
  196374:	f800283a 	ret

00196378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  196378:	defffe04 	addi	sp,sp,-8
  19637c:	dfc00115 	stw	ra,4(sp)
  196380:	df000015 	stw	fp,0(sp)
  196384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  196388:	008006b4 	movhi	r2,26
  19638c:	10847104 	addi	r2,r2,4548
  196390:	10800017 	ldw	r2,0(r2)
  196394:	10000526 	beq	r2,zero,1963ac <alt_get_errno+0x34>
  196398:	008006b4 	movhi	r2,26
  19639c:	10847104 	addi	r2,r2,4548
  1963a0:	10800017 	ldw	r2,0(r2)
  1963a4:	103ee83a 	callr	r2
  1963a8:	00000206 	br	1963b4 <alt_get_errno+0x3c>
  1963ac:	008006b4 	movhi	r2,26
  1963b0:	108b6b04 	addi	r2,r2,11692
}
  1963b4:	e037883a 	mov	sp,fp
  1963b8:	dfc00117 	ldw	ra,4(sp)
  1963bc:	df000017 	ldw	fp,0(sp)
  1963c0:	dec00204 	addi	sp,sp,8
  1963c4:	f800283a 	ret

001963c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  1963c8:	defffb04 	addi	sp,sp,-20
  1963cc:	dfc00415 	stw	ra,16(sp)
  1963d0:	df000315 	stw	fp,12(sp)
  1963d4:	df000304 	addi	fp,sp,12
  1963d8:	e13ffe15 	stw	r4,-8(fp)
  1963dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1963e0:	e0bffe17 	ldw	r2,-8(fp)
  1963e4:	10000816 	blt	r2,zero,196408 <fstat+0x40>
  1963e8:	e13ffe17 	ldw	r4,-8(fp)
  1963ec:	01400304 	movi	r5,12
  1963f0:	0187dd80 	call	187dd8 <__mulsi3>
  1963f4:	1007883a 	mov	r3,r2
  1963f8:	008006b4 	movhi	r2,26
  1963fc:	10bfbb04 	addi	r2,r2,-276
  196400:	1885883a 	add	r2,r3,r2
  196404:	00000106 	br	19640c <fstat+0x44>
  196408:	0005883a 	mov	r2,zero
  19640c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  196410:	e0bffd17 	ldw	r2,-12(fp)
  196414:	10001026 	beq	r2,zero,196458 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  196418:	e0bffd17 	ldw	r2,-12(fp)
  19641c:	10800017 	ldw	r2,0(r2)
  196420:	10800817 	ldw	r2,32(r2)
  196424:	10000726 	beq	r2,zero,196444 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  196428:	e0bffd17 	ldw	r2,-12(fp)
  19642c:	10800017 	ldw	r2,0(r2)
  196430:	10800817 	ldw	r2,32(r2)
  196434:	e13ffd17 	ldw	r4,-12(fp)
  196438:	e17fff17 	ldw	r5,-4(fp)
  19643c:	103ee83a 	callr	r2
  196440:	00000a06 	br	19646c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  196444:	e0bfff17 	ldw	r2,-4(fp)
  196448:	00c80004 	movi	r3,8192
  19644c:	10c00115 	stw	r3,4(r2)
      return 0;
  196450:	0005883a 	mov	r2,zero
  196454:	00000506 	br	19646c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  196458:	01963780 	call	196378 <alt_get_errno>
  19645c:	1007883a 	mov	r3,r2
  196460:	00801444 	movi	r2,81
  196464:	18800015 	stw	r2,0(r3)
    return -1;
  196468:	00bfffc4 	movi	r2,-1
  }
}
  19646c:	e037883a 	mov	sp,fp
  196470:	dfc00117 	ldw	ra,4(sp)
  196474:	df000017 	ldw	fp,0(sp)
  196478:	dec00204 	addi	sp,sp,8
  19647c:	f800283a 	ret

00196480 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  196480:	defff904 	addi	sp,sp,-28
  196484:	dfc00615 	stw	ra,24(sp)
  196488:	df000515 	stw	fp,20(sp)
  19648c:	df000504 	addi	fp,sp,20
  196490:	e13ffc15 	stw	r4,-16(fp)
  196494:	e17ffd15 	stw	r5,-12(fp)
  196498:	e1bffe15 	stw	r6,-8(fp)
  19649c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  1964a0:	e0800217 	ldw	r2,8(fp)
  1964a4:	d8800015 	stw	r2,0(sp)
  1964a8:	e13ffc17 	ldw	r4,-16(fp)
  1964ac:	e17ffd17 	ldw	r5,-12(fp)
  1964b0:	e1bffe17 	ldw	r6,-8(fp)
  1964b4:	e1ffff17 	ldw	r7,-4(fp)
  1964b8:	01966600 	call	196660 <alt_iic_isr_register>
}  
  1964bc:	e037883a 	mov	sp,fp
  1964c0:	dfc00117 	ldw	ra,4(sp)
  1964c4:	df000017 	ldw	fp,0(sp)
  1964c8:	dec00204 	addi	sp,sp,8
  1964cc:	f800283a 	ret

001964d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  1964d0:	defff904 	addi	sp,sp,-28
  1964d4:	df000615 	stw	fp,24(sp)
  1964d8:	df000604 	addi	fp,sp,24
  1964dc:	e13ffe15 	stw	r4,-8(fp)
  1964e0:	e17fff15 	stw	r5,-4(fp)
  1964e4:	e0bfff17 	ldw	r2,-4(fp)
  1964e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1964ec:	0005303a 	rdctl	r2,status
  1964f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1964f4:	e0fffb17 	ldw	r3,-20(fp)
  1964f8:	00bfff84 	movi	r2,-2
  1964fc:	1884703a 	and	r2,r3,r2
  196500:	1001703a 	wrctl	status,r2
  
  return context;
  196504:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  196508:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  19650c:	e0bffa17 	ldw	r2,-24(fp)
  196510:	00c00044 	movi	r3,1
  196514:	1884983a 	sll	r2,r3,r2
  196518:	1007883a 	mov	r3,r2
  19651c:	008006b4 	movhi	r2,26
  196520:	108b6c04 	addi	r2,r2,11696
  196524:	10800017 	ldw	r2,0(r2)
  196528:	1886b03a 	or	r3,r3,r2
  19652c:	008006b4 	movhi	r2,26
  196530:	108b6c04 	addi	r2,r2,11696
  196534:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  196538:	008006b4 	movhi	r2,26
  19653c:	108b6c04 	addi	r2,r2,11696
  196540:	10800017 	ldw	r2,0(r2)
  196544:	100170fa 	wrctl	ienable,r2
  196548:	e0bffc17 	ldw	r2,-16(fp)
  19654c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  196550:	e0bffd17 	ldw	r2,-12(fp)
  196554:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  196558:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  19655c:	0001883a 	nop
}
  196560:	e037883a 	mov	sp,fp
  196564:	df000017 	ldw	fp,0(sp)
  196568:	dec00104 	addi	sp,sp,4
  19656c:	f800283a 	ret

00196570 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  196570:	defff904 	addi	sp,sp,-28
  196574:	df000615 	stw	fp,24(sp)
  196578:	df000604 	addi	fp,sp,24
  19657c:	e13ffe15 	stw	r4,-8(fp)
  196580:	e17fff15 	stw	r5,-4(fp)
  196584:	e0bfff17 	ldw	r2,-4(fp)
  196588:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19658c:	0005303a 	rdctl	r2,status
  196590:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  196594:	e0fffb17 	ldw	r3,-20(fp)
  196598:	00bfff84 	movi	r2,-2
  19659c:	1884703a 	and	r2,r3,r2
  1965a0:	1001703a 	wrctl	status,r2
  
  return context;
  1965a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  1965a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  1965ac:	e0bffa17 	ldw	r2,-24(fp)
  1965b0:	00c00044 	movi	r3,1
  1965b4:	1884983a 	sll	r2,r3,r2
  1965b8:	0084303a 	nor	r2,zero,r2
  1965bc:	1007883a 	mov	r3,r2
  1965c0:	008006b4 	movhi	r2,26
  1965c4:	108b6c04 	addi	r2,r2,11696
  1965c8:	10800017 	ldw	r2,0(r2)
  1965cc:	1886703a 	and	r3,r3,r2
  1965d0:	008006b4 	movhi	r2,26
  1965d4:	108b6c04 	addi	r2,r2,11696
  1965d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  1965dc:	008006b4 	movhi	r2,26
  1965e0:	108b6c04 	addi	r2,r2,11696
  1965e4:	10800017 	ldw	r2,0(r2)
  1965e8:	100170fa 	wrctl	ienable,r2
  1965ec:	e0bffc17 	ldw	r2,-16(fp)
  1965f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1965f4:	e0bffd17 	ldw	r2,-12(fp)
  1965f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  1965fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  196600:	0001883a 	nop
}
  196604:	e037883a 	mov	sp,fp
  196608:	df000017 	ldw	fp,0(sp)
  19660c:	dec00104 	addi	sp,sp,4
  196610:	f800283a 	ret

00196614 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  196614:	defffc04 	addi	sp,sp,-16
  196618:	df000315 	stw	fp,12(sp)
  19661c:	df000304 	addi	fp,sp,12
  196620:	e13ffe15 	stw	r4,-8(fp)
  196624:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  196628:	000530fa 	rdctl	r2,ienable
  19662c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  196630:	e0bfff17 	ldw	r2,-4(fp)
  196634:	00c00044 	movi	r3,1
  196638:	1884983a 	sll	r2,r3,r2
  19663c:	1007883a 	mov	r3,r2
  196640:	e0bffd17 	ldw	r2,-12(fp)
  196644:	1884703a 	and	r2,r3,r2
  196648:	1004c03a 	cmpne	r2,r2,zero
  19664c:	10803fcc 	andi	r2,r2,255
}
  196650:	e037883a 	mov	sp,fp
  196654:	df000017 	ldw	fp,0(sp)
  196658:	dec00104 	addi	sp,sp,4
  19665c:	f800283a 	ret

00196660 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  196660:	defff504 	addi	sp,sp,-44
  196664:	dfc00a15 	stw	ra,40(sp)
  196668:	df000915 	stw	fp,36(sp)
  19666c:	df000904 	addi	fp,sp,36
  196670:	e13ffc15 	stw	r4,-16(fp)
  196674:	e17ffd15 	stw	r5,-12(fp)
  196678:	e1bffe15 	stw	r6,-8(fp)
  19667c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  196680:	00bffa84 	movi	r2,-22
  196684:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  196688:	e0bffd17 	ldw	r2,-12(fp)
  19668c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  196690:	e0bff817 	ldw	r2,-32(fp)
  196694:	10800808 	cmpgei	r2,r2,32
  196698:	1000271e 	bne	r2,zero,196738 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19669c:	0005303a 	rdctl	r2,status
  1966a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1966a4:	e0fffa17 	ldw	r3,-24(fp)
  1966a8:	00bfff84 	movi	r2,-2
  1966ac:	1884703a 	and	r2,r3,r2
  1966b0:	1001703a 	wrctl	status,r2
  
  return context;
  1966b4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  1966b8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  1966bc:	008006b4 	movhi	r2,26
  1966c0:	108bfb04 	addi	r2,r2,12268
  1966c4:	e0fff817 	ldw	r3,-32(fp)
  1966c8:	180690fa 	slli	r3,r3,3
  1966cc:	10c5883a 	add	r2,r2,r3
  1966d0:	e0fffe17 	ldw	r3,-8(fp)
  1966d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  1966d8:	008006b4 	movhi	r2,26
  1966dc:	108bfb04 	addi	r2,r2,12268
  1966e0:	e0fff817 	ldw	r3,-32(fp)
  1966e4:	180690fa 	slli	r3,r3,3
  1966e8:	18c00104 	addi	r3,r3,4
  1966ec:	10c5883a 	add	r2,r2,r3
  1966f0:	e0ffff17 	ldw	r3,-4(fp)
  1966f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  1966f8:	e0bffe17 	ldw	r2,-8(fp)
  1966fc:	10000526 	beq	r2,zero,196714 <alt_iic_isr_register+0xb4>
  196700:	e0bff817 	ldw	r2,-32(fp)
  196704:	e13ffc17 	ldw	r4,-16(fp)
  196708:	100b883a 	mov	r5,r2
  19670c:	01964d00 	call	1964d0 <alt_ic_irq_enable>
  196710:	00000406 	br	196724 <alt_iic_isr_register+0xc4>
  196714:	e0bff817 	ldw	r2,-32(fp)
  196718:	e13ffc17 	ldw	r4,-16(fp)
  19671c:	100b883a 	mov	r5,r2
  196720:	01965700 	call	196570 <alt_ic_irq_disable>
  196724:	e0bff715 	stw	r2,-36(fp)
  196728:	e0bff917 	ldw	r2,-28(fp)
  19672c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  196730:	e0bffb17 	ldw	r2,-20(fp)
  196734:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  196738:	e0bff717 	ldw	r2,-36(fp)
}
  19673c:	e037883a 	mov	sp,fp
  196740:	dfc00117 	ldw	ra,4(sp)
  196744:	df000017 	ldw	fp,0(sp)
  196748:	dec00204 	addi	sp,sp,8
  19674c:	f800283a 	ret

00196750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  196750:	defffe04 	addi	sp,sp,-8
  196754:	dfc00115 	stw	ra,4(sp)
  196758:	df000015 	stw	fp,0(sp)
  19675c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  196760:	008006b4 	movhi	r2,26
  196764:	10847104 	addi	r2,r2,4548
  196768:	10800017 	ldw	r2,0(r2)
  19676c:	10000526 	beq	r2,zero,196784 <alt_get_errno+0x34>
  196770:	008006b4 	movhi	r2,26
  196774:	10847104 	addi	r2,r2,4548
  196778:	10800017 	ldw	r2,0(r2)
  19677c:	103ee83a 	callr	r2
  196780:	00000206 	br	19678c <alt_get_errno+0x3c>
  196784:	008006b4 	movhi	r2,26
  196788:	108b6b04 	addi	r2,r2,11692
}
  19678c:	e037883a 	mov	sp,fp
  196790:	dfc00117 	ldw	ra,4(sp)
  196794:	df000017 	ldw	fp,0(sp)
  196798:	dec00204 	addi	sp,sp,8
  19679c:	f800283a 	ret

001967a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  1967a0:	deffed04 	addi	sp,sp,-76
  1967a4:	dfc01215 	stw	ra,72(sp)
  1967a8:	df001115 	stw	fp,68(sp)
  1967ac:	df001104 	addi	fp,sp,68
  1967b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1967b4:	e0bfff17 	ldw	r2,-4(fp)
  1967b8:	10000816 	blt	r2,zero,1967dc <isatty+0x3c>
  1967bc:	e13fff17 	ldw	r4,-4(fp)
  1967c0:	01400304 	movi	r5,12
  1967c4:	0187dd80 	call	187dd8 <__mulsi3>
  1967c8:	1007883a 	mov	r3,r2
  1967cc:	008006b4 	movhi	r2,26
  1967d0:	10bfbb04 	addi	r2,r2,-276
  1967d4:	1885883a 	add	r2,r3,r2
  1967d8:	00000106 	br	1967e0 <isatty+0x40>
  1967dc:	0005883a 	mov	r2,zero
  1967e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  1967e4:	e0bfef17 	ldw	r2,-68(fp)
  1967e8:	10000e26 	beq	r2,zero,196824 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  1967ec:	e0bfef17 	ldw	r2,-68(fp)
  1967f0:	10800017 	ldw	r2,0(r2)
  1967f4:	10800817 	ldw	r2,32(r2)
  1967f8:	1000021e 	bne	r2,zero,196804 <isatty+0x64>
    {
      return 1;
  1967fc:	00800044 	movi	r2,1
  196800:	00000d06 	br	196838 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  196804:	e0bff004 	addi	r2,fp,-64
  196808:	e13fff17 	ldw	r4,-4(fp)
  19680c:	100b883a 	mov	r5,r2
  196810:	01963c80 	call	1963c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  196814:	e0bff117 	ldw	r2,-60(fp)
  196818:	10880020 	cmpeqi	r2,r2,8192
  19681c:	10803fcc 	andi	r2,r2,255
  196820:	00000506 	br	196838 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  196824:	01967500 	call	196750 <alt_get_errno>
  196828:	1007883a 	mov	r3,r2
  19682c:	00801444 	movi	r2,81
  196830:	18800015 	stw	r2,0(r3)
    return 0;
  196834:	0005883a 	mov	r2,zero
  }
}
  196838:	e037883a 	mov	sp,fp
  19683c:	dfc00117 	ldw	ra,4(sp)
  196840:	df000017 	ldw	fp,0(sp)
  196844:	dec00204 	addi	sp,sp,8
  196848:	f800283a 	ret

0019684c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  19684c:	defffc04 	addi	sp,sp,-16
  196850:	df000315 	stw	fp,12(sp)
  196854:	df000304 	addi	fp,sp,12
  196858:	e13ffd15 	stw	r4,-12(fp)
  19685c:	e17ffe15 	stw	r5,-8(fp)
  196860:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  196864:	e0fffe17 	ldw	r3,-8(fp)
  196868:	e0bffd17 	ldw	r2,-12(fp)
  19686c:	18800c26 	beq	r3,r2,1968a0 <alt_load_section+0x54>
  {
    while( to != end )
  196870:	00000806 	br	196894 <alt_load_section+0x48>
    {
      *to++ = *from++;
  196874:	e0bffe17 	ldw	r2,-8(fp)
  196878:	10c00104 	addi	r3,r2,4
  19687c:	e0fffe15 	stw	r3,-8(fp)
  196880:	e0fffd17 	ldw	r3,-12(fp)
  196884:	19000104 	addi	r4,r3,4
  196888:	e13ffd15 	stw	r4,-12(fp)
  19688c:	18c00017 	ldw	r3,0(r3)
  196890:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  196894:	e0fffe17 	ldw	r3,-8(fp)
  196898:	e0bfff17 	ldw	r2,-4(fp)
  19689c:	18bff51e 	bne	r3,r2,196874 <__alt_data_end+0xfff96874>
    {
      *to++ = *from++;
    }
  }
}
  1968a0:	e037883a 	mov	sp,fp
  1968a4:	df000017 	ldw	fp,0(sp)
  1968a8:	dec00104 	addi	sp,sp,4
  1968ac:	f800283a 	ret

001968b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  1968b0:	defffe04 	addi	sp,sp,-8
  1968b4:	dfc00115 	stw	ra,4(sp)
  1968b8:	df000015 	stw	fp,0(sp)
  1968bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  1968c0:	010006b4 	movhi	r4,26
  1968c4:	21047604 	addi	r4,r4,4568
  1968c8:	014006b4 	movhi	r5,26
  1968cc:	297d8804 	addi	r5,r5,-2528
  1968d0:	018006b4 	movhi	r6,26
  1968d4:	31847604 	addi	r6,r6,4568
  1968d8:	019684c0 	call	19684c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  1968dc:	01000634 	movhi	r4,24
  1968e0:	21000804 	addi	r4,r4,32
  1968e4:	01400634 	movhi	r5,24
  1968e8:	29400804 	addi	r5,r5,32
  1968ec:	01800634 	movhi	r6,24
  1968f0:	31808e04 	addi	r6,r6,568
  1968f4:	019684c0 	call	19684c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  1968f8:	010006b4 	movhi	r4,26
  1968fc:	212d0404 	addi	r4,r4,-19440
  196900:	014006b4 	movhi	r5,26
  196904:	296d0404 	addi	r5,r5,-19440
  196908:	018006b4 	movhi	r6,26
  19690c:	31bd8804 	addi	r6,r6,-2528
  196910:	019684c0 	call	19684c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  196914:	019a4240 	call	19a424 <alt_dcache_flush_all>
  alt_icache_flush_all();
  196918:	019a5ec0 	call	19a5ec <alt_icache_flush_all>
}
  19691c:	e037883a 	mov	sp,fp
  196920:	dfc00117 	ldw	ra,4(sp)
  196924:	df000017 	ldw	fp,0(sp)
  196928:	dec00204 	addi	sp,sp,8
  19692c:	f800283a 	ret

00196930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  196930:	defffe04 	addi	sp,sp,-8
  196934:	dfc00115 	stw	ra,4(sp)
  196938:	df000015 	stw	fp,0(sp)
  19693c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  196940:	008006b4 	movhi	r2,26
  196944:	10847104 	addi	r2,r2,4548
  196948:	10800017 	ldw	r2,0(r2)
  19694c:	10000526 	beq	r2,zero,196964 <alt_get_errno+0x34>
  196950:	008006b4 	movhi	r2,26
  196954:	10847104 	addi	r2,r2,4548
  196958:	10800017 	ldw	r2,0(r2)
  19695c:	103ee83a 	callr	r2
  196960:	00000206 	br	19696c <alt_get_errno+0x3c>
  196964:	008006b4 	movhi	r2,26
  196968:	108b6b04 	addi	r2,r2,11692
}
  19696c:	e037883a 	mov	sp,fp
  196970:	dfc00117 	ldw	ra,4(sp)
  196974:	df000017 	ldw	fp,0(sp)
  196978:	dec00204 	addi	sp,sp,8
  19697c:	f800283a 	ret

00196980 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  196980:	defff904 	addi	sp,sp,-28
  196984:	dfc00615 	stw	ra,24(sp)
  196988:	df000515 	stw	fp,20(sp)
  19698c:	df000504 	addi	fp,sp,20
  196990:	e13ffd15 	stw	r4,-12(fp)
  196994:	e17ffe15 	stw	r5,-8(fp)
  196998:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  19699c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1969a0:	e0bffd17 	ldw	r2,-12(fp)
  1969a4:	10000816 	blt	r2,zero,1969c8 <lseek+0x48>
  1969a8:	e13ffd17 	ldw	r4,-12(fp)
  1969ac:	01400304 	movi	r5,12
  1969b0:	0187dd80 	call	187dd8 <__mulsi3>
  1969b4:	1007883a 	mov	r3,r2
  1969b8:	008006b4 	movhi	r2,26
  1969bc:	10bfbb04 	addi	r2,r2,-276
  1969c0:	1885883a 	add	r2,r3,r2
  1969c4:	00000106 	br	1969cc <lseek+0x4c>
  1969c8:	0005883a 	mov	r2,zero
  1969cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  1969d0:	e0bffc17 	ldw	r2,-16(fp)
  1969d4:	10001026 	beq	r2,zero,196a18 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  1969d8:	e0bffc17 	ldw	r2,-16(fp)
  1969dc:	10800017 	ldw	r2,0(r2)
  1969e0:	10800717 	ldw	r2,28(r2)
  1969e4:	10000926 	beq	r2,zero,196a0c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  1969e8:	e0bffc17 	ldw	r2,-16(fp)
  1969ec:	10800017 	ldw	r2,0(r2)
  1969f0:	10800717 	ldw	r2,28(r2)
  1969f4:	e13ffc17 	ldw	r4,-16(fp)
  1969f8:	e17ffe17 	ldw	r5,-8(fp)
  1969fc:	e1bfff17 	ldw	r6,-4(fp)
  196a00:	103ee83a 	callr	r2
  196a04:	e0bffb15 	stw	r2,-20(fp)
  196a08:	00000506 	br	196a20 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  196a0c:	00bfde84 	movi	r2,-134
  196a10:	e0bffb15 	stw	r2,-20(fp)
  196a14:	00000206 	br	196a20 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  196a18:	00bfebc4 	movi	r2,-81
  196a1c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  196a20:	e0bffb17 	ldw	r2,-20(fp)
  196a24:	1000070e 	bge	r2,zero,196a44 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  196a28:	01969300 	call	196930 <alt_get_errno>
  196a2c:	1007883a 	mov	r3,r2
  196a30:	e0bffb17 	ldw	r2,-20(fp)
  196a34:	0085c83a 	sub	r2,zero,r2
  196a38:	18800015 	stw	r2,0(r3)
    rc = -1;
  196a3c:	00bfffc4 	movi	r2,-1
  196a40:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  196a44:	e0bffb17 	ldw	r2,-20(fp)
}
  196a48:	e037883a 	mov	sp,fp
  196a4c:	dfc00117 	ldw	ra,4(sp)
  196a50:	df000017 	ldw	fp,0(sp)
  196a54:	dec00204 	addi	sp,sp,8
  196a58:	f800283a 	ret

00196a5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  196a5c:	defffc04 	addi	sp,sp,-16
  196a60:	dfc00315 	stw	ra,12(sp)
  196a64:	df000215 	stw	fp,8(sp)
  196a68:	df000204 	addi	fp,sp,8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  196a6c:	0009883a 	mov	r4,zero
  196a70:	01971e80 	call	1971e8 <alt_irq_init>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  196a74:	0005303a 	rdctl	r2,status
  196a78:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  196a7c:	e0ffff17 	ldw	r3,-4(fp)
  196a80:	00bfff84 	movi	r2,-2
  196a84:	1884703a 	and	r2,r3,r2
  196a88:	1001703a 	wrctl	status,r2

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  196a8c:	019a10c0 	call	19a10c <chSysInit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  196a90:	019721c0 	call	19721c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  196a94:	010006b4 	movhi	r4,26
  196a98:	213d7304 	addi	r4,r4,-2612
  196a9c:	014006b4 	movhi	r5,26
  196aa0:	297d7304 	addi	r5,r5,-2612
  196aa4:	018006b4 	movhi	r6,26
  196aa8:	31bd7304 	addi	r6,r6,-2612
  196aac:	019a7840 	call	19a784 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  196ab0:	019a5340 	call	19a534 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  196ab4:	010006b4 	movhi	r4,26
  196ab8:	21296404 	addi	r4,r4,-23152
  196abc:	019b02c0 	call	19b02c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  196ac0:	d1270917 	ldw	r4,-25564(gp)
  196ac4:	d0e70a17 	ldw	r3,-25560(gp)
  196ac8:	d0a70b17 	ldw	r2,-25556(gp)
  196acc:	180b883a 	mov	r5,r3
  196ad0:	100d883a 	mov	r6,r2
  196ad4:	01802c00 	call	1802c0 <main>
  196ad8:	e0bffe15 	stw	r2,-8(fp)
  close(STDOUT_FILENO);
  196adc:	01000044 	movi	r4,1
  196ae0:	01962740 	call	196274 <close>
  exit (result);
  196ae4:	e13ffe17 	ldw	r4,-8(fp)
  196ae8:	019b0400 	call	19b040 <exit>

00196aec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  196aec:	defffe04 	addi	sp,sp,-8
  196af0:	df000115 	stw	fp,4(sp)
  196af4:	df000104 	addi	fp,sp,4
  196af8:	e13fff15 	stw	r4,-4(fp)
}
  196afc:	e037883a 	mov	sp,fp
  196b00:	df000017 	ldw	fp,0(sp)
  196b04:	dec00104 	addi	sp,sp,4
  196b08:	f800283a 	ret

00196b0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  196b0c:	defffe04 	addi	sp,sp,-8
  196b10:	df000115 	stw	fp,4(sp)
  196b14:	df000104 	addi	fp,sp,4
  196b18:	e13fff15 	stw	r4,-4(fp)
}
  196b1c:	e037883a 	mov	sp,fp
  196b20:	df000017 	ldw	fp,0(sp)
  196b24:	dec00104 	addi	sp,sp,4
  196b28:	f800283a 	ret

00196b2c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  196b2c:	defff204 	addi	sp,sp,-56
  196b30:	dfc00a15 	stw	ra,40(sp)
  196b34:	df000915 	stw	fp,36(sp)
  196b38:	df000904 	addi	fp,sp,36
  196b3c:	e1400215 	stw	r5,8(fp)
  196b40:	e1800315 	stw	r6,12(fp)
  196b44:	e1c00415 	stw	r7,16(fp)
  196b48:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  196b4c:	e0800204 	addi	r2,fp,8
  196b50:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  196b54:	e0bfff17 	ldw	r2,-4(fp)
  196b58:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  196b5c:	00007106 	br	196d24 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  196b60:	e0bff807 	ldb	r2,-32(fp)
  196b64:	10800960 	cmpeqi	r2,r2,37
  196b68:	1000041e 	bne	r2,zero,196b7c <alt_printf+0x50>
        {
            alt_putchar(c);
  196b6c:	e0bff807 	ldb	r2,-32(fp)
  196b70:	1009883a 	mov	r4,r2
  196b74:	0196d540 	call	196d54 <alt_putchar>
  196b78:	00006a06 	br	196d24 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  196b7c:	e0bff717 	ldw	r2,-36(fp)
  196b80:	10c00044 	addi	r3,r2,1
  196b84:	e0fff715 	stw	r3,-36(fp)
  196b88:	10800003 	ldbu	r2,0(r2)
  196b8c:	e0bff805 	stb	r2,-32(fp)
  196b90:	e0bff807 	ldb	r2,-32(fp)
  196b94:	10006226 	beq	r2,zero,196d20 <alt_printf+0x1f4>
            {
                if (c == '%')
  196b98:	e0bff807 	ldb	r2,-32(fp)
  196b9c:	10800958 	cmpnei	r2,r2,37
  196ba0:	1000041e 	bne	r2,zero,196bb4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  196ba4:	e0bff807 	ldb	r2,-32(fp)
  196ba8:	1009883a 	mov	r4,r2
  196bac:	0196d540 	call	196d54 <alt_putchar>
  196bb0:	00005c06 	br	196d24 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
  196bb4:	e0bff807 	ldb	r2,-32(fp)
  196bb8:	108018d8 	cmpnei	r2,r2,99
  196bbc:	1000081e 	bne	r2,zero,196be0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  196bc0:	e0bffe17 	ldw	r2,-8(fp)
  196bc4:	10c00104 	addi	r3,r2,4
  196bc8:	e0fffe15 	stw	r3,-8(fp)
  196bcc:	10800017 	ldw	r2,0(r2)
  196bd0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  196bd4:	e13ffd17 	ldw	r4,-12(fp)
  196bd8:	0196d540 	call	196d54 <alt_putchar>
  196bdc:	00005106 	br	196d24 <alt_printf+0x1f8>
                }
                else if (c == 'x')
  196be0:	e0bff807 	ldb	r2,-32(fp)
  196be4:	10801e18 	cmpnei	r2,r2,120
  196be8:	1000341e 	bne	r2,zero,196cbc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  196bec:	e0bffe17 	ldw	r2,-8(fp)
  196bf0:	10c00104 	addi	r3,r2,4
  196bf4:	e0fffe15 	stw	r3,-8(fp)
  196bf8:	10800017 	ldw	r2,0(r2)
  196bfc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  196c00:	e0bffb17 	ldw	r2,-20(fp)
  196c04:	1000031e 	bne	r2,zero,196c14 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  196c08:	01000c04 	movi	r4,48
  196c0c:	0196d540 	call	196d54 <alt_putchar>
                        continue;
  196c10:	00004406 	br	196d24 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  196c14:	00800704 	movi	r2,28
  196c18:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  196c1c:	00000306 	br	196c2c <alt_printf+0x100>
                        digit_shift -= 4;
  196c20:	e0bff917 	ldw	r2,-28(fp)
  196c24:	10bfff04 	addi	r2,r2,-4
  196c28:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  196c2c:	00c003c4 	movi	r3,15
  196c30:	e0bff917 	ldw	r2,-28(fp)
  196c34:	1884983a 	sll	r2,r3,r2
  196c38:	1007883a 	mov	r3,r2
  196c3c:	e0bffb17 	ldw	r2,-20(fp)
  196c40:	1884703a 	and	r2,r3,r2
  196c44:	103ff626 	beq	r2,zero,196c20 <__alt_data_end+0xfff96c20>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  196c48:	00001906 	br	196cb0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  196c4c:	00c003c4 	movi	r3,15
  196c50:	e0bff917 	ldw	r2,-28(fp)
  196c54:	1884983a 	sll	r2,r3,r2
  196c58:	1007883a 	mov	r3,r2
  196c5c:	e0bffb17 	ldw	r2,-20(fp)
  196c60:	1886703a 	and	r3,r3,r2
  196c64:	e0bff917 	ldw	r2,-28(fp)
  196c68:	1884d83a 	srl	r2,r3,r2
  196c6c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  196c70:	e0bffc17 	ldw	r2,-16(fp)
  196c74:	108002a8 	cmpgeui	r2,r2,10
  196c78:	1000041e 	bne	r2,zero,196c8c <alt_printf+0x160>
                            c = '0' + digit;
  196c7c:	e0bffc17 	ldw	r2,-16(fp)
  196c80:	10800c04 	addi	r2,r2,48
  196c84:	e0bff805 	stb	r2,-32(fp)
  196c88:	00000306 	br	196c98 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  196c8c:	e0bffc17 	ldw	r2,-16(fp)
  196c90:	108015c4 	addi	r2,r2,87
  196c94:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  196c98:	e0bff807 	ldb	r2,-32(fp)
  196c9c:	1009883a 	mov	r4,r2
  196ca0:	0196d540 	call	196d54 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  196ca4:	e0bff917 	ldw	r2,-28(fp)
  196ca8:	10bfff04 	addi	r2,r2,-4
  196cac:	e0bff915 	stw	r2,-28(fp)
  196cb0:	e0bff917 	ldw	r2,-28(fp)
  196cb4:	103fe50e 	bge	r2,zero,196c4c <__alt_data_end+0xfff96c4c>
  196cb8:	00001a06 	br	196d24 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  196cbc:	e0bff807 	ldb	r2,-32(fp)
  196cc0:	10801cd8 	cmpnei	r2,r2,115
  196cc4:	1000151e 	bne	r2,zero,196d1c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  196cc8:	e0bffe17 	ldw	r2,-8(fp)
  196ccc:	10c00104 	addi	r3,r2,4
  196cd0:	e0fffe15 	stw	r3,-8(fp)
  196cd4:	10800017 	ldw	r2,0(r2)
  196cd8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  196cdc:	00000906 	br	196d04 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  196ce0:	e0bffa17 	ldw	r2,-24(fp)
  196ce4:	10c00044 	addi	r3,r2,1
  196ce8:	e0fffa15 	stw	r3,-24(fp)
  196cec:	10800003 	ldbu	r2,0(r2)
  196cf0:	10803fcc 	andi	r2,r2,255
  196cf4:	1080201c 	xori	r2,r2,128
  196cf8:	10bfe004 	addi	r2,r2,-128
  196cfc:	1009883a 	mov	r4,r2
  196d00:	0196d540 	call	196d54 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  196d04:	e0bffa17 	ldw	r2,-24(fp)
  196d08:	10800003 	ldbu	r2,0(r2)
  196d0c:	10803fcc 	andi	r2,r2,255
  196d10:	1080201c 	xori	r2,r2,128
  196d14:	10bfe004 	addi	r2,r2,-128
  196d18:	103ff11e 	bne	r2,zero,196ce0 <__alt_data_end+0xfff96ce0>
  196d1c:	00000106 	br	196d24 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  196d20:	00000706 	br	196d40 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  196d24:	e0bff717 	ldw	r2,-36(fp)
  196d28:	10c00044 	addi	r3,r2,1
  196d2c:	e0fff715 	stw	r3,-36(fp)
  196d30:	10800003 	ldbu	r2,0(r2)
  196d34:	e0bff805 	stb	r2,-32(fp)
  196d38:	e0bff807 	ldb	r2,-32(fp)
  196d3c:	103f881e 	bne	r2,zero,196b60 <__alt_data_end+0xfff96b60>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  196d40:	e037883a 	mov	sp,fp
  196d44:	dfc00117 	ldw	ra,4(sp)
  196d48:	df000017 	ldw	fp,0(sp)
  196d4c:	dec00504 	addi	sp,sp,20
  196d50:	f800283a 	ret

00196d54 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  196d54:	defffd04 	addi	sp,sp,-12
  196d58:	dfc00215 	stw	ra,8(sp)
  196d5c:	df000115 	stw	fp,4(sp)
  196d60:	df000104 	addi	fp,sp,4
  196d64:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  196d68:	008006b4 	movhi	r2,26
  196d6c:	10846704 	addi	r2,r2,4508
  196d70:	10800017 	ldw	r2,0(r2)
  196d74:	10800217 	ldw	r2,8(r2)
  196d78:	e13fff17 	ldw	r4,-4(fp)
  196d7c:	100b883a 	mov	r5,r2
  196d80:	018fcc00 	call	18fcc0 <putc>
#endif
#endif
}
  196d84:	e037883a 	mov	sp,fp
  196d88:	dfc00117 	ldw	ra,4(sp)
  196d8c:	df000017 	ldw	fp,0(sp)
  196d90:	dec00204 	addi	sp,sp,8
  196d94:	f800283a 	ret

00196d98 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  196d98:	defffd04 	addi	sp,sp,-12
  196d9c:	dfc00215 	stw	ra,8(sp)
  196da0:	df000115 	stw	fp,4(sp)
  196da4:	df000104 	addi	fp,sp,4
  196da8:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  196dac:	008006b4 	movhi	r2,26
  196db0:	10846704 	addi	r2,r2,4508
  196db4:	10800017 	ldw	r2,0(r2)
  196db8:	10800217 	ldw	r2,8(r2)
  196dbc:	e13fff17 	ldw	r4,-4(fp)
  196dc0:	100b883a 	mov	r5,r2
  196dc4:	019b1140 	call	19b114 <fputs>
#endif
#endif
}
  196dc8:	e037883a 	mov	sp,fp
  196dcc:	dfc00117 	ldw	ra,4(sp)
  196dd0:	df000017 	ldw	fp,0(sp)
  196dd4:	dec00204 	addi	sp,sp,8
  196dd8:	f800283a 	ret

00196ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  196ddc:	defffe04 	addi	sp,sp,-8
  196de0:	dfc00115 	stw	ra,4(sp)
  196de4:	df000015 	stw	fp,0(sp)
  196de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  196dec:	008006b4 	movhi	r2,26
  196df0:	10847104 	addi	r2,r2,4548
  196df4:	10800017 	ldw	r2,0(r2)
  196df8:	10000526 	beq	r2,zero,196e10 <alt_get_errno+0x34>
  196dfc:	008006b4 	movhi	r2,26
  196e00:	10847104 	addi	r2,r2,4548
  196e04:	10800017 	ldw	r2,0(r2)
  196e08:	103ee83a 	callr	r2
  196e0c:	00000206 	br	196e18 <alt_get_errno+0x3c>
  196e10:	008006b4 	movhi	r2,26
  196e14:	108b6b04 	addi	r2,r2,11692
}
  196e18:	e037883a 	mov	sp,fp
  196e1c:	dfc00117 	ldw	ra,4(sp)
  196e20:	df000017 	ldw	fp,0(sp)
  196e24:	dec00204 	addi	sp,sp,8
  196e28:	f800283a 	ret

00196e2c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  196e2c:	defff904 	addi	sp,sp,-28
  196e30:	dfc00615 	stw	ra,24(sp)
  196e34:	df000515 	stw	fp,20(sp)
  196e38:	df000504 	addi	fp,sp,20
  196e3c:	e13ffd15 	stw	r4,-12(fp)
  196e40:	e17ffe15 	stw	r5,-8(fp)
  196e44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  196e48:	e0bffd17 	ldw	r2,-12(fp)
  196e4c:	10000816 	blt	r2,zero,196e70 <read+0x44>
  196e50:	e13ffd17 	ldw	r4,-12(fp)
  196e54:	01400304 	movi	r5,12
  196e58:	0187dd80 	call	187dd8 <__mulsi3>
  196e5c:	1007883a 	mov	r3,r2
  196e60:	008006b4 	movhi	r2,26
  196e64:	10bfbb04 	addi	r2,r2,-276
  196e68:	1885883a 	add	r2,r3,r2
  196e6c:	00000106 	br	196e74 <read+0x48>
  196e70:	0005883a 	mov	r2,zero
  196e74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  196e78:	e0bffb17 	ldw	r2,-20(fp)
  196e7c:	10002226 	beq	r2,zero,196f08 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  196e80:	e0bffb17 	ldw	r2,-20(fp)
  196e84:	10800217 	ldw	r2,8(r2)
  196e88:	108000cc 	andi	r2,r2,3
  196e8c:	10800060 	cmpeqi	r2,r2,1
  196e90:	1000181e 	bne	r2,zero,196ef4 <read+0xc8>
        (fd->dev->read))
  196e94:	e0bffb17 	ldw	r2,-20(fp)
  196e98:	10800017 	ldw	r2,0(r2)
  196e9c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  196ea0:	10001426 	beq	r2,zero,196ef4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  196ea4:	e0bffb17 	ldw	r2,-20(fp)
  196ea8:	10800017 	ldw	r2,0(r2)
  196eac:	10800517 	ldw	r2,20(r2)
  196eb0:	e0ffff17 	ldw	r3,-4(fp)
  196eb4:	e13ffb17 	ldw	r4,-20(fp)
  196eb8:	e17ffe17 	ldw	r5,-8(fp)
  196ebc:	180d883a 	mov	r6,r3
  196ec0:	103ee83a 	callr	r2
  196ec4:	e0bffc15 	stw	r2,-16(fp)
  196ec8:	e0bffc17 	ldw	r2,-16(fp)
  196ecc:	1000070e 	bge	r2,zero,196eec <read+0xc0>
        {
          ALT_ERRNO = -rval;
  196ed0:	0196ddc0 	call	196ddc <alt_get_errno>
  196ed4:	1007883a 	mov	r3,r2
  196ed8:	e0bffc17 	ldw	r2,-16(fp)
  196edc:	0085c83a 	sub	r2,zero,r2
  196ee0:	18800015 	stw	r2,0(r3)
          return -1;
  196ee4:	00bfffc4 	movi	r2,-1
  196ee8:	00000c06 	br	196f1c <read+0xf0>
        }
        return rval;
  196eec:	e0bffc17 	ldw	r2,-16(fp)
  196ef0:	00000a06 	br	196f1c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  196ef4:	0196ddc0 	call	196ddc <alt_get_errno>
  196ef8:	1007883a 	mov	r3,r2
  196efc:	00800344 	movi	r2,13
  196f00:	18800015 	stw	r2,0(r3)
  196f04:	00000406 	br	196f18 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  196f08:	0196ddc0 	call	196ddc <alt_get_errno>
  196f0c:	1007883a 	mov	r3,r2
  196f10:	00801444 	movi	r2,81
  196f14:	18800015 	stw	r2,0(r3)
  }
  return -1;
  196f18:	00bfffc4 	movi	r2,-1
}
  196f1c:	e037883a 	mov	sp,fp
  196f20:	dfc00117 	ldw	ra,4(sp)
  196f24:	df000017 	ldw	fp,0(sp)
  196f28:	dec00204 	addi	sp,sp,8
  196f2c:	f800283a 	ret

00196f30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  196f30:	defffc04 	addi	sp,sp,-16
  196f34:	dfc00315 	stw	ra,12(sp)
  196f38:	df000215 	stw	fp,8(sp)
  196f3c:	dc000115 	stw	r16,4(sp)
  196f40:	df000204 	addi	fp,sp,8
  196f44:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  196f48:	e0bffe17 	ldw	r2,-8(fp)
  196f4c:	108000d0 	cmplti	r2,r2,3
  196f50:	1000111e 	bne	r2,zero,196f98 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  196f54:	040006b4 	movhi	r16,26
  196f58:	843fbb04 	addi	r16,r16,-276
  196f5c:	e0bffe17 	ldw	r2,-8(fp)
  196f60:	1009883a 	mov	r4,r2
  196f64:	01400304 	movi	r5,12
  196f68:	0187dd80 	call	187dd8 <__mulsi3>
  196f6c:	10800204 	addi	r2,r2,8
  196f70:	8085883a 	add	r2,r16,r2
  196f74:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  196f78:	040006b4 	movhi	r16,26
  196f7c:	843fbb04 	addi	r16,r16,-276
  196f80:	e0bffe17 	ldw	r2,-8(fp)
  196f84:	1009883a 	mov	r4,r2
  196f88:	01400304 	movi	r5,12
  196f8c:	0187dd80 	call	187dd8 <__mulsi3>
  196f90:	8085883a 	add	r2,r16,r2
  196f94:	10000015 	stw	zero,0(r2)
  }
}
  196f98:	e6ffff04 	addi	sp,fp,-4
  196f9c:	dfc00217 	ldw	ra,8(sp)
  196fa0:	df000117 	ldw	fp,4(sp)
  196fa4:	dc000017 	ldw	r16,0(sp)
  196fa8:	dec00304 	addi	sp,sp,12
  196fac:	f800283a 	ret

00196fb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  196fb0:	defff904 	addi	sp,sp,-28
  196fb4:	df000615 	stw	fp,24(sp)
  196fb8:	df000604 	addi	fp,sp,24
  196fbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  196fc0:	0005303a 	rdctl	r2,status
  196fc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  196fc8:	e0fffc17 	ldw	r3,-16(fp)
  196fcc:	00bfff84 	movi	r2,-2
  196fd0:	1884703a 	and	r2,r3,r2
  196fd4:	1001703a 	wrctl	status,r2
  
  return context;
  196fd8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  196fdc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  196fe0:	d0a00f17 	ldw	r2,-32708(gp)
  196fe4:	10c000c4 	addi	r3,r2,3
  196fe8:	00bfff04 	movi	r2,-4
  196fec:	1884703a 	and	r2,r3,r2
  196ff0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  196ff4:	d0e00f17 	ldw	r3,-32708(gp)
  196ff8:	e0bfff17 	ldw	r2,-4(fp)
  196ffc:	1887883a 	add	r3,r3,r2
  197000:	00800834 	movhi	r2,32
  197004:	10800004 	addi	r2,r2,0
  197008:	10c0062e 	bgeu	r2,r3,197024 <sbrk+0x74>
  19700c:	e0bffa17 	ldw	r2,-24(fp)
  197010:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  197014:	e0bffd17 	ldw	r2,-12(fp)
  197018:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  19701c:	00bfffc4 	movi	r2,-1
  197020:	00000b06 	br	197050 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  197024:	d0a00f17 	ldw	r2,-32708(gp)
  197028:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  19702c:	d0e00f17 	ldw	r3,-32708(gp)
  197030:	e0bfff17 	ldw	r2,-4(fp)
  197034:	1885883a 	add	r2,r3,r2
  197038:	d0a00f15 	stw	r2,-32708(gp)
  19703c:	e0bffa17 	ldw	r2,-24(fp)
  197040:	e0bffe15 	stw	r2,-8(fp)
  197044:	e0bffe17 	ldw	r2,-8(fp)
  197048:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  19704c:	e0bffb17 	ldw	r2,-20(fp)
} 
  197050:	e037883a 	mov	sp,fp
  197054:	df000017 	ldw	fp,0(sp)
  197058:	dec00104 	addi	sp,sp,4
  19705c:	f800283a 	ret

00197060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  197060:	defffe04 	addi	sp,sp,-8
  197064:	dfc00115 	stw	ra,4(sp)
  197068:	df000015 	stw	fp,0(sp)
  19706c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  197070:	008006b4 	movhi	r2,26
  197074:	10847104 	addi	r2,r2,4548
  197078:	10800017 	ldw	r2,0(r2)
  19707c:	10000526 	beq	r2,zero,197094 <alt_get_errno+0x34>
  197080:	008006b4 	movhi	r2,26
  197084:	10847104 	addi	r2,r2,4548
  197088:	10800017 	ldw	r2,0(r2)
  19708c:	103ee83a 	callr	r2
  197090:	00000206 	br	19709c <alt_get_errno+0x3c>
  197094:	008006b4 	movhi	r2,26
  197098:	108b6b04 	addi	r2,r2,11692
}
  19709c:	e037883a 	mov	sp,fp
  1970a0:	dfc00117 	ldw	ra,4(sp)
  1970a4:	df000017 	ldw	fp,0(sp)
  1970a8:	dec00204 	addi	sp,sp,8
  1970ac:	f800283a 	ret

001970b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  1970b0:	defff904 	addi	sp,sp,-28
  1970b4:	dfc00615 	stw	ra,24(sp)
  1970b8:	df000515 	stw	fp,20(sp)
  1970bc:	df000504 	addi	fp,sp,20
  1970c0:	e13ffd15 	stw	r4,-12(fp)
  1970c4:	e17ffe15 	stw	r5,-8(fp)
  1970c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1970cc:	e0bffd17 	ldw	r2,-12(fp)
  1970d0:	10000816 	blt	r2,zero,1970f4 <write+0x44>
  1970d4:	e13ffd17 	ldw	r4,-12(fp)
  1970d8:	01400304 	movi	r5,12
  1970dc:	0187dd80 	call	187dd8 <__mulsi3>
  1970e0:	1007883a 	mov	r3,r2
  1970e4:	008006b4 	movhi	r2,26
  1970e8:	10bfbb04 	addi	r2,r2,-276
  1970ec:	1885883a 	add	r2,r3,r2
  1970f0:	00000106 	br	1970f8 <write+0x48>
  1970f4:	0005883a 	mov	r2,zero
  1970f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  1970fc:	e0bffb17 	ldw	r2,-20(fp)
  197100:	10002126 	beq	r2,zero,197188 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  197104:	e0bffb17 	ldw	r2,-20(fp)
  197108:	10800217 	ldw	r2,8(r2)
  19710c:	108000cc 	andi	r2,r2,3
  197110:	10001826 	beq	r2,zero,197174 <write+0xc4>
  197114:	e0bffb17 	ldw	r2,-20(fp)
  197118:	10800017 	ldw	r2,0(r2)
  19711c:	10800617 	ldw	r2,24(r2)
  197120:	10001426 	beq	r2,zero,197174 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  197124:	e0bffb17 	ldw	r2,-20(fp)
  197128:	10800017 	ldw	r2,0(r2)
  19712c:	10800617 	ldw	r2,24(r2)
  197130:	e0ffff17 	ldw	r3,-4(fp)
  197134:	e13ffb17 	ldw	r4,-20(fp)
  197138:	e17ffe17 	ldw	r5,-8(fp)
  19713c:	180d883a 	mov	r6,r3
  197140:	103ee83a 	callr	r2
  197144:	e0bffc15 	stw	r2,-16(fp)
  197148:	e0bffc17 	ldw	r2,-16(fp)
  19714c:	1000070e 	bge	r2,zero,19716c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  197150:	01970600 	call	197060 <alt_get_errno>
  197154:	1007883a 	mov	r3,r2
  197158:	e0bffc17 	ldw	r2,-16(fp)
  19715c:	0085c83a 	sub	r2,zero,r2
  197160:	18800015 	stw	r2,0(r3)
        return -1;
  197164:	00bfffc4 	movi	r2,-1
  197168:	00000c06 	br	19719c <write+0xec>
      }
      return rval;
  19716c:	e0bffc17 	ldw	r2,-16(fp)
  197170:	00000a06 	br	19719c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  197174:	01970600 	call	197060 <alt_get_errno>
  197178:	1007883a 	mov	r3,r2
  19717c:	00800344 	movi	r2,13
  197180:	18800015 	stw	r2,0(r3)
  197184:	00000406 	br	197198 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  197188:	01970600 	call	197060 <alt_get_errno>
  19718c:	1007883a 	mov	r3,r2
  197190:	00801444 	movi	r2,81
  197194:	18800015 	stw	r2,0(r3)
  }
  return -1;
  197198:	00bfffc4 	movi	r2,-1
}
  19719c:	e037883a 	mov	sp,fp
  1971a0:	dfc00117 	ldw	ra,4(sp)
  1971a4:	df000017 	ldw	fp,0(sp)
  1971a8:	dec00204 	addi	sp,sp,8
  1971ac:	f800283a 	ret

001971b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  1971b0:	defffd04 	addi	sp,sp,-12
  1971b4:	dfc00215 	stw	ra,8(sp)
  1971b8:	df000115 	stw	fp,4(sp)
  1971bc:	df000104 	addi	fp,sp,4
  1971c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  1971c4:	e13fff17 	ldw	r4,-4(fp)
  1971c8:	014006b4 	movhi	r5,26
  1971cc:	29446e04 	addi	r5,r5,4536
  1971d0:	019a4900 	call	19a490 <alt_dev_llist_insert>
}
  1971d4:	e037883a 	mov	sp,fp
  1971d8:	dfc00117 	ldw	ra,4(sp)
  1971dc:	df000017 	ldw	fp,0(sp)
  1971e0:	dec00204 	addi	sp,sp,8
  1971e4:	f800283a 	ret

001971e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  1971e8:	defffd04 	addi	sp,sp,-12
  1971ec:	dfc00215 	stw	ra,8(sp)
  1971f0:	df000115 	stw	fp,4(sp)
  1971f4:	df000104 	addi	fp,sp,4
  1971f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  1971fc:	019ac3c0 	call	19ac3c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  197200:	00800044 	movi	r2,1
  197204:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  197208:	e037883a 	mov	sp,fp
  19720c:	dfc00117 	ldw	ra,4(sp)
  197210:	df000017 	ldw	fp,0(sp)
  197214:	dec00204 	addi	sp,sp,8
  197218:	f800283a 	ret

0019721c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  19721c:	defffe04 	addi	sp,sp,-8
  197220:	dfc00115 	stw	ra,4(sp)
  197224:	df000015 	stw	fp,0(sp)
  197228:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  19722c:	01000834 	movhi	r4,32
  197230:	21040804 	addi	r4,r4,4128
  197234:	000b883a 	mov	r5,zero
  197238:	01800044 	movi	r6,1
  19723c:	01c0fa04 	movi	r7,1000
  197240:	0197d580 	call	197d58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  197244:	010006b4 	movhi	r4,26
  197248:	21002504 	addi	r4,r4,148
  19724c:	000b883a 	mov	r5,zero
  197250:	000d883a 	mov	r6,zero
  197254:	01973fc0 	call	1973fc <altera_avalon_jtag_uart_init>
  197258:	010006b4 	movhi	r4,26
  19725c:	21001b04 	addi	r4,r4,108
  197260:	01971b00 	call	1971b0 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  197264:	010006b4 	movhi	r4,26
  197268:	21043d04 	addi	r4,r4,4340
  19726c:	000b883a 	mov	r5,zero
  197270:	018000c4 	movi	r6,3
  197274:	0197ef00 	call	197ef0 <altera_avalon_uart_init>
  197278:	010006b4 	movhi	r4,26
  19727c:	21043304 	addi	r4,r4,4300
  197280:	01971b00 	call	1971b0 <alt_dev_reg>
}
  197284:	e037883a 	mov	sp,fp
  197288:	dfc00117 	ldw	ra,4(sp)
  19728c:	df000017 	ldw	fp,0(sp)
  197290:	dec00204 	addi	sp,sp,8
  197294:	f800283a 	ret

00197298 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  197298:	defffa04 	addi	sp,sp,-24
  19729c:	dfc00515 	stw	ra,20(sp)
  1972a0:	df000415 	stw	fp,16(sp)
  1972a4:	df000404 	addi	fp,sp,16
  1972a8:	e13ffd15 	stw	r4,-12(fp)
  1972ac:	e17ffe15 	stw	r5,-8(fp)
  1972b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  1972b4:	e0bffd17 	ldw	r2,-12(fp)
  1972b8:	10800017 	ldw	r2,0(r2)
  1972bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  1972c0:	e0bffc17 	ldw	r2,-16(fp)
  1972c4:	10c00a04 	addi	r3,r2,40
  1972c8:	e0bffd17 	ldw	r2,-12(fp)
  1972cc:	10800217 	ldw	r2,8(r2)
  1972d0:	1809883a 	mov	r4,r3
  1972d4:	e17ffe17 	ldw	r5,-8(fp)
  1972d8:	e1bfff17 	ldw	r6,-4(fp)
  1972dc:	100f883a 	mov	r7,r2
  1972e0:	01978c00 	call	1978c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  1972e4:	e037883a 	mov	sp,fp
  1972e8:	dfc00117 	ldw	ra,4(sp)
  1972ec:	df000017 	ldw	fp,0(sp)
  1972f0:	dec00204 	addi	sp,sp,8
  1972f4:	f800283a 	ret

001972f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  1972f8:	defffa04 	addi	sp,sp,-24
  1972fc:	dfc00515 	stw	ra,20(sp)
  197300:	df000415 	stw	fp,16(sp)
  197304:	df000404 	addi	fp,sp,16
  197308:	e13ffd15 	stw	r4,-12(fp)
  19730c:	e17ffe15 	stw	r5,-8(fp)
  197310:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  197314:	e0bffd17 	ldw	r2,-12(fp)
  197318:	10800017 	ldw	r2,0(r2)
  19731c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  197320:	e0bffc17 	ldw	r2,-16(fp)
  197324:	10c00a04 	addi	r3,r2,40
  197328:	e0bffd17 	ldw	r2,-12(fp)
  19732c:	10800217 	ldw	r2,8(r2)
  197330:	1809883a 	mov	r4,r3
  197334:	e17ffe17 	ldw	r5,-8(fp)
  197338:	e1bfff17 	ldw	r6,-4(fp)
  19733c:	100f883a 	mov	r7,r2
  197340:	0197acc0 	call	197acc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  197344:	e037883a 	mov	sp,fp
  197348:	dfc00117 	ldw	ra,4(sp)
  19734c:	df000017 	ldw	fp,0(sp)
  197350:	dec00204 	addi	sp,sp,8
  197354:	f800283a 	ret

00197358 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  197358:	defffc04 	addi	sp,sp,-16
  19735c:	dfc00315 	stw	ra,12(sp)
  197360:	df000215 	stw	fp,8(sp)
  197364:	df000204 	addi	fp,sp,8
  197368:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  19736c:	e0bfff17 	ldw	r2,-4(fp)
  197370:	10800017 	ldw	r2,0(r2)
  197374:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  197378:	e0bffe17 	ldw	r2,-8(fp)
  19737c:	10c00a04 	addi	r3,r2,40
  197380:	e0bfff17 	ldw	r2,-4(fp)
  197384:	10800217 	ldw	r2,8(r2)
  197388:	1809883a 	mov	r4,r3
  19738c:	100b883a 	mov	r5,r2
  197390:	019776c0 	call	19776c <altera_avalon_jtag_uart_close>
}
  197394:	e037883a 	mov	sp,fp
  197398:	dfc00117 	ldw	ra,4(sp)
  19739c:	df000017 	ldw	fp,0(sp)
  1973a0:	dec00204 	addi	sp,sp,8
  1973a4:	f800283a 	ret

001973a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  1973a8:	defffa04 	addi	sp,sp,-24
  1973ac:	dfc00515 	stw	ra,20(sp)
  1973b0:	df000415 	stw	fp,16(sp)
  1973b4:	df000404 	addi	fp,sp,16
  1973b8:	e13ffd15 	stw	r4,-12(fp)
  1973bc:	e17ffe15 	stw	r5,-8(fp)
  1973c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  1973c4:	e0bffd17 	ldw	r2,-12(fp)
  1973c8:	10800017 	ldw	r2,0(r2)
  1973cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  1973d0:	e0bffc17 	ldw	r2,-16(fp)
  1973d4:	10800a04 	addi	r2,r2,40
  1973d8:	1009883a 	mov	r4,r2
  1973dc:	e17ffe17 	ldw	r5,-8(fp)
  1973e0:	e1bfff17 	ldw	r6,-4(fp)
  1973e4:	01977d40 	call	1977d4 <altera_avalon_jtag_uart_ioctl>
}
  1973e8:	e037883a 	mov	sp,fp
  1973ec:	dfc00117 	ldw	ra,4(sp)
  1973f0:	df000017 	ldw	fp,0(sp)
  1973f4:	dec00204 	addi	sp,sp,8
  1973f8:	f800283a 	ret

001973fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  1973fc:	defffa04 	addi	sp,sp,-24
  197400:	dfc00515 	stw	ra,20(sp)
  197404:	df000415 	stw	fp,16(sp)
  197408:	df000404 	addi	fp,sp,16
  19740c:	e13ffd15 	stw	r4,-12(fp)
  197410:	e17ffe15 	stw	r5,-8(fp)
  197414:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  197418:	e0bffd17 	ldw	r2,-12(fp)
  19741c:	00c00044 	movi	r3,1
  197420:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  197424:	e0bffd17 	ldw	r2,-12(fp)
  197428:	10800017 	ldw	r2,0(r2)
  19742c:	10800104 	addi	r2,r2,4
  197430:	1007883a 	mov	r3,r2
  197434:	e0bffd17 	ldw	r2,-12(fp)
  197438:	10800817 	ldw	r2,32(r2)
  19743c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  197440:	e0fffe17 	ldw	r3,-8(fp)
  197444:	e0bfff17 	ldw	r2,-4(fp)
  197448:	d8000015 	stw	zero,0(sp)
  19744c:	1809883a 	mov	r4,r3
  197450:	100b883a 	mov	r5,r2
  197454:	01800674 	movhi	r6,25
  197458:	319d3004 	addi	r6,r6,29888
  19745c:	e1fffd17 	ldw	r7,-12(fp)
  197460:	01964800 	call	196480 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  197464:	e0bffd17 	ldw	r2,-12(fp)
  197468:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  19746c:	e0bffd17 	ldw	r2,-12(fp)
  197470:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  197474:	008006b4 	movhi	r2,26
  197478:	108b7304 	addi	r2,r2,11724
  19747c:	10800017 	ldw	r2,0(r2)
  197480:	1809883a 	mov	r4,r3
  197484:	100b883a 	mov	r5,r2
  197488:	01800674 	movhi	r6,25
  19748c:	319db104 	addi	r6,r6,30404
  197490:	e1fffd17 	ldw	r7,-12(fp)
  197494:	019a2e40 	call	19a2e4 <alt_alarm_start>
  197498:	1000040e 	bge	r2,zero,1974ac <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  19749c:	e0fffd17 	ldw	r3,-12(fp)
  1974a0:	00a00034 	movhi	r2,32768
  1974a4:	10bfffc4 	addi	r2,r2,-1
  1974a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  1974ac:	e037883a 	mov	sp,fp
  1974b0:	dfc00117 	ldw	ra,4(sp)
  1974b4:	df000017 	ldw	fp,0(sp)
  1974b8:	dec00204 	addi	sp,sp,8
  1974bc:	f800283a 	ret

001974c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  1974c0:	defff804 	addi	sp,sp,-32
  1974c4:	df000715 	stw	fp,28(sp)
  1974c8:	df000704 	addi	fp,sp,28
  1974cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  1974d0:	e0bfff17 	ldw	r2,-4(fp)
  1974d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  1974d8:	e0bffb17 	ldw	r2,-20(fp)
  1974dc:	10800017 	ldw	r2,0(r2)
  1974e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  1974e4:	e0bffc17 	ldw	r2,-16(fp)
  1974e8:	10800104 	addi	r2,r2,4
  1974ec:	10800037 	ldwio	r2,0(r2)
  1974f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  1974f4:	e0bffd17 	ldw	r2,-12(fp)
  1974f8:	1080c00c 	andi	r2,r2,768
  1974fc:	1000011e 	bne	r2,zero,197504 <altera_avalon_jtag_uart_irq+0x44>
      break;
  197500:	00006c06 	br	1976b4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  197504:	e0bffd17 	ldw	r2,-12(fp)
  197508:	1080400c 	andi	r2,r2,256
  19750c:	10003426 	beq	r2,zero,1975e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  197510:	00800074 	movhi	r2,1
  197514:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  197518:	e0bffb17 	ldw	r2,-20(fp)
  19751c:	10800a17 	ldw	r2,40(r2)
  197520:	10800044 	addi	r2,r2,1
  197524:	1081ffcc 	andi	r2,r2,2047
  197528:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  19752c:	e0bffb17 	ldw	r2,-20(fp)
  197530:	10c00b17 	ldw	r3,44(r2)
  197534:	e0bffe17 	ldw	r2,-8(fp)
  197538:	1880011e 	bne	r3,r2,197540 <altera_avalon_jtag_uart_irq+0x80>
          break;
  19753c:	00001606 	br	197598 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  197540:	e0bffc17 	ldw	r2,-16(fp)
  197544:	10800037 	ldwio	r2,0(r2)
  197548:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  19754c:	e0bff917 	ldw	r2,-28(fp)
  197550:	10a0000c 	andi	r2,r2,32768
  197554:	1000011e 	bne	r2,zero,19755c <altera_avalon_jtag_uart_irq+0x9c>
          break;
  197558:	00000f06 	br	197598 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  19755c:	e0bffb17 	ldw	r2,-20(fp)
  197560:	10800a17 	ldw	r2,40(r2)
  197564:	e0fff917 	ldw	r3,-28(fp)
  197568:	1809883a 	mov	r4,r3
  19756c:	e0fffb17 	ldw	r3,-20(fp)
  197570:	1885883a 	add	r2,r3,r2
  197574:	10800e04 	addi	r2,r2,56
  197578:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  19757c:	e0bffb17 	ldw	r2,-20(fp)
  197580:	10800a17 	ldw	r2,40(r2)
  197584:	10800044 	addi	r2,r2,1
  197588:	10c1ffcc 	andi	r3,r2,2047
  19758c:	e0bffb17 	ldw	r2,-20(fp)
  197590:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  197594:	003fe006 	br	197518 <__alt_data_end+0xfff97518>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  197598:	e0bff917 	ldw	r2,-28(fp)
  19759c:	10bfffec 	andhi	r2,r2,65535
  1975a0:	10000f26 	beq	r2,zero,1975e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1975a4:	e0bffb17 	ldw	r2,-20(fp)
  1975a8:	10c00817 	ldw	r3,32(r2)
  1975ac:	00bfff84 	movi	r2,-2
  1975b0:	1886703a 	and	r3,r3,r2
  1975b4:	e0bffb17 	ldw	r2,-20(fp)
  1975b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  1975bc:	e0bffc17 	ldw	r2,-16(fp)
  1975c0:	10800104 	addi	r2,r2,4
  1975c4:	1007883a 	mov	r3,r2
  1975c8:	e0bffb17 	ldw	r2,-20(fp)
  1975cc:	10800817 	ldw	r2,32(r2)
  1975d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  1975d4:	e0bffc17 	ldw	r2,-16(fp)
  1975d8:	10800104 	addi	r2,r2,4
  1975dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  1975e0:	e0bffd17 	ldw	r2,-12(fp)
  1975e4:	1080800c 	andi	r2,r2,512
  1975e8:	10003126 	beq	r2,zero,1976b0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  1975ec:	e0bffd17 	ldw	r2,-12(fp)
  1975f0:	1004d43a 	srli	r2,r2,16
  1975f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  1975f8:	00001406 	br	19764c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  1975fc:	e0bffc17 	ldw	r2,-16(fp)
  197600:	e0fffb17 	ldw	r3,-20(fp)
  197604:	18c00d17 	ldw	r3,52(r3)
  197608:	e13ffb17 	ldw	r4,-20(fp)
  19760c:	20c7883a 	add	r3,r4,r3
  197610:	18c20e04 	addi	r3,r3,2104
  197614:	18c00003 	ldbu	r3,0(r3)
  197618:	18c03fcc 	andi	r3,r3,255
  19761c:	18c0201c 	xori	r3,r3,128
  197620:	18ffe004 	addi	r3,r3,-128
  197624:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  197628:	e0bffb17 	ldw	r2,-20(fp)
  19762c:	10800d17 	ldw	r2,52(r2)
  197630:	10800044 	addi	r2,r2,1
  197634:	10c1ffcc 	andi	r3,r2,2047
  197638:	e0bffb17 	ldw	r2,-20(fp)
  19763c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  197640:	e0bffa17 	ldw	r2,-24(fp)
  197644:	10bfffc4 	addi	r2,r2,-1
  197648:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  19764c:	e0bffa17 	ldw	r2,-24(fp)
  197650:	10000526 	beq	r2,zero,197668 <altera_avalon_jtag_uart_irq+0x1a8>
  197654:	e0bffb17 	ldw	r2,-20(fp)
  197658:	10c00d17 	ldw	r3,52(r2)
  19765c:	e0bffb17 	ldw	r2,-20(fp)
  197660:	10800c17 	ldw	r2,48(r2)
  197664:	18bfe51e 	bne	r3,r2,1975fc <__alt_data_end+0xfff975fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  197668:	e0bffa17 	ldw	r2,-24(fp)
  19766c:	10001026 	beq	r2,zero,1976b0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  197670:	e0bffb17 	ldw	r2,-20(fp)
  197674:	10c00817 	ldw	r3,32(r2)
  197678:	00bfff44 	movi	r2,-3
  19767c:	1886703a 	and	r3,r3,r2
  197680:	e0bffb17 	ldw	r2,-20(fp)
  197684:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  197688:	e0bffb17 	ldw	r2,-20(fp)
  19768c:	10800017 	ldw	r2,0(r2)
  197690:	10800104 	addi	r2,r2,4
  197694:	1007883a 	mov	r3,r2
  197698:	e0bffb17 	ldw	r2,-20(fp)
  19769c:	10800817 	ldw	r2,32(r2)
  1976a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  1976a4:	e0bffc17 	ldw	r2,-16(fp)
  1976a8:	10800104 	addi	r2,r2,4
  1976ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  1976b0:	003f8c06 	br	1974e4 <__alt_data_end+0xfff974e4>
}
  1976b4:	e037883a 	mov	sp,fp
  1976b8:	df000017 	ldw	fp,0(sp)
  1976bc:	dec00104 	addi	sp,sp,4
  1976c0:	f800283a 	ret

001976c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  1976c4:	defff804 	addi	sp,sp,-32
  1976c8:	df000715 	stw	fp,28(sp)
  1976cc:	df000704 	addi	fp,sp,28
  1976d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  1976d4:	e0bffb17 	ldw	r2,-20(fp)
  1976d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  1976dc:	e0bff917 	ldw	r2,-28(fp)
  1976e0:	10800017 	ldw	r2,0(r2)
  1976e4:	10800104 	addi	r2,r2,4
  1976e8:	10800037 	ldwio	r2,0(r2)
  1976ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  1976f0:	e0bffa17 	ldw	r2,-24(fp)
  1976f4:	1081000c 	andi	r2,r2,1024
  1976f8:	10000b26 	beq	r2,zero,197728 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  1976fc:	e0bff917 	ldw	r2,-28(fp)
  197700:	10800017 	ldw	r2,0(r2)
  197704:	10800104 	addi	r2,r2,4
  197708:	1007883a 	mov	r3,r2
  19770c:	e0bff917 	ldw	r2,-28(fp)
  197710:	10800817 	ldw	r2,32(r2)
  197714:	10810014 	ori	r2,r2,1024
  197718:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  19771c:	e0bff917 	ldw	r2,-28(fp)
  197720:	10000915 	stw	zero,36(r2)
  197724:	00000a06 	br	197750 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  197728:	e0bff917 	ldw	r2,-28(fp)
  19772c:	10c00917 	ldw	r3,36(r2)
  197730:	00a00034 	movhi	r2,32768
  197734:	10bfff04 	addi	r2,r2,-4
  197738:	10c00536 	bltu	r2,r3,197750 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  19773c:	e0bff917 	ldw	r2,-28(fp)
  197740:	10800917 	ldw	r2,36(r2)
  197744:	10c00044 	addi	r3,r2,1
  197748:	e0bff917 	ldw	r2,-28(fp)
  19774c:	10c00915 	stw	r3,36(r2)
  197750:	008006b4 	movhi	r2,26
  197754:	108b7304 	addi	r2,r2,11724
  197758:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  19775c:	e037883a 	mov	sp,fp
  197760:	df000017 	ldw	fp,0(sp)
  197764:	dec00104 	addi	sp,sp,4
  197768:	f800283a 	ret

0019776c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  19776c:	defffd04 	addi	sp,sp,-12
  197770:	df000215 	stw	fp,8(sp)
  197774:	df000204 	addi	fp,sp,8
  197778:	e13ffe15 	stw	r4,-8(fp)
  19777c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  197780:	00000506 	br	197798 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  197784:	e0bfff17 	ldw	r2,-4(fp)
  197788:	1090000c 	andi	r2,r2,16384
  19778c:	10000226 	beq	r2,zero,197798 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  197790:	00bffd44 	movi	r2,-11
  197794:	00000b06 	br	1977c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  197798:	e0bffe17 	ldw	r2,-8(fp)
  19779c:	10c00d17 	ldw	r3,52(r2)
  1977a0:	e0bffe17 	ldw	r2,-8(fp)
  1977a4:	10800c17 	ldw	r2,48(r2)
  1977a8:	18800526 	beq	r3,r2,1977c0 <altera_avalon_jtag_uart_close+0x54>
  1977ac:	e0bffe17 	ldw	r2,-8(fp)
  1977b0:	10c00917 	ldw	r3,36(r2)
  1977b4:	e0bffe17 	ldw	r2,-8(fp)
  1977b8:	10800117 	ldw	r2,4(r2)
  1977bc:	18bff136 	bltu	r3,r2,197784 <__alt_data_end+0xfff97784>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  1977c0:	0005883a 	mov	r2,zero
}
  1977c4:	e037883a 	mov	sp,fp
  1977c8:	df000017 	ldw	fp,0(sp)
  1977cc:	dec00104 	addi	sp,sp,4
  1977d0:	f800283a 	ret

001977d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  1977d4:	defffa04 	addi	sp,sp,-24
  1977d8:	df000515 	stw	fp,20(sp)
  1977dc:	df000504 	addi	fp,sp,20
  1977e0:	e13ffd15 	stw	r4,-12(fp)
  1977e4:	e17ffe15 	stw	r5,-8(fp)
  1977e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  1977ec:	00bff9c4 	movi	r2,-25
  1977f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  1977f4:	e0bffe17 	ldw	r2,-8(fp)
  1977f8:	10da8060 	cmpeqi	r3,r2,27137
  1977fc:	1800031e 	bne	r3,zero,19780c <altera_avalon_jtag_uart_ioctl+0x38>
  197800:	109a80a0 	cmpeqi	r2,r2,27138
  197804:	1000191e 	bne	r2,zero,19786c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  197808:	00002806 	br	1978ac <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  19780c:	e0bffd17 	ldw	r2,-12(fp)
  197810:	10c00117 	ldw	r3,4(r2)
  197814:	00a00034 	movhi	r2,32768
  197818:	10bfffc4 	addi	r2,r2,-1
  19781c:	18801226 	beq	r3,r2,197868 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  197820:	e0bfff17 	ldw	r2,-4(fp)
  197824:	10800017 	ldw	r2,0(r2)
  197828:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  19782c:	e0bffc17 	ldw	r2,-16(fp)
  197830:	10800090 	cmplti	r2,r2,2
  197834:	1000061e 	bne	r2,zero,197850 <altera_avalon_jtag_uart_ioctl+0x7c>
  197838:	e0fffc17 	ldw	r3,-16(fp)
  19783c:	00a00034 	movhi	r2,32768
  197840:	10bfffc4 	addi	r2,r2,-1
  197844:	18800226 	beq	r3,r2,197850 <altera_avalon_jtag_uart_ioctl+0x7c>
  197848:	e0bffc17 	ldw	r2,-16(fp)
  19784c:	00000206 	br	197858 <altera_avalon_jtag_uart_ioctl+0x84>
  197850:	00a00034 	movhi	r2,32768
  197854:	10bfff84 	addi	r2,r2,-2
  197858:	e0fffd17 	ldw	r3,-12(fp)
  19785c:	18800115 	stw	r2,4(r3)
      rc = 0;
  197860:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  197864:	00001106 	br	1978ac <altera_avalon_jtag_uart_ioctl+0xd8>
  197868:	00001006 	br	1978ac <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  19786c:	e0bffd17 	ldw	r2,-12(fp)
  197870:	10c00117 	ldw	r3,4(r2)
  197874:	00a00034 	movhi	r2,32768
  197878:	10bfffc4 	addi	r2,r2,-1
  19787c:	18800a26 	beq	r3,r2,1978a8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  197880:	e0bffd17 	ldw	r2,-12(fp)
  197884:	10c00917 	ldw	r3,36(r2)
  197888:	e0bffd17 	ldw	r2,-12(fp)
  19788c:	10800117 	ldw	r2,4(r2)
  197890:	1885803a 	cmpltu	r2,r3,r2
  197894:	10c03fcc 	andi	r3,r2,255
  197898:	e0bfff17 	ldw	r2,-4(fp)
  19789c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  1978a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  1978a4:	00000006 	br	1978a8 <altera_avalon_jtag_uart_ioctl+0xd4>
  1978a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  1978ac:	e0bffb17 	ldw	r2,-20(fp)
}
  1978b0:	e037883a 	mov	sp,fp
  1978b4:	df000017 	ldw	fp,0(sp)
  1978b8:	dec00104 	addi	sp,sp,4
  1978bc:	f800283a 	ret

001978c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  1978c0:	defff304 	addi	sp,sp,-52
  1978c4:	dfc00c15 	stw	ra,48(sp)
  1978c8:	df000b15 	stw	fp,44(sp)
  1978cc:	df000b04 	addi	fp,sp,44
  1978d0:	e13ffc15 	stw	r4,-16(fp)
  1978d4:	e17ffd15 	stw	r5,-12(fp)
  1978d8:	e1bffe15 	stw	r6,-8(fp)
  1978dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  1978e0:	e0bffd17 	ldw	r2,-12(fp)
  1978e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  1978e8:	00004906 	br	197a10 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  1978ec:	e0bffc17 	ldw	r2,-16(fp)
  1978f0:	10800a17 	ldw	r2,40(r2)
  1978f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  1978f8:	e0bffc17 	ldw	r2,-16(fp)
  1978fc:	10800b17 	ldw	r2,44(r2)
  197900:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  197904:	e0fff717 	ldw	r3,-36(fp)
  197908:	e0bff817 	ldw	r2,-32(fp)
  19790c:	18800536 	bltu	r3,r2,197924 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  197910:	e0fff717 	ldw	r3,-36(fp)
  197914:	e0bff817 	ldw	r2,-32(fp)
  197918:	1885c83a 	sub	r2,r3,r2
  19791c:	e0bff615 	stw	r2,-40(fp)
  197920:	00000406 	br	197934 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  197924:	00c20004 	movi	r3,2048
  197928:	e0bff817 	ldw	r2,-32(fp)
  19792c:	1885c83a 	sub	r2,r3,r2
  197930:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  197934:	e0bff617 	ldw	r2,-40(fp)
  197938:	1000011e 	bne	r2,zero,197940 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  19793c:	00001d06 	br	1979b4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  197940:	e0fffe17 	ldw	r3,-8(fp)
  197944:	e0bff617 	ldw	r2,-40(fp)
  197948:	1880022e 	bgeu	r3,r2,197954 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  19794c:	e0bffe17 	ldw	r2,-8(fp)
  197950:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  197954:	e0bff817 	ldw	r2,-32(fp)
  197958:	10800e04 	addi	r2,r2,56
  19795c:	e0fffc17 	ldw	r3,-16(fp)
  197960:	1885883a 	add	r2,r3,r2
  197964:	e13ff517 	ldw	r4,-44(fp)
  197968:	100b883a 	mov	r5,r2
  19796c:	e1bff617 	ldw	r6,-40(fp)
  197970:	0188e800 	call	188e80 <memcpy>
      ptr   += n;
  197974:	e0fff517 	ldw	r3,-44(fp)
  197978:	e0bff617 	ldw	r2,-40(fp)
  19797c:	1885883a 	add	r2,r3,r2
  197980:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  197984:	e0fffe17 	ldw	r3,-8(fp)
  197988:	e0bff617 	ldw	r2,-40(fp)
  19798c:	1885c83a 	sub	r2,r3,r2
  197990:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  197994:	e0fff817 	ldw	r3,-32(fp)
  197998:	e0bff617 	ldw	r2,-40(fp)
  19799c:	1885883a 	add	r2,r3,r2
  1979a0:	10c1ffcc 	andi	r3,r2,2047
  1979a4:	e0bffc17 	ldw	r2,-16(fp)
  1979a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  1979ac:	e0bffe17 	ldw	r2,-8(fp)
  1979b0:	00bfce16 	blt	zero,r2,1978ec <__alt_data_end+0xfff978ec>

    /* If we read any data then return it */
    if (ptr != buffer)
  1979b4:	e0fff517 	ldw	r3,-44(fp)
  1979b8:	e0bffd17 	ldw	r2,-12(fp)
  1979bc:	18800126 	beq	r3,r2,1979c4 <altera_avalon_jtag_uart_read+0x104>
      break;
  1979c0:	00001506 	br	197a18 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  1979c4:	e0bfff17 	ldw	r2,-4(fp)
  1979c8:	1090000c 	andi	r2,r2,16384
  1979cc:	10000126 	beq	r2,zero,1979d4 <altera_avalon_jtag_uart_read+0x114>
      break;
  1979d0:	00001106 	br	197a18 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  1979d4:	0001883a 	nop
  1979d8:	e0bffc17 	ldw	r2,-16(fp)
  1979dc:	10c00a17 	ldw	r3,40(r2)
  1979e0:	e0bff717 	ldw	r2,-36(fp)
  1979e4:	1880051e 	bne	r3,r2,1979fc <altera_avalon_jtag_uart_read+0x13c>
  1979e8:	e0bffc17 	ldw	r2,-16(fp)
  1979ec:	10c00917 	ldw	r3,36(r2)
  1979f0:	e0bffc17 	ldw	r2,-16(fp)
  1979f4:	10800117 	ldw	r2,4(r2)
  1979f8:	18bff736 	bltu	r3,r2,1979d8 <__alt_data_end+0xfff979d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  1979fc:	e0bffc17 	ldw	r2,-16(fp)
  197a00:	10c00a17 	ldw	r3,40(r2)
  197a04:	e0bff717 	ldw	r2,-36(fp)
  197a08:	1880011e 	bne	r3,r2,197a10 <altera_avalon_jtag_uart_read+0x150>
      break;
  197a0c:	00000206 	br	197a18 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  197a10:	e0bffe17 	ldw	r2,-8(fp)
  197a14:	00bfb516 	blt	zero,r2,1978ec <__alt_data_end+0xfff978ec>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  197a18:	e0fff517 	ldw	r3,-44(fp)
  197a1c:	e0bffd17 	ldw	r2,-12(fp)
  197a20:	18801826 	beq	r3,r2,197a84 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  197a24:	0005303a 	rdctl	r2,status
  197a28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  197a2c:	e0fffa17 	ldw	r3,-24(fp)
  197a30:	00bfff84 	movi	r2,-2
  197a34:	1884703a 	and	r2,r3,r2
  197a38:	1001703a 	wrctl	status,r2
  
  return context;
  197a3c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  197a40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  197a44:	e0bffc17 	ldw	r2,-16(fp)
  197a48:	10800817 	ldw	r2,32(r2)
  197a4c:	10c00054 	ori	r3,r2,1
  197a50:	e0bffc17 	ldw	r2,-16(fp)
  197a54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  197a58:	e0bffc17 	ldw	r2,-16(fp)
  197a5c:	10800017 	ldw	r2,0(r2)
  197a60:	10800104 	addi	r2,r2,4
  197a64:	1007883a 	mov	r3,r2
  197a68:	e0bffc17 	ldw	r2,-16(fp)
  197a6c:	10800817 	ldw	r2,32(r2)
  197a70:	18800035 	stwio	r2,0(r3)
  197a74:	e0bff917 	ldw	r2,-28(fp)
  197a78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  197a7c:	e0bffb17 	ldw	r2,-20(fp)
  197a80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  197a84:	e0fff517 	ldw	r3,-44(fp)
  197a88:	e0bffd17 	ldw	r2,-12(fp)
  197a8c:	18800426 	beq	r3,r2,197aa0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  197a90:	e0fff517 	ldw	r3,-44(fp)
  197a94:	e0bffd17 	ldw	r2,-12(fp)
  197a98:	1885c83a 	sub	r2,r3,r2
  197a9c:	00000606 	br	197ab8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  197aa0:	e0bfff17 	ldw	r2,-4(fp)
  197aa4:	1090000c 	andi	r2,r2,16384
  197aa8:	10000226 	beq	r2,zero,197ab4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  197aac:	00bffd44 	movi	r2,-11
  197ab0:	00000106 	br	197ab8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  197ab4:	00bffec4 	movi	r2,-5
}
  197ab8:	e037883a 	mov	sp,fp
  197abc:	dfc00117 	ldw	ra,4(sp)
  197ac0:	df000017 	ldw	fp,0(sp)
  197ac4:	dec00204 	addi	sp,sp,8
  197ac8:	f800283a 	ret

00197acc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  197acc:	defff304 	addi	sp,sp,-52
  197ad0:	dfc00c15 	stw	ra,48(sp)
  197ad4:	df000b15 	stw	fp,44(sp)
  197ad8:	df000b04 	addi	fp,sp,44
  197adc:	e13ffc15 	stw	r4,-16(fp)
  197ae0:	e17ffd15 	stw	r5,-12(fp)
  197ae4:	e1bffe15 	stw	r6,-8(fp)
  197ae8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  197aec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  197af0:	e0bffd17 	ldw	r2,-12(fp)
  197af4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  197af8:	00003806 	br	197bdc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  197afc:	e0bffc17 	ldw	r2,-16(fp)
  197b00:	10800c17 	ldw	r2,48(r2)
  197b04:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  197b08:	e0bffc17 	ldw	r2,-16(fp)
  197b0c:	10800d17 	ldw	r2,52(r2)
  197b10:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  197b14:	e0fff817 	ldw	r3,-32(fp)
  197b18:	e0bff517 	ldw	r2,-44(fp)
  197b1c:	1880062e 	bgeu	r3,r2,197b38 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  197b20:	e0fff517 	ldw	r3,-44(fp)
  197b24:	e0bff817 	ldw	r2,-32(fp)
  197b28:	1885c83a 	sub	r2,r3,r2
  197b2c:	10bfffc4 	addi	r2,r2,-1
  197b30:	e0bff615 	stw	r2,-40(fp)
  197b34:	00000b06 	br	197b64 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  197b38:	e0bff517 	ldw	r2,-44(fp)
  197b3c:	10000526 	beq	r2,zero,197b54 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  197b40:	00c20004 	movi	r3,2048
  197b44:	e0bff817 	ldw	r2,-32(fp)
  197b48:	1885c83a 	sub	r2,r3,r2
  197b4c:	e0bff615 	stw	r2,-40(fp)
  197b50:	00000406 	br	197b64 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  197b54:	00c1ffc4 	movi	r3,2047
  197b58:	e0bff817 	ldw	r2,-32(fp)
  197b5c:	1885c83a 	sub	r2,r3,r2
  197b60:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  197b64:	e0bff617 	ldw	r2,-40(fp)
  197b68:	1000011e 	bne	r2,zero,197b70 <altera_avalon_jtag_uart_write+0xa4>
        break;
  197b6c:	00001d06 	br	197be4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  197b70:	e0fffe17 	ldw	r3,-8(fp)
  197b74:	e0bff617 	ldw	r2,-40(fp)
  197b78:	1880022e 	bgeu	r3,r2,197b84 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  197b7c:	e0bffe17 	ldw	r2,-8(fp)
  197b80:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  197b84:	e0bff817 	ldw	r2,-32(fp)
  197b88:	10820e04 	addi	r2,r2,2104
  197b8c:	e0fffc17 	ldw	r3,-16(fp)
  197b90:	1885883a 	add	r2,r3,r2
  197b94:	1009883a 	mov	r4,r2
  197b98:	e17ffd17 	ldw	r5,-12(fp)
  197b9c:	e1bff617 	ldw	r6,-40(fp)
  197ba0:	0188e800 	call	188e80 <memcpy>
      ptr   += n;
  197ba4:	e0fffd17 	ldw	r3,-12(fp)
  197ba8:	e0bff617 	ldw	r2,-40(fp)
  197bac:	1885883a 	add	r2,r3,r2
  197bb0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  197bb4:	e0fffe17 	ldw	r3,-8(fp)
  197bb8:	e0bff617 	ldw	r2,-40(fp)
  197bbc:	1885c83a 	sub	r2,r3,r2
  197bc0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  197bc4:	e0fff817 	ldw	r3,-32(fp)
  197bc8:	e0bff617 	ldw	r2,-40(fp)
  197bcc:	1885883a 	add	r2,r3,r2
  197bd0:	10c1ffcc 	andi	r3,r2,2047
  197bd4:	e0bffc17 	ldw	r2,-16(fp)
  197bd8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  197bdc:	e0bffe17 	ldw	r2,-8(fp)
  197be0:	00bfc616 	blt	zero,r2,197afc <__alt_data_end+0xfff97afc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  197be4:	0005303a 	rdctl	r2,status
  197be8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  197bec:	e0fffa17 	ldw	r3,-24(fp)
  197bf0:	00bfff84 	movi	r2,-2
  197bf4:	1884703a 	and	r2,r3,r2
  197bf8:	1001703a 	wrctl	status,r2
  
  return context;
  197bfc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  197c00:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  197c04:	e0bffc17 	ldw	r2,-16(fp)
  197c08:	10800817 	ldw	r2,32(r2)
  197c0c:	10c00094 	ori	r3,r2,2
  197c10:	e0bffc17 	ldw	r2,-16(fp)
  197c14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  197c18:	e0bffc17 	ldw	r2,-16(fp)
  197c1c:	10800017 	ldw	r2,0(r2)
  197c20:	10800104 	addi	r2,r2,4
  197c24:	1007883a 	mov	r3,r2
  197c28:	e0bffc17 	ldw	r2,-16(fp)
  197c2c:	10800817 	ldw	r2,32(r2)
  197c30:	18800035 	stwio	r2,0(r3)
  197c34:	e0bff917 	ldw	r2,-28(fp)
  197c38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  197c3c:	e0bffb17 	ldw	r2,-20(fp)
  197c40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  197c44:	e0bffe17 	ldw	r2,-8(fp)
  197c48:	0080120e 	bge	zero,r2,197c94 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  197c4c:	e0bfff17 	ldw	r2,-4(fp)
  197c50:	1090000c 	andi	r2,r2,16384
  197c54:	10000126 	beq	r2,zero,197c5c <altera_avalon_jtag_uart_write+0x190>
        break;
  197c58:	00001006 	br	197c9c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  197c5c:	0001883a 	nop
  197c60:	e0bffc17 	ldw	r2,-16(fp)
  197c64:	10c00d17 	ldw	r3,52(r2)
  197c68:	e0bff517 	ldw	r2,-44(fp)
  197c6c:	1880051e 	bne	r3,r2,197c84 <altera_avalon_jtag_uart_write+0x1b8>
  197c70:	e0bffc17 	ldw	r2,-16(fp)
  197c74:	10c00917 	ldw	r3,36(r2)
  197c78:	e0bffc17 	ldw	r2,-16(fp)
  197c7c:	10800117 	ldw	r2,4(r2)
  197c80:	18bff736 	bltu	r3,r2,197c60 <__alt_data_end+0xfff97c60>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  197c84:	e0bffc17 	ldw	r2,-16(fp)
  197c88:	10800917 	ldw	r2,36(r2)
  197c8c:	10000126 	beq	r2,zero,197c94 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  197c90:	00000206 	br	197c9c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  197c94:	e0bffe17 	ldw	r2,-8(fp)
  197c98:	00bf9716 	blt	zero,r2,197af8 <__alt_data_end+0xfff97af8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  197c9c:	e0fffd17 	ldw	r3,-12(fp)
  197ca0:	e0bff717 	ldw	r2,-36(fp)
  197ca4:	18800426 	beq	r3,r2,197cb8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  197ca8:	e0fffd17 	ldw	r3,-12(fp)
  197cac:	e0bff717 	ldw	r2,-36(fp)
  197cb0:	1885c83a 	sub	r2,r3,r2
  197cb4:	00000606 	br	197cd0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  197cb8:	e0bfff17 	ldw	r2,-4(fp)
  197cbc:	1090000c 	andi	r2,r2,16384
  197cc0:	10000226 	beq	r2,zero,197ccc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  197cc4:	00bffd44 	movi	r2,-11
  197cc8:	00000106 	br	197cd0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  197ccc:	00bffec4 	movi	r2,-5
}
  197cd0:	e037883a 	mov	sp,fp
  197cd4:	dfc00117 	ldw	ra,4(sp)
  197cd8:	df000017 	ldw	fp,0(sp)
  197cdc:	dec00204 	addi	sp,sp,8
  197ce0:	f800283a 	ret

00197ce4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  197ce4:	defffa04 	addi	sp,sp,-24
  197ce8:	dfc00515 	stw	ra,20(sp)
  197cec:	df000415 	stw	fp,16(sp)
  197cf0:	df000404 	addi	fp,sp,16
  197cf4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  197cf8:	0007883a 	mov	r3,zero
  197cfc:	e0bfff17 	ldw	r2,-4(fp)
  197d00:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  197d04:	e0bfff17 	ldw	r2,-4(fp)
  197d08:	10800104 	addi	r2,r2,4
  197d0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  197d10:	0005303a 	rdctl	r2,status
  197d14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  197d18:	e0fffd17 	ldw	r3,-12(fp)
  197d1c:	00bfff84 	movi	r2,-2
  197d20:	1884703a 	and	r2,r3,r2
  197d24:	1001703a 	wrctl	status,r2
  
  return context;
  197d28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  197d2c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  197d30:	019ab380 	call	19ab38 <alt_tick>
  197d34:	e0bffc17 	ldw	r2,-16(fp)
  197d38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  197d3c:	e0bffe17 	ldw	r2,-8(fp)
  197d40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  197d44:	e037883a 	mov	sp,fp
  197d48:	dfc00117 	ldw	ra,4(sp)
  197d4c:	df000017 	ldw	fp,0(sp)
  197d50:	dec00204 	addi	sp,sp,8
  197d54:	f800283a 	ret

00197d58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  197d58:	defff804 	addi	sp,sp,-32
  197d5c:	dfc00715 	stw	ra,28(sp)
  197d60:	df000615 	stw	fp,24(sp)
  197d64:	df000604 	addi	fp,sp,24
  197d68:	e13ffc15 	stw	r4,-16(fp)
  197d6c:	e17ffd15 	stw	r5,-12(fp)
  197d70:	e1bffe15 	stw	r6,-8(fp)
  197d74:	e1ffff15 	stw	r7,-4(fp)
  197d78:	e0bfff17 	ldw	r2,-4(fp)
  197d7c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  197d80:	008006b4 	movhi	r2,26
  197d84:	108b7304 	addi	r2,r2,11724
  197d88:	10800017 	ldw	r2,0(r2)
  197d8c:	1000041e 	bne	r2,zero,197da0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  197d90:	008006b4 	movhi	r2,26
  197d94:	108b7304 	addi	r2,r2,11724
  197d98:	e0fffb17 	ldw	r3,-20(fp)
  197d9c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  197da0:	e0bffc17 	ldw	r2,-16(fp)
  197da4:	10800104 	addi	r2,r2,4
  197da8:	00c001c4 	movi	r3,7
  197dac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  197db0:	d8000015 	stw	zero,0(sp)
  197db4:	e13ffd17 	ldw	r4,-12(fp)
  197db8:	e17ffe17 	ldw	r5,-8(fp)
  197dbc:	01800674 	movhi	r6,25
  197dc0:	319f3904 	addi	r6,r6,31972
  197dc4:	e1fffc17 	ldw	r7,-16(fp)
  197dc8:	01964800 	call	196480 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  197dcc:	e037883a 	mov	sp,fp
  197dd0:	dfc00117 	ldw	ra,4(sp)
  197dd4:	df000017 	ldw	fp,0(sp)
  197dd8:	dec00204 	addi	sp,sp,8
  197ddc:	f800283a 	ret

00197de0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  197de0:	defffa04 	addi	sp,sp,-24
  197de4:	dfc00515 	stw	ra,20(sp)
  197de8:	df000415 	stw	fp,16(sp)
  197dec:	df000404 	addi	fp,sp,16
  197df0:	e13ffd15 	stw	r4,-12(fp)
  197df4:	e17ffe15 	stw	r5,-8(fp)
  197df8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  197dfc:	e0bffd17 	ldw	r2,-12(fp)
  197e00:	10800017 	ldw	r2,0(r2)
  197e04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  197e08:	e0bffc17 	ldw	r2,-16(fp)
  197e0c:	10c00a04 	addi	r3,r2,40
  197e10:	e0bffd17 	ldw	r2,-12(fp)
  197e14:	10800217 	ldw	r2,8(r2)
  197e18:	1809883a 	mov	r4,r3
  197e1c:	e17ffe17 	ldw	r5,-8(fp)
  197e20:	e1bfff17 	ldw	r6,-4(fp)
  197e24:	100f883a 	mov	r7,r2
  197e28:	01982f80 	call	1982f8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  197e2c:	e037883a 	mov	sp,fp
  197e30:	dfc00117 	ldw	ra,4(sp)
  197e34:	df000017 	ldw	fp,0(sp)
  197e38:	dec00204 	addi	sp,sp,8
  197e3c:	f800283a 	ret

00197e40 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  197e40:	defffa04 	addi	sp,sp,-24
  197e44:	dfc00515 	stw	ra,20(sp)
  197e48:	df000415 	stw	fp,16(sp)
  197e4c:	df000404 	addi	fp,sp,16
  197e50:	e13ffd15 	stw	r4,-12(fp)
  197e54:	e17ffe15 	stw	r5,-8(fp)
  197e58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  197e5c:	e0bffd17 	ldw	r2,-12(fp)
  197e60:	10800017 	ldw	r2,0(r2)
  197e64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  197e68:	e0bffc17 	ldw	r2,-16(fp)
  197e6c:	10c00a04 	addi	r3,r2,40
  197e70:	e0bffd17 	ldw	r2,-12(fp)
  197e74:	10800217 	ldw	r2,8(r2)
  197e78:	1809883a 	mov	r4,r3
  197e7c:	e17ffe17 	ldw	r5,-8(fp)
  197e80:	e1bfff17 	ldw	r6,-4(fp)
  197e84:	100f883a 	mov	r7,r2
  197e88:	01985240 	call	198524 <altera_avalon_uart_write>
      fd->fd_flags);
}
  197e8c:	e037883a 	mov	sp,fp
  197e90:	dfc00117 	ldw	ra,4(sp)
  197e94:	df000017 	ldw	fp,0(sp)
  197e98:	dec00204 	addi	sp,sp,8
  197e9c:	f800283a 	ret

00197ea0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  197ea0:	defffc04 	addi	sp,sp,-16
  197ea4:	dfc00315 	stw	ra,12(sp)
  197ea8:	df000215 	stw	fp,8(sp)
  197eac:	df000204 	addi	fp,sp,8
  197eb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  197eb4:	e0bfff17 	ldw	r2,-4(fp)
  197eb8:	10800017 	ldw	r2,0(r2)
  197ebc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  197ec0:	e0bffe17 	ldw	r2,-8(fp)
  197ec4:	10c00a04 	addi	r3,r2,40
  197ec8:	e0bfff17 	ldw	r2,-4(fp)
  197ecc:	10800217 	ldw	r2,8(r2)
  197ed0:	1809883a 	mov	r4,r3
  197ed4:	100b883a 	mov	r5,r2
  197ed8:	01982540 	call	198254 <altera_avalon_uart_close>
}
  197edc:	e037883a 	mov	sp,fp
  197ee0:	dfc00117 	ldw	ra,4(sp)
  197ee4:	df000017 	ldw	fp,0(sp)
  197ee8:	dec00204 	addi	sp,sp,8
  197eec:	f800283a 	ret

00197ef0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  197ef0:	defff804 	addi	sp,sp,-32
  197ef4:	dfc00715 	stw	ra,28(sp)
  197ef8:	df000615 	stw	fp,24(sp)
  197efc:	df000604 	addi	fp,sp,24
  197f00:	e13ffd15 	stw	r4,-12(fp)
  197f04:	e17ffe15 	stw	r5,-8(fp)
  197f08:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  197f0c:	e0bffd17 	ldw	r2,-12(fp)
  197f10:	10800017 	ldw	r2,0(r2)
  197f14:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  197f18:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  197f1c:	1000041e 	bne	r2,zero,197f30 <altera_avalon_uart_init+0x40>
  197f20:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  197f24:	1000021e 	bne	r2,zero,197f30 <altera_avalon_uart_init+0x40>
  197f28:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  197f2c:	10000226 	beq	r2,zero,197f38 <altera_avalon_uart_init+0x48>
  197f30:	00800044 	movi	r2,1
  197f34:	00000106 	br	197f3c <altera_avalon_uart_init+0x4c>
  197f38:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  197f3c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  197f40:	e0bffc17 	ldw	r2,-16(fp)
  197f44:	10000f1e 	bne	r2,zero,197f84 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  197f48:	e0bffd17 	ldw	r2,-12(fp)
  197f4c:	00c32004 	movi	r3,3200
  197f50:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  197f54:	e0bffb17 	ldw	r2,-20(fp)
  197f58:	10800304 	addi	r2,r2,12
  197f5c:	e0fffd17 	ldw	r3,-12(fp)
  197f60:	18c00117 	ldw	r3,4(r3)
  197f64:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  197f68:	d8000015 	stw	zero,0(sp)
  197f6c:	e13ffe17 	ldw	r4,-8(fp)
  197f70:	e17fff17 	ldw	r5,-4(fp)
  197f74:	01800674 	movhi	r6,25
  197f78:	319fe604 	addi	r6,r6,32664
  197f7c:	e1fffd17 	ldw	r7,-12(fp)
  197f80:	01964800 	call	196480 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  197f84:	e037883a 	mov	sp,fp
  197f88:	dfc00117 	ldw	ra,4(sp)
  197f8c:	df000017 	ldw	fp,0(sp)
  197f90:	dec00204 	addi	sp,sp,8
  197f94:	f800283a 	ret

00197f98 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  197f98:	defffa04 	addi	sp,sp,-24
  197f9c:	dfc00515 	stw	ra,20(sp)
  197fa0:	df000415 	stw	fp,16(sp)
  197fa4:	df000404 	addi	fp,sp,16
  197fa8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  197fac:	e0bfff17 	ldw	r2,-4(fp)
  197fb0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  197fb4:	e0bffc17 	ldw	r2,-16(fp)
  197fb8:	10800017 	ldw	r2,0(r2)
  197fbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  197fc0:	e0bffd17 	ldw	r2,-12(fp)
  197fc4:	10800204 	addi	r2,r2,8
  197fc8:	10800037 	ldwio	r2,0(r2)
  197fcc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  197fd0:	e0bffd17 	ldw	r2,-12(fp)
  197fd4:	10800204 	addi	r2,r2,8
  197fd8:	0007883a 	mov	r3,zero
  197fdc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  197fe0:	e0bffd17 	ldw	r2,-12(fp)
  197fe4:	10800204 	addi	r2,r2,8
  197fe8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  197fec:	e0bffe17 	ldw	r2,-8(fp)
  197ff0:	1080200c 	andi	r2,r2,128
  197ff4:	10000326 	beq	r2,zero,198004 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  197ff8:	e13ffc17 	ldw	r4,-16(fp)
  197ffc:	e17ffe17 	ldw	r5,-8(fp)
  198000:	01980300 	call	198030 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  198004:	e0bffe17 	ldw	r2,-8(fp)
  198008:	1081100c 	andi	r2,r2,1088
  19800c:	10000326 	beq	r2,zero,19801c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  198010:	e13ffc17 	ldw	r4,-16(fp)
  198014:	e17ffe17 	ldw	r5,-8(fp)
  198018:	01981100 	call	198110 <altera_avalon_uart_txirq>
  }
  

}
  19801c:	e037883a 	mov	sp,fp
  198020:	dfc00117 	ldw	ra,4(sp)
  198024:	df000017 	ldw	fp,0(sp)
  198028:	dec00204 	addi	sp,sp,8
  19802c:	f800283a 	ret

00198030 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  198030:	defffc04 	addi	sp,sp,-16
  198034:	df000315 	stw	fp,12(sp)
  198038:	df000304 	addi	fp,sp,12
  19803c:	e13ffe15 	stw	r4,-8(fp)
  198040:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  198044:	e0bfff17 	ldw	r2,-4(fp)
  198048:	108000cc 	andi	r2,r2,3
  19804c:	10000126 	beq	r2,zero,198054 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  198050:	00002b06 	br	198100 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  198054:	e0bffe17 	ldw	r2,-8(fp)
  198058:	10800317 	ldw	r2,12(r2)
  19805c:	e0bffe17 	ldw	r2,-8(fp)
  198060:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  198064:	e0bffe17 	ldw	r2,-8(fp)
  198068:	10800317 	ldw	r2,12(r2)
  19806c:	10800044 	addi	r2,r2,1
  198070:	10800fcc 	andi	r2,r2,63
  198074:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  198078:	e0bffe17 	ldw	r2,-8(fp)
  19807c:	10800317 	ldw	r2,12(r2)
  198080:	e0fffe17 	ldw	r3,-8(fp)
  198084:	18c00017 	ldw	r3,0(r3)
  198088:	18c00037 	ldwio	r3,0(r3)
  19808c:	1809883a 	mov	r4,r3
  198090:	e0fffe17 	ldw	r3,-8(fp)
  198094:	1885883a 	add	r2,r3,r2
  198098:	10800704 	addi	r2,r2,28
  19809c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  1980a0:	e0bffe17 	ldw	r2,-8(fp)
  1980a4:	e0fffd17 	ldw	r3,-12(fp)
  1980a8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  1980ac:	e0bffe17 	ldw	r2,-8(fp)
  1980b0:	10800317 	ldw	r2,12(r2)
  1980b4:	10800044 	addi	r2,r2,1
  1980b8:	10800fcc 	andi	r2,r2,63
  1980bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  1980c0:	e0bffe17 	ldw	r2,-8(fp)
  1980c4:	10c00217 	ldw	r3,8(r2)
  1980c8:	e0bffd17 	ldw	r2,-12(fp)
  1980cc:	18800c1e 	bne	r3,r2,198100 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  1980d0:	e0bffe17 	ldw	r2,-8(fp)
  1980d4:	10c00117 	ldw	r3,4(r2)
  1980d8:	00bfdfc4 	movi	r2,-129
  1980dc:	1886703a 	and	r3,r3,r2
  1980e0:	e0bffe17 	ldw	r2,-8(fp)
  1980e4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  1980e8:	e0bffe17 	ldw	r2,-8(fp)
  1980ec:	10800017 	ldw	r2,0(r2)
  1980f0:	10800304 	addi	r2,r2,12
  1980f4:	e0fffe17 	ldw	r3,-8(fp)
  1980f8:	18c00117 	ldw	r3,4(r3)
  1980fc:	10c00035 	stwio	r3,0(r2)
  }   
}
  198100:	e037883a 	mov	sp,fp
  198104:	df000017 	ldw	fp,0(sp)
  198108:	dec00104 	addi	sp,sp,4
  19810c:	f800283a 	ret

00198110 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  198110:	defffb04 	addi	sp,sp,-20
  198114:	df000415 	stw	fp,16(sp)
  198118:	df000404 	addi	fp,sp,16
  19811c:	e13ffc15 	stw	r4,-16(fp)
  198120:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  198124:	e0bffc17 	ldw	r2,-16(fp)
  198128:	10c00417 	ldw	r3,16(r2)
  19812c:	e0bffc17 	ldw	r2,-16(fp)
  198130:	10800517 	ldw	r2,20(r2)
  198134:	18803226 	beq	r3,r2,198200 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  198138:	e0bffc17 	ldw	r2,-16(fp)
  19813c:	10800617 	ldw	r2,24(r2)
  198140:	1080008c 	andi	r2,r2,2
  198144:	10000326 	beq	r2,zero,198154 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  198148:	e0bffd17 	ldw	r2,-12(fp)
  19814c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  198150:	10001d26 	beq	r2,zero,1981c8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  198154:	e0bffc17 	ldw	r2,-16(fp)
  198158:	10800417 	ldw	r2,16(r2)
  19815c:	e0bffc17 	ldw	r2,-16(fp)
  198160:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  198164:	e0bffc17 	ldw	r2,-16(fp)
  198168:	10800017 	ldw	r2,0(r2)
  19816c:	10800104 	addi	r2,r2,4
  198170:	e0fffc17 	ldw	r3,-16(fp)
  198174:	18c00417 	ldw	r3,16(r3)
  198178:	e13ffc17 	ldw	r4,-16(fp)
  19817c:	20c7883a 	add	r3,r4,r3
  198180:	18c01704 	addi	r3,r3,92
  198184:	18c00003 	ldbu	r3,0(r3)
  198188:	18c03fcc 	andi	r3,r3,255
  19818c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  198190:	e0bffc17 	ldw	r2,-16(fp)
  198194:	10800417 	ldw	r2,16(r2)
  198198:	10800044 	addi	r2,r2,1
  19819c:	e0fffc17 	ldw	r3,-16(fp)
  1981a0:	18800415 	stw	r2,16(r3)
  1981a4:	10c00fcc 	andi	r3,r2,63
  1981a8:	e0bffc17 	ldw	r2,-16(fp)
  1981ac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  1981b0:	e0bffc17 	ldw	r2,-16(fp)
  1981b4:	10800117 	ldw	r2,4(r2)
  1981b8:	10c01014 	ori	r3,r2,64
  1981bc:	e0bffc17 	ldw	r2,-16(fp)
  1981c0:	10c00115 	stw	r3,4(r2)
  1981c4:	00000e06 	br	198200 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  1981c8:	e0bffc17 	ldw	r2,-16(fp)
  1981cc:	10800017 	ldw	r2,0(r2)
  1981d0:	10800204 	addi	r2,r2,8
  1981d4:	10800037 	ldwio	r2,0(r2)
  1981d8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  1981dc:	e0bffd17 	ldw	r2,-12(fp)
  1981e0:	1082000c 	andi	r2,r2,2048
  1981e4:	1000061e 	bne	r2,zero,198200 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  1981e8:	e0bffc17 	ldw	r2,-16(fp)
  1981ec:	10c00117 	ldw	r3,4(r2)
  1981f0:	00bfefc4 	movi	r2,-65
  1981f4:	1886703a 	and	r3,r3,r2
  1981f8:	e0bffc17 	ldw	r2,-16(fp)
  1981fc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  198200:	e0bffc17 	ldw	r2,-16(fp)
  198204:	10c00417 	ldw	r3,16(r2)
  198208:	e0bffc17 	ldw	r2,-16(fp)
  19820c:	10800517 	ldw	r2,20(r2)
  198210:	1880061e 	bne	r3,r2,19822c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  198214:	e0bffc17 	ldw	r2,-16(fp)
  198218:	10c00117 	ldw	r3,4(r2)
  19821c:	00beefc4 	movi	r2,-1089
  198220:	1886703a 	and	r3,r3,r2
  198224:	e0bffc17 	ldw	r2,-16(fp)
  198228:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  19822c:	e0bffc17 	ldw	r2,-16(fp)
  198230:	10800017 	ldw	r2,0(r2)
  198234:	10800304 	addi	r2,r2,12
  198238:	e0fffc17 	ldw	r3,-16(fp)
  19823c:	18c00117 	ldw	r3,4(r3)
  198240:	10c00035 	stwio	r3,0(r2)
}
  198244:	e037883a 	mov	sp,fp
  198248:	df000017 	ldw	fp,0(sp)
  19824c:	dec00104 	addi	sp,sp,4
  198250:	f800283a 	ret

00198254 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  198254:	defffd04 	addi	sp,sp,-12
  198258:	df000215 	stw	fp,8(sp)
  19825c:	df000204 	addi	fp,sp,8
  198260:	e13ffe15 	stw	r4,-8(fp)
  198264:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  198268:	00000506 	br	198280 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  19826c:	e0bfff17 	ldw	r2,-4(fp)
  198270:	1090000c 	andi	r2,r2,16384
  198274:	10000226 	beq	r2,zero,198280 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  198278:	00bffd44 	movi	r2,-11
  19827c:	00000606 	br	198298 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  198280:	e0bffe17 	ldw	r2,-8(fp)
  198284:	10c00417 	ldw	r3,16(r2)
  198288:	e0bffe17 	ldw	r2,-8(fp)
  19828c:	10800517 	ldw	r2,20(r2)
  198290:	18bff61e 	bne	r3,r2,19826c <__alt_data_end+0xfff9826c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  198294:	0005883a 	mov	r2,zero
}
  198298:	e037883a 	mov	sp,fp
  19829c:	df000017 	ldw	fp,0(sp)
  1982a0:	dec00104 	addi	sp,sp,4
  1982a4:	f800283a 	ret

001982a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1982a8:	defffe04 	addi	sp,sp,-8
  1982ac:	dfc00115 	stw	ra,4(sp)
  1982b0:	df000015 	stw	fp,0(sp)
  1982b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1982b8:	008006b4 	movhi	r2,26
  1982bc:	10847104 	addi	r2,r2,4548
  1982c0:	10800017 	ldw	r2,0(r2)
  1982c4:	10000526 	beq	r2,zero,1982dc <alt_get_errno+0x34>
  1982c8:	008006b4 	movhi	r2,26
  1982cc:	10847104 	addi	r2,r2,4548
  1982d0:	10800017 	ldw	r2,0(r2)
  1982d4:	103ee83a 	callr	r2
  1982d8:	00000206 	br	1982e4 <alt_get_errno+0x3c>
  1982dc:	008006b4 	movhi	r2,26
  1982e0:	108b6b04 	addi	r2,r2,11692
}
  1982e4:	e037883a 	mov	sp,fp
  1982e8:	dfc00117 	ldw	ra,4(sp)
  1982ec:	df000017 	ldw	fp,0(sp)
  1982f0:	dec00204 	addi	sp,sp,8
  1982f4:	f800283a 	ret

001982f8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  1982f8:	defff204 	addi	sp,sp,-56
  1982fc:	dfc00d15 	stw	ra,52(sp)
  198300:	df000c15 	stw	fp,48(sp)
  198304:	df000c04 	addi	fp,sp,48
  198308:	e13ffc15 	stw	r4,-16(fp)
  19830c:	e17ffd15 	stw	r5,-12(fp)
  198310:	e1bffe15 	stw	r6,-8(fp)
  198314:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  198318:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  19831c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  198320:	e0bfff17 	ldw	r2,-4(fp)
  198324:	1090000c 	andi	r2,r2,16384
  198328:	1005003a 	cmpeq	r2,r2,zero
  19832c:	10803fcc 	andi	r2,r2,255
  198330:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  198334:	00001306 	br	198384 <altera_avalon_uart_read+0x8c>
    {
      count++;
  198338:	e0bff517 	ldw	r2,-44(fp)
  19833c:	10800044 	addi	r2,r2,1
  198340:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  198344:	e0bffd17 	ldw	r2,-12(fp)
  198348:	10c00044 	addi	r3,r2,1
  19834c:	e0fffd15 	stw	r3,-12(fp)
  198350:	e0fffc17 	ldw	r3,-16(fp)
  198354:	18c00217 	ldw	r3,8(r3)
  198358:	e13ffc17 	ldw	r4,-16(fp)
  19835c:	20c7883a 	add	r3,r4,r3
  198360:	18c00704 	addi	r3,r3,28
  198364:	18c00003 	ldbu	r3,0(r3)
  198368:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  19836c:	e0bffc17 	ldw	r2,-16(fp)
  198370:	10800217 	ldw	r2,8(r2)
  198374:	10800044 	addi	r2,r2,1
  198378:	10c00fcc 	andi	r3,r2,63
  19837c:	e0bffc17 	ldw	r2,-16(fp)
  198380:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  198384:	e0fff517 	ldw	r3,-44(fp)
  198388:	e0bffe17 	ldw	r2,-8(fp)
  19838c:	1880050e 	bge	r3,r2,1983a4 <altera_avalon_uart_read+0xac>
  198390:	e0bffc17 	ldw	r2,-16(fp)
  198394:	10c00217 	ldw	r3,8(r2)
  198398:	e0bffc17 	ldw	r2,-16(fp)
  19839c:	10800317 	ldw	r2,12(r2)
  1983a0:	18bfe51e 	bne	r3,r2,198338 <__alt_data_end+0xfff98338>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  1983a4:	e0bff517 	ldw	r2,-44(fp)
  1983a8:	1000251e 	bne	r2,zero,198440 <altera_avalon_uart_read+0x148>
  1983ac:	e0bffc17 	ldw	r2,-16(fp)
  1983b0:	10c00217 	ldw	r3,8(r2)
  1983b4:	e0bffc17 	ldw	r2,-16(fp)
  1983b8:	10800317 	ldw	r2,12(r2)
  1983bc:	1880201e 	bne	r3,r2,198440 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  1983c0:	e0bff617 	ldw	r2,-40(fp)
  1983c4:	1000071e 	bne	r2,zero,1983e4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  1983c8:	01982a80 	call	1982a8 <alt_get_errno>
  1983cc:	1007883a 	mov	r3,r2
  1983d0:	008002c4 	movi	r2,11
  1983d4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  1983d8:	00800044 	movi	r2,1
  1983dc:	e0bff405 	stb	r2,-48(fp)
        break;
  1983e0:	00001b06 	br	198450 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1983e4:	0005303a 	rdctl	r2,status
  1983e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1983ec:	e0fff817 	ldw	r3,-32(fp)
  1983f0:	00bfff84 	movi	r2,-2
  1983f4:	1884703a 	and	r2,r3,r2
  1983f8:	1001703a 	wrctl	status,r2
  
  return context;
  1983fc:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  198400:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  198404:	e0bffc17 	ldw	r2,-16(fp)
  198408:	10800117 	ldw	r2,4(r2)
  19840c:	10c02014 	ori	r3,r2,128
  198410:	e0bffc17 	ldw	r2,-16(fp)
  198414:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  198418:	e0bffc17 	ldw	r2,-16(fp)
  19841c:	10800017 	ldw	r2,0(r2)
  198420:	10800304 	addi	r2,r2,12
  198424:	e0fffc17 	ldw	r3,-16(fp)
  198428:	18c00117 	ldw	r3,4(r3)
  19842c:	10c00035 	stwio	r3,0(r2)
  198430:	e0bff717 	ldw	r2,-36(fp)
  198434:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  198438:	e0bff917 	ldw	r2,-28(fp)
  19843c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  198440:	e0bff517 	ldw	r2,-44(fp)
  198444:	1000021e 	bne	r2,zero,198450 <altera_avalon_uart_read+0x158>
  198448:	e0bffe17 	ldw	r2,-8(fp)
  19844c:	103fb91e 	bne	r2,zero,198334 <__alt_data_end+0xfff98334>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  198450:	0005303a 	rdctl	r2,status
  198454:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  198458:	e0fffa17 	ldw	r3,-24(fp)
  19845c:	00bfff84 	movi	r2,-2
  198460:	1884703a 	and	r2,r3,r2
  198464:	1001703a 	wrctl	status,r2
  
  return context;
  198468:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  19846c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  198470:	e0bffc17 	ldw	r2,-16(fp)
  198474:	10800117 	ldw	r2,4(r2)
  198478:	10c02014 	ori	r3,r2,128
  19847c:	e0bffc17 	ldw	r2,-16(fp)
  198480:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  198484:	e0bffc17 	ldw	r2,-16(fp)
  198488:	10800017 	ldw	r2,0(r2)
  19848c:	10800304 	addi	r2,r2,12
  198490:	e0fffc17 	ldw	r3,-16(fp)
  198494:	18c00117 	ldw	r3,4(r3)
  198498:	10c00035 	stwio	r3,0(r2)
  19849c:	e0bff717 	ldw	r2,-36(fp)
  1984a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1984a4:	e0bffb17 	ldw	r2,-20(fp)
  1984a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  1984ac:	e0bff403 	ldbu	r2,-48(fp)
  1984b0:	10000226 	beq	r2,zero,1984bc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  1984b4:	00bffd44 	movi	r2,-11
  1984b8:	00000106 	br	1984c0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  1984bc:	e0bff517 	ldw	r2,-44(fp)
  }
}
  1984c0:	e037883a 	mov	sp,fp
  1984c4:	dfc00117 	ldw	ra,4(sp)
  1984c8:	df000017 	ldw	fp,0(sp)
  1984cc:	dec00204 	addi	sp,sp,8
  1984d0:	f800283a 	ret

001984d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1984d4:	defffe04 	addi	sp,sp,-8
  1984d8:	dfc00115 	stw	ra,4(sp)
  1984dc:	df000015 	stw	fp,0(sp)
  1984e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1984e4:	008006b4 	movhi	r2,26
  1984e8:	10847104 	addi	r2,r2,4548
  1984ec:	10800017 	ldw	r2,0(r2)
  1984f0:	10000526 	beq	r2,zero,198508 <alt_get_errno+0x34>
  1984f4:	008006b4 	movhi	r2,26
  1984f8:	10847104 	addi	r2,r2,4548
  1984fc:	10800017 	ldw	r2,0(r2)
  198500:	103ee83a 	callr	r2
  198504:	00000206 	br	198510 <alt_get_errno+0x3c>
  198508:	008006b4 	movhi	r2,26
  19850c:	108b6b04 	addi	r2,r2,11692
}
  198510:	e037883a 	mov	sp,fp
  198514:	dfc00117 	ldw	ra,4(sp)
  198518:	df000017 	ldw	fp,0(sp)
  19851c:	dec00204 	addi	sp,sp,8
  198520:	f800283a 	ret

00198524 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  198524:	defff204 	addi	sp,sp,-56
  198528:	dfc00d15 	stw	ra,52(sp)
  19852c:	df000c15 	stw	fp,48(sp)
  198530:	df000c04 	addi	fp,sp,48
  198534:	e13ffc15 	stw	r4,-16(fp)
  198538:	e17ffd15 	stw	r5,-12(fp)
  19853c:	e1bffe15 	stw	r6,-8(fp)
  198540:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  198544:	e0bffe17 	ldw	r2,-8(fp)
  198548:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  19854c:	e0bfff17 	ldw	r2,-4(fp)
  198550:	1090000c 	andi	r2,r2,16384
  198554:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  198558:	00003c06 	br	19864c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  19855c:	e0bffc17 	ldw	r2,-16(fp)
  198560:	10800517 	ldw	r2,20(r2)
  198564:	10800044 	addi	r2,r2,1
  198568:	10800fcc 	andi	r2,r2,63
  19856c:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  198570:	e0bffc17 	ldw	r2,-16(fp)
  198574:	10c00417 	ldw	r3,16(r2)
  198578:	e0bff617 	ldw	r2,-40(fp)
  19857c:	1880221e 	bne	r3,r2,198608 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  198580:	e0bff517 	ldw	r2,-44(fp)
  198584:	10000526 	beq	r2,zero,19859c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  198588:	01984d40 	call	1984d4 <alt_get_errno>
  19858c:	1007883a 	mov	r3,r2
  198590:	008002c4 	movi	r2,11
  198594:	18800015 	stw	r2,0(r3)
        break;
  198598:	00002e06 	br	198654 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19859c:	0005303a 	rdctl	r2,status
  1985a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1985a4:	e0fff817 	ldw	r3,-32(fp)
  1985a8:	00bfff84 	movi	r2,-2
  1985ac:	1884703a 	and	r2,r3,r2
  1985b0:	1001703a 	wrctl	status,r2
  
  return context;
  1985b4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  1985b8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  1985bc:	e0bffc17 	ldw	r2,-16(fp)
  1985c0:	10800117 	ldw	r2,4(r2)
  1985c4:	10c11014 	ori	r3,r2,1088
  1985c8:	e0bffc17 	ldw	r2,-16(fp)
  1985cc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  1985d0:	e0bffc17 	ldw	r2,-16(fp)
  1985d4:	10800017 	ldw	r2,0(r2)
  1985d8:	10800304 	addi	r2,r2,12
  1985dc:	e0fffc17 	ldw	r3,-16(fp)
  1985e0:	18c00117 	ldw	r3,4(r3)
  1985e4:	10c00035 	stwio	r3,0(r2)
  1985e8:	e0bff717 	ldw	r2,-36(fp)
  1985ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1985f0:	e0bff917 	ldw	r2,-28(fp)
  1985f4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  1985f8:	e0bffc17 	ldw	r2,-16(fp)
  1985fc:	10c00417 	ldw	r3,16(r2)
  198600:	e0bff617 	ldw	r2,-40(fp)
  198604:	18bffc26 	beq	r3,r2,1985f8 <__alt_data_end+0xfff985f8>
      }
    }

    count--;
  198608:	e0bff417 	ldw	r2,-48(fp)
  19860c:	10bfffc4 	addi	r2,r2,-1
  198610:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  198614:	e0bffc17 	ldw	r2,-16(fp)
  198618:	10c00517 	ldw	r3,20(r2)
  19861c:	e0bffd17 	ldw	r2,-12(fp)
  198620:	11000044 	addi	r4,r2,1
  198624:	e13ffd15 	stw	r4,-12(fp)
  198628:	10800003 	ldbu	r2,0(r2)
  19862c:	1009883a 	mov	r4,r2
  198630:	e0bffc17 	ldw	r2,-16(fp)
  198634:	10c5883a 	add	r2,r2,r3
  198638:	10801704 	addi	r2,r2,92
  19863c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  198640:	e0bffc17 	ldw	r2,-16(fp)
  198644:	e0fff617 	ldw	r3,-40(fp)
  198648:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  19864c:	e0bff417 	ldw	r2,-48(fp)
  198650:	103fc21e 	bne	r2,zero,19855c <__alt_data_end+0xfff9855c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  198654:	0005303a 	rdctl	r2,status
  198658:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  19865c:	e0fffa17 	ldw	r3,-24(fp)
  198660:	00bfff84 	movi	r2,-2
  198664:	1884703a 	and	r2,r3,r2
  198668:	1001703a 	wrctl	status,r2
  
  return context;
  19866c:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  198670:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  198674:	e0bffc17 	ldw	r2,-16(fp)
  198678:	10800117 	ldw	r2,4(r2)
  19867c:	10c11014 	ori	r3,r2,1088
  198680:	e0bffc17 	ldw	r2,-16(fp)
  198684:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  198688:	e0bffc17 	ldw	r2,-16(fp)
  19868c:	10800017 	ldw	r2,0(r2)
  198690:	10800304 	addi	r2,r2,12
  198694:	e0fffc17 	ldw	r3,-16(fp)
  198698:	18c00117 	ldw	r3,4(r3)
  19869c:	10c00035 	stwio	r3,0(r2)
  1986a0:	e0bff717 	ldw	r2,-36(fp)
  1986a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1986a8:	e0bffb17 	ldw	r2,-20(fp)
  1986ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  1986b0:	e0fffe17 	ldw	r3,-8(fp)
  1986b4:	e0bff417 	ldw	r2,-48(fp)
  1986b8:	1885c83a 	sub	r2,r3,r2
}
  1986bc:	e037883a 	mov	sp,fp
  1986c0:	dfc00117 	ldw	ra,4(sp)
  1986c4:	df000017 	ldw	fp,0(sp)
  1986c8:	dec00204 	addi	sp,sp,8
  1986cc:	f800283a 	ret

001986d0 <chThdAddRef>:
 * @return              The same thread pointer passed as parameter
 *                      representing the new reference.
 *
 * @api
 */
Thread *chThdAddRef(Thread *tp) {
  1986d0:	defffc04 	addi	sp,sp,-16
  1986d4:	df000315 	stw	fp,12(sp)
  1986d8:	df000304 	addi	fp,sp,12
  1986dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1986e0:	0005303a 	rdctl	r2,status
  1986e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1986e8:	e0fffd17 	ldw	r3,-12(fp)
  1986ec:	00bfff84 	movi	r2,-2
  1986f0:	1884703a 	and	r2,r3,r2
  1986f4:	1001703a 	wrctl	status,r2

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "chThdAddRef(), #1", "too many references");
  tp->p_refs++;
  1986f8:	e0bfff17 	ldw	r2,-4(fp)
  1986fc:	10800783 	ldbu	r2,30(r2)
  198700:	10800044 	addi	r2,r2,1
  198704:	1007883a 	mov	r3,r2
  198708:	e0bfff17 	ldw	r2,-4(fp)
  19870c:	10c00785 	stb	r3,30(r2)
  198710:	00800044 	movi	r2,1
  198714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  198718:	e0bffe17 	ldw	r2,-8(fp)
  19871c:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return tp;
  198720:	e0bfff17 	ldw	r2,-4(fp)
}
  198724:	e037883a 	mov	sp,fp
  198728:	df000017 	ldw	fp,0(sp)
  19872c:	dec00104 	addi	sp,sp,4
  198730:	f800283a 	ret

00198734 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(Thread *tp) {
  198734:	defffa04 	addi	sp,sp,-24
  198738:	dfc00515 	stw	ra,20(sp)
  19873c:	df000415 	stw	fp,16(sp)
  198740:	df000404 	addi	fp,sp,16
  198744:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  198748:	0005303a 	rdctl	r2,status
  19874c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  198750:	e0fffd17 	ldw	r3,-12(fp)
  198754:	00bfff84 	movi	r2,-2
  198758:	1884703a 	and	r2,r3,r2
  19875c:	1001703a 	wrctl	status,r2
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "chThdRelease(), #1", "not referenced");
  refs = --tp->p_refs;
  198760:	e0bfff17 	ldw	r2,-4(fp)
  198764:	10800783 	ldbu	r2,30(r2)
  198768:	10bfffc4 	addi	r2,r2,-1
  19876c:	1007883a 	mov	r3,r2
  198770:	e0bfff17 	ldw	r2,-4(fp)
  198774:	10c00785 	stb	r3,30(r2)
  198778:	e0bfff17 	ldw	r2,-4(fp)
  19877c:	10800783 	ldbu	r2,30(r2)
  198780:	e0bffc05 	stb	r2,-16(fp)
  198784:	00800044 	movi	r2,1
  198788:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  19878c:	e0bffe17 	ldw	r2,-8(fp)
  198790:	1001703a 	wrctl	status,r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == THD_STATE_FINAL)) {
  198794:	e0bffc03 	ldbu	r2,-16(fp)
  198798:	10002b1e 	bne	r2,zero,198848 <chThdRelease+0x114>
  19879c:	e0bfff17 	ldw	r2,-4(fp)
  1987a0:	10800703 	ldbu	r2,28(r2)
  1987a4:	10803fcc 	andi	r2,r2,255
  1987a8:	10800398 	cmpnei	r2,r2,14
  1987ac:	1000261e 	bne	r2,zero,198848 <chThdRelease+0x114>
    switch (tp->p_flags & THD_MEM_MODE_MASK) {
  1987b0:	e0bfff17 	ldw	r2,-4(fp)
  1987b4:	10800743 	ldbu	r2,29(r2)
  1987b8:	10803fcc 	andi	r2,r2,255
  1987bc:	108000cc 	andi	r2,r2,3
  1987c0:	10c00060 	cmpeqi	r3,r2,1
  1987c4:	1800031e 	bne	r3,zero,1987d4 <chThdRelease+0xa0>
  1987c8:	108000a0 	cmpeqi	r2,r2,2
  1987cc:	10000e1e 	bne	r2,zero,198808 <chThdRelease+0xd4>
  1987d0:	00001d06 	br	198848 <chThdRelease+0x114>
#if CH_USE_HEAP
    case THD_MEM_MODE_HEAP:
#if CH_USE_REGISTRY
      REG_REMOVE(tp);
  1987d4:	e0bfff17 	ldw	r2,-4(fp)
  1987d8:	10800517 	ldw	r2,20(r2)
  1987dc:	e0ffff17 	ldw	r3,-4(fp)
  1987e0:	18c00417 	ldw	r3,16(r3)
  1987e4:	10c00415 	stw	r3,16(r2)
  1987e8:	e0bfff17 	ldw	r2,-4(fp)
  1987ec:	10800417 	ldw	r2,16(r2)
  1987f0:	e0ffff17 	ldw	r3,-4(fp)
  1987f4:	18c00517 	ldw	r3,20(r3)
  1987f8:	10c00515 	stw	r3,20(r2)
#endif
      chHeapFree(tp);
  1987fc:	e13fff17 	ldw	r4,-4(fp)
  198800:	0198c740 	call	198c74 <chHeapFree>
      break;
  198804:	00001006 	br	198848 <chThdRelease+0x114>
#endif
#if CH_USE_MEMPOOLS
    case THD_MEM_MODE_MEMPOOL:
#if CH_USE_REGISTRY
      REG_REMOVE(tp);
  198808:	e0bfff17 	ldw	r2,-4(fp)
  19880c:	10800517 	ldw	r2,20(r2)
  198810:	e0ffff17 	ldw	r3,-4(fp)
  198814:	18c00417 	ldw	r3,16(r3)
  198818:	10c00415 	stw	r3,16(r2)
  19881c:	e0bfff17 	ldw	r2,-4(fp)
  198820:	10800417 	ldw	r2,16(r2)
  198824:	e0ffff17 	ldw	r3,-4(fp)
  198828:	18c00517 	ldw	r3,20(r3)
  19882c:	10c00515 	stw	r3,20(r2)
#endif
      chPoolFree(tp->p_mpool, tp);
  198830:	e0bfff17 	ldw	r2,-4(fp)
  198834:	10801117 	ldw	r2,68(r2)
  198838:	1009883a 	mov	r4,r2
  19883c:	e17fff17 	ldw	r5,-4(fp)
  198840:	01992340 	call	199234 <chPoolFree>
      break;
  198844:	0001883a 	nop
#endif
    }
  }
}
  198848:	e037883a 	mov	sp,fp
  19884c:	dfc00117 	ldw	ra,4(sp)
  198850:	df000017 	ldw	fp,0(sp)
  198854:	dec00204 	addi	sp,sp,8
  198858:	f800283a 	ret

0019885c <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
Thread *chThdCreateFromHeap(MemoryHeap *heapp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
  19885c:	defff504 	addi	sp,sp,-44
  198860:	dfc00a15 	stw	ra,40(sp)
  198864:	df000915 	stw	fp,36(sp)
  198868:	df000904 	addi	fp,sp,36
  19886c:	e13ffc15 	stw	r4,-16(fp)
  198870:	e17ffd15 	stw	r5,-12(fp)
  198874:	e1bffe15 	stw	r6,-8(fp)
  198878:	e1ffff15 	stw	r7,-4(fp)
  void *wsp;
  Thread *tp;

  wsp = chHeapAlloc(heapp, size);
  19887c:	e13ffc17 	ldw	r4,-16(fp)
  198880:	e17ffd17 	ldw	r5,-12(fp)
  198884:	0198ad00 	call	198ad0 <chHeapAlloc>
  198888:	e0bff815 	stw	r2,-32(fp)
  if (wsp == NULL)
  19888c:	e0bff817 	ldw	r2,-32(fp)
  198890:	1000021e 	bne	r2,zero,19889c <chThdCreateFromHeap+0x40>
    return NULL;
  198894:	0005883a 	mov	r2,zero
  198898:	00001906 	br	198900 <chThdCreateFromHeap+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19889c:	0005303a 	rdctl	r2,status
  1988a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1988a4:	e0fffa17 	ldw	r3,-24(fp)
  1988a8:	00bfff84 	movi	r2,-2
  1988ac:	1884703a 	and	r2,r3,r2
  1988b0:	1001703a 	wrctl	status,r2
                  (uint8_t *)wsp + size,
                  CH_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  1988b4:	e0800217 	ldw	r2,8(fp)
  1988b8:	d8800015 	stw	r2,0(sp)
  1988bc:	e13ff817 	ldw	r4,-32(fp)
  1988c0:	e17ffd17 	ldw	r5,-12(fp)
  1988c4:	e1bffe17 	ldw	r6,-8(fp)
  1988c8:	e1ffff17 	ldw	r7,-4(fp)
  1988cc:	01959080 	call	195908 <chThdCreateI>
  1988d0:	e0bff915 	stw	r2,-28(fp)
  tp->p_flags = THD_MEM_MODE_HEAP;
  1988d4:	e0bff917 	ldw	r2,-28(fp)
  1988d8:	00c00044 	movi	r3,1
  1988dc:	10c00745 	stb	r3,29(r2)
  chSchWakeupS(tp, RDY_OK);
  1988e0:	e13ff917 	ldw	r4,-28(fp)
  1988e4:	000b883a 	mov	r5,zero
  1988e8:	0199db40 	call	199db4 <chSchWakeupS>
  1988ec:	00800044 	movi	r2,1
  1988f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1988f4:	e0bffb17 	ldw	r2,-20(fp)
  1988f8:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return tp;
  1988fc:	e0bff917 	ldw	r2,-28(fp)
}
  198900:	e037883a 	mov	sp,fp
  198904:	dfc00117 	ldw	ra,4(sp)
  198908:	df000017 	ldw	fp,0(sp)
  19890c:	dec00204 	addi	sp,sp,8
  198910:	f800283a 	ret

00198914 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
Thread *chThdCreateFromMemoryPool(MemoryPool *mp, tprio_t prio,
                                  tfunc_t pf, void *arg) {
  198914:	defff504 	addi	sp,sp,-44
  198918:	dfc00a15 	stw	ra,40(sp)
  19891c:	df000915 	stw	fp,36(sp)
  198920:	df000904 	addi	fp,sp,36
  198924:	e13ffc15 	stw	r4,-16(fp)
  198928:	e17ffd15 	stw	r5,-12(fp)
  19892c:	e1bffe15 	stw	r6,-8(fp)
  198930:	e1ffff15 	stw	r7,-4(fp)
  void *wsp;
  Thread *tp;

  chDbgCheck(mp != NULL, "chThdCreateFromMemoryPool");

  wsp = chPoolAlloc(mp);
  198934:	e13ffc17 	ldw	r4,-16(fp)
  198938:	01991780 	call	199178 <chPoolAlloc>
  19893c:	e0bff815 	stw	r2,-32(fp)
  if (wsp == NULL)
  198940:	e0bff817 	ldw	r2,-32(fp)
  198944:	1000021e 	bne	r2,zero,198950 <chThdCreateFromMemoryPool+0x3c>
    return NULL;
  198948:	0005883a 	mov	r2,zero
  19894c:	00001e06 	br	1989c8 <chThdCreateFromMemoryPool+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  198950:	0005303a 	rdctl	r2,status
  198954:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  198958:	e0fffa17 	ldw	r3,-24(fp)
  19895c:	00bfff84 	movi	r2,-2
  198960:	1884703a 	and	r2,r3,r2
  198964:	1001703a 	wrctl	status,r2
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  198968:	e0bffc17 	ldw	r2,-16(fp)
  19896c:	10c00117 	ldw	r3,4(r2)
  198970:	e0bfff17 	ldw	r2,-4(fp)
  198974:	d8800015 	stw	r2,0(sp)
  198978:	e13ff817 	ldw	r4,-32(fp)
  19897c:	180b883a 	mov	r5,r3
  198980:	e1bffd17 	ldw	r6,-12(fp)
  198984:	e1fffe17 	ldw	r7,-8(fp)
  198988:	01959080 	call	195908 <chThdCreateI>
  19898c:	e0bff915 	stw	r2,-28(fp)
  tp->p_flags = THD_MEM_MODE_MEMPOOL;
  198990:	e0bff917 	ldw	r2,-28(fp)
  198994:	00c00084 	movi	r3,2
  198998:	10c00745 	stb	r3,29(r2)
  tp->p_mpool = mp;
  19899c:	e0bff917 	ldw	r2,-28(fp)
  1989a0:	e0fffc17 	ldw	r3,-16(fp)
  1989a4:	10c01115 	stw	r3,68(r2)
  chSchWakeupS(tp, RDY_OK);
  1989a8:	e13ff917 	ldw	r4,-28(fp)
  1989ac:	000b883a 	mov	r5,zero
  1989b0:	0199db40 	call	199db4 <chSchWakeupS>
  1989b4:	00800044 	movi	r2,1
  1989b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1989bc:	e0bffb17 	ldw	r2,-20(fp)
  1989c0:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return tp;
  1989c4:	e0bff917 	ldw	r2,-28(fp)
}
  1989c8:	e037883a 	mov	sp,fp
  1989cc:	dfc00117 	ldw	ra,4(sp)
  1989d0:	df000017 	ldw	fp,0(sp)
  1989d4:	dec00204 	addi	sp,sp,8
  1989d8:	f800283a 	ret

001989dc <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  1989dc:	defffe04 	addi	sp,sp,-8
  1989e0:	dfc00115 	stw	ra,4(sp)
  1989e4:	df000015 	stw	fp,0(sp)
  1989e8:	d839883a 	mov	fp,sp
  default_heap.h_provider = chCoreAlloc;
  1989ec:	008006b4 	movhi	r2,26
  1989f0:	108b7f04 	addi	r2,r2,11772
  1989f4:	00c006b4 	movhi	r3,26
  1989f8:	18e3c704 	addi	r3,r3,-28900
  1989fc:	10c00015 	stw	r3,0(r2)
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
  198a00:	008006b4 	movhi	r2,26
  198a04:	108b7f04 	addi	r2,r2,11772
  198a08:	10000115 	stw	zero,4(r2)
  default_heap.h_free.h.size = 0;
  198a0c:	008006b4 	movhi	r2,26
  198a10:	108b7f04 	addi	r2,r2,11772
  198a14:	10000215 	stw	zero,8(r2)
#if CH_USE_MUTEXES || defined(__DOXYGEN__)
  chMtxInit(&default_heap.h_mtx);
  198a18:	010006b4 	movhi	r4,26
  198a1c:	210b8204 	addi	r4,r4,11784
  198a20:	01993c40 	call	1993c4 <chMtxInit>
#else
  chSemInit(&default_heap.h_sem, 1);
#endif
}
  198a24:	e037883a 	mov	sp,fp
  198a28:	dfc00117 	ldw	ra,4(sp)
  198a2c:	df000017 	ldw	fp,0(sp)
  198a30:	dec00204 	addi	sp,sp,8
  198a34:	f800283a 	ret

00198a38 <chHeapInit>:
 * @param[in] buf       heap buffer base
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapInit(MemoryHeap *heapp, void *buf, size_t size) {
  198a38:	defffa04 	addi	sp,sp,-24
  198a3c:	dfc00515 	stw	ra,20(sp)
  198a40:	df000415 	stw	fp,16(sp)
  198a44:	df000404 	addi	fp,sp,16
  198a48:	e13ffd15 	stw	r4,-12(fp)
  198a4c:	e17ffe15 	stw	r5,-8(fp)
  198a50:	e1bfff15 	stw	r6,-4(fp)
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size), "chHeapInit");
  198a54:	e0bffe17 	ldw	r2,-8(fp)
  198a58:	108000cc 	andi	r2,r2,3
  198a5c:	1000041e 	bne	r2,zero,198a70 <chHeapInit+0x38>
  198a60:	e0bfff17 	ldw	r2,-4(fp)
  198a64:	108000cc 	andi	r2,r2,3
  198a68:	1000011e 	bne	r2,zero,198a70 <chHeapInit+0x38>
  198a6c:	0001883a 	nop

  heapp->h_provider = (memgetfunc_t)NULL;
  198a70:	e0bffd17 	ldw	r2,-12(fp)
  198a74:	10000015 	stw	zero,0(r2)
  heapp->h_free.h.u.next = hp = buf;
  198a78:	e0bffe17 	ldw	r2,-8(fp)
  198a7c:	e0bffc15 	stw	r2,-16(fp)
  198a80:	e0bffd17 	ldw	r2,-12(fp)
  198a84:	e0fffc17 	ldw	r3,-16(fp)
  198a88:	10c00115 	stw	r3,4(r2)
  heapp->h_free.h.size = 0;
  198a8c:	e0bffd17 	ldw	r2,-12(fp)
  198a90:	10000215 	stw	zero,8(r2)
  hp->h.u.next = NULL;
  198a94:	e0bffc17 	ldw	r2,-16(fp)
  198a98:	10000015 	stw	zero,0(r2)
  hp->h.size = size - sizeof(union heap_header);
  198a9c:	e0bfff17 	ldw	r2,-4(fp)
  198aa0:	10fffe04 	addi	r3,r2,-8
  198aa4:	e0bffc17 	ldw	r2,-16(fp)
  198aa8:	10c00115 	stw	r3,4(r2)
#if CH_USE_MUTEXES || defined(__DOXYGEN__)
  chMtxInit(&heapp->h_mtx);
  198aac:	e0bffd17 	ldw	r2,-12(fp)
  198ab0:	10800304 	addi	r2,r2,12
  198ab4:	1009883a 	mov	r4,r2
  198ab8:	01993c40 	call	1993c4 <chMtxInit>
#else
  chSemInit(&heapp->h_sem, 1);
#endif
}
  198abc:	e037883a 	mov	sp,fp
  198ac0:	dfc00117 	ldw	ra,4(sp)
  198ac4:	df000017 	ldw	fp,0(sp)
  198ac8:	dec00204 	addi	sp,sp,8
  198acc:	f800283a 	ret

00198ad0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(MemoryHeap *heapp, size_t size) {
  198ad0:	defff904 	addi	sp,sp,-28
  198ad4:	dfc00615 	stw	ra,24(sp)
  198ad8:	df000515 	stw	fp,20(sp)
  198adc:	df000504 	addi	fp,sp,20
  198ae0:	e13ffe15 	stw	r4,-8(fp)
  198ae4:	e17fff15 	stw	r5,-4(fp)
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
  198ae8:	e0bffe17 	ldw	r2,-8(fp)
  198aec:	1000031e 	bne	r2,zero,198afc <chHeapAlloc+0x2c>
    heapp = &default_heap;
  198af0:	008006b4 	movhi	r2,26
  198af4:	108b7f04 	addi	r2,r2,11772
  198af8:	e0bffe15 	stw	r2,-8(fp)

  size = MEM_ALIGN_NEXT(size);
  198afc:	e0bfff17 	ldw	r2,-4(fp)
  198b00:	10c000c4 	addi	r3,r2,3
  198b04:	00bfff04 	movi	r2,-4
  198b08:	1884703a 	and	r2,r3,r2
  198b0c:	e0bfff15 	stw	r2,-4(fp)
  qp = &heapp->h_free;
  198b10:	e0bffe17 	ldw	r2,-8(fp)
  198b14:	10800104 	addi	r2,r2,4
  198b18:	e0bffb15 	stw	r2,-20(fp)
  H_LOCK(heapp);
  198b1c:	e0bffe17 	ldw	r2,-8(fp)
  198b20:	10800304 	addi	r2,r2,12
  198b24:	1009883a 	mov	r4,r2
  198b28:	01994080 	call	199408 <chMtxLock>

  while (qp->h.u.next != NULL) {
  198b2c:	00003006 	br	198bf0 <chHeapAlloc+0x120>
    hp = qp->h.u.next;
  198b30:	e0bffb17 	ldw	r2,-20(fp)
  198b34:	10800017 	ldw	r2,0(r2)
  198b38:	e0bffc15 	stw	r2,-16(fp)
    if (hp->h.size >= size) {
  198b3c:	e0bffc17 	ldw	r2,-16(fp)
  198b40:	10c00117 	ldw	r3,4(r2)
  198b44:	e0bfff17 	ldw	r2,-4(fp)
  198b48:	18802736 	bltu	r3,r2,198be8 <chHeapAlloc+0x118>
      if (hp->h.size < size + sizeof(union heap_header)) {
  198b4c:	e0bffc17 	ldw	r2,-16(fp)
  198b50:	10c00117 	ldw	r3,4(r2)
  198b54:	e0bfff17 	ldw	r2,-4(fp)
  198b58:	10800204 	addi	r2,r2,8
  198b5c:	1880052e 	bgeu	r3,r2,198b74 <chHeapAlloc+0xa4>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
  198b60:	e0bffc17 	ldw	r2,-16(fp)
  198b64:	10c00017 	ldw	r3,0(r2)
  198b68:	e0bffb17 	ldw	r2,-20(fp)
  198b6c:	10c00015 	stw	r3,0(r2)
  198b70:	00001606 	br	198bcc <chHeapAlloc+0xfc>
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
  198b74:	e0bfff17 	ldw	r2,-4(fp)
  198b78:	10800204 	addi	r2,r2,8
  198b7c:	e0fffc17 	ldw	r3,-16(fp)
  198b80:	1885883a 	add	r2,r3,r2
  198b84:	e0bffd15 	stw	r2,-12(fp)
        fp->h.u.next = hp->h.u.next;
  198b88:	e0bffc17 	ldw	r2,-16(fp)
  198b8c:	10c00017 	ldw	r3,0(r2)
  198b90:	e0bffd17 	ldw	r2,-12(fp)
  198b94:	10c00015 	stw	r3,0(r2)
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
  198b98:	e0bffc17 	ldw	r2,-16(fp)
  198b9c:	10c00117 	ldw	r3,4(r2)
  198ba0:	e0bfff17 	ldw	r2,-4(fp)
  198ba4:	1885c83a 	sub	r2,r3,r2
  198ba8:	10fffe04 	addi	r3,r2,-8
  198bac:	e0bffd17 	ldw	r2,-12(fp)
  198bb0:	10c00115 	stw	r3,4(r2)
        qp->h.u.next = fp;
  198bb4:	e0bffb17 	ldw	r2,-20(fp)
  198bb8:	e0fffd17 	ldw	r3,-12(fp)
  198bbc:	10c00015 	stw	r3,0(r2)
        hp->h.size = size;
  198bc0:	e0bffc17 	ldw	r2,-16(fp)
  198bc4:	e0ffff17 	ldw	r3,-4(fp)
  198bc8:	10c00115 	stw	r3,4(r2)
      }
      hp->h.u.heap = heapp;
  198bcc:	e0bffc17 	ldw	r2,-16(fp)
  198bd0:	e0fffe17 	ldw	r3,-8(fp)
  198bd4:	10c00015 	stw	r3,0(r2)

      H_UNLOCK(heapp);
  198bd8:	01996940 	call	199694 <chMtxUnlock>
      return (void *)(hp + 1);
  198bdc:	e0bffc17 	ldw	r2,-16(fp)
  198be0:	10800204 	addi	r2,r2,8
  198be4:	00001e06 	br	198c60 <chHeapAlloc+0x190>
    }
    qp = hp;
  198be8:	e0bffc17 	ldw	r2,-16(fp)
  198bec:	e0bffb15 	stw	r2,-20(fp)

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
  198bf0:	e0bffb17 	ldw	r2,-20(fp)
  198bf4:	10800017 	ldw	r2,0(r2)
  198bf8:	103fcd1e 	bne	r2,zero,198b30 <__alt_data_end+0xfff98b30>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
  198bfc:	01996940 	call	199694 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
  198c00:	e0bffe17 	ldw	r2,-8(fp)
  198c04:	10800017 	ldw	r2,0(r2)
  198c08:	10001426 	beq	r2,zero,198c5c <chHeapAlloc+0x18c>
    hp = heapp->h_provider(size + sizeof(union heap_header));
  198c0c:	e0bffe17 	ldw	r2,-8(fp)
  198c10:	10800017 	ldw	r2,0(r2)
  198c14:	e0ffff17 	ldw	r3,-4(fp)
  198c18:	18c00204 	addi	r3,r3,8
  198c1c:	1809883a 	mov	r4,r3
  198c20:	103ee83a 	callr	r2
  198c24:	e0bffc15 	stw	r2,-16(fp)
    if (hp != NULL) {
  198c28:	e0bffc17 	ldw	r2,-16(fp)
  198c2c:	10000b26 	beq	r2,zero,198c5c <chHeapAlloc+0x18c>
      hp->h.u.heap = heapp;
  198c30:	e0bffc17 	ldw	r2,-16(fp)
  198c34:	e0fffe17 	ldw	r3,-8(fp)
  198c38:	10c00015 	stw	r3,0(r2)
      hp->h.size = size;
  198c3c:	e0bffc17 	ldw	r2,-16(fp)
  198c40:	e0ffff17 	ldw	r3,-4(fp)
  198c44:	10c00115 	stw	r3,4(r2)
      hp++;
  198c48:	e0bffc17 	ldw	r2,-16(fp)
  198c4c:	10800204 	addi	r2,r2,8
  198c50:	e0bffc15 	stw	r2,-16(fp)
      return (void *)hp;
  198c54:	e0bffc17 	ldw	r2,-16(fp)
  198c58:	00000106 	br	198c60 <chHeapAlloc+0x190>
    }
  }
  return NULL;
  198c5c:	0005883a 	mov	r2,zero
}
  198c60:	e037883a 	mov	sp,fp
  198c64:	dfc00117 	ldw	ra,4(sp)
  198c68:	df000017 	ldw	fp,0(sp)
  198c6c:	dec00204 	addi	sp,sp,8
  198c70:	f800283a 	ret

00198c74 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
  198c74:	defffa04 	addi	sp,sp,-24
  198c78:	dfc00515 	stw	ra,20(sp)
  198c7c:	df000415 	stw	fp,16(sp)
  198c80:	df000404 	addi	fp,sp,16
  198c84:	e13fff15 	stw	r4,-4(fp)
  union heap_header *qp, *hp;
  MemoryHeap *heapp;

  chDbgCheck(p != NULL, "chHeapFree");

  hp = (union heap_header *)p - 1;
  198c88:	e0bfff17 	ldw	r2,-4(fp)
  198c8c:	10bffe04 	addi	r2,r2,-8
  198c90:	e0bffd15 	stw	r2,-12(fp)
  heapp = hp->h.u.heap;
  198c94:	e0bffd17 	ldw	r2,-12(fp)
  198c98:	10800017 	ldw	r2,0(r2)
  198c9c:	e0bffe15 	stw	r2,-8(fp)
  qp = &heapp->h_free;
  198ca0:	e0bffe17 	ldw	r2,-8(fp)
  198ca4:	10800104 	addi	r2,r2,4
  198ca8:	e0bffc15 	stw	r2,-16(fp)
  H_LOCK(heapp);
  198cac:	e0bffe17 	ldw	r2,-8(fp)
  198cb0:	10800304 	addi	r2,r2,12
  198cb4:	1009883a 	mov	r4,r2
  198cb8:	01994080 	call	199408 <chMtxLock>

  while (TRUE) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)),
  198cbc:	e0fffd17 	ldw	r3,-12(fp)
  198cc0:	e0bffc17 	ldw	r2,-16(fp)
  198cc4:	18800736 	bltu	r3,r2,198ce4 <chHeapFree+0x70>
  198cc8:	e0bffc17 	ldw	r2,-16(fp)
  198ccc:	10800117 	ldw	r2,4(r2)
  198cd0:	10800204 	addi	r2,r2,8
  198cd4:	e0fffc17 	ldw	r3,-16(fp)
  198cd8:	1885883a 	add	r2,r3,r2
  198cdc:	e0fffd17 	ldw	r3,-12(fp)
  198ce0:	18800136 	bltu	r3,r2,198ce8 <chHeapFree+0x74>
  198ce4:	0001883a 	nop
                "chHeapFree(), #1",
                "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
  198ce8:	e0bffe17 	ldw	r2,-8(fp)
  198cec:	10c00104 	addi	r3,r2,4
  198cf0:	e0bffc17 	ldw	r2,-16(fp)
  198cf4:	18800326 	beq	r3,r2,198d04 <chHeapFree+0x90>
  198cf8:	e0bffd17 	ldw	r2,-12(fp)
  198cfc:	e0fffc17 	ldw	r3,-16(fp)
  198d00:	1880392e 	bgeu	r3,r2,198de8 <chHeapFree+0x174>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
  198d04:	e0bffc17 	ldw	r2,-16(fp)
  198d08:	10800017 	ldw	r2,0(r2)
  while (TRUE) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)),
                "chHeapFree(), #1",
                "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
  198d0c:	10000426 	beq	r2,zero,198d20 <chHeapFree+0xac>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
  198d10:	e0bffc17 	ldw	r2,-16(fp)
  198d14:	10800017 	ldw	r2,0(r2)
  198d18:	e0fffd17 	ldw	r3,-12(fp)
  198d1c:	1880322e 	bgeu	r3,r2,198de8 <chHeapFree+0x174>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
  198d20:	e0bffc17 	ldw	r2,-16(fp)
  198d24:	10c00017 	ldw	r3,0(r2)
  198d28:	e0bffd17 	ldw	r2,-12(fp)
  198d2c:	10c00015 	stw	r3,0(r2)
      qp->h.u.next = hp;
  198d30:	e0bffc17 	ldw	r2,-16(fp)
  198d34:	e0fffd17 	ldw	r3,-12(fp)
  198d38:	10c00015 	stw	r3,0(r2)
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
  198d3c:	e0bffd17 	ldw	r2,-12(fp)
  198d40:	10800117 	ldw	r2,4(r2)
  198d44:	10800204 	addi	r2,r2,8
  198d48:	e0fffd17 	ldw	r3,-12(fp)
  198d4c:	1887883a 	add	r3,r3,r2
  198d50:	e0bffd17 	ldw	r2,-12(fp)
  198d54:	10800017 	ldw	r2,0(r2)
  198d58:	18800e1e 	bne	r3,r2,198d94 <chHeapFree+0x120>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
  198d5c:	e0bffd17 	ldw	r2,-12(fp)
  198d60:	10c00117 	ldw	r3,4(r2)
  198d64:	e0bffd17 	ldw	r2,-12(fp)
  198d68:	10800017 	ldw	r2,0(r2)
  198d6c:	10800117 	ldw	r2,4(r2)
  198d70:	1885883a 	add	r2,r3,r2
  198d74:	10c00204 	addi	r3,r2,8
  198d78:	e0bffd17 	ldw	r2,-12(fp)
  198d7c:	10c00115 	stw	r3,4(r2)
        hp->h.u.next = hp->h.u.next->h.u.next;
  198d80:	e0bffd17 	ldw	r2,-12(fp)
  198d84:	10800017 	ldw	r2,0(r2)
  198d88:	10c00017 	ldw	r3,0(r2)
  198d8c:	e0bffd17 	ldw	r2,-12(fp)
  198d90:	10c00015 	stw	r3,0(r2)
      }
      if ((LIMIT(qp) == hp)) {
  198d94:	e0bffc17 	ldw	r2,-16(fp)
  198d98:	10800117 	ldw	r2,4(r2)
  198d9c:	10800204 	addi	r2,r2,8
  198da0:	e0fffc17 	ldw	r3,-16(fp)
  198da4:	1887883a 	add	r3,r3,r2
  198da8:	e0bffd17 	ldw	r2,-12(fp)
  198dac:	18800d1e 	bne	r3,r2,198de4 <chHeapFree+0x170>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
  198db0:	e0bffc17 	ldw	r2,-16(fp)
  198db4:	10c00117 	ldw	r3,4(r2)
  198db8:	e0bffd17 	ldw	r2,-12(fp)
  198dbc:	10800117 	ldw	r2,4(r2)
  198dc0:	1885883a 	add	r2,r3,r2
  198dc4:	10c00204 	addi	r3,r2,8
  198dc8:	e0bffc17 	ldw	r2,-16(fp)
  198dcc:	10c00115 	stw	r3,4(r2)
        qp->h.u.next = hp->h.u.next;
  198dd0:	e0bffd17 	ldw	r2,-12(fp)
  198dd4:	10c00017 	ldw	r3,0(r2)
  198dd8:	e0bffc17 	ldw	r2,-16(fp)
  198ddc:	10c00015 	stw	r3,0(r2)
      }
      break;
  198de0:	00000506 	br	198df8 <chHeapFree+0x184>
  198de4:	00000406 	br	198df8 <chHeapFree+0x184>
    }
    qp = qp->h.u.next;
  198de8:	e0bffc17 	ldw	r2,-16(fp)
  198dec:	10800017 	ldw	r2,0(r2)
  198df0:	e0bffc15 	stw	r2,-16(fp)
  }
  198df4:	003fb106 	br	198cbc <__alt_data_end+0xfff98cbc>

  H_UNLOCK(heapp);
  198df8:	01996940 	call	199694 <chMtxUnlock>
  return;
  198dfc:	0001883a 	nop
}
  198e00:	e037883a 	mov	sp,fp
  198e04:	dfc00117 	ldw	ra,4(sp)
  198e08:	df000017 	ldw	fp,0(sp)
  198e0c:	dec00204 	addi	sp,sp,8
  198e10:	f800283a 	ret

00198e14 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(MemoryHeap *heapp, size_t *sizep) {
  198e14:	defff904 	addi	sp,sp,-28
  198e18:	dfc00615 	stw	ra,24(sp)
  198e1c:	df000515 	stw	fp,20(sp)
  198e20:	df000504 	addi	fp,sp,20
  198e24:	e13ffe15 	stw	r4,-8(fp)
  198e28:	e17fff15 	stw	r5,-4(fp)
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
  198e2c:	e0bffe17 	ldw	r2,-8(fp)
  198e30:	1000031e 	bne	r2,zero,198e40 <chHeapStatus+0x2c>
    heapp = &default_heap;
  198e34:	008006b4 	movhi	r2,26
  198e38:	108b7f04 	addi	r2,r2,11772
  198e3c:	e0bffe15 	stw	r2,-8(fp)

  H_LOCK(heapp);
  198e40:	e0bffe17 	ldw	r2,-8(fp)
  198e44:	10800304 	addi	r2,r2,12
  198e48:	1009883a 	mov	r4,r2
  198e4c:	01994080 	call	199408 <chMtxLock>

  sz = 0;
  198e50:	e03ffd15 	stw	zero,-12(fp)
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
  198e54:	e03ffc15 	stw	zero,-16(fp)
  198e58:	e0bffe17 	ldw	r2,-8(fp)
  198e5c:	10800104 	addi	r2,r2,4
  198e60:	e0bffb15 	stw	r2,-20(fp)
  198e64:	00000c06 	br	198e98 <chHeapStatus+0x84>
    sz += qp->h.u.next->h.size;
  198e68:	e0bffb17 	ldw	r2,-20(fp)
  198e6c:	10800017 	ldw	r2,0(r2)
  198e70:	10800117 	ldw	r2,4(r2)
  198e74:	e0fffd17 	ldw	r3,-12(fp)
  198e78:	1885883a 	add	r2,r3,r2
  198e7c:	e0bffd15 	stw	r2,-12(fp)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
  198e80:	e0bffc17 	ldw	r2,-16(fp)
  198e84:	10800044 	addi	r2,r2,1
  198e88:	e0bffc15 	stw	r2,-16(fp)
  198e8c:	e0bffb17 	ldw	r2,-20(fp)
  198e90:	10800017 	ldw	r2,0(r2)
  198e94:	e0bffb15 	stw	r2,-20(fp)
  198e98:	e0bffb17 	ldw	r2,-20(fp)
  198e9c:	10800017 	ldw	r2,0(r2)
  198ea0:	103ff11e 	bne	r2,zero,198e68 <__alt_data_end+0xfff98e68>
    sz += qp->h.u.next->h.size;
  if (sizep)
  198ea4:	e0bfff17 	ldw	r2,-4(fp)
  198ea8:	10000326 	beq	r2,zero,198eb8 <chHeapStatus+0xa4>
    *sizep = sz;
  198eac:	e0bfff17 	ldw	r2,-4(fp)
  198eb0:	e0fffd17 	ldw	r3,-12(fp)
  198eb4:	10c00015 	stw	r3,0(r2)

  H_UNLOCK(heapp);
  198eb8:	01996940 	call	199694 <chMtxUnlock>
  return n;
  198ebc:	e0bffc17 	ldw	r2,-16(fp)
}
  198ec0:	e037883a 	mov	sp,fp
  198ec4:	dfc00117 	ldw	ra,4(sp)
  198ec8:	df000017 	ldw	fp,0(sp)
  198ecc:	dec00204 	addi	sp,sp,8
  198ed0:	f800283a 	ret

00198ed4 <_core_init>:
/**
 * @brief   Low level memory manager initialization.
 *
 * @notapi
 */
void _core_init(void) {
  198ed4:	deffff04 	addi	sp,sp,-4
  198ed8:	df000015 	stw	fp,0(sp)
  198edc:	d839883a 	mov	fp,sp
#if CH_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  198ee0:	008006b4 	movhi	r2,26
  198ee4:	108cb404 	addi	r2,r2,13008
  198ee8:	10c000c4 	addi	r3,r2,3
  198eec:	00bfff04 	movi	r2,-4
  198ef0:	1884703a 	and	r2,r3,r2
  198ef4:	d0a70c15 	stw	r2,-25552(gp)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
  198ef8:	00800834 	movhi	r2,32
  198efc:	10800004 	addi	r2,r2,0
  198f00:	00ffff04 	movi	r3,-4
  198f04:	10c4703a 	and	r2,r2,r3
  198f08:	d0a70d15 	stw	r2,-25548(gp)
#else
  static stkalign_t buffer[MEM_ALIGN_NEXT(CH_MEMCORE_SIZE)/MEM_ALIGN_SIZE];
  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_MEMCORE_SIZE)/MEM_ALIGN_SIZE];
#endif
}
  198f0c:	e037883a 	mov	sp,fp
  198f10:	df000017 	ldw	fp,0(sp)
  198f14:	dec00104 	addi	sp,sp,4
  198f18:	f800283a 	ret

00198f1c <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
  198f1c:	defffa04 	addi	sp,sp,-24
  198f20:	dfc00515 	stw	ra,20(sp)
  198f24:	df000415 	stw	fp,16(sp)
  198f28:	df000404 	addi	fp,sp,16
  198f2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  198f30:	0005303a 	rdctl	r2,status
  198f34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  198f38:	e0fffd17 	ldw	r3,-12(fp)
  198f3c:	00bfff84 	movi	r2,-2
  198f40:	1884703a 	and	r2,r3,r2
  198f44:	1001703a 	wrctl	status,r2
  void *p;

  chSysLock();
  p = chCoreAllocI(size);
  198f48:	e13fff17 	ldw	r4,-4(fp)
  198f4c:	0198f7c0 	call	198f7c <chCoreAllocI>
  198f50:	e0bffc15 	stw	r2,-16(fp)
  198f54:	00800044 	movi	r2,1
  198f58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  198f5c:	e0bffe17 	ldw	r2,-8(fp)
  198f60:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return p;
  198f64:	e0bffc17 	ldw	r2,-16(fp)
}
  198f68:	e037883a 	mov	sp,fp
  198f6c:	dfc00117 	ldw	ra,4(sp)
  198f70:	df000017 	ldw	fp,0(sp)
  198f74:	dec00204 	addi	sp,sp,8
  198f78:	f800283a 	ret

00198f7c <chCoreAllocI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  198f7c:	defffd04 	addi	sp,sp,-12
  198f80:	df000215 	stw	fp,8(sp)
  198f84:	df000204 	addi	fp,sp,8
  198f88:	e13fff15 	stw	r4,-4(fp)
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  198f8c:	e0bfff17 	ldw	r2,-4(fp)
  198f90:	10c000c4 	addi	r3,r2,3
  198f94:	00bfff04 	movi	r2,-4
  198f98:	1884703a 	and	r2,r3,r2
  198f9c:	e0bfff15 	stw	r2,-4(fp)
  if ((size_t)(endmem - nextmem) < size)
  198fa0:	d0a70d17 	ldw	r2,-25548(gp)
  198fa4:	1007883a 	mov	r3,r2
  198fa8:	d0a70c17 	ldw	r2,-25552(gp)
  198fac:	1885c83a 	sub	r2,r3,r2
  198fb0:	1007883a 	mov	r3,r2
  198fb4:	e0bfff17 	ldw	r2,-4(fp)
  198fb8:	1880022e 	bgeu	r3,r2,198fc4 <chCoreAllocI+0x48>
    return NULL;
  198fbc:	0005883a 	mov	r2,zero
  198fc0:	00000706 	br	198fe0 <chCoreAllocI+0x64>
  p = nextmem;
  198fc4:	d0a70c17 	ldw	r2,-25552(gp)
  198fc8:	e0bffe15 	stw	r2,-8(fp)
  nextmem += size;
  198fcc:	d0e70c17 	ldw	r3,-25552(gp)
  198fd0:	e0bfff17 	ldw	r2,-4(fp)
  198fd4:	1885883a 	add	r2,r3,r2
  198fd8:	d0a70c15 	stw	r2,-25552(gp)
  return p;
  198fdc:	e0bffe17 	ldw	r2,-8(fp)
}
  198fe0:	e037883a 	mov	sp,fp
  198fe4:	df000017 	ldw	fp,0(sp)
  198fe8:	dec00104 	addi	sp,sp,4
  198fec:	f800283a 	ret

00198ff0 <chCoreStatus>:
 *
 * @return              The size, in bytes, of the free core memory.
 *
 * @api
 */
size_t chCoreStatus(void) {
  198ff0:	deffff04 	addi	sp,sp,-4
  198ff4:	df000015 	stw	fp,0(sp)
  198ff8:	d839883a 	mov	fp,sp

  return (size_t)(endmem - nextmem);
  198ffc:	d0a70d17 	ldw	r2,-25548(gp)
  199000:	1007883a 	mov	r3,r2
  199004:	d0a70c17 	ldw	r2,-25552(gp)
  199008:	1885c83a 	sub	r2,r3,r2
}
  19900c:	e037883a 	mov	sp,fp
  199010:	df000017 	ldw	fp,0(sp)
  199014:	dec00104 	addi	sp,sp,4
  199018:	f800283a 	ret

0019901c <chPoolInit>:
 *                      @p NULL if the pool is not allowed to grow
 *                      automatically
 *
 * @init
 */
void chPoolInit(MemoryPool *mp, size_t size, memgetfunc_t provider) {
  19901c:	defffc04 	addi	sp,sp,-16
  199020:	df000315 	stw	fp,12(sp)
  199024:	df000304 	addi	fp,sp,12
  199028:	e13ffd15 	stw	r4,-12(fp)
  19902c:	e17ffe15 	stw	r5,-8(fp)
  199030:	e1bfff15 	stw	r6,-4(fp)

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)), "chPoolInit");
  199034:	e0bffd17 	ldw	r2,-12(fp)
  199038:	10000426 	beq	r2,zero,19904c <chPoolInit+0x30>
  19903c:	e0bffe17 	ldw	r2,-8(fp)
  199040:	10800130 	cmpltui	r2,r2,4
  199044:	1000011e 	bne	r2,zero,19904c <chPoolInit+0x30>
  199048:	0001883a 	nop

  mp->mp_next = NULL;
  19904c:	e0bffd17 	ldw	r2,-12(fp)
  199050:	10000015 	stw	zero,0(r2)
  mp->mp_object_size = size;
  199054:	e0bffd17 	ldw	r2,-12(fp)
  199058:	e0fffe17 	ldw	r3,-8(fp)
  19905c:	10c00115 	stw	r3,4(r2)
  mp->mp_provider = provider;
  199060:	e0bffd17 	ldw	r2,-12(fp)
  199064:	e0ffff17 	ldw	r3,-4(fp)
  199068:	10c00215 	stw	r3,8(r2)
}
  19906c:	e037883a 	mov	sp,fp
  199070:	df000017 	ldw	fp,0(sp)
  199074:	dec00104 	addi	sp,sp,4
  199078:	f800283a 	ret

0019907c <chPoolLoadArray>:
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chPoolLoadArray(MemoryPool *mp, void *p, size_t n) {
  19907c:	defffb04 	addi	sp,sp,-20
  199080:	dfc00415 	stw	ra,16(sp)
  199084:	df000315 	stw	fp,12(sp)
  199088:	df000304 	addi	fp,sp,12
  19908c:	e13ffd15 	stw	r4,-12(fp)
  199090:	e17ffe15 	stw	r5,-8(fp)
  199094:	e1bfff15 	stw	r6,-4(fp)

  chDbgCheck((mp != NULL) && (n != 0), "chPoolLoadArray");
  199098:	e0bffd17 	ldw	r2,-12(fp)
  19909c:	10000326 	beq	r2,zero,1990ac <chPoolLoadArray+0x30>
  1990a0:	e0bfff17 	ldw	r2,-4(fp)
  1990a4:	10000126 	beq	r2,zero,1990ac <chPoolLoadArray+0x30>
  1990a8:	0001883a 	nop

  while (n) {
  1990ac:	00000b06 	br	1990dc <chPoolLoadArray+0x60>
    chPoolAdd(mp, p);
  1990b0:	e13ffd17 	ldw	r4,-12(fp)
  1990b4:	e17ffe17 	ldw	r5,-8(fp)
  1990b8:	01992340 	call	199234 <chPoolFree>
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
  1990bc:	e0bffd17 	ldw	r2,-12(fp)
  1990c0:	10800117 	ldw	r2,4(r2)
  1990c4:	e0fffe17 	ldw	r3,-8(fp)
  1990c8:	1885883a 	add	r2,r3,r2
  1990cc:	e0bffe15 	stw	r2,-8(fp)
    n--;
  1990d0:	e0bfff17 	ldw	r2,-4(fp)
  1990d4:	10bfffc4 	addi	r2,r2,-1
  1990d8:	e0bfff15 	stw	r2,-4(fp)
 */
void chPoolLoadArray(MemoryPool *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0), "chPoolLoadArray");

  while (n) {
  1990dc:	e0bfff17 	ldw	r2,-4(fp)
  1990e0:	103ff31e 	bne	r2,zero,1990b0 <__alt_data_end+0xfff990b0>
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
    n--;
  }
}
  1990e4:	e037883a 	mov	sp,fp
  1990e8:	dfc00117 	ldw	ra,4(sp)
  1990ec:	df000017 	ldw	fp,0(sp)
  1990f0:	dec00204 	addi	sp,sp,8
  1990f4:	f800283a 	ret

001990f8 <chPoolAllocI>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @iclass
 */
void *chPoolAllocI(MemoryPool *mp) {
  1990f8:	defffc04 	addi	sp,sp,-16
  1990fc:	dfc00315 	stw	ra,12(sp)
  199100:	df000215 	stw	fp,8(sp)
  199104:	df000204 	addi	fp,sp,8
  199108:	e13fff15 	stw	r4,-4(fp)
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL, "chPoolAllocI");

  if ((objp = mp->mp_next) != NULL)
  19910c:	e0bfff17 	ldw	r2,-4(fp)
  199110:	10800017 	ldw	r2,0(r2)
  199114:	e0bffe15 	stw	r2,-8(fp)
  199118:	e0bffe17 	ldw	r2,-8(fp)
  19911c:	10000626 	beq	r2,zero,199138 <chPoolAllocI+0x40>
    mp->mp_next = mp->mp_next->ph_next;
  199120:	e0bfff17 	ldw	r2,-4(fp)
  199124:	10800017 	ldw	r2,0(r2)
  199128:	10c00017 	ldw	r3,0(r2)
  19912c:	e0bfff17 	ldw	r2,-4(fp)
  199130:	10c00015 	stw	r3,0(r2)
  199134:	00000a06 	br	199160 <chPoolAllocI+0x68>
  else if (mp->mp_provider != NULL)
  199138:	e0bfff17 	ldw	r2,-4(fp)
  19913c:	10800217 	ldw	r2,8(r2)
  199140:	10000726 	beq	r2,zero,199160 <chPoolAllocI+0x68>
    objp = mp->mp_provider(mp->mp_object_size);
  199144:	e0bfff17 	ldw	r2,-4(fp)
  199148:	10800217 	ldw	r2,8(r2)
  19914c:	e0ffff17 	ldw	r3,-4(fp)
  199150:	18c00117 	ldw	r3,4(r3)
  199154:	1809883a 	mov	r4,r3
  199158:	103ee83a 	callr	r2
  19915c:	e0bffe15 	stw	r2,-8(fp)
  return objp;
  199160:	e0bffe17 	ldw	r2,-8(fp)
}
  199164:	e037883a 	mov	sp,fp
  199168:	dfc00117 	ldw	ra,4(sp)
  19916c:	df000017 	ldw	fp,0(sp)
  199170:	dec00204 	addi	sp,sp,8
  199174:	f800283a 	ret

00199178 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(MemoryPool *mp) {
  199178:	defffa04 	addi	sp,sp,-24
  19917c:	dfc00515 	stw	ra,20(sp)
  199180:	df000415 	stw	fp,16(sp)
  199184:	df000404 	addi	fp,sp,16
  199188:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19918c:	0005303a 	rdctl	r2,status
  199190:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  199194:	e0fffd17 	ldw	r3,-12(fp)
  199198:	00bfff84 	movi	r2,-2
  19919c:	1884703a 	and	r2,r3,r2
  1991a0:	1001703a 	wrctl	status,r2
  void *objp;

  chSysLock();
  objp = chPoolAllocI(mp);
  1991a4:	e13fff17 	ldw	r4,-4(fp)
  1991a8:	01990f80 	call	1990f8 <chPoolAllocI>
  1991ac:	e0bffc15 	stw	r2,-16(fp)
  1991b0:	00800044 	movi	r2,1
  1991b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1991b8:	e0bffe17 	ldw	r2,-8(fp)
  1991bc:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return objp;
  1991c0:	e0bffc17 	ldw	r2,-16(fp)
}
  1991c4:	e037883a 	mov	sp,fp
  1991c8:	dfc00117 	ldw	ra,4(sp)
  1991cc:	df000017 	ldw	fp,0(sp)
  1991d0:	dec00204 	addi	sp,sp,8
  1991d4:	f800283a 	ret

001991d8 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p MemoryPool structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(MemoryPool *mp, void *objp) {
  1991d8:	defffc04 	addi	sp,sp,-16
  1991dc:	df000315 	stw	fp,12(sp)
  1991e0:	df000304 	addi	fp,sp,12
  1991e4:	e13ffe15 	stw	r4,-8(fp)
  1991e8:	e17fff15 	stw	r5,-4(fp)
  struct pool_header *php = objp;
  1991ec:	e0bfff17 	ldw	r2,-4(fp)
  1991f0:	e0bffd15 	stw	r2,-12(fp)

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL), "chPoolFreeI");
  1991f4:	e0bffe17 	ldw	r2,-8(fp)
  1991f8:	10000326 	beq	r2,zero,199208 <chPoolFreeI+0x30>
  1991fc:	e0bfff17 	ldw	r2,-4(fp)
  199200:	10000126 	beq	r2,zero,199208 <chPoolFreeI+0x30>
  199204:	0001883a 	nop

  php->ph_next = mp->mp_next;
  199208:	e0bffe17 	ldw	r2,-8(fp)
  19920c:	10c00017 	ldw	r3,0(r2)
  199210:	e0bffd17 	ldw	r2,-12(fp)
  199214:	10c00015 	stw	r3,0(r2)
  mp->mp_next = php;
  199218:	e0bffe17 	ldw	r2,-8(fp)
  19921c:	e0fffd17 	ldw	r3,-12(fp)
  199220:	10c00015 	stw	r3,0(r2)
}
  199224:	e037883a 	mov	sp,fp
  199228:	df000017 	ldw	fp,0(sp)
  19922c:	dec00104 	addi	sp,sp,4
  199230:	f800283a 	ret

00199234 <chPoolFree>:
 * @param[in] mp        pointer to a @p MemoryPool structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(MemoryPool *mp, void *objp) {
  199234:	defffa04 	addi	sp,sp,-24
  199238:	dfc00515 	stw	ra,20(sp)
  19923c:	df000415 	stw	fp,16(sp)
  199240:	df000404 	addi	fp,sp,16
  199244:	e13ffe15 	stw	r4,-8(fp)
  199248:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19924c:	0005303a 	rdctl	r2,status
  199250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  199254:	e0fffc17 	ldw	r3,-16(fp)
  199258:	00bfff84 	movi	r2,-2
  19925c:	1884703a 	and	r2,r3,r2
  199260:	1001703a 	wrctl	status,r2

  chSysLock();
  chPoolFreeI(mp, objp);
  199264:	e13ffe17 	ldw	r4,-8(fp)
  199268:	e17fff17 	ldw	r5,-4(fp)
  19926c:	01991d80 	call	1991d8 <chPoolFreeI>
  199270:	00800044 	movi	r2,1
  199274:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  199278:	e0bffd17 	ldw	r2,-12(fp)
  19927c:	1001703a 	wrctl	status,r2
  chSysUnlock();
}
  199280:	e037883a 	mov	sp,fp
  199284:	dfc00117 	ldw	ra,4(sp)
  199288:	df000017 	ldw	fp,0(sp)
  19928c:	dec00204 	addi	sp,sp,8
  199290:	f800283a 	ret

00199294 <prio_insert>:
#define _CHINLINE_H_

/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_OPTIMIZE_SPEED
static INLINE void prio_insert(Thread *tp, ThreadsQueue *tqp) {
  199294:	defffc04 	addi	sp,sp,-16
  199298:	df000315 	stw	fp,12(sp)
  19929c:	df000304 	addi	fp,sp,12
  1992a0:	e13ffe15 	stw	r4,-8(fp)
  1992a4:	e17fff15 	stw	r5,-4(fp)

  Thread *cp = (Thread *)tqp;
  1992a8:	e0bfff17 	ldw	r2,-4(fp)
  1992ac:	e0bffd15 	stw	r2,-12(fp)
  do {
    cp = cp->p_next;
  1992b0:	e0bffd17 	ldw	r2,-12(fp)
  1992b4:	10800017 	ldw	r2,0(r2)
  1992b8:	e0bffd15 	stw	r2,-12(fp)
  } while ((cp != (Thread *)tqp) && (cp->p_prio >= tp->p_prio));
  1992bc:	e0fffd17 	ldw	r3,-12(fp)
  1992c0:	e0bfff17 	ldw	r2,-4(fp)
  1992c4:	18800526 	beq	r3,r2,1992dc <prio_insert+0x48>
  1992c8:	e0bffd17 	ldw	r2,-12(fp)
  1992cc:	10c00217 	ldw	r3,8(r2)
  1992d0:	e0bffe17 	ldw	r2,-8(fp)
  1992d4:	10800217 	ldw	r2,8(r2)
  1992d8:	18bff52e 	bgeu	r3,r2,1992b0 <__alt_data_end+0xfff992b0>
  tp->p_next = cp;
  1992dc:	e0bffe17 	ldw	r2,-8(fp)
  1992e0:	e0fffd17 	ldw	r3,-12(fp)
  1992e4:	10c00015 	stw	r3,0(r2)
  tp->p_prev = cp->p_prev;
  1992e8:	e0bffd17 	ldw	r2,-12(fp)
  1992ec:	10c00117 	ldw	r3,4(r2)
  1992f0:	e0bffe17 	ldw	r2,-8(fp)
  1992f4:	10c00115 	stw	r3,4(r2)
  tp->p_prev->p_next = cp->p_prev = tp;
  1992f8:	e0bffe17 	ldw	r2,-8(fp)
  1992fc:	10800117 	ldw	r2,4(r2)
  199300:	e0fffd17 	ldw	r3,-12(fp)
  199304:	e13ffe17 	ldw	r4,-8(fp)
  199308:	19000115 	stw	r4,4(r3)
  19930c:	e0fffd17 	ldw	r3,-12(fp)
  199310:	18c00117 	ldw	r3,4(r3)
  199314:	10c00015 	stw	r3,0(r2)
}
  199318:	e037883a 	mov	sp,fp
  19931c:	df000017 	ldw	fp,0(sp)
  199320:	dec00104 	addi	sp,sp,4
  199324:	f800283a 	ret

00199328 <fifo_remove>:
  tp->p_next = (Thread *)tqp;
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  199328:	defffd04 	addi	sp,sp,-12
  19932c:	df000215 	stw	fp,8(sp)
  199330:	df000204 	addi	fp,sp,8
  199334:	e13fff15 	stw	r4,-4(fp)
  Thread *tp = tqp->p_next;
  199338:	e0bfff17 	ldw	r2,-4(fp)
  19933c:	10800017 	ldw	r2,0(r2)
  199340:	e0bffe15 	stw	r2,-8(fp)

  (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
  199344:	e0bffe17 	ldw	r2,-8(fp)
  199348:	10c00017 	ldw	r3,0(r2)
  19934c:	e0bfff17 	ldw	r2,-4(fp)
  199350:	10c00015 	stw	r3,0(r2)
  199354:	e0bfff17 	ldw	r2,-4(fp)
  199358:	10800017 	ldw	r2,0(r2)
  19935c:	e0ffff17 	ldw	r3,-4(fp)
  199360:	10c00115 	stw	r3,4(r2)
  return tp;
  199364:	e0bffe17 	ldw	r2,-8(fp)
}
  199368:	e037883a 	mov	sp,fp
  19936c:	df000017 	ldw	fp,0(sp)
  199370:	dec00104 	addi	sp,sp,4
  199374:	f800283a 	ret

00199378 <dequeue>:

  (tqp->p_prev = tp->p_prev)->p_next = (Thread *)tqp;
  return tp;
}

static INLINE Thread *dequeue(Thread *tp) {
  199378:	defffe04 	addi	sp,sp,-8
  19937c:	df000115 	stw	fp,4(sp)
  199380:	df000104 	addi	fp,sp,4
  199384:	e13fff15 	stw	r4,-4(fp)

  tp->p_prev->p_next = tp->p_next;
  199388:	e0bfff17 	ldw	r2,-4(fp)
  19938c:	10800117 	ldw	r2,4(r2)
  199390:	e0ffff17 	ldw	r3,-4(fp)
  199394:	18c00017 	ldw	r3,0(r3)
  199398:	10c00015 	stw	r3,0(r2)
  tp->p_next->p_prev = tp->p_prev;
  19939c:	e0bfff17 	ldw	r2,-4(fp)
  1993a0:	10800017 	ldw	r2,0(r2)
  1993a4:	e0ffff17 	ldw	r3,-4(fp)
  1993a8:	18c00117 	ldw	r3,4(r3)
  1993ac:	10c00115 	stw	r3,4(r2)
  return tp;
  1993b0:	e0bfff17 	ldw	r2,-4(fp)
}
  1993b4:	e037883a 	mov	sp,fp
  1993b8:	df000017 	ldw	fp,0(sp)
  1993bc:	dec00104 	addi	sp,sp,4
  1993c0:	f800283a 	ret

001993c4 <chMtxInit>:
 *
 * @param[out] mp       pointer to a @p Mutex structure
 *
 * @init
 */
void chMtxInit(Mutex *mp) {
  1993c4:	defffe04 	addi	sp,sp,-8
  1993c8:	df000115 	stw	fp,4(sp)
  1993cc:	df000104 	addi	fp,sp,4
  1993d0:	e13fff15 	stw	r4,-4(fp)

  chDbgCheck(mp != NULL, "chMtxInit");

  queue_init(&mp->m_queue);
  1993d4:	e0ffff17 	ldw	r3,-4(fp)
  1993d8:	e0bfff17 	ldw	r2,-4(fp)
  1993dc:	10c00115 	stw	r3,4(r2)
  1993e0:	e0bfff17 	ldw	r2,-4(fp)
  1993e4:	10c00117 	ldw	r3,4(r2)
  1993e8:	e0bfff17 	ldw	r2,-4(fp)
  1993ec:	10c00015 	stw	r3,0(r2)
  mp->m_owner = NULL;
  1993f0:	e0bfff17 	ldw	r2,-4(fp)
  1993f4:	10000215 	stw	zero,8(r2)
}
  1993f8:	e037883a 	mov	sp,fp
  1993fc:	df000017 	ldw	fp,0(sp)
  199400:	dec00104 	addi	sp,sp,4
  199404:	f800283a 	ret

00199408 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p Mutex structure
 *
 * @api
 */
void chMtxLock(Mutex *mp) {
  199408:	defffb04 	addi	sp,sp,-20
  19940c:	dfc00415 	stw	ra,16(sp)
  199410:	df000315 	stw	fp,12(sp)
  199414:	df000304 	addi	fp,sp,12
  199418:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19941c:	0005303a 	rdctl	r2,status
  199420:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  199424:	e0fffd17 	ldw	r3,-12(fp)
  199428:	00bfff84 	movi	r2,-2
  19942c:	1884703a 	and	r2,r3,r2
  199430:	1001703a 	wrctl	status,r2

  chSysLock();

  chMtxLockS(mp);
  199434:	e13fff17 	ldw	r4,-4(fp)
  199438:	01994600 	call	199460 <chMtxLockS>
  19943c:	00800044 	movi	r2,1
  199440:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  199444:	e0bffe17 	ldw	r2,-8(fp)
  199448:	1001703a 	wrctl	status,r2

  chSysUnlock();
}
  19944c:	e037883a 	mov	sp,fp
  199450:	dfc00117 	ldw	ra,4(sp)
  199454:	df000017 	ldw	fp,0(sp)
  199458:	dec00204 	addi	sp,sp,8
  19945c:	f800283a 	ret

00199460 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p Mutex structure
 *
 * @sclass
 */
void chMtxLockS(Mutex *mp) {
  199460:	defffb04 	addi	sp,sp,-20
  199464:	dfc00415 	stw	ra,16(sp)
  199468:	df000315 	stw	fp,12(sp)
  19946c:	df000304 	addi	fp,sp,12
  199470:	e13fff15 	stw	r4,-4(fp)
  Thread *ctp = currp;
  199474:	008006b4 	movhi	r2,26
  199478:	108c3b04 	addi	r2,r2,12524
  19947c:	10800617 	ldw	r2,24(r2)
  199480:	e0bffe15 	stw	r2,-8(fp)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL, "chMtxLockS");

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
  199484:	e0bfff17 	ldw	r2,-4(fp)
  199488:	10800217 	ldw	r2,8(r2)
  19948c:	10003c26 	beq	r2,zero,199580 <chMtxLockS+0x120>
    /* Priority inheritance protocol; explores the thread-mutex dependencies
       boosting the priority of all the affected threads to equal the priority
       of the running thread requesting the mutex.*/
    Thread *tp = mp->m_owner;
  199490:	e0bfff17 	ldw	r2,-4(fp)
  199494:	10800217 	ldw	r2,8(r2)
  199498:	e0bffd15 	stw	r2,-12(fp)
    /* Does the running thread have higher priority than the mutex
       owning thread? */
    while (tp->p_prio < ctp->p_prio) {
  19949c:	00002906 	br	199544 <chMtxLockS+0xe4>
      /* Make priority of thread tp match the running thread's priority.*/
      tp->p_prio = ctp->p_prio;
  1994a0:	e0bffe17 	ldw	r2,-8(fp)
  1994a4:	10c00217 	ldw	r3,8(r2)
  1994a8:	e0bffd17 	ldw	r2,-12(fp)
  1994ac:	10c00215 	stw	r3,8(r2)
      /* The following states need priority queues reordering.*/
      switch (tp->p_state) {
  1994b0:	e0bffd17 	ldw	r2,-12(fp)
  1994b4:	10800703 	ldbu	r2,28(r2)
  1994b8:	10803fcc 	andi	r2,r2,255
  1994bc:	10c00120 	cmpeqi	r3,r2,4
  1994c0:	1800041e 	bne	r3,zero,1994d4 <chMtxLockS+0x74>
  1994c4:	10c00160 	cmpeqi	r3,r2,5
  1994c8:	18000f1e 	bne	r3,zero,199508 <chMtxLockS+0xa8>
  1994cc:	10001726 	beq	r2,zero,19952c <chMtxLockS+0xcc>
#endif
        /* Re-enqueues tp with its new priority on the ready list.*/
        chSchReadyI(dequeue(tp));
        break;
      }
      break;
  1994d0:	00002106 	br	199558 <chMtxLockS+0xf8>
      tp->p_prio = ctp->p_prio;
      /* The following states need priority queues reordering.*/
      switch (tp->p_state) {
      case THD_STATE_WTMTX:
        /* Re-enqueues the mutex owner with its new priority.*/
        prio_insert(dequeue(tp), (ThreadsQueue *)tp->p_u.wtobjp);
  1994d4:	e13ffd17 	ldw	r4,-12(fp)
  1994d8:	01993780 	call	199378 <dequeue>
  1994dc:	1007883a 	mov	r3,r2
  1994e0:	e0bffd17 	ldw	r2,-12(fp)
  1994e4:	10800917 	ldw	r2,36(r2)
  1994e8:	1809883a 	mov	r4,r3
  1994ec:	100b883a 	mov	r5,r2
  1994f0:	01992940 	call	199294 <prio_insert>
        tp = ((Mutex *)tp->p_u.wtobjp)->m_owner;
  1994f4:	e0bffd17 	ldw	r2,-12(fp)
  1994f8:	10800917 	ldw	r2,36(r2)
  1994fc:	10800217 	ldw	r2,8(r2)
  199500:	e0bffd15 	stw	r2,-12(fp)
        continue;
  199504:	00000f06 	br	199544 <chMtxLockS+0xe4>
#endif
#if CH_USE_MESSAGES && CH_USE_MESSAGES_PRIORITY
      case THD_STATE_SNDMSGQ:
#endif
        /* Re-enqueues tp with its new priority on the queue.*/
        prio_insert(dequeue(tp), (ThreadsQueue *)tp->p_u.wtobjp);
  199508:	e13ffd17 	ldw	r4,-12(fp)
  19950c:	01993780 	call	199378 <dequeue>
  199510:	1007883a 	mov	r3,r2
  199514:	e0bffd17 	ldw	r2,-12(fp)
  199518:	10800917 	ldw	r2,36(r2)
  19951c:	1809883a 	mov	r4,r3
  199520:	100b883a 	mov	r5,r2
  199524:	01992940 	call	199294 <prio_insert>
        break;
  199528:	00000506 	br	199540 <chMtxLockS+0xe0>
#if CH_DBG_ENABLE_ASSERTS
        /* Prevents an assertion in chSchReadyI().*/
        tp->p_state = THD_STATE_CURRENT;
#endif
        /* Re-enqueues tp with its new priority on the ready list.*/
        chSchReadyI(dequeue(tp));
  19952c:	e13ffd17 	ldw	r4,-12(fp)
  199530:	01993780 	call	199378 <dequeue>
  199534:	1009883a 	mov	r4,r2
  199538:	0199b1c0 	call	199b1c <chSchReadyI>
        break;
  19953c:	0001883a 	nop
      }
      break;
  199540:	00000506 	br	199558 <chMtxLockS+0xf8>
       boosting the priority of all the affected threads to equal the priority
       of the running thread requesting the mutex.*/
    Thread *tp = mp->m_owner;
    /* Does the running thread have higher priority than the mutex
       owning thread? */
    while (tp->p_prio < ctp->p_prio) {
  199544:	e0bffd17 	ldw	r2,-12(fp)
  199548:	10c00217 	ldw	r3,8(r2)
  19954c:	e0bffe17 	ldw	r2,-8(fp)
  199550:	10800217 	ldw	r2,8(r2)
  199554:	18bfd236 	bltu	r3,r2,1994a0 <__alt_data_end+0xfff994a0>
        break;
      }
      break;
    }
    /* Sleep on the mutex.*/
    prio_insert(ctp, &mp->m_queue);
  199558:	e0bfff17 	ldw	r2,-4(fp)
  19955c:	e13ffe17 	ldw	r4,-8(fp)
  199560:	100b883a 	mov	r5,r2
  199564:	01992940 	call	199294 <prio_insert>
    ctp->p_u.wtobjp = mp;
  199568:	e0bffe17 	ldw	r2,-8(fp)
  19956c:	e0ffff17 	ldw	r3,-4(fp)
  199570:	10c00915 	stw	r3,36(r2)
    chSchGoSleepS(THD_STATE_WTMTX);
  199574:	01000104 	movi	r4,4
  199578:	0199bd80 	call	199bd8 <chSchGoSleepS>
  19957c:	00000a06 	br	1995a8 <chMtxLockS+0x148>
    chDbgAssert(mp->m_owner == ctp, "chMtxLockS(), #1", "not owner");
    chDbgAssert(ctp->p_mtxlist == mp, "chMtxLockS(), #2", "not owned");
  }
  else {
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
  199580:	e0bfff17 	ldw	r2,-4(fp)
  199584:	e0fffe17 	ldw	r3,-8(fp)
  199588:	10c00215 	stw	r3,8(r2)
    mp->m_next = ctp->p_mtxlist;
  19958c:	e0bffe17 	ldw	r2,-8(fp)
  199590:	10c00f17 	ldw	r3,60(r2)
  199594:	e0bfff17 	ldw	r2,-4(fp)
  199598:	10c00315 	stw	r3,12(r2)
    ctp->p_mtxlist = mp;
  19959c:	e0bffe17 	ldw	r2,-8(fp)
  1995a0:	e0ffff17 	ldw	r3,-4(fp)
  1995a4:	10c00f15 	stw	r3,60(r2)
  }
}
  1995a8:	e037883a 	mov	sp,fp
  1995ac:	dfc00117 	ldw	ra,4(sp)
  1995b0:	df000017 	ldw	fp,0(sp)
  1995b4:	dec00204 	addi	sp,sp,8
  1995b8:	f800283a 	ret

001995bc <chMtxTryLock>:
 * @retval TRUE         if the mutex has been successfully acquired
 * @retval FALSE        if the lock attempt failed.
 *
 * @api
 */
bool_t chMtxTryLock(Mutex *mp) {
  1995bc:	defffa04 	addi	sp,sp,-24
  1995c0:	dfc00515 	stw	ra,20(sp)
  1995c4:	df000415 	stw	fp,16(sp)
  1995c8:	df000404 	addi	fp,sp,16
  1995cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1995d0:	0005303a 	rdctl	r2,status
  1995d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1995d8:	e0fffd17 	ldw	r3,-12(fp)
  1995dc:	00bfff84 	movi	r2,-2
  1995e0:	1884703a 	and	r2,r3,r2
  1995e4:	1001703a 	wrctl	status,r2
  bool_t b;

  chSysLock();

  b = chMtxTryLockS(mp);
  1995e8:	e13fff17 	ldw	r4,-4(fp)
  1995ec:	019961c0 	call	19961c <chMtxTryLockS>
  1995f0:	e0bffc05 	stb	r2,-16(fp)
  1995f4:	00800044 	movi	r2,1
  1995f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1995fc:	e0bffe17 	ldw	r2,-8(fp)
  199600:	1001703a 	wrctl	status,r2

  chSysUnlock();
  return b;
  199604:	e0bffc03 	ldbu	r2,-16(fp)
}
  199608:	e037883a 	mov	sp,fp
  19960c:	dfc00117 	ldw	ra,4(sp)
  199610:	df000017 	ldw	fp,0(sp)
  199614:	dec00204 	addi	sp,sp,8
  199618:	f800283a 	ret

0019961c <chMtxTryLockS>:
 * @retval TRUE         if the mutex has been successfully acquired
 * @retval FALSE        if the lock attempt failed.
 *
 * @sclass
 */
bool_t chMtxTryLockS(Mutex *mp) {
  19961c:	defffe04 	addi	sp,sp,-8
  199620:	df000115 	stw	fp,4(sp)
  199624:	df000104 	addi	fp,sp,4
  199628:	e13fff15 	stw	r4,-4(fp)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL, "chMtxTryLockS");

  if (mp->m_owner != NULL)
  19962c:	e0bfff17 	ldw	r2,-4(fp)
  199630:	10800217 	ldw	r2,8(r2)
  199634:	10000226 	beq	r2,zero,199640 <chMtxTryLockS+0x24>
    return FALSE;
  199638:	0005883a 	mov	r2,zero
  19963c:	00001106 	br	199684 <chMtxTryLockS+0x68>
  mp->m_owner = currp;
  199640:	008006b4 	movhi	r2,26
  199644:	108c3b04 	addi	r2,r2,12524
  199648:	10c00617 	ldw	r3,24(r2)
  19964c:	e0bfff17 	ldw	r2,-4(fp)
  199650:	10c00215 	stw	r3,8(r2)
  mp->m_next = currp->p_mtxlist;
  199654:	008006b4 	movhi	r2,26
  199658:	108c3b04 	addi	r2,r2,12524
  19965c:	10800617 	ldw	r2,24(r2)
  199660:	10c00f17 	ldw	r3,60(r2)
  199664:	e0bfff17 	ldw	r2,-4(fp)
  199668:	10c00315 	stw	r3,12(r2)
  currp->p_mtxlist = mp;
  19966c:	008006b4 	movhi	r2,26
  199670:	108c3b04 	addi	r2,r2,12524
  199674:	10800617 	ldw	r2,24(r2)
  199678:	e0ffff17 	ldw	r3,-4(fp)
  19967c:	10c00f15 	stw	r3,60(r2)
  return TRUE;
  199680:	00800044 	movi	r2,1
}
  199684:	e037883a 	mov	sp,fp
  199688:	df000017 	ldw	fp,0(sp)
  19968c:	dec00104 	addi	sp,sp,4
  199690:	f800283a 	ret

00199694 <chMtxUnlock>:
 *
 * @return              A pointer to the unlocked mutex.
 *
 * @api
 */
Mutex *chMtxUnlock(void) {
  199694:	defff704 	addi	sp,sp,-36
  199698:	dfc00815 	stw	ra,32(sp)
  19969c:	df000715 	stw	fp,28(sp)
  1996a0:	df000704 	addi	fp,sp,28
  Thread *ctp = currp;
  1996a4:	008006b4 	movhi	r2,26
  1996a8:	108c3b04 	addi	r2,r2,12524
  1996ac:	10800617 	ldw	r2,24(r2)
  1996b0:	e0bffb15 	stw	r2,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1996b4:	0005303a 	rdctl	r2,status
  1996b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1996bc:	e0fffe17 	ldw	r3,-8(fp)
  1996c0:	00bfff84 	movi	r2,-2
  1996c4:	1884703a 	and	r2,r3,r2
  1996c8:	1001703a 	wrctl	status,r2
  chDbgAssert(ctp->p_mtxlist->m_owner == ctp,
              "chMtxUnlock(), #2",
              "ownership failure");
  /* Removes the top Mutex from the Thread's owned mutexes list and marks it
     as not owned.*/
  ump = ctp->p_mtxlist;
  1996cc:	e0bffb17 	ldw	r2,-20(fp)
  1996d0:	10800f17 	ldw	r2,60(r2)
  1996d4:	e0bffc15 	stw	r2,-16(fp)
  ctp->p_mtxlist = ump->m_next;
  1996d8:	e0bffc17 	ldw	r2,-16(fp)
  1996dc:	10c00317 	ldw	r3,12(r2)
  1996e0:	e0bffb17 	ldw	r2,-20(fp)
  1996e4:	10c00f15 	stw	r3,60(r2)
  /* If a thread is waiting on the mutex then the fun part begins.*/
  if (chMtxQueueNotEmptyS(ump)) {
  1996e8:	e0bffc17 	ldw	r2,-16(fp)
  1996ec:	10c00017 	ldw	r3,0(r2)
  1996f0:	e0bffc17 	ldw	r2,-16(fp)
  1996f4:	18802e26 	beq	r3,r2,1997b0 <chMtxUnlock+0x11c>
    Thread *tp;

    /* Recalculates the optimal thread priority by scanning the owned
       mutexes list.*/
    tprio_t newprio = ctp->p_realprio;
  1996f8:	e0bffb17 	ldw	r2,-20(fp)
  1996fc:	10801017 	ldw	r2,64(r2)
  199700:	e0bffa15 	stw	r2,-24(fp)
    mp = ctp->p_mtxlist;
  199704:	e0bffb17 	ldw	r2,-20(fp)
  199708:	10800f17 	ldw	r2,60(r2)
  19970c:	e0bff915 	stw	r2,-28(fp)
    while (mp != NULL) {
  199710:	00001006 	br	199754 <chMtxUnlock+0xc0>
      /* If the highest priority thread waiting in the mutexes list has a
         greater priority than the current thread base priority then the final
         priority will have at least that priority.*/
      if (chMtxQueueNotEmptyS(mp) && (mp->m_queue.p_next->p_prio > newprio))
  199714:	e0bff917 	ldw	r2,-28(fp)
  199718:	10c00017 	ldw	r3,0(r2)
  19971c:	e0bff917 	ldw	r2,-28(fp)
  199720:	18800926 	beq	r3,r2,199748 <chMtxUnlock+0xb4>
  199724:	e0bff917 	ldw	r2,-28(fp)
  199728:	10800017 	ldw	r2,0(r2)
  19972c:	10800217 	ldw	r2,8(r2)
  199730:	e0fffa17 	ldw	r3,-24(fp)
  199734:	1880042e 	bgeu	r3,r2,199748 <chMtxUnlock+0xb4>
        newprio = mp->m_queue.p_next->p_prio;
  199738:	e0bff917 	ldw	r2,-28(fp)
  19973c:	10800017 	ldw	r2,0(r2)
  199740:	10800217 	ldw	r2,8(r2)
  199744:	e0bffa15 	stw	r2,-24(fp)
      mp = mp->m_next;
  199748:	e0bff917 	ldw	r2,-28(fp)
  19974c:	10800317 	ldw	r2,12(r2)
  199750:	e0bff915 	stw	r2,-28(fp)

    /* Recalculates the optimal thread priority by scanning the owned
       mutexes list.*/
    tprio_t newprio = ctp->p_realprio;
    mp = ctp->p_mtxlist;
    while (mp != NULL) {
  199754:	e0bff917 	ldw	r2,-28(fp)
  199758:	103fee1e 	bne	r2,zero,199714 <__alt_data_end+0xfff99714>
        newprio = mp->m_queue.p_next->p_prio;
      mp = mp->m_next;
    }
    /* Assigns to the current thread the highest priority among all the
       waiting threads.*/
    ctp->p_prio = newprio;
  19975c:	e0bffb17 	ldw	r2,-20(fp)
  199760:	e0fffa17 	ldw	r3,-24(fp)
  199764:	10c00215 	stw	r3,8(r2)
    /* Awakens the highest priority thread waiting for the unlocked mutex and
       assigns the mutex to it.*/
    tp = fifo_remove(&ump->m_queue);
  199768:	e0bffc17 	ldw	r2,-16(fp)
  19976c:	1009883a 	mov	r4,r2
  199770:	01993280 	call	199328 <fifo_remove>
  199774:	e0bffd15 	stw	r2,-12(fp)
    ump->m_owner = tp;
  199778:	e0bffc17 	ldw	r2,-16(fp)
  19977c:	e0fffd17 	ldw	r3,-12(fp)
  199780:	10c00215 	stw	r3,8(r2)
    ump->m_next = tp->p_mtxlist;
  199784:	e0bffd17 	ldw	r2,-12(fp)
  199788:	10c00f17 	ldw	r3,60(r2)
  19978c:	e0bffc17 	ldw	r2,-16(fp)
  199790:	10c00315 	stw	r3,12(r2)
    tp->p_mtxlist = ump;
  199794:	e0bffd17 	ldw	r2,-12(fp)
  199798:	e0fffc17 	ldw	r3,-16(fp)
  19979c:	10c00f15 	stw	r3,60(r2)
    chSchWakeupS(tp, RDY_OK);
  1997a0:	e13ffd17 	ldw	r4,-12(fp)
  1997a4:	000b883a 	mov	r5,zero
  1997a8:	0199db40 	call	199db4 <chSchWakeupS>
  1997ac:	00000206 	br	1997b8 <chMtxUnlock+0x124>
  }
  else
    ump->m_owner = NULL;
  1997b0:	e0bffc17 	ldw	r2,-16(fp)
  1997b4:	10000215 	stw	zero,8(r2)
  1997b8:	00800044 	movi	r2,1
  1997bc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1997c0:	e0bfff17 	ldw	r2,-4(fp)
  1997c4:	1001703a 	wrctl	status,r2
  chSysUnlock();
  return ump;
  1997c8:	e0bffc17 	ldw	r2,-16(fp)
}
  1997cc:	e037883a 	mov	sp,fp
  1997d0:	dfc00117 	ldw	ra,4(sp)
  1997d4:	df000017 	ldw	fp,0(sp)
  1997d8:	dec00204 	addi	sp,sp,8
  1997dc:	f800283a 	ret

001997e0 <chMtxUnlockS>:
 *
 * @return              A pointer to the unlocked mutex.
 *
 * @sclass
 */
Mutex *chMtxUnlockS(void) {
  1997e0:	defff904 	addi	sp,sp,-28
  1997e4:	dfc00615 	stw	ra,24(sp)
  1997e8:	df000515 	stw	fp,20(sp)
  1997ec:	df000504 	addi	fp,sp,20
  Thread *ctp = currp;
  1997f0:	008006b4 	movhi	r2,26
  1997f4:	108c3b04 	addi	r2,r2,12524
  1997f8:	10800617 	ldw	r2,24(r2)
  1997fc:	e0bffd15 	stw	r2,-12(fp)
              "chMtxUnlockS(), #2",
              "ownership failure");

  /* Removes the top Mutex from the owned mutexes list and marks it as not
     owned.*/
  ump = ctp->p_mtxlist;
  199800:	e0bffd17 	ldw	r2,-12(fp)
  199804:	10800f17 	ldw	r2,60(r2)
  199808:	e0bffe15 	stw	r2,-8(fp)
  ctp->p_mtxlist = ump->m_next;
  19980c:	e0bffe17 	ldw	r2,-8(fp)
  199810:	10c00317 	ldw	r3,12(r2)
  199814:	e0bffd17 	ldw	r2,-12(fp)
  199818:	10c00f15 	stw	r3,60(r2)
  /* If a thread is waiting on the mutex then the fun part begins.*/
  if (chMtxQueueNotEmptyS(ump)) {
  19981c:	e0bffe17 	ldw	r2,-8(fp)
  199820:	10c00017 	ldw	r3,0(r2)
  199824:	e0bffe17 	ldw	r2,-8(fp)
  199828:	18802d26 	beq	r3,r2,1998e0 <chMtxUnlockS+0x100>
    Thread *tp;

    /* Recalculates the optimal thread priority by scanning the owned
       mutexes list.*/
    tprio_t newprio = ctp->p_realprio;
  19982c:	e0bffd17 	ldw	r2,-12(fp)
  199830:	10801017 	ldw	r2,64(r2)
  199834:	e0bffc15 	stw	r2,-16(fp)
    mp = ctp->p_mtxlist;
  199838:	e0bffd17 	ldw	r2,-12(fp)
  19983c:	10800f17 	ldw	r2,60(r2)
  199840:	e0bffb15 	stw	r2,-20(fp)
    while (mp != NULL) {
  199844:	00001006 	br	199888 <chMtxUnlockS+0xa8>
      /* If the highest priority thread waiting in the mutexes list has a
         greater priority than the current thread base priority then the final
         priority will have at least that priority.*/
      if (chMtxQueueNotEmptyS(mp) && (mp->m_queue.p_next->p_prio > newprio))
  199848:	e0bffb17 	ldw	r2,-20(fp)
  19984c:	10c00017 	ldw	r3,0(r2)
  199850:	e0bffb17 	ldw	r2,-20(fp)
  199854:	18800926 	beq	r3,r2,19987c <chMtxUnlockS+0x9c>
  199858:	e0bffb17 	ldw	r2,-20(fp)
  19985c:	10800017 	ldw	r2,0(r2)
  199860:	10800217 	ldw	r2,8(r2)
  199864:	e0fffc17 	ldw	r3,-16(fp)
  199868:	1880042e 	bgeu	r3,r2,19987c <chMtxUnlockS+0x9c>
        newprio = mp->m_queue.p_next->p_prio;
  19986c:	e0bffb17 	ldw	r2,-20(fp)
  199870:	10800017 	ldw	r2,0(r2)
  199874:	10800217 	ldw	r2,8(r2)
  199878:	e0bffc15 	stw	r2,-16(fp)
      mp = mp->m_next;
  19987c:	e0bffb17 	ldw	r2,-20(fp)
  199880:	10800317 	ldw	r2,12(r2)
  199884:	e0bffb15 	stw	r2,-20(fp)

    /* Recalculates the optimal thread priority by scanning the owned
       mutexes list.*/
    tprio_t newprio = ctp->p_realprio;
    mp = ctp->p_mtxlist;
    while (mp != NULL) {
  199888:	e0bffb17 	ldw	r2,-20(fp)
  19988c:	103fee1e 	bne	r2,zero,199848 <__alt_data_end+0xfff99848>
         priority will have at least that priority.*/
      if (chMtxQueueNotEmptyS(mp) && (mp->m_queue.p_next->p_prio > newprio))
        newprio = mp->m_queue.p_next->p_prio;
      mp = mp->m_next;
    }
    ctp->p_prio = newprio;
  199890:	e0bffd17 	ldw	r2,-12(fp)
  199894:	e0fffc17 	ldw	r3,-16(fp)
  199898:	10c00215 	stw	r3,8(r2)
    /* Awakens the highest priority thread waiting for the unlocked mutex and
       assigns the mutex to it.*/
    tp = fifo_remove(&ump->m_queue);
  19989c:	e0bffe17 	ldw	r2,-8(fp)
  1998a0:	1009883a 	mov	r4,r2
  1998a4:	01993280 	call	199328 <fifo_remove>
  1998a8:	e0bfff15 	stw	r2,-4(fp)
    ump->m_owner = tp;
  1998ac:	e0bffe17 	ldw	r2,-8(fp)
  1998b0:	e0ffff17 	ldw	r3,-4(fp)
  1998b4:	10c00215 	stw	r3,8(r2)
    ump->m_next = tp->p_mtxlist;
  1998b8:	e0bfff17 	ldw	r2,-4(fp)
  1998bc:	10c00f17 	ldw	r3,60(r2)
  1998c0:	e0bffe17 	ldw	r2,-8(fp)
  1998c4:	10c00315 	stw	r3,12(r2)
    tp->p_mtxlist = ump;
  1998c8:	e0bfff17 	ldw	r2,-4(fp)
  1998cc:	e0fffe17 	ldw	r3,-8(fp)
  1998d0:	10c00f15 	stw	r3,60(r2)
    chSchReadyI(tp);
  1998d4:	e13fff17 	ldw	r4,-4(fp)
  1998d8:	0199b1c0 	call	199b1c <chSchReadyI>
  1998dc:	00000206 	br	1998e8 <chMtxUnlockS+0x108>
  }
  else
    ump->m_owner = NULL;
  1998e0:	e0bffe17 	ldw	r2,-8(fp)
  1998e4:	10000215 	stw	zero,8(r2)
  return ump;
  1998e8:	e0bffe17 	ldw	r2,-8(fp)
}
  1998ec:	e037883a 	mov	sp,fp
  1998f0:	dfc00117 	ldw	ra,4(sp)
  1998f4:	df000017 	ldw	fp,0(sp)
  1998f8:	dec00204 	addi	sp,sp,8
  1998fc:	f800283a 	ret

00199900 <chMtxUnlockAll>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  199900:	defff904 	addi	sp,sp,-28
  199904:	dfc00615 	stw	ra,24(sp)
  199908:	df000515 	stw	fp,20(sp)
  19990c:	df000504 	addi	fp,sp,20
  Thread *ctp = currp;
  199910:	008006b4 	movhi	r2,26
  199914:	108c3b04 	addi	r2,r2,12524
  199918:	10800617 	ldw	r2,24(r2)
  19991c:	e0bffb15 	stw	r2,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  199920:	0005303a 	rdctl	r2,status
  199924:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  199928:	e0fffe17 	ldw	r3,-8(fp)
  19992c:	00bfff84 	movi	r2,-2
  199930:	1884703a 	and	r2,r3,r2
  199934:	1001703a 	wrctl	status,r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
  199938:	e0bffb17 	ldw	r2,-20(fp)
  19993c:	10800f17 	ldw	r2,60(r2)
  199940:	10002626 	beq	r2,zero,1999dc <chMtxUnlockAll+0xdc>
    do {
      Mutex *ump = ctp->p_mtxlist;
  199944:	e0bffb17 	ldw	r2,-20(fp)
  199948:	10800f17 	ldw	r2,60(r2)
  19994c:	e0bffc15 	stw	r2,-16(fp)
      ctp->p_mtxlist = ump->m_next;
  199950:	e0bffc17 	ldw	r2,-16(fp)
  199954:	10c00317 	ldw	r3,12(r2)
  199958:	e0bffb17 	ldw	r2,-20(fp)
  19995c:	10c00f15 	stw	r3,60(r2)
      if (chMtxQueueNotEmptyS(ump)) {
  199960:	e0bffc17 	ldw	r2,-16(fp)
  199964:	10c00017 	ldw	r3,0(r2)
  199968:	e0bffc17 	ldw	r2,-16(fp)
  19996c:	18801126 	beq	r3,r2,1999b4 <chMtxUnlockAll+0xb4>
        Thread *tp = fifo_remove(&ump->m_queue);
  199970:	e0bffc17 	ldw	r2,-16(fp)
  199974:	1009883a 	mov	r4,r2
  199978:	01993280 	call	199328 <fifo_remove>
  19997c:	e0bffd15 	stw	r2,-12(fp)
        ump->m_owner = tp;
  199980:	e0bffc17 	ldw	r2,-16(fp)
  199984:	e0fffd17 	ldw	r3,-12(fp)
  199988:	10c00215 	stw	r3,8(r2)
        ump->m_next = tp->p_mtxlist;
  19998c:	e0bffd17 	ldw	r2,-12(fp)
  199990:	10c00f17 	ldw	r3,60(r2)
  199994:	e0bffc17 	ldw	r2,-16(fp)
  199998:	10c00315 	stw	r3,12(r2)
        tp->p_mtxlist = ump;
  19999c:	e0bffd17 	ldw	r2,-12(fp)
  1999a0:	e0fffc17 	ldw	r3,-16(fp)
  1999a4:	10c00f15 	stw	r3,60(r2)
        chSchReadyI(tp);
  1999a8:	e13ffd17 	ldw	r4,-12(fp)
  1999ac:	0199b1c0 	call	199b1c <chSchReadyI>
  1999b0:	00000206 	br	1999bc <chMtxUnlockAll+0xbc>
      }
      else
        ump->m_owner = NULL;
  1999b4:	e0bffc17 	ldw	r2,-16(fp)
  1999b8:	10000215 	stw	zero,8(r2)
    } while (ctp->p_mtxlist != NULL);
  1999bc:	e0bffb17 	ldw	r2,-20(fp)
  1999c0:	10800f17 	ldw	r2,60(r2)
  1999c4:	103fdf1e 	bne	r2,zero,199944 <__alt_data_end+0xfff99944>
    ctp->p_prio = ctp->p_realprio;
  1999c8:	e0bffb17 	ldw	r2,-20(fp)
  1999cc:	10c01017 	ldw	r3,64(r2)
  1999d0:	e0bffb17 	ldw	r2,-20(fp)
  1999d4:	10c00215 	stw	r3,8(r2)
    chSchRescheduleS();
  1999d8:	0199e540 	call	199e54 <chSchRescheduleS>
  1999dc:	00800044 	movi	r2,1
  1999e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1999e4:	e0bfff17 	ldw	r2,-4(fp)
  1999e8:	1001703a 	wrctl	status,r2
  }
  chSysUnlock();
}
  1999ec:	e037883a 	mov	sp,fp
  1999f0:	dfc00117 	ldw	ra,4(sp)
  1999f4:	df000017 	ldw	fp,0(sp)
  1999f8:	dec00204 	addi	sp,sp,8
  1999fc:	f800283a 	ret

00199a00 <fifo_remove>:
  tp->p_next = (Thread *)tqp;
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  199a00:	defffd04 	addi	sp,sp,-12
  199a04:	df000215 	stw	fp,8(sp)
  199a08:	df000204 	addi	fp,sp,8
  199a0c:	e13fff15 	stw	r4,-4(fp)
  Thread *tp = tqp->p_next;
  199a10:	e0bfff17 	ldw	r2,-4(fp)
  199a14:	10800017 	ldw	r2,0(r2)
  199a18:	e0bffe15 	stw	r2,-8(fp)

  (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
  199a1c:	e0bffe17 	ldw	r2,-8(fp)
  199a20:	10c00017 	ldw	r3,0(r2)
  199a24:	e0bfff17 	ldw	r2,-4(fp)
  199a28:	10c00015 	stw	r3,0(r2)
  199a2c:	e0bfff17 	ldw	r2,-4(fp)
  199a30:	10800017 	ldw	r2,0(r2)
  199a34:	e0ffff17 	ldw	r3,-4(fp)
  199a38:	10c00115 	stw	r3,4(r2)
  return tp;
  199a3c:	e0bffe17 	ldw	r2,-8(fp)
}
  199a40:	e037883a 	mov	sp,fp
  199a44:	df000017 	ldw	fp,0(sp)
  199a48:	dec00104 	addi	sp,sp,4
  199a4c:	f800283a 	ret

00199a50 <dequeue>:

  (tqp->p_prev = tp->p_prev)->p_next = (Thread *)tqp;
  return tp;
}

static INLINE Thread *dequeue(Thread *tp) {
  199a50:	defffe04 	addi	sp,sp,-8
  199a54:	df000115 	stw	fp,4(sp)
  199a58:	df000104 	addi	fp,sp,4
  199a5c:	e13fff15 	stw	r4,-4(fp)

  tp->p_prev->p_next = tp->p_next;
  199a60:	e0bfff17 	ldw	r2,-4(fp)
  199a64:	10800117 	ldw	r2,4(r2)
  199a68:	e0ffff17 	ldw	r3,-4(fp)
  199a6c:	18c00017 	ldw	r3,0(r3)
  199a70:	10c00015 	stw	r3,0(r2)
  tp->p_next->p_prev = tp->p_prev;
  199a74:	e0bfff17 	ldw	r2,-4(fp)
  199a78:	10800017 	ldw	r2,0(r2)
  199a7c:	e0ffff17 	ldw	r3,-4(fp)
  199a80:	18c00117 	ldw	r3,4(r3)
  199a84:	10c00115 	stw	r3,4(r2)
  return tp;
  199a88:	e0bfff17 	ldw	r2,-4(fp)
}
  199a8c:	e037883a 	mov	sp,fp
  199a90:	df000017 	ldw	fp,0(sp)
  199a94:	dec00104 	addi	sp,sp,4
  199a98:	f800283a 	ret

00199a9c <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
  199a9c:	deffff04 	addi	sp,sp,-4
  199aa0:	df000015 	stw	fp,0(sp)
  199aa4:	d839883a 	mov	fp,sp

  queue_init(&rlist.r_queue);
  199aa8:	008006b4 	movhi	r2,26
  199aac:	108c3b04 	addi	r2,r2,12524
  199ab0:	00c006b4 	movhi	r3,26
  199ab4:	18cc3b04 	addi	r3,r3,12524
  199ab8:	10c00115 	stw	r3,4(r2)
  199abc:	008006b4 	movhi	r2,26
  199ac0:	108c3b04 	addi	r2,r2,12524
  199ac4:	10c00117 	ldw	r3,4(r2)
  199ac8:	008006b4 	movhi	r2,26
  199acc:	108c3b04 	addi	r2,r2,12524
  199ad0:	10c00015 	stw	r3,0(r2)
  rlist.r_prio = NOPRIO;
  199ad4:	008006b4 	movhi	r2,26
  199ad8:	108c3b04 	addi	r2,r2,12524
  199adc:	10000215 	stw	zero,8(r2)
#if CH_USE_REGISTRY
  rlist.r_newer = rlist.r_older = (Thread *)&rlist;
  199ae0:	008006b4 	movhi	r2,26
  199ae4:	108c3b04 	addi	r2,r2,12524
  199ae8:	00c006b4 	movhi	r3,26
  199aec:	18cc3b04 	addi	r3,r3,12524
  199af0:	10c00515 	stw	r3,20(r2)
  199af4:	008006b4 	movhi	r2,26
  199af8:	108c3b04 	addi	r2,r2,12524
  199afc:	10c00517 	ldw	r3,20(r2)
  199b00:	008006b4 	movhi	r2,26
  199b04:	108c3b04 	addi	r2,r2,12524
  199b08:	10c00415 	stw	r3,16(r2)
#endif
}
  199b0c:	e037883a 	mov	sp,fp
  199b10:	df000017 	ldw	fp,0(sp)
  199b14:	dec00104 	addi	sp,sp,4
  199b18:	f800283a 	ret

00199b1c <chSchReadyI>:
 * @return              The thread pointer.
 *
 * @iclass
 */
#if !defined(PORT_OPTIMIZED_READYI) || defined(__DOXYGEN__)
Thread *chSchReadyI(Thread *tp) {
  199b1c:	defffd04 	addi	sp,sp,-12
  199b20:	df000215 	stw	fp,8(sp)
  199b24:	df000204 	addi	fp,sp,8
  199b28:	e13fff15 	stw	r4,-4(fp)
  Thread *cp;

  chDbgCheckClassI();

  /* Integrity checks.*/
  chDbgAssert((tp->p_state != THD_STATE_READY) &&
  199b2c:	e0bfff17 	ldw	r2,-4(fp)
  199b30:	10800703 	ldbu	r2,28(r2)
  199b34:	10803fcc 	andi	r2,r2,255
  199b38:	10000626 	beq	r2,zero,199b54 <chSchReadyI+0x38>
  199b3c:	e0bfff17 	ldw	r2,-4(fp)
  199b40:	10800703 	ldbu	r2,28(r2)
  199b44:	10803fcc 	andi	r2,r2,255
  199b48:	108003a0 	cmpeqi	r2,r2,14
  199b4c:	1000011e 	bne	r2,zero,199b54 <chSchReadyI+0x38>
  199b50:	0001883a 	nop
              (tp->p_state != THD_STATE_FINAL),
              "chSchReadyI(), #1",
              "invalid state");

  tp->p_state = THD_STATE_READY;
  199b54:	e0bfff17 	ldw	r2,-4(fp)
  199b58:	10000705 	stb	zero,28(r2)
  cp = (Thread *)&rlist.r_queue;
  199b5c:	008006b4 	movhi	r2,26
  199b60:	108c3b04 	addi	r2,r2,12524
  199b64:	e0bffe15 	stw	r2,-8(fp)
  do {
    cp = cp->p_next;
  199b68:	e0bffe17 	ldw	r2,-8(fp)
  199b6c:	10800017 	ldw	r2,0(r2)
  199b70:	e0bffe15 	stw	r2,-8(fp)
  } while (cp->p_prio >= tp->p_prio);
  199b74:	e0bffe17 	ldw	r2,-8(fp)
  199b78:	10c00217 	ldw	r3,8(r2)
  199b7c:	e0bfff17 	ldw	r2,-4(fp)
  199b80:	10800217 	ldw	r2,8(r2)
  199b84:	18bff82e 	bgeu	r3,r2,199b68 <__alt_data_end+0xfff99b68>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  199b88:	e0bfff17 	ldw	r2,-4(fp)
  199b8c:	e0fffe17 	ldw	r3,-8(fp)
  199b90:	10c00015 	stw	r3,0(r2)
  tp->p_prev = cp->p_prev;
  199b94:	e0bffe17 	ldw	r2,-8(fp)
  199b98:	10c00117 	ldw	r3,4(r2)
  199b9c:	e0bfff17 	ldw	r2,-4(fp)
  199ba0:	10c00115 	stw	r3,4(r2)
  tp->p_prev->p_next = cp->p_prev = tp;
  199ba4:	e0bfff17 	ldw	r2,-4(fp)
  199ba8:	10800117 	ldw	r2,4(r2)
  199bac:	e0fffe17 	ldw	r3,-8(fp)
  199bb0:	e13fff17 	ldw	r4,-4(fp)
  199bb4:	19000115 	stw	r4,4(r3)
  199bb8:	e0fffe17 	ldw	r3,-8(fp)
  199bbc:	18c00117 	ldw	r3,4(r3)
  199bc0:	10c00015 	stw	r3,0(r2)
  return tp;
  199bc4:	e0bfff17 	ldw	r2,-4(fp)
}
  199bc8:	e037883a 	mov	sp,fp
  199bcc:	df000017 	ldw	fp,0(sp)
  199bd0:	dec00104 	addi	sp,sp,4
  199bd4:	f800283a 	ret

00199bd8 <chSchGoSleepS>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
#if !defined(PORT_OPTIMIZED_GOSLEEPS) || defined(__DOXYGEN__)
void chSchGoSleepS(tstate_t newstate) {
  199bd8:	defffc04 	addi	sp,sp,-16
  199bdc:	dfc00315 	stw	ra,12(sp)
  199be0:	df000215 	stw	fp,8(sp)
  199be4:	df000204 	addi	fp,sp,8
  199be8:	2005883a 	mov	r2,r4
  199bec:	e0bfff05 	stb	r2,-4(fp)
  Thread *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
  199bf0:	008006b4 	movhi	r2,26
  199bf4:	108c3b04 	addi	r2,r2,12524
  199bf8:	10800617 	ldw	r2,24(r2)
  199bfc:	e0bffe15 	stw	r2,-8(fp)
  199c00:	e0bffe17 	ldw	r2,-8(fp)
  199c04:	e0ffff03 	ldbu	r3,-4(fp)
  199c08:	10c00705 	stb	r3,28(r2)
#if CH_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_TIME_QUANTUM;
  199c0c:	e0bffe17 	ldw	r2,-8(fp)
  199c10:	00c00504 	movi	r3,20
  199c14:	10c007c5 	stb	r3,31(r2)
#endif
  setcurrp(fifo_remove(&rlist.r_queue));
  199c18:	010006b4 	movhi	r4,26
  199c1c:	210c3b04 	addi	r4,r4,12524
  199c20:	0199a000 	call	199a00 <fifo_remove>
  199c24:	1007883a 	mov	r3,r2
  199c28:	008006b4 	movhi	r2,26
  199c2c:	108c3b04 	addi	r2,r2,12524
  199c30:	10c00615 	stw	r3,24(r2)
  currp->p_state = THD_STATE_CURRENT;
  199c34:	008006b4 	movhi	r2,26
  199c38:	108c3b04 	addi	r2,r2,12524
  199c3c:	10800617 	ldw	r2,24(r2)
  199c40:	00c00044 	movi	r3,1
  199c44:	10c00705 	stb	r3,28(r2)
  chSysSwitch(currp, otp);
  199c48:	008006b4 	movhi	r2,26
  199c4c:	108c3b04 	addi	r2,r2,12524
  199c50:	10800617 	ldw	r2,24(r2)
  199c54:	1009883a 	mov	r4,r2
  199c58:	e17ffe17 	ldw	r5,-8(fp)
  199c5c:	01961ac0 	call	1961ac <port_switch>
}
  199c60:	e037883a 	mov	sp,fp
  199c64:	dfc00117 	ldw	ra,4(sp)
  199c68:	df000017 	ldw	fp,0(sp)
  199c6c:	dec00204 	addi	sp,sp,8
  199c70:	f800283a 	ret

00199c74 <wakeup>:

#if !defined(PORT_OPTIMIZED_GOSLEEPTIMEOUTS) || defined(__DOXYGEN__)
/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
  199c74:	defffc04 	addi	sp,sp,-16
  199c78:	dfc00315 	stw	ra,12(sp)
  199c7c:	df000215 	stw	fp,8(sp)
  199c80:	df000204 	addi	fp,sp,8
  199c84:	e13fff15 	stw	r4,-4(fp)
  Thread *tp = (Thread *)p;
  199c88:	e0bfff17 	ldw	r2,-4(fp)
  199c8c:	e0bffe15 	stw	r2,-8(fp)

  chSysLockFromIsr();
  switch (tp->p_state) {
  199c90:	e0bffe17 	ldw	r2,-8(fp)
  199c94:	10800703 	ldbu	r2,28(r2)
  199c98:	10803fcc 	andi	r2,r2,255
  199c9c:	10c000e0 	cmpeqi	r3,r2,3
  199ca0:	1800091e 	bne	r3,zero,199cc8 <wakeup+0x54>
  199ca4:	10c00108 	cmpgei	r3,r2,4
  199ca8:	1800021e 	bne	r3,zero,199cb4 <wakeup+0x40>
  199cac:	10001326 	beq	r2,zero,199cfc <wakeup+0x88>
  199cb0:	00000c06 	br	199ce4 <wakeup+0x70>
  199cb4:	10c00160 	cmpeqi	r3,r2,5
  199cb8:	1800081e 	bne	r3,zero,199cdc <wakeup+0x68>
  199cbc:	10800360 	cmpeqi	r2,r2,13
  199cc0:	1000061e 	bne	r2,zero,199cdc <wakeup+0x68>
  199cc4:	00000706 	br	199ce4 <wakeup+0x70>
    return;
#if CH_USE_SEMAPHORES || CH_USE_QUEUES ||                                   \
    (CH_USE_CONDVARS && CH_USE_CONDVARS_TIMEOUT)
#if CH_USE_SEMAPHORES
  case THD_STATE_WTSEM:
    chSemFastSignalI((Semaphore *)tp->p_u.wtobjp);
  199cc8:	e0bffe17 	ldw	r2,-8(fp)
  199ccc:	10800917 	ldw	r2,36(r2)
  199cd0:	10c00217 	ldw	r3,8(r2)
  199cd4:	18c00044 	addi	r3,r3,1
  199cd8:	10c00215 	stw	r3,8(r2)
#endif
#if CH_USE_CONDVARS && CH_USE_CONDVARS_TIMEOUT
  case THD_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    dequeue(tp);
  199cdc:	e13ffe17 	ldw	r4,-8(fp)
  199ce0:	0199a500 	call	199a50 <dequeue>
#endif
  }
  tp->p_u.rdymsg = RDY_TIMEOUT;
  199ce4:	e0bffe17 	ldw	r2,-8(fp)
  199ce8:	00ffffc4 	movi	r3,-1
  199cec:	10c00915 	stw	r3,36(r2)
  chSchReadyI(tp);
  199cf0:	e13ffe17 	ldw	r4,-8(fp)
  199cf4:	0199b1c0 	call	199b1c <chSchReadyI>
  199cf8:	00000106 	br	199d00 <wakeup+0x8c>
  switch (tp->p_state) {
  case THD_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromIsr();
    return;
  199cfc:	0001883a 	nop
#endif
  }
  tp->p_u.rdymsg = RDY_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromIsr();
}
  199d00:	e037883a 	mov	sp,fp
  199d04:	dfc00117 	ldw	ra,4(sp)
  199d08:	df000017 	ldw	fp,0(sp)
  199d0c:	dec00204 	addi	sp,sp,8
  199d10:	f800283a 	ret

00199d14 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval RDY_TIMEOUT if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  199d14:	defff704 	addi	sp,sp,-36
  199d18:	dfc00815 	stw	ra,32(sp)
  199d1c:	df000715 	stw	fp,28(sp)
  199d20:	df000704 	addi	fp,sp,28
  199d24:	2005883a 	mov	r2,r4
  199d28:	e17fff15 	stw	r5,-4(fp)
  199d2c:	e0bffe05 	stb	r2,-8(fp)

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
  199d30:	e0bfff17 	ldw	r2,-4(fp)
  199d34:	10bfffe0 	cmpeqi	r2,r2,-1
  199d38:	1000121e 	bne	r2,zero,199d84 <chSchGoSleepTimeoutS+0x70>
    VirtualTimer vt;

    chVTSetI(&vt, time, wakeup, currp);
  199d3c:	008006b4 	movhi	r2,26
  199d40:	108c3b04 	addi	r2,r2,12524
  199d44:	10800617 	ldw	r2,24(r2)
  199d48:	e13ff904 	addi	r4,fp,-28
  199d4c:	e17fff17 	ldw	r5,-4(fp)
  199d50:	018006b4 	movhi	r6,26
  199d54:	31a71d04 	addi	r6,r6,-25484
  199d58:	100f883a 	mov	r7,r2
  199d5c:	0195ff80 	call	195ff8 <chVTSetI>
    chSchGoSleepS(newstate);
  199d60:	e0bffe03 	ldbu	r2,-8(fp)
  199d64:	1009883a 	mov	r4,r2
  199d68:	0199bd80 	call	199bd8 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
  199d6c:	e0bffc17 	ldw	r2,-16(fp)
  199d70:	10000326 	beq	r2,zero,199d80 <chSchGoSleepTimeoutS+0x6c>
      chVTResetI(&vt);
  199d74:	e13ff904 	addi	r4,fp,-28
  199d78:	01961100 	call	196110 <chVTResetI>
  199d7c:	00000406 	br	199d90 <chSchGoSleepTimeoutS+0x7c>
  199d80:	00000306 	br	199d90 <chSchGoSleepTimeoutS+0x7c>
  }
  else
    chSchGoSleepS(newstate);
  199d84:	e0bffe03 	ldbu	r2,-8(fp)
  199d88:	1009883a 	mov	r4,r2
  199d8c:	0199bd80 	call	199bd8 <chSchGoSleepS>
  return currp->p_u.rdymsg;
  199d90:	008006b4 	movhi	r2,26
  199d94:	108c3b04 	addi	r2,r2,12524
  199d98:	10800617 	ldw	r2,24(r2)
  199d9c:	10800917 	ldw	r2,36(r2)
}
  199da0:	e037883a 	mov	sp,fp
  199da4:	dfc00117 	ldw	ra,4(sp)
  199da8:	df000017 	ldw	fp,0(sp)
  199dac:	dec00204 	addi	sp,sp,8
  199db0:	f800283a 	ret

00199db4 <chSchWakeupS>:
 * @param[in] msg       message to the awakened thread
 *
 * @sclass
 */
#if !defined(PORT_OPTIMIZED_WAKEUPS) || defined(__DOXYGEN__)
void chSchWakeupS(Thread *ntp, msg_t msg) {
  199db4:	defffb04 	addi	sp,sp,-20
  199db8:	dfc00415 	stw	ra,16(sp)
  199dbc:	df000315 	stw	fp,12(sp)
  199dc0:	df000304 	addi	fp,sp,12
  199dc4:	e13ffe15 	stw	r4,-8(fp)
  199dc8:	e17fff15 	stw	r5,-4(fp)

  chDbgCheckClassS();

  ntp->p_u.rdymsg = msg;
  199dcc:	e0bffe17 	ldw	r2,-8(fp)
  199dd0:	e0ffff17 	ldw	r3,-4(fp)
  199dd4:	10c00915 	stw	r3,36(r2)
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio)
  199dd8:	e0bffe17 	ldw	r2,-8(fp)
  199ddc:	10c00217 	ldw	r3,8(r2)
  199de0:	008006b4 	movhi	r2,26
  199de4:	108c3b04 	addi	r2,r2,12524
  199de8:	10800617 	ldw	r2,24(r2)
  199dec:	10800217 	ldw	r2,8(r2)
  199df0:	10c00336 	bltu	r2,r3,199e00 <chSchWakeupS+0x4c>
    chSchReadyI(ntp);
  199df4:	e13ffe17 	ldw	r4,-8(fp)
  199df8:	0199b1c0 	call	199b1c <chSchReadyI>
  199dfc:	00001006 	br	199e40 <chSchWakeupS+0x8c>
  else {
    Thread *otp = chSchReadyI(currp);
  199e00:	008006b4 	movhi	r2,26
  199e04:	108c3b04 	addi	r2,r2,12524
  199e08:	10800617 	ldw	r2,24(r2)
  199e0c:	1009883a 	mov	r4,r2
  199e10:	0199b1c0 	call	199b1c <chSchReadyI>
  199e14:	e0bffd15 	stw	r2,-12(fp)
    setcurrp(ntp);
  199e18:	008006b4 	movhi	r2,26
  199e1c:	108c3b04 	addi	r2,r2,12524
  199e20:	e0fffe17 	ldw	r3,-8(fp)
  199e24:	10c00615 	stw	r3,24(r2)
    ntp->p_state = THD_STATE_CURRENT;
  199e28:	e0bffe17 	ldw	r2,-8(fp)
  199e2c:	00c00044 	movi	r3,1
  199e30:	10c00705 	stb	r3,28(r2)
    chSysSwitch(ntp, otp);
  199e34:	e13ffe17 	ldw	r4,-8(fp)
  199e38:	e17ffd17 	ldw	r5,-12(fp)
  199e3c:	01961ac0 	call	1961ac <port_switch>
  }
}
  199e40:	e037883a 	mov	sp,fp
  199e44:	dfc00117 	ldw	ra,4(sp)
  199e48:	df000017 	ldw	fp,0(sp)
  199e4c:	dec00204 	addi	sp,sp,8
  199e50:	f800283a 	ret

00199e54 <chSchRescheduleS>:
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
#if !defined(PORT_OPTIMIZED_RESCHEDULES) || defined(__DOXYGEN__)
void chSchRescheduleS(void) {
  199e54:	defffe04 	addi	sp,sp,-8
  199e58:	dfc00115 	stw	ra,4(sp)
  199e5c:	df000015 	stw	fp,0(sp)
  199e60:	d839883a 	mov	fp,sp

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
  199e64:	008006b4 	movhi	r2,26
  199e68:	108c3b04 	addi	r2,r2,12524
  199e6c:	10800017 	ldw	r2,0(r2)
  199e70:	10c00217 	ldw	r3,8(r2)
  199e74:	008006b4 	movhi	r2,26
  199e78:	108c3b04 	addi	r2,r2,12524
  199e7c:	10800617 	ldw	r2,24(r2)
  199e80:	10800217 	ldw	r2,8(r2)
  199e84:	10c0012e 	bgeu	r2,r3,199e8c <chSchRescheduleS+0x38>
    chSchDoRescheduleAhead();
  199e88:	0199fa80 	call	199fa8 <chSchDoRescheduleAhead>
}
  199e8c:	e037883a 	mov	sp,fp
  199e90:	dfc00117 	ldw	ra,4(sp)
  199e94:	df000017 	ldw	fp,0(sp)
  199e98:	dec00204 	addi	sp,sp,8
  199e9c:	f800283a 	ret

00199ea0 <chSchIsPreemptionRequired>:
 * @retval FALSE        if preemption is not required.
 *
 * @special
 */
#if !defined(PORT_OPTIMIZED_ISPREEMPTIONREQUIRED) || defined(__DOXYGEN__)
bool_t chSchIsPreemptionRequired(void) {
  199ea0:	defffd04 	addi	sp,sp,-12
  199ea4:	df000215 	stw	fp,8(sp)
  199ea8:	df000204 	addi	fp,sp,8
  tprio_t p1 = firstprio(&rlist.r_queue);
  199eac:	008006b4 	movhi	r2,26
  199eb0:	108c3b04 	addi	r2,r2,12524
  199eb4:	10800017 	ldw	r2,0(r2)
  199eb8:	10800217 	ldw	r2,8(r2)
  199ebc:	e0bffe15 	stw	r2,-8(fp)
  tprio_t p2 = currp->p_prio;
  199ec0:	008006b4 	movhi	r2,26
  199ec4:	108c3b04 	addi	r2,r2,12524
  199ec8:	10800617 	ldw	r2,24(r2)
  199ecc:	10800217 	ldw	r2,8(r2)
  199ed0:	e0bfff15 	stw	r2,-4(fp)
#if CH_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return currp->p_preempt ? p1 > p2 : p1 >= p2;
  199ed4:	008006b4 	movhi	r2,26
  199ed8:	108c3b04 	addi	r2,r2,12524
  199edc:	10800617 	ldw	r2,24(r2)
  199ee0:	108007c3 	ldbu	r2,31(r2)
  199ee4:	10803fcc 	andi	r2,r2,255
  199ee8:	10000426 	beq	r2,zero,199efc <chSchIsPreemptionRequired+0x5c>
  199eec:	e0bffe17 	ldw	r2,-8(fp)
  199ef0:	e0ffff17 	ldw	r3,-4(fp)
  199ef4:	1885803a 	cmpltu	r2,r3,r2
  199ef8:	00000306 	br	199f08 <chSchIsPreemptionRequired+0x68>
  199efc:	e0fffe17 	ldw	r3,-8(fp)
  199f00:	e0bfff17 	ldw	r2,-4(fp)
  199f04:	1885403a 	cmpgeu	r2,r3,r2
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
  199f08:	e037883a 	mov	sp,fp
  199f0c:	df000017 	ldw	fp,0(sp)
  199f10:	dec00104 	addi	sp,sp,4
  199f14:	f800283a 	ret

00199f18 <chSchDoRescheduleBehind>:
 *          itself or from within the port layer.
 *
 * @special
 */
#if !defined(PORT_OPTIMIZED_DORESCHEDULEBEHIND) || defined(__DOXYGEN__)
void chSchDoRescheduleBehind(void) {
  199f18:	defffd04 	addi	sp,sp,-12
  199f1c:	dfc00215 	stw	ra,8(sp)
  199f20:	df000115 	stw	fp,4(sp)
  199f24:	df000104 	addi	fp,sp,4
  Thread *otp;

  otp = currp;
  199f28:	008006b4 	movhi	r2,26
  199f2c:	108c3b04 	addi	r2,r2,12524
  199f30:	10800617 	ldw	r2,24(r2)
  199f34:	e0bfff15 	stw	r2,-4(fp)
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(fifo_remove(&rlist.r_queue));
  199f38:	010006b4 	movhi	r4,26
  199f3c:	210c3b04 	addi	r4,r4,12524
  199f40:	0199a000 	call	199a00 <fifo_remove>
  199f44:	1007883a 	mov	r3,r2
  199f48:	008006b4 	movhi	r2,26
  199f4c:	108c3b04 	addi	r2,r2,12524
  199f50:	10c00615 	stw	r3,24(r2)
  currp->p_state = THD_STATE_CURRENT;
  199f54:	008006b4 	movhi	r2,26
  199f58:	108c3b04 	addi	r2,r2,12524
  199f5c:	10800617 	ldw	r2,24(r2)
  199f60:	00c00044 	movi	r3,1
  199f64:	10c00705 	stb	r3,28(r2)
#if CH_TIME_QUANTUM > 0
  otp->p_preempt = CH_TIME_QUANTUM;
  199f68:	e0bfff17 	ldw	r2,-4(fp)
  199f6c:	00c00504 	movi	r3,20
  199f70:	10c007c5 	stb	r3,31(r2)
#endif
  chSchReadyI(otp);
  199f74:	e13fff17 	ldw	r4,-4(fp)
  199f78:	0199b1c0 	call	199b1c <chSchReadyI>
  chSysSwitch(currp, otp);
  199f7c:	008006b4 	movhi	r2,26
  199f80:	108c3b04 	addi	r2,r2,12524
  199f84:	10800617 	ldw	r2,24(r2)
  199f88:	1009883a 	mov	r4,r2
  199f8c:	e17fff17 	ldw	r5,-4(fp)
  199f90:	01961ac0 	call	1961ac <port_switch>
}
  199f94:	e037883a 	mov	sp,fp
  199f98:	dfc00117 	ldw	ra,4(sp)
  199f9c:	df000017 	ldw	fp,0(sp)
  199fa0:	dec00204 	addi	sp,sp,8
  199fa4:	f800283a 	ret

00199fa8 <chSchDoRescheduleAhead>:
 *          itself or from within the port layer.
 *
 * @special
 */
#if !defined(PORT_OPTIMIZED_DORESCHEDULEAHEAD) || defined(__DOXYGEN__)
void chSchDoRescheduleAhead(void) {
  199fa8:	defffc04 	addi	sp,sp,-16
  199fac:	dfc00315 	stw	ra,12(sp)
  199fb0:	df000215 	stw	fp,8(sp)
  199fb4:	df000204 	addi	fp,sp,8
  Thread *otp, *cp;

  otp = currp;
  199fb8:	008006b4 	movhi	r2,26
  199fbc:	108c3b04 	addi	r2,r2,12524
  199fc0:	10800617 	ldw	r2,24(r2)
  199fc4:	e0bfff15 	stw	r2,-4(fp)
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(fifo_remove(&rlist.r_queue));
  199fc8:	010006b4 	movhi	r4,26
  199fcc:	210c3b04 	addi	r4,r4,12524
  199fd0:	0199a000 	call	199a00 <fifo_remove>
  199fd4:	1007883a 	mov	r3,r2
  199fd8:	008006b4 	movhi	r2,26
  199fdc:	108c3b04 	addi	r2,r2,12524
  199fe0:	10c00615 	stw	r3,24(r2)
  currp->p_state = THD_STATE_CURRENT;
  199fe4:	008006b4 	movhi	r2,26
  199fe8:	108c3b04 	addi	r2,r2,12524
  199fec:	10800617 	ldw	r2,24(r2)
  199ff0:	00c00044 	movi	r3,1
  199ff4:	10c00705 	stb	r3,28(r2)

  otp->p_state = THD_STATE_READY;
  199ff8:	e0bfff17 	ldw	r2,-4(fp)
  199ffc:	10000705 	stb	zero,28(r2)
  cp = (Thread *)&rlist.r_queue;
  19a000:	008006b4 	movhi	r2,26
  19a004:	108c3b04 	addi	r2,r2,12524
  19a008:	e0bffe15 	stw	r2,-8(fp)
  do {
    cp = cp->p_next;
  19a00c:	e0bffe17 	ldw	r2,-8(fp)
  19a010:	10800017 	ldw	r2,0(r2)
  19a014:	e0bffe15 	stw	r2,-8(fp)
  } while (cp->p_prio > otp->p_prio);
  19a018:	e0bffe17 	ldw	r2,-8(fp)
  19a01c:	10800217 	ldw	r2,8(r2)
  19a020:	e0ffff17 	ldw	r3,-4(fp)
  19a024:	18c00217 	ldw	r3,8(r3)
  19a028:	18bff836 	bltu	r3,r2,19a00c <__alt_data_end+0xfff9a00c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  19a02c:	e0bfff17 	ldw	r2,-4(fp)
  19a030:	e0fffe17 	ldw	r3,-8(fp)
  19a034:	10c00015 	stw	r3,0(r2)
  otp->p_prev = cp->p_prev;
  19a038:	e0bffe17 	ldw	r2,-8(fp)
  19a03c:	10c00117 	ldw	r3,4(r2)
  19a040:	e0bfff17 	ldw	r2,-4(fp)
  19a044:	10c00115 	stw	r3,4(r2)
  otp->p_prev->p_next = cp->p_prev = otp;
  19a048:	e0bfff17 	ldw	r2,-4(fp)
  19a04c:	10800117 	ldw	r2,4(r2)
  19a050:	e0fffe17 	ldw	r3,-8(fp)
  19a054:	e13fff17 	ldw	r4,-4(fp)
  19a058:	19000115 	stw	r4,4(r3)
  19a05c:	e0fffe17 	ldw	r3,-8(fp)
  19a060:	18c00117 	ldw	r3,4(r3)
  19a064:	10c00015 	stw	r3,0(r2)

  chSysSwitch(currp, otp);
  19a068:	008006b4 	movhi	r2,26
  19a06c:	108c3b04 	addi	r2,r2,12524
  19a070:	10800617 	ldw	r2,24(r2)
  19a074:	1009883a 	mov	r4,r2
  19a078:	e17fff17 	ldw	r5,-4(fp)
  19a07c:	01961ac0 	call	1961ac <port_switch>
}
  19a080:	e037883a 	mov	sp,fp
  19a084:	dfc00117 	ldw	ra,4(sp)
  19a088:	df000017 	ldw	fp,0(sp)
  19a08c:	dec00204 	addi	sp,sp,8
  19a090:	f800283a 	ret

0019a094 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
#if !defined(PORT_OPTIMIZED_DORESCHEDULE) || defined(__DOXYGEN__)
void chSchDoReschedule(void) {
  19a094:	defffe04 	addi	sp,sp,-8
  19a098:	dfc00115 	stw	ra,4(sp)
  19a09c:	df000015 	stw	fp,0(sp)
  19a0a0:	d839883a 	mov	fp,sp

#if CH_TIME_QUANTUM > 0
  /* If CH_TIME_QUANTUM is enabled then there are two different scenarios to
     handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == 0) {
  19a0a4:	008006b4 	movhi	r2,26
  19a0a8:	108c3b04 	addi	r2,r2,12524
  19a0ac:	10800617 	ldw	r2,24(r2)
  19a0b0:	108007c3 	ldbu	r2,31(r2)
  19a0b4:	10803fcc 	andi	r2,r2,255
  19a0b8:	1000021e 	bne	r2,zero,19a0c4 <chSchDoReschedule+0x30>
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
  19a0bc:	0199f180 	call	199f18 <chSchDoRescheduleBehind>
  19a0c0:	00000106 	br	19a0c8 <chSchDoReschedule+0x34>
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
  19a0c4:	0199fa80 	call	199fa8 <chSchDoRescheduleAhead>
#else /* !(CH_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_TIME_QUANTUM > 0) */
}
  19a0c8:	e037883a 	mov	sp,fp
  19a0cc:	dfc00117 	ldw	ra,4(sp)
  19a0d0:	df000017 	ldw	fp,0(sp)
  19a0d4:	dec00204 	addi	sp,sp,8
  19a0d8:	f800283a 	ret

0019a0dc <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p the thread parameter, unused in this scenario
 */
void _idle_thread(void *p) {
  19a0dc:	defffe04 	addi	sp,sp,-8
  19a0e0:	df000115 	stw	fp,4(sp)
  19a0e4:	df000104 	addi	fp,sp,4
  19a0e8:	e13fff15 	stw	r4,-4(fp)

  (void)p;
  chRegSetThreadName("idle");
  19a0ec:	008006b4 	movhi	r2,26
  19a0f0:	108c3b04 	addi	r2,r2,12524
  19a0f4:	10c00617 	ldw	r3,24(r2)
  19a0f8:	008006b4 	movhi	r2,26
  19a0fc:	10bd8004 	addi	r2,r2,-2560
  19a100:	18800615 	stw	r2,24(r3)
  while (TRUE) {
    port_wait_for_interrupt();
  19a104:	0001883a 	nop
    IDLE_LOOP_HOOK();
  }
  19a108:	003ffe06 	br	19a104 <__alt_data_end+0xfff9a104>

0019a10c <chSysInit>:
 * @note    This function has special, architecture-dependent, requirements,
 *          see the notes into the various port reference manuals.
 *
 * @special
 */
void chSysInit(void) {
  19a10c:	defffc04 	addi	sp,sp,-16
  19a110:	dfc00315 	stw	ra,12(sp)
  19a114:	df000215 	stw	fp,8(sp)
  19a118:	df000204 	addi	fp,sp,8
#if CH_DBG_ENABLE_STACK_CHECK
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
  19a11c:	0199a9c0 	call	199a9c <_scheduler_init>
  _vt_init();
  19a120:	0195f940 	call	195f94 <_vt_init>
#if CH_USE_MEMCORE
  _core_init();
  19a124:	0198ed40 	call	198ed4 <_core_init>
#endif
#if CH_USE_HEAP
  _heap_init();
  19a128:	01989dc0 	call	1989dc <_heap_init>
#if CH_DBG_ENABLE_TRACE
  _trace_init();
#endif

  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&mainthread, NORMALPRIO));
  19a12c:	010006b4 	movhi	r4,26
  19a130:	210b8604 	addi	r4,r4,11800
  19a134:	01401004 	movi	r5,64
  19a138:	01958000 	call	195800 <_thread_init>
  19a13c:	1007883a 	mov	r3,r2
  19a140:	008006b4 	movhi	r2,26
  19a144:	108c3b04 	addi	r2,r2,12524
  19a148:	10c00615 	stw	r3,24(r2)
  currp->p_state = THD_STATE_CURRENT;
  19a14c:	008006b4 	movhi	r2,26
  19a150:	108c3b04 	addi	r2,r2,12524
  19a154:	10800617 	ldw	r2,24(r2)
  19a158:	00c00044 	movi	r3,1
  19a15c:	10c00705 	stb	r3,28(r2)
  19a160:	00800044 	movi	r2,1
  19a164:	e0bfff15 	stw	r2,-4(fp)
  19a168:	e0bfff17 	ldw	r2,-4(fp)
  19a16c:	1001703a 	wrctl	status,r2
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
  19a170:	008006b4 	movhi	r2,26
  19a174:	108c3b04 	addi	r2,r2,12524
  19a178:	10c00617 	ldw	r3,24(r2)
  19a17c:	008006b4 	movhi	r2,26
  19a180:	10bd8204 	addi	r2,r2,-2552
  19a184:	18800615 	stw	r2,24(r3)

#if !CH_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(_idle_thread_wa, sizeof(_idle_thread_wa), IDLEPRIO,
  19a188:	d8000015 	stw	zero,0(sp)
  19a18c:	010006b4 	movhi	r4,26
  19a190:	210c4204 	addi	r4,r4,12552
  19a194:	01407204 	movi	r5,456
  19a198:	01800044 	movi	r6,1
  19a19c:	01c006b4 	movhi	r7,26
  19a1a0:	39e83704 	addi	r7,r7,-24356
  19a1a4:	0195a880 	call	195a88 <chThdCreateStatic>
                    (tfunc_t)_idle_thread, NULL);
#endif
}
  19a1a8:	e037883a 	mov	sp,fp
  19a1ac:	dfc00117 	ldw	ra,4(sp)
  19a1b0:	df000017 	ldw	fp,0(sp)
  19a1b4:	dec00204 	addi	sp,sp,8
  19a1b8:	f800283a 	ret

0019a1bc <chSysTimerHandlerI>:
 *          and, together with the @p CH_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
  19a1bc:	defffc04 	addi	sp,sp,-16
  19a1c0:	dfc00315 	stw	ra,12(sp)
  19a1c4:	df000215 	stw	fp,8(sp)
  19a1c8:	df000204 	addi	fp,sp,8

  chDbgCheckClassI();

#if CH_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > 0)
  19a1cc:	008006b4 	movhi	r2,26
  19a1d0:	108c3b04 	addi	r2,r2,12524
  19a1d4:	10800617 	ldw	r2,24(r2)
  19a1d8:	108007c3 	ldbu	r2,31(r2)
  19a1dc:	10803fcc 	andi	r2,r2,255
  19a1e0:	10000626 	beq	r2,zero,19a1fc <chSysTimerHandlerI+0x40>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
  19a1e4:	008006b4 	movhi	r2,26
  19a1e8:	108c3b04 	addi	r2,r2,12524
  19a1ec:	10800617 	ldw	r2,24(r2)
  19a1f0:	10c007c3 	ldbu	r3,31(r2)
  19a1f4:	18ffffc4 	addi	r3,r3,-1
  19a1f8:	10c007c5 	stb	r3,31(r2)
#endif
#if CH_DBG_THREADS_PROFILING
  currp->p_time++;
  19a1fc:	008006b4 	movhi	r2,26
  19a200:	108c3b04 	addi	r2,r2,12524
  19a204:	10800617 	ldw	r2,24(r2)
  19a208:	10c00817 	ldw	r3,32(r2)
  19a20c:	18c00044 	addi	r3,r3,1
  19a210:	10c00815 	stw	r3,32(r2)
#endif
  chVTDoTickI();
  19a214:	008006b4 	movhi	r2,26
  19a218:	108bf704 	addi	r2,r2,12252
  19a21c:	10800317 	ldw	r2,12(r2)
  19a220:	10c00044 	addi	r3,r2,1
  19a224:	008006b4 	movhi	r2,26
  19a228:	108bf704 	addi	r2,r2,12252
  19a22c:	10c00315 	stw	r3,12(r2)
  19a230:	008006b4 	movhi	r2,26
  19a234:	108bf704 	addi	r2,r2,12252
  19a238:	10c00017 	ldw	r3,0(r2)
  19a23c:	008006b4 	movhi	r2,26
  19a240:	108bf704 	addi	r2,r2,12252
  19a244:	18802226 	beq	r3,r2,19a2d0 <chSysTimerHandlerI+0x114>
  19a248:	008006b4 	movhi	r2,26
  19a24c:	108bf704 	addi	r2,r2,12252
  19a250:	10800017 	ldw	r2,0(r2)
  19a254:	10c00217 	ldw	r3,8(r2)
  19a258:	18ffffc4 	addi	r3,r3,-1
  19a25c:	10c00215 	stw	r3,8(r2)
  19a260:	00001406 	br	19a2b4 <chSysTimerHandlerI+0xf8>
  19a264:	e0bffe17 	ldw	r2,-8(fp)
  19a268:	10800317 	ldw	r2,12(r2)
  19a26c:	e0bfff15 	stw	r2,-4(fp)
  19a270:	e0bffe17 	ldw	r2,-8(fp)
  19a274:	10000315 	stw	zero,12(r2)
  19a278:	e0bffe17 	ldw	r2,-8(fp)
  19a27c:	10c00017 	ldw	r3,0(r2)
  19a280:	008006b4 	movhi	r2,26
  19a284:	108bf704 	addi	r2,r2,12252
  19a288:	18800115 	stw	r2,4(r3)
  19a28c:	e0bffe17 	ldw	r2,-8(fp)
  19a290:	10c00017 	ldw	r3,0(r2)
  19a294:	008006b4 	movhi	r2,26
  19a298:	108bf704 	addi	r2,r2,12252
  19a29c:	10c00015 	stw	r3,0(r2)
  19a2a0:	e0bffe17 	ldw	r2,-8(fp)
  19a2a4:	10c00417 	ldw	r3,16(r2)
  19a2a8:	e0bfff17 	ldw	r2,-4(fp)
  19a2ac:	1809883a 	mov	r4,r3
  19a2b0:	103ee83a 	callr	r2
  19a2b4:	008006b4 	movhi	r2,26
  19a2b8:	108bf704 	addi	r2,r2,12252
  19a2bc:	10800017 	ldw	r2,0(r2)
  19a2c0:	e0bffe15 	stw	r2,-8(fp)
  19a2c4:	e0bffe17 	ldw	r2,-8(fp)
  19a2c8:	10800217 	ldw	r2,8(r2)
  19a2cc:	103fe526 	beq	r2,zero,19a264 <__alt_data_end+0xfff9a264>
#if defined(SYSTEM_TICK_EVENT_HOOK)
  SYSTEM_TICK_EVENT_HOOK();
#endif
}
  19a2d0:	e037883a 	mov	sp,fp
  19a2d4:	dfc00117 	ldw	ra,4(sp)
  19a2d8:	df000017 	ldw	fp,0(sp)
  19a2dc:	dec00204 	addi	sp,sp,8
  19a2e0:	f800283a 	ret

0019a2e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  19a2e4:	defff504 	addi	sp,sp,-44
  19a2e8:	df000a15 	stw	fp,40(sp)
  19a2ec:	df000a04 	addi	fp,sp,40
  19a2f0:	e13ffc15 	stw	r4,-16(fp)
  19a2f4:	e17ffd15 	stw	r5,-12(fp)
  19a2f8:	e1bffe15 	stw	r6,-8(fp)
  19a2fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  19a300:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  19a304:	008006b4 	movhi	r2,26
  19a308:	108b7304 	addi	r2,r2,11724
  19a30c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  19a310:	10003f26 	beq	r2,zero,19a410 <alt_alarm_start+0x12c>
  {
    if (alarm)
  19a314:	e0bffc17 	ldw	r2,-16(fp)
  19a318:	10003b26 	beq	r2,zero,19a408 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  19a31c:	e0bffc17 	ldw	r2,-16(fp)
  19a320:	e0fffe17 	ldw	r3,-8(fp)
  19a324:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  19a328:	e0bffc17 	ldw	r2,-16(fp)
  19a32c:	e0ffff17 	ldw	r3,-4(fp)
  19a330:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19a334:	0005303a 	rdctl	r2,status
  19a338:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  19a33c:	e0fff817 	ldw	r3,-32(fp)
  19a340:	00bfff84 	movi	r2,-2
  19a344:	1884703a 	and	r2,r3,r2
  19a348:	1001703a 	wrctl	status,r2
  
  return context;
  19a34c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  19a350:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  19a354:	008006b4 	movhi	r2,26
  19a358:	108b7404 	addi	r2,r2,11728
  19a35c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  19a360:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  19a364:	e0fffd17 	ldw	r3,-12(fp)
  19a368:	e0bff617 	ldw	r2,-40(fp)
  19a36c:	1885883a 	add	r2,r3,r2
  19a370:	10c00044 	addi	r3,r2,1
  19a374:	e0bffc17 	ldw	r2,-16(fp)
  19a378:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  19a37c:	e0bffc17 	ldw	r2,-16(fp)
  19a380:	10c00217 	ldw	r3,8(r2)
  19a384:	e0bff617 	ldw	r2,-40(fp)
  19a388:	1880042e 	bgeu	r3,r2,19a39c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  19a38c:	e0bffc17 	ldw	r2,-16(fp)
  19a390:	00c00044 	movi	r3,1
  19a394:	10c00405 	stb	r3,16(r2)
  19a398:	00000206 	br	19a3a4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  19a39c:	e0bffc17 	ldw	r2,-16(fp)
  19a3a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  19a3a4:	e0fffc17 	ldw	r3,-16(fp)
  19a3a8:	008006b4 	movhi	r2,26
  19a3ac:	10847404 	addi	r2,r2,4560
  19a3b0:	e0bff915 	stw	r2,-28(fp)
  19a3b4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  19a3b8:	e0bffa17 	ldw	r2,-24(fp)
  19a3bc:	e0fff917 	ldw	r3,-28(fp)
  19a3c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  19a3c4:	e0bff917 	ldw	r2,-28(fp)
  19a3c8:	10c00017 	ldw	r3,0(r2)
  19a3cc:	e0bffa17 	ldw	r2,-24(fp)
  19a3d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  19a3d4:	e0bff917 	ldw	r2,-28(fp)
  19a3d8:	10800017 	ldw	r2,0(r2)
  19a3dc:	e0fffa17 	ldw	r3,-24(fp)
  19a3e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  19a3e4:	e0bff917 	ldw	r2,-28(fp)
  19a3e8:	e0fffa17 	ldw	r3,-24(fp)
  19a3ec:	10c00015 	stw	r3,0(r2)
  19a3f0:	e0bff717 	ldw	r2,-36(fp)
  19a3f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  19a3f8:	e0bffb17 	ldw	r2,-20(fp)
  19a3fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  19a400:	0005883a 	mov	r2,zero
  19a404:	00000306 	br	19a414 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  19a408:	00bffa84 	movi	r2,-22
  19a40c:	00000106 	br	19a414 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  19a410:	00bfde84 	movi	r2,-134
  }
}
  19a414:	e037883a 	mov	sp,fp
  19a418:	df000017 	ldw	fp,0(sp)
  19a41c:	dec00104 	addi	sp,sp,4
  19a420:	f800283a 	ret

0019a424 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  19a424:	deffff04 	addi	sp,sp,-4
  19a428:	df000015 	stw	fp,0(sp)
  19a42c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  19a430:	e037883a 	mov	sp,fp
  19a434:	df000017 	ldw	fp,0(sp)
  19a438:	dec00104 	addi	sp,sp,4
  19a43c:	f800283a 	ret

0019a440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  19a440:	defffe04 	addi	sp,sp,-8
  19a444:	dfc00115 	stw	ra,4(sp)
  19a448:	df000015 	stw	fp,0(sp)
  19a44c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  19a450:	008006b4 	movhi	r2,26
  19a454:	10847104 	addi	r2,r2,4548
  19a458:	10800017 	ldw	r2,0(r2)
  19a45c:	10000526 	beq	r2,zero,19a474 <alt_get_errno+0x34>
  19a460:	008006b4 	movhi	r2,26
  19a464:	10847104 	addi	r2,r2,4548
  19a468:	10800017 	ldw	r2,0(r2)
  19a46c:	103ee83a 	callr	r2
  19a470:	00000206 	br	19a47c <alt_get_errno+0x3c>
  19a474:	008006b4 	movhi	r2,26
  19a478:	108b6b04 	addi	r2,r2,11692
}
  19a47c:	e037883a 	mov	sp,fp
  19a480:	dfc00117 	ldw	ra,4(sp)
  19a484:	df000017 	ldw	fp,0(sp)
  19a488:	dec00204 	addi	sp,sp,8
  19a48c:	f800283a 	ret

0019a490 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  19a490:	defffa04 	addi	sp,sp,-24
  19a494:	dfc00515 	stw	ra,20(sp)
  19a498:	df000415 	stw	fp,16(sp)
  19a49c:	df000404 	addi	fp,sp,16
  19a4a0:	e13ffe15 	stw	r4,-8(fp)
  19a4a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  19a4a8:	e0bffe17 	ldw	r2,-8(fp)
  19a4ac:	10000326 	beq	r2,zero,19a4bc <alt_dev_llist_insert+0x2c>
  19a4b0:	e0bffe17 	ldw	r2,-8(fp)
  19a4b4:	10800217 	ldw	r2,8(r2)
  19a4b8:	1000061e 	bne	r2,zero,19a4d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  19a4bc:	019a4400 	call	19a440 <alt_get_errno>
  19a4c0:	1007883a 	mov	r3,r2
  19a4c4:	00800584 	movi	r2,22
  19a4c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  19a4cc:	00bffa84 	movi	r2,-22
  19a4d0:	00001306 	br	19a520 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  19a4d4:	e0bffe17 	ldw	r2,-8(fp)
  19a4d8:	e0ffff17 	ldw	r3,-4(fp)
  19a4dc:	e0fffc15 	stw	r3,-16(fp)
  19a4e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  19a4e4:	e0bffd17 	ldw	r2,-12(fp)
  19a4e8:	e0fffc17 	ldw	r3,-16(fp)
  19a4ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  19a4f0:	e0bffc17 	ldw	r2,-16(fp)
  19a4f4:	10c00017 	ldw	r3,0(r2)
  19a4f8:	e0bffd17 	ldw	r2,-12(fp)
  19a4fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  19a500:	e0bffc17 	ldw	r2,-16(fp)
  19a504:	10800017 	ldw	r2,0(r2)
  19a508:	e0fffd17 	ldw	r3,-12(fp)
  19a50c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  19a510:	e0bffc17 	ldw	r2,-16(fp)
  19a514:	e0fffd17 	ldw	r3,-12(fp)
  19a518:	10c00015 	stw	r3,0(r2)

  return 0;  
  19a51c:	0005883a 	mov	r2,zero
}
  19a520:	e037883a 	mov	sp,fp
  19a524:	dfc00117 	ldw	ra,4(sp)
  19a528:	df000017 	ldw	fp,0(sp)
  19a52c:	dec00204 	addi	sp,sp,8
  19a530:	f800283a 	ret

0019a534 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  19a534:	defffd04 	addi	sp,sp,-12
  19a538:	dfc00215 	stw	ra,8(sp)
  19a53c:	df000115 	stw	fp,4(sp)
  19a540:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  19a544:	008006b4 	movhi	r2,26
  19a548:	10ad0304 	addi	r2,r2,-19444
  19a54c:	e0bfff15 	stw	r2,-4(fp)
  19a550:	00000606 	br	19a56c <_do_ctors+0x38>
        (*ctor) (); 
  19a554:	e0bfff17 	ldw	r2,-4(fp)
  19a558:	10800017 	ldw	r2,0(r2)
  19a55c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  19a560:	e0bfff17 	ldw	r2,-4(fp)
  19a564:	10bfff04 	addi	r2,r2,-4
  19a568:	e0bfff15 	stw	r2,-4(fp)
  19a56c:	e0ffff17 	ldw	r3,-4(fp)
  19a570:	008006b4 	movhi	r2,26
  19a574:	10ad0404 	addi	r2,r2,-19440
  19a578:	18bff62e 	bgeu	r3,r2,19a554 <__alt_data_end+0xfff9a554>
        (*ctor) (); 
}
  19a57c:	e037883a 	mov	sp,fp
  19a580:	dfc00117 	ldw	ra,4(sp)
  19a584:	df000017 	ldw	fp,0(sp)
  19a588:	dec00204 	addi	sp,sp,8
  19a58c:	f800283a 	ret

0019a590 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  19a590:	defffd04 	addi	sp,sp,-12
  19a594:	dfc00215 	stw	ra,8(sp)
  19a598:	df000115 	stw	fp,4(sp)
  19a59c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  19a5a0:	008006b4 	movhi	r2,26
  19a5a4:	10ad0304 	addi	r2,r2,-19444
  19a5a8:	e0bfff15 	stw	r2,-4(fp)
  19a5ac:	00000606 	br	19a5c8 <_do_dtors+0x38>
        (*dtor) (); 
  19a5b0:	e0bfff17 	ldw	r2,-4(fp)
  19a5b4:	10800017 	ldw	r2,0(r2)
  19a5b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  19a5bc:	e0bfff17 	ldw	r2,-4(fp)
  19a5c0:	10bfff04 	addi	r2,r2,-4
  19a5c4:	e0bfff15 	stw	r2,-4(fp)
  19a5c8:	e0ffff17 	ldw	r3,-4(fp)
  19a5cc:	008006b4 	movhi	r2,26
  19a5d0:	10ad0404 	addi	r2,r2,-19440
  19a5d4:	18bff62e 	bgeu	r3,r2,19a5b0 <__alt_data_end+0xfff9a5b0>
        (*dtor) (); 
}
  19a5d8:	e037883a 	mov	sp,fp
  19a5dc:	dfc00117 	ldw	ra,4(sp)
  19a5e0:	df000017 	ldw	fp,0(sp)
  19a5e4:	dec00204 	addi	sp,sp,8
  19a5e8:	f800283a 	ret

0019a5ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  19a5ec:	deffff04 	addi	sp,sp,-4
  19a5f0:	df000015 	stw	fp,0(sp)
  19a5f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  19a5f8:	e037883a 	mov	sp,fp
  19a5fc:	df000017 	ldw	fp,0(sp)
  19a600:	dec00104 	addi	sp,sp,4
  19a604:	f800283a 	ret

0019a608 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  19a608:	defffe04 	addi	sp,sp,-8
  19a60c:	df000115 	stw	fp,4(sp)
  19a610:	df000104 	addi	fp,sp,4
  19a614:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  19a618:	e0bfff17 	ldw	r2,-4(fp)
  19a61c:	10bffe84 	addi	r2,r2,-6
  19a620:	10c00428 	cmpgeui	r3,r2,16
  19a624:	18001a1e 	bne	r3,zero,19a690 <alt_exception_cause_generated_bad_addr+0x88>
  19a628:	100690ba 	slli	r3,r2,2
  19a62c:	008006b4 	movhi	r2,26
  19a630:	10a99004 	addi	r2,r2,-22976
  19a634:	1885883a 	add	r2,r3,r2
  19a638:	10800017 	ldw	r2,0(r2)
  19a63c:	1000683a 	jmp	r2
  19a640:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  19a644:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  19a648:	0019a690 	cmplti	zero,zero,26266
  19a64c:	0019a690 	cmplti	zero,zero,26266
  19a650:	0019a690 	cmplti	zero,zero,26266
  19a654:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  19a658:	0019a688 	cmpgei	zero,zero,26266
  19a65c:	0019a690 	cmplti	zero,zero,26266
  19a660:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  19a664:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  19a668:	0019a690 	cmplti	zero,zero,26266
  19a66c:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  19a670:	0019a688 	cmpgei	zero,zero,26266
  19a674:	0019a690 	cmplti	zero,zero,26266
  19a678:	0019a690 	cmplti	zero,zero,26266
  19a67c:	0019a680 	call	19a68 <__alt_mem_sram-0x166598>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  19a680:	00800044 	movi	r2,1
  19a684:	00000306 	br	19a694 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  19a688:	0005883a 	mov	r2,zero
  19a68c:	00000106 	br	19a694 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  19a690:	0005883a 	mov	r2,zero
  }
}
  19a694:	e037883a 	mov	sp,fp
  19a698:	df000017 	ldw	fp,0(sp)
  19a69c:	dec00104 	addi	sp,sp,4
  19a6a0:	f800283a 	ret

0019a6a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  19a6a4:	defff804 	addi	sp,sp,-32
  19a6a8:	dfc00715 	stw	ra,28(sp)
  19a6ac:	df000615 	stw	fp,24(sp)
  19a6b0:	dc000515 	stw	r16,20(sp)
  19a6b4:	df000604 	addi	fp,sp,24
  19a6b8:	e13ffb15 	stw	r4,-20(fp)
  19a6bc:	e17ffc15 	stw	r5,-16(fp)
  19a6c0:	e1bffd15 	stw	r6,-12(fp)
  19a6c4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  19a6c8:	e13ffc17 	ldw	r4,-16(fp)
  19a6cc:	e17ffd17 	ldw	r5,-12(fp)
  19a6d0:	e1bffe17 	ldw	r6,-8(fp)
  19a6d4:	019a9400 	call	19a940 <open>
  19a6d8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  19a6dc:	e0bffa17 	ldw	r2,-24(fp)
  19a6e0:	10002216 	blt	r2,zero,19a76c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  19a6e4:	040006b4 	movhi	r16,26
  19a6e8:	843fbb04 	addi	r16,r16,-276
  19a6ec:	e0bffa17 	ldw	r2,-24(fp)
  19a6f0:	1009883a 	mov	r4,r2
  19a6f4:	01400304 	movi	r5,12
  19a6f8:	0187dd80 	call	187dd8 <__mulsi3>
  19a6fc:	8085883a 	add	r2,r16,r2
  19a700:	10c00017 	ldw	r3,0(r2)
  19a704:	e0bffb17 	ldw	r2,-20(fp)
  19a708:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  19a70c:	040006b4 	movhi	r16,26
  19a710:	843fbb04 	addi	r16,r16,-276
  19a714:	e0bffa17 	ldw	r2,-24(fp)
  19a718:	1009883a 	mov	r4,r2
  19a71c:	01400304 	movi	r5,12
  19a720:	0187dd80 	call	187dd8 <__mulsi3>
  19a724:	10800104 	addi	r2,r2,4
  19a728:	8085883a 	add	r2,r16,r2
  19a72c:	10c00017 	ldw	r3,0(r2)
  19a730:	e0bffb17 	ldw	r2,-20(fp)
  19a734:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  19a738:	040006b4 	movhi	r16,26
  19a73c:	843fbb04 	addi	r16,r16,-276
  19a740:	e0bffa17 	ldw	r2,-24(fp)
  19a744:	1009883a 	mov	r4,r2
  19a748:	01400304 	movi	r5,12
  19a74c:	0187dd80 	call	187dd8 <__mulsi3>
  19a750:	10800204 	addi	r2,r2,8
  19a754:	8085883a 	add	r2,r16,r2
  19a758:	10c00017 	ldw	r3,0(r2)
  19a75c:	e0bffb17 	ldw	r2,-20(fp)
  19a760:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  19a764:	e13ffa17 	ldw	r4,-24(fp)
  19a768:	0196f300 	call	196f30 <alt_release_fd>
  }
} 
  19a76c:	e6ffff04 	addi	sp,fp,-4
  19a770:	dfc00217 	ldw	ra,8(sp)
  19a774:	df000117 	ldw	fp,4(sp)
  19a778:	dc000017 	ldw	r16,0(sp)
  19a77c:	dec00304 	addi	sp,sp,12
  19a780:	f800283a 	ret

0019a784 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  19a784:	defffb04 	addi	sp,sp,-20
  19a788:	dfc00415 	stw	ra,16(sp)
  19a78c:	df000315 	stw	fp,12(sp)
  19a790:	df000304 	addi	fp,sp,12
  19a794:	e13ffd15 	stw	r4,-12(fp)
  19a798:	e17ffe15 	stw	r5,-8(fp)
  19a79c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  19a7a0:	010006b4 	movhi	r4,26
  19a7a4:	213fbe04 	addi	r4,r4,-264
  19a7a8:	e17ffd17 	ldw	r5,-12(fp)
  19a7ac:	01800044 	movi	r6,1
  19a7b0:	01c07fc4 	movi	r7,511
  19a7b4:	019a6a40 	call	19a6a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  19a7b8:	010006b4 	movhi	r4,26
  19a7bc:	213fbb04 	addi	r4,r4,-276
  19a7c0:	e17ffe17 	ldw	r5,-8(fp)
  19a7c4:	000d883a 	mov	r6,zero
  19a7c8:	01c07fc4 	movi	r7,511
  19a7cc:	019a6a40 	call	19a6a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  19a7d0:	010006b4 	movhi	r4,26
  19a7d4:	213fc104 	addi	r4,r4,-252
  19a7d8:	e17fff17 	ldw	r5,-4(fp)
  19a7dc:	01800044 	movi	r6,1
  19a7e0:	01c07fc4 	movi	r7,511
  19a7e4:	019a6a40 	call	19a6a4 <alt_open_fd>
}  
  19a7e8:	e037883a 	mov	sp,fp
  19a7ec:	dfc00117 	ldw	ra,4(sp)
  19a7f0:	df000017 	ldw	fp,0(sp)
  19a7f4:	dec00204 	addi	sp,sp,8
  19a7f8:	f800283a 	ret

0019a7fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  19a7fc:	defffe04 	addi	sp,sp,-8
  19a800:	dfc00115 	stw	ra,4(sp)
  19a804:	df000015 	stw	fp,0(sp)
  19a808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  19a80c:	008006b4 	movhi	r2,26
  19a810:	10847104 	addi	r2,r2,4548
  19a814:	10800017 	ldw	r2,0(r2)
  19a818:	10000526 	beq	r2,zero,19a830 <alt_get_errno+0x34>
  19a81c:	008006b4 	movhi	r2,26
  19a820:	10847104 	addi	r2,r2,4548
  19a824:	10800017 	ldw	r2,0(r2)
  19a828:	103ee83a 	callr	r2
  19a82c:	00000206 	br	19a838 <alt_get_errno+0x3c>
  19a830:	008006b4 	movhi	r2,26
  19a834:	108b6b04 	addi	r2,r2,11692
}
  19a838:	e037883a 	mov	sp,fp
  19a83c:	dfc00117 	ldw	ra,4(sp)
  19a840:	df000017 	ldw	fp,0(sp)
  19a844:	dec00204 	addi	sp,sp,8
  19a848:	f800283a 	ret

0019a84c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  19a84c:	defffb04 	addi	sp,sp,-20
  19a850:	dfc00415 	stw	ra,16(sp)
  19a854:	df000315 	stw	fp,12(sp)
  19a858:	dc000215 	stw	r16,8(sp)
  19a85c:	df000304 	addi	fp,sp,12
  19a860:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  19a864:	e0bffe17 	ldw	r2,-8(fp)
  19a868:	10800217 	ldw	r2,8(r2)
  19a86c:	10d00034 	orhi	r3,r2,16384
  19a870:	e0bffe17 	ldw	r2,-8(fp)
  19a874:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  19a878:	e03ffd15 	stw	zero,-12(fp)
  19a87c:	00002306 	br	19a90c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  19a880:	040006b4 	movhi	r16,26
  19a884:	843fbb04 	addi	r16,r16,-276
  19a888:	e0bffd17 	ldw	r2,-12(fp)
  19a88c:	1009883a 	mov	r4,r2
  19a890:	01400304 	movi	r5,12
  19a894:	0187dd80 	call	187dd8 <__mulsi3>
  19a898:	8085883a 	add	r2,r16,r2
  19a89c:	10c00017 	ldw	r3,0(r2)
  19a8a0:	e0bffe17 	ldw	r2,-8(fp)
  19a8a4:	10800017 	ldw	r2,0(r2)
  19a8a8:	1880151e 	bne	r3,r2,19a900 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  19a8ac:	040006b4 	movhi	r16,26
  19a8b0:	843fbb04 	addi	r16,r16,-276
  19a8b4:	e0bffd17 	ldw	r2,-12(fp)
  19a8b8:	1009883a 	mov	r4,r2
  19a8bc:	01400304 	movi	r5,12
  19a8c0:	0187dd80 	call	187dd8 <__mulsi3>
  19a8c4:	10800204 	addi	r2,r2,8
  19a8c8:	8085883a 	add	r2,r16,r2
  19a8cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  19a8d0:	10000b0e 	bge	r2,zero,19a900 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  19a8d4:	e13ffd17 	ldw	r4,-12(fp)
  19a8d8:	01400304 	movi	r5,12
  19a8dc:	0187dd80 	call	187dd8 <__mulsi3>
  19a8e0:	1007883a 	mov	r3,r2
  19a8e4:	008006b4 	movhi	r2,26
  19a8e8:	10bfbb04 	addi	r2,r2,-276
  19a8ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  19a8f0:	e0bffe17 	ldw	r2,-8(fp)
  19a8f4:	18800226 	beq	r3,r2,19a900 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  19a8f8:	00bffcc4 	movi	r2,-13
  19a8fc:	00000a06 	br	19a928 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  19a900:	e0bffd17 	ldw	r2,-12(fp)
  19a904:	10800044 	addi	r2,r2,1
  19a908:	e0bffd15 	stw	r2,-12(fp)
  19a90c:	008006b4 	movhi	r2,26
  19a910:	10847004 	addi	r2,r2,4544
  19a914:	10800017 	ldw	r2,0(r2)
  19a918:	1007883a 	mov	r3,r2
  19a91c:	e0bffd17 	ldw	r2,-12(fp)
  19a920:	18bfd72e 	bgeu	r3,r2,19a880 <__alt_data_end+0xfff9a880>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  19a924:	0005883a 	mov	r2,zero
}
  19a928:	e6ffff04 	addi	sp,fp,-4
  19a92c:	dfc00217 	ldw	ra,8(sp)
  19a930:	df000117 	ldw	fp,4(sp)
  19a934:	dc000017 	ldw	r16,0(sp)
  19a938:	dec00304 	addi	sp,sp,12
  19a93c:	f800283a 	ret

0019a940 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  19a940:	defff604 	addi	sp,sp,-40
  19a944:	dfc00915 	stw	ra,36(sp)
  19a948:	df000815 	stw	fp,32(sp)
  19a94c:	df000804 	addi	fp,sp,32
  19a950:	e13ffd15 	stw	r4,-12(fp)
  19a954:	e17ffe15 	stw	r5,-8(fp)
  19a958:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  19a95c:	00bfffc4 	movi	r2,-1
  19a960:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  19a964:	00bffb44 	movi	r2,-19
  19a968:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  19a96c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  19a970:	e13ffd17 	ldw	r4,-12(fp)
  19a974:	014006b4 	movhi	r5,26
  19a978:	29446e04 	addi	r5,r5,4536
  19a97c:	019adb40 	call	19adb4 <alt_find_dev>
  19a980:	e0bff815 	stw	r2,-32(fp)
  19a984:	e0bff817 	ldw	r2,-32(fp)
  19a988:	1000051e 	bne	r2,zero,19a9a0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  19a98c:	e13ffd17 	ldw	r4,-12(fp)
  19a990:	019ae440 	call	19ae44 <alt_find_file>
  19a994:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  19a998:	00800044 	movi	r2,1
  19a99c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  19a9a0:	e0bff817 	ldw	r2,-32(fp)
  19a9a4:	10002b26 	beq	r2,zero,19aa54 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  19a9a8:	e13ff817 	ldw	r4,-32(fp)
  19a9ac:	019af580 	call	19af58 <alt_get_fd>
  19a9b0:	e0bff915 	stw	r2,-28(fp)
  19a9b4:	e0bff917 	ldw	r2,-28(fp)
  19a9b8:	1000030e 	bge	r2,zero,19a9c8 <open+0x88>
    {
      status = index;
  19a9bc:	e0bff917 	ldw	r2,-28(fp)
  19a9c0:	e0bffa15 	stw	r2,-24(fp)
  19a9c4:	00002506 	br	19aa5c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  19a9c8:	e13ff917 	ldw	r4,-28(fp)
  19a9cc:	01400304 	movi	r5,12
  19a9d0:	0187dd80 	call	187dd8 <__mulsi3>
  19a9d4:	1007883a 	mov	r3,r2
  19a9d8:	008006b4 	movhi	r2,26
  19a9dc:	10bfbb04 	addi	r2,r2,-276
  19a9e0:	1885883a 	add	r2,r3,r2
  19a9e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  19a9e8:	e0fffe17 	ldw	r3,-8(fp)
  19a9ec:	00900034 	movhi	r2,16384
  19a9f0:	10bfffc4 	addi	r2,r2,-1
  19a9f4:	1886703a 	and	r3,r3,r2
  19a9f8:	e0bffc17 	ldw	r2,-16(fp)
  19a9fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  19aa00:	e0bffb17 	ldw	r2,-20(fp)
  19aa04:	1000051e 	bne	r2,zero,19aa1c <open+0xdc>
  19aa08:	e13ffc17 	ldw	r4,-16(fp)
  19aa0c:	019a84c0 	call	19a84c <alt_file_locked>
  19aa10:	e0bffa15 	stw	r2,-24(fp)
  19aa14:	e0bffa17 	ldw	r2,-24(fp)
  19aa18:	10001016 	blt	r2,zero,19aa5c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  19aa1c:	e0bff817 	ldw	r2,-32(fp)
  19aa20:	10800317 	ldw	r2,12(r2)
  19aa24:	10000826 	beq	r2,zero,19aa48 <open+0x108>
  19aa28:	e0bff817 	ldw	r2,-32(fp)
  19aa2c:	10800317 	ldw	r2,12(r2)
  19aa30:	e13ffc17 	ldw	r4,-16(fp)
  19aa34:	e17ffd17 	ldw	r5,-12(fp)
  19aa38:	e1bffe17 	ldw	r6,-8(fp)
  19aa3c:	e1ffff17 	ldw	r7,-4(fp)
  19aa40:	103ee83a 	callr	r2
  19aa44:	00000106 	br	19aa4c <open+0x10c>
  19aa48:	0005883a 	mov	r2,zero
  19aa4c:	e0bffa15 	stw	r2,-24(fp)
  19aa50:	00000206 	br	19aa5c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  19aa54:	00bffb44 	movi	r2,-19
  19aa58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  19aa5c:	e0bffa17 	ldw	r2,-24(fp)
  19aa60:	1000090e 	bge	r2,zero,19aa88 <open+0x148>
  {
    alt_release_fd (index);  
  19aa64:	e13ff917 	ldw	r4,-28(fp)
  19aa68:	0196f300 	call	196f30 <alt_release_fd>
    ALT_ERRNO = -status;
  19aa6c:	019a7fc0 	call	19a7fc <alt_get_errno>
  19aa70:	1007883a 	mov	r3,r2
  19aa74:	e0bffa17 	ldw	r2,-24(fp)
  19aa78:	0085c83a 	sub	r2,zero,r2
  19aa7c:	18800015 	stw	r2,0(r3)
    return -1;
  19aa80:	00bfffc4 	movi	r2,-1
  19aa84:	00000106 	br	19aa8c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  19aa88:	e0bff917 	ldw	r2,-28(fp)
}
  19aa8c:	e037883a 	mov	sp,fp
  19aa90:	dfc00117 	ldw	ra,4(sp)
  19aa94:	df000017 	ldw	fp,0(sp)
  19aa98:	dec00204 	addi	sp,sp,8
  19aa9c:	f800283a 	ret

0019aaa0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  19aaa0:	defffa04 	addi	sp,sp,-24
  19aaa4:	df000515 	stw	fp,20(sp)
  19aaa8:	df000504 	addi	fp,sp,20
  19aaac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19aab0:	0005303a 	rdctl	r2,status
  19aab4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  19aab8:	e0fffc17 	ldw	r3,-16(fp)
  19aabc:	00bfff84 	movi	r2,-2
  19aac0:	1884703a 	and	r2,r3,r2
  19aac4:	1001703a 	wrctl	status,r2
  
  return context;
  19aac8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  19aacc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  19aad0:	e0bfff17 	ldw	r2,-4(fp)
  19aad4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  19aad8:	e0bffd17 	ldw	r2,-12(fp)
  19aadc:	10800017 	ldw	r2,0(r2)
  19aae0:	e0fffd17 	ldw	r3,-12(fp)
  19aae4:	18c00117 	ldw	r3,4(r3)
  19aae8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  19aaec:	e0bffd17 	ldw	r2,-12(fp)
  19aaf0:	10800117 	ldw	r2,4(r2)
  19aaf4:	e0fffd17 	ldw	r3,-12(fp)
  19aaf8:	18c00017 	ldw	r3,0(r3)
  19aafc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  19ab00:	e0bffd17 	ldw	r2,-12(fp)
  19ab04:	e0fffd17 	ldw	r3,-12(fp)
  19ab08:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  19ab0c:	e0bffd17 	ldw	r2,-12(fp)
  19ab10:	e0fffd17 	ldw	r3,-12(fp)
  19ab14:	10c00015 	stw	r3,0(r2)
  19ab18:	e0bffb17 	ldw	r2,-20(fp)
  19ab1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  19ab20:	e0bffe17 	ldw	r2,-8(fp)
  19ab24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  19ab28:	e037883a 	mov	sp,fp
  19ab2c:	df000017 	ldw	fp,0(sp)
  19ab30:	dec00104 	addi	sp,sp,4
  19ab34:	f800283a 	ret

0019ab38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  19ab38:	defffb04 	addi	sp,sp,-20
  19ab3c:	dfc00415 	stw	ra,16(sp)
  19ab40:	df000315 	stw	fp,12(sp)
  19ab44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  19ab48:	d0a01017 	ldw	r2,-32704(gp)
  19ab4c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  19ab50:	d0a71017 	ldw	r2,-25536(gp)
  19ab54:	10800044 	addi	r2,r2,1
  19ab58:	d0a71015 	stw	r2,-25536(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  19ab5c:	00002e06 	br	19ac18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  19ab60:	e0bffd17 	ldw	r2,-12(fp)
  19ab64:	10800017 	ldw	r2,0(r2)
  19ab68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  19ab6c:	e0bffd17 	ldw	r2,-12(fp)
  19ab70:	10800403 	ldbu	r2,16(r2)
  19ab74:	10803fcc 	andi	r2,r2,255
  19ab78:	10000426 	beq	r2,zero,19ab8c <alt_tick+0x54>
  19ab7c:	d0a71017 	ldw	r2,-25536(gp)
  19ab80:	1000021e 	bne	r2,zero,19ab8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  19ab84:	e0bffd17 	ldw	r2,-12(fp)
  19ab88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  19ab8c:	e0bffd17 	ldw	r2,-12(fp)
  19ab90:	10800217 	ldw	r2,8(r2)
  19ab94:	d0e71017 	ldw	r3,-25536(gp)
  19ab98:	18801d36 	bltu	r3,r2,19ac10 <alt_tick+0xd8>
  19ab9c:	e0bffd17 	ldw	r2,-12(fp)
  19aba0:	10800403 	ldbu	r2,16(r2)
  19aba4:	10803fcc 	andi	r2,r2,255
  19aba8:	1000191e 	bne	r2,zero,19ac10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  19abac:	e0bffd17 	ldw	r2,-12(fp)
  19abb0:	10800317 	ldw	r2,12(r2)
  19abb4:	e0fffd17 	ldw	r3,-12(fp)
  19abb8:	18c00517 	ldw	r3,20(r3)
  19abbc:	1809883a 	mov	r4,r3
  19abc0:	103ee83a 	callr	r2
  19abc4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  19abc8:	e0bfff17 	ldw	r2,-4(fp)
  19abcc:	1000031e 	bne	r2,zero,19abdc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  19abd0:	e13ffd17 	ldw	r4,-12(fp)
  19abd4:	019aaa00 	call	19aaa0 <alt_alarm_stop>
  19abd8:	00000d06 	br	19ac10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  19abdc:	e0bffd17 	ldw	r2,-12(fp)
  19abe0:	10c00217 	ldw	r3,8(r2)
  19abe4:	e0bfff17 	ldw	r2,-4(fp)
  19abe8:	1887883a 	add	r3,r3,r2
  19abec:	e0bffd17 	ldw	r2,-12(fp)
  19abf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  19abf4:	e0bffd17 	ldw	r2,-12(fp)
  19abf8:	10c00217 	ldw	r3,8(r2)
  19abfc:	d0a71017 	ldw	r2,-25536(gp)
  19ac00:	1880032e 	bgeu	r3,r2,19ac10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  19ac04:	e0bffd17 	ldw	r2,-12(fp)
  19ac08:	00c00044 	movi	r3,1
  19ac0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  19ac10:	e0bffe17 	ldw	r2,-8(fp)
  19ac14:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  19ac18:	e0fffd17 	ldw	r3,-12(fp)
  19ac1c:	d0a01004 	addi	r2,gp,-32704
  19ac20:	18bfcf1e 	bne	r3,r2,19ab60 <__alt_data_end+0xfff9ab60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  19ac24:	019ad8c0 	call	19ad8c <port_time_tick>
}
  19ac28:	e037883a 	mov	sp,fp
  19ac2c:	dfc00117 	ldw	ra,4(sp)
  19ac30:	df000017 	ldw	fp,0(sp)
  19ac34:	dec00204 	addi	sp,sp,8
  19ac38:	f800283a 	ret

0019ac3c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  19ac3c:	deffff04 	addi	sp,sp,-4
  19ac40:	df000015 	stw	fp,0(sp)
  19ac44:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  19ac48:	000170fa 	wrctl	ienable,zero
}
  19ac4c:	e037883a 	mov	sp,fp
  19ac50:	df000017 	ldw	fp,0(sp)
  19ac54:	dec00104 	addi	sp,sp,4
  19ac58:	f800283a 	ret

0019ac5c <chRegFirstThread>:
 *
 * @return              A reference to the most ancient thread.
 *
 * @api
 */
Thread *chRegFirstThread(void) {
  19ac5c:	defffc04 	addi	sp,sp,-16
  19ac60:	df000315 	stw	fp,12(sp)
  19ac64:	df000304 	addi	fp,sp,12
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19ac68:	0005303a 	rdctl	r2,status
  19ac6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  19ac70:	e0fffe17 	ldw	r3,-8(fp)
  19ac74:	00bfff84 	movi	r2,-2
  19ac78:	1884703a 	and	r2,r3,r2
  19ac7c:	1001703a 	wrctl	status,r2
  Thread *tp;

  chSysLock();
  tp = rlist.r_newer;
  19ac80:	008006b4 	movhi	r2,26
  19ac84:	108c3b04 	addi	r2,r2,12524
  19ac88:	10800417 	ldw	r2,16(r2)
  19ac8c:	e0bffd15 	stw	r2,-12(fp)
#if CH_USE_DYNAMIC
  tp->p_refs++;
  19ac90:	e0bffd17 	ldw	r2,-12(fp)
  19ac94:	10800783 	ldbu	r2,30(r2)
  19ac98:	10800044 	addi	r2,r2,1
  19ac9c:	1007883a 	mov	r3,r2
  19aca0:	e0bffd17 	ldw	r2,-12(fp)
  19aca4:	10c00785 	stb	r3,30(r2)
  19aca8:	00800044 	movi	r2,1
  19acac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  19acb0:	e0bfff17 	ldw	r2,-4(fp)
  19acb4:	1001703a 	wrctl	status,r2
#endif
  chSysUnlock();
  return tp;
  19acb8:	e0bffd17 	ldw	r2,-12(fp)
}
  19acbc:	e037883a 	mov	sp,fp
  19acc0:	df000017 	ldw	fp,0(sp)
  19acc4:	dec00104 	addi	sp,sp,4
  19acc8:	f800283a 	ret

0019accc <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
Thread *chRegNextThread(Thread *tp) {
  19accc:	defffa04 	addi	sp,sp,-24
  19acd0:	dfc00515 	stw	ra,20(sp)
  19acd4:	df000415 	stw	fp,16(sp)
  19acd8:	df000404 	addi	fp,sp,16
  19acdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19ace0:	0005303a 	rdctl	r2,status
  19ace4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  19ace8:	e0fffd17 	ldw	r3,-12(fp)
  19acec:	00bfff84 	movi	r2,-2
  19acf0:	1884703a 	and	r2,r3,r2
  19acf4:	1001703a 	wrctl	status,r2
  Thread *ntp;

  chSysLock();
  ntp = tp->p_newer;
  19acf8:	e0bfff17 	ldw	r2,-4(fp)
  19acfc:	10800417 	ldw	r2,16(r2)
  19ad00:	e0bffc15 	stw	r2,-16(fp)
  if (ntp == (Thread *)&rlist)
  19ad04:	e0fffc17 	ldw	r3,-16(fp)
  19ad08:	008006b4 	movhi	r2,26
  19ad0c:	108c3b04 	addi	r2,r2,12524
  19ad10:	1880021e 	bne	r3,r2,19ad1c <chRegNextThread+0x50>
    ntp = NULL;
  19ad14:	e03ffc15 	stw	zero,-16(fp)
  19ad18:	00000606 	br	19ad34 <chRegNextThread+0x68>
#if CH_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "chRegNextThread(), #1",
                "too many references");
    ntp->p_refs++;
  19ad1c:	e0bffc17 	ldw	r2,-16(fp)
  19ad20:	10800783 	ldbu	r2,30(r2)
  19ad24:	10800044 	addi	r2,r2,1
  19ad28:	1007883a 	mov	r3,r2
  19ad2c:	e0bffc17 	ldw	r2,-16(fp)
  19ad30:	10c00785 	stb	r3,30(r2)
  19ad34:	00800044 	movi	r2,1
  19ad38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  19ad3c:	e0bffe17 	ldw	r2,-8(fp)
  19ad40:	1001703a 	wrctl	status,r2
  }
#endif
  chSysUnlock();
#if CH_USE_DYNAMIC
  chThdRelease(tp);
  19ad44:	e13fff17 	ldw	r4,-4(fp)
  19ad48:	01987340 	call	198734 <chThdRelease>
#endif
  return ntp;
  19ad4c:	e0bffc17 	ldw	r2,-16(fp)
}
  19ad50:	e037883a 	mov	sp,fp
  19ad54:	dfc00117 	ldw	ra,4(sp)
  19ad58:	df000017 	ldw	fp,0(sp)
  19ad5c:	dec00204 	addi	sp,sp,8
  19ad60:	f800283a 	ret

0019ad64 <port_halt>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
void port_halt (void) 
{
  19ad64:	defffe04 	addi	sp,sp,-8
  19ad68:	df000115 	stw	fp,4(sp)
  19ad6c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  19ad70:	0005303a 	rdctl	r2,status
  19ad74:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  19ad78:	e0ffff17 	ldw	r3,-4(fp)
  19ad7c:	00bfff84 	movi	r2,-2
  19ad80:	1884703a 	and	r2,r3,r2
  19ad84:	1001703a 	wrctl	status,r2
   port_disable();
   while (TRUE) 
   {
   }  
  19ad88:	003fff06 	br	19ad88 <__alt_data_end+0xfff9ad88>

0019ad8c <port_time_tick>:
/*
 * ChibiOS time tick, called by the Nios
 * hal.sys_clk_timer.
 */
CH_IRQ_HANDLER (port_time_tick)
{
  19ad8c:	defffe04 	addi	sp,sp,-8
  19ad90:	dfc00115 	stw	ra,4(sp)
  19ad94:	df000015 	stw	fp,0(sp)
  19ad98:	d839883a 	mov	fp,sp
   CH_IRQ_PROLOGUE();

   chSysLockFromIsr();
   chSysTimerHandlerI();
  19ad9c:	019a1bc0 	call	19a1bc <chSysTimerHandlerI>
   chSysUnlockFromIsr();

   CH_IRQ_EPILOGUE();
} /* port_time_tick */
  19ada0:	e037883a 	mov	sp,fp
  19ada4:	dfc00117 	ldw	ra,4(sp)
  19ada8:	df000017 	ldw	fp,0(sp)
  19adac:	dec00204 	addi	sp,sp,8
  19adb0:	f800283a 	ret

0019adb4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  19adb4:	defffa04 	addi	sp,sp,-24
  19adb8:	dfc00515 	stw	ra,20(sp)
  19adbc:	df000415 	stw	fp,16(sp)
  19adc0:	df000404 	addi	fp,sp,16
  19adc4:	e13ffe15 	stw	r4,-8(fp)
  19adc8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  19adcc:	e0bfff17 	ldw	r2,-4(fp)
  19add0:	10800017 	ldw	r2,0(r2)
  19add4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  19add8:	e13ffe17 	ldw	r4,-8(fp)
  19addc:	01892200 	call	189220 <strlen>
  19ade0:	10800044 	addi	r2,r2,1
  19ade4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  19ade8:	00000d06 	br	19ae20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  19adec:	e0bffc17 	ldw	r2,-16(fp)
  19adf0:	10c00217 	ldw	r3,8(r2)
  19adf4:	e0bffd17 	ldw	r2,-12(fp)
  19adf8:	1809883a 	mov	r4,r3
  19adfc:	e17ffe17 	ldw	r5,-8(fp)
  19ae00:	100d883a 	mov	r6,r2
  19ae04:	0188e040 	call	188e04 <memcmp>
  19ae08:	1000021e 	bne	r2,zero,19ae14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  19ae0c:	e0bffc17 	ldw	r2,-16(fp)
  19ae10:	00000706 	br	19ae30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  19ae14:	e0bffc17 	ldw	r2,-16(fp)
  19ae18:	10800017 	ldw	r2,0(r2)
  19ae1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  19ae20:	e0fffc17 	ldw	r3,-16(fp)
  19ae24:	e0bfff17 	ldw	r2,-4(fp)
  19ae28:	18bff01e 	bne	r3,r2,19adec <__alt_data_end+0xfff9adec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  19ae2c:	0005883a 	mov	r2,zero
}
  19ae30:	e037883a 	mov	sp,fp
  19ae34:	dfc00117 	ldw	ra,4(sp)
  19ae38:	df000017 	ldw	fp,0(sp)
  19ae3c:	dec00204 	addi	sp,sp,8
  19ae40:	f800283a 	ret

0019ae44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  19ae44:	defffb04 	addi	sp,sp,-20
  19ae48:	dfc00415 	stw	ra,16(sp)
  19ae4c:	df000315 	stw	fp,12(sp)
  19ae50:	df000304 	addi	fp,sp,12
  19ae54:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  19ae58:	008006b4 	movhi	r2,26
  19ae5c:	10846c04 	addi	r2,r2,4528
  19ae60:	10800017 	ldw	r2,0(r2)
  19ae64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  19ae68:	00003106 	br	19af30 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  19ae6c:	e0bffd17 	ldw	r2,-12(fp)
  19ae70:	10800217 	ldw	r2,8(r2)
  19ae74:	1009883a 	mov	r4,r2
  19ae78:	01892200 	call	189220 <strlen>
  19ae7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  19ae80:	e0bffd17 	ldw	r2,-12(fp)
  19ae84:	10c00217 	ldw	r3,8(r2)
  19ae88:	e0bffe17 	ldw	r2,-8(fp)
  19ae8c:	10bfffc4 	addi	r2,r2,-1
  19ae90:	1885883a 	add	r2,r3,r2
  19ae94:	10800003 	ldbu	r2,0(r2)
  19ae98:	10803fcc 	andi	r2,r2,255
  19ae9c:	1080201c 	xori	r2,r2,128
  19aea0:	10bfe004 	addi	r2,r2,-128
  19aea4:	10800bd8 	cmpnei	r2,r2,47
  19aea8:	1000031e 	bne	r2,zero,19aeb8 <alt_find_file+0x74>
    {
      len -= 1;
  19aeac:	e0bffe17 	ldw	r2,-8(fp)
  19aeb0:	10bfffc4 	addi	r2,r2,-1
  19aeb4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  19aeb8:	e0bffe17 	ldw	r2,-8(fp)
  19aebc:	e0ffff17 	ldw	r3,-4(fp)
  19aec0:	1885883a 	add	r2,r3,r2
  19aec4:	10800003 	ldbu	r2,0(r2)
  19aec8:	10803fcc 	andi	r2,r2,255
  19aecc:	1080201c 	xori	r2,r2,128
  19aed0:	10bfe004 	addi	r2,r2,-128
  19aed4:	10800be0 	cmpeqi	r2,r2,47
  19aed8:	1000081e 	bne	r2,zero,19aefc <alt_find_file+0xb8>
  19aedc:	e0bffe17 	ldw	r2,-8(fp)
  19aee0:	e0ffff17 	ldw	r3,-4(fp)
  19aee4:	1885883a 	add	r2,r3,r2
  19aee8:	10800003 	ldbu	r2,0(r2)
  19aeec:	10803fcc 	andi	r2,r2,255
  19aef0:	1080201c 	xori	r2,r2,128
  19aef4:	10bfe004 	addi	r2,r2,-128
  19aef8:	10000a1e 	bne	r2,zero,19af24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  19aefc:	e0bffd17 	ldw	r2,-12(fp)
  19af00:	10c00217 	ldw	r3,8(r2)
  19af04:	e0bffe17 	ldw	r2,-8(fp)
  19af08:	1809883a 	mov	r4,r3
  19af0c:	e17fff17 	ldw	r5,-4(fp)
  19af10:	100d883a 	mov	r6,r2
  19af14:	0188e040 	call	188e04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  19af18:	1000021e 	bne	r2,zero,19af24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  19af1c:	e0bffd17 	ldw	r2,-12(fp)
  19af20:	00000806 	br	19af44 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  19af24:	e0bffd17 	ldw	r2,-12(fp)
  19af28:	10800017 	ldw	r2,0(r2)
  19af2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  19af30:	e0fffd17 	ldw	r3,-12(fp)
  19af34:	008006b4 	movhi	r2,26
  19af38:	10846c04 	addi	r2,r2,4528
  19af3c:	18bfcb1e 	bne	r3,r2,19ae6c <__alt_data_end+0xfff9ae6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  19af40:	0005883a 	mov	r2,zero
}
  19af44:	e037883a 	mov	sp,fp
  19af48:	dfc00117 	ldw	ra,4(sp)
  19af4c:	df000017 	ldw	fp,0(sp)
  19af50:	dec00204 	addi	sp,sp,8
  19af54:	f800283a 	ret

0019af58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  19af58:	defffa04 	addi	sp,sp,-24
  19af5c:	dfc00515 	stw	ra,20(sp)
  19af60:	df000415 	stw	fp,16(sp)
  19af64:	dc000315 	stw	r16,12(sp)
  19af68:	df000404 	addi	fp,sp,16
  19af6c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  19af70:	00bffa04 	movi	r2,-24
  19af74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  19af78:	e03ffc15 	stw	zero,-16(fp)
  19af7c:	00002106 	br	19b004 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  19af80:	040006b4 	movhi	r16,26
  19af84:	843fbb04 	addi	r16,r16,-276
  19af88:	e0bffc17 	ldw	r2,-16(fp)
  19af8c:	1009883a 	mov	r4,r2
  19af90:	01400304 	movi	r5,12
  19af94:	0187dd80 	call	187dd8 <__mulsi3>
  19af98:	8085883a 	add	r2,r16,r2
  19af9c:	10800017 	ldw	r2,0(r2)
  19afa0:	1000151e 	bne	r2,zero,19aff8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  19afa4:	040006b4 	movhi	r16,26
  19afa8:	843fbb04 	addi	r16,r16,-276
  19afac:	e0bffc17 	ldw	r2,-16(fp)
  19afb0:	1009883a 	mov	r4,r2
  19afb4:	01400304 	movi	r5,12
  19afb8:	0187dd80 	call	187dd8 <__mulsi3>
  19afbc:	8085883a 	add	r2,r16,r2
  19afc0:	e0fffe17 	ldw	r3,-8(fp)
  19afc4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  19afc8:	008006b4 	movhi	r2,26
  19afcc:	10847004 	addi	r2,r2,4544
  19afd0:	10c00017 	ldw	r3,0(r2)
  19afd4:	e0bffc17 	ldw	r2,-16(fp)
  19afd8:	1880040e 	bge	r3,r2,19afec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  19afdc:	008006b4 	movhi	r2,26
  19afe0:	10847004 	addi	r2,r2,4544
  19afe4:	e0fffc17 	ldw	r3,-16(fp)
  19afe8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  19afec:	e0bffc17 	ldw	r2,-16(fp)
  19aff0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  19aff4:	00000606 	br	19b010 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  19aff8:	e0bffc17 	ldw	r2,-16(fp)
  19affc:	10800044 	addi	r2,r2,1
  19b000:	e0bffc15 	stw	r2,-16(fp)
  19b004:	e0bffc17 	ldw	r2,-16(fp)
  19b008:	10800810 	cmplti	r2,r2,32
  19b00c:	103fdc1e 	bne	r2,zero,19af80 <__alt_data_end+0xfff9af80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  19b010:	e0bffd17 	ldw	r2,-12(fp)
}
  19b014:	e6ffff04 	addi	sp,fp,-4
  19b018:	dfc00217 	ldw	ra,8(sp)
  19b01c:	df000117 	ldw	fp,4(sp)
  19b020:	dc000017 	ldw	r16,0(sp)
  19b024:	dec00304 	addi	sp,sp,12
  19b028:	f800283a 	ret

0019b02c <atexit>:
  19b02c:	200b883a 	mov	r5,r4
  19b030:	000d883a 	mov	r6,zero
  19b034:	0009883a 	mov	r4,zero
  19b038:	000f883a 	mov	r7,zero
  19b03c:	019b1301 	jmpi	19b130 <__register_exitproc>

0019b040 <exit>:
  19b040:	defffe04 	addi	sp,sp,-8
  19b044:	000b883a 	mov	r5,zero
  19b048:	dc000015 	stw	r16,0(sp)
  19b04c:	dfc00115 	stw	ra,4(sp)
  19b050:	2021883a 	mov	r16,r4
  19b054:	019b2440 	call	19b244 <__call_exitprocs>
  19b058:	008006b4 	movhi	r2,26
  19b05c:	10846604 	addi	r2,r2,4504
  19b060:	11000017 	ldw	r4,0(r2)
  19b064:	20800f17 	ldw	r2,60(r4)
  19b068:	10000126 	beq	r2,zero,19b070 <exit+0x30>
  19b06c:	103ee83a 	callr	r2
  19b070:	8009883a 	mov	r4,r16
  19b074:	019b3d80 	call	19b3d8 <_exit>

0019b078 <_fputs_r>:
  19b078:	defff804 	addi	sp,sp,-32
  19b07c:	dc400615 	stw	r17,24(sp)
  19b080:	2023883a 	mov	r17,r4
  19b084:	2809883a 	mov	r4,r5
  19b088:	dc000515 	stw	r16,20(sp)
  19b08c:	dfc00715 	stw	ra,28(sp)
  19b090:	3021883a 	mov	r16,r6
  19b094:	d9400315 	stw	r5,12(sp)
  19b098:	01892200 	call	189220 <strlen>
  19b09c:	d8800215 	stw	r2,8(sp)
  19b0a0:	d8800415 	stw	r2,16(sp)
  19b0a4:	d8800304 	addi	r2,sp,12
  19b0a8:	d8800015 	stw	r2,0(sp)
  19b0ac:	00800044 	movi	r2,1
  19b0b0:	d8800115 	stw	r2,4(sp)
  19b0b4:	88000226 	beq	r17,zero,19b0c0 <_fputs_r+0x48>
  19b0b8:	88800e17 	ldw	r2,56(r17)
  19b0bc:	10001226 	beq	r2,zero,19b108 <_fputs_r+0x90>
  19b0c0:	8080030b 	ldhu	r2,12(r16)
  19b0c4:	10c8000c 	andi	r3,r2,8192
  19b0c8:	1800061e 	bne	r3,zero,19b0e4 <_fputs_r+0x6c>
  19b0cc:	81001917 	ldw	r4,100(r16)
  19b0d0:	00f7ffc4 	movi	r3,-8193
  19b0d4:	10880014 	ori	r2,r2,8192
  19b0d8:	20c6703a 	and	r3,r4,r3
  19b0dc:	8080030d 	sth	r2,12(r16)
  19b0e0:	80c01915 	stw	r3,100(r16)
  19b0e4:	8809883a 	mov	r4,r17
  19b0e8:	800b883a 	mov	r5,r16
  19b0ec:	d80d883a 	mov	r6,sp
  19b0f0:	018d8ec0 	call	18d8ec <__sfvwrite_r>
  19b0f4:	dfc00717 	ldw	ra,28(sp)
  19b0f8:	dc400617 	ldw	r17,24(sp)
  19b0fc:	dc000517 	ldw	r16,20(sp)
  19b100:	dec00804 	addi	sp,sp,32
  19b104:	f800283a 	ret
  19b108:	8809883a 	mov	r4,r17
  19b10c:	018d4880 	call	18d488 <__sinit>
  19b110:	003feb06 	br	19b0c0 <__alt_data_end+0xfff9b0c0>

0019b114 <fputs>:
  19b114:	00c006b4 	movhi	r3,26
  19b118:	18c46704 	addi	r3,r3,4508
  19b11c:	2005883a 	mov	r2,r4
  19b120:	19000017 	ldw	r4,0(r3)
  19b124:	280d883a 	mov	r6,r5
  19b128:	100b883a 	mov	r5,r2
  19b12c:	019b0781 	jmpi	19b078 <_fputs_r>

0019b130 <__register_exitproc>:
  19b130:	008006b4 	movhi	r2,26
  19b134:	defffa04 	addi	sp,sp,-24
  19b138:	10846604 	addi	r2,r2,4504
  19b13c:	dc000315 	stw	r16,12(sp)
  19b140:	14000017 	ldw	r16,0(r2)
  19b144:	dc400415 	stw	r17,16(sp)
  19b148:	dfc00515 	stw	ra,20(sp)
  19b14c:	80805217 	ldw	r2,328(r16)
  19b150:	2023883a 	mov	r17,r4
  19b154:	10003626 	beq	r2,zero,19b230 <__register_exitproc+0x100>
  19b158:	10c00117 	ldw	r3,4(r2)
  19b15c:	010007c4 	movi	r4,31
  19b160:	20c00e16 	blt	r4,r3,19b19c <__register_exitproc+0x6c>
  19b164:	1a400044 	addi	r9,r3,1
  19b168:	8800211e 	bne	r17,zero,19b1f0 <__register_exitproc+0xc0>
  19b16c:	18c00084 	addi	r3,r3,2
  19b170:	18c7883a 	add	r3,r3,r3
  19b174:	18c7883a 	add	r3,r3,r3
  19b178:	12400115 	stw	r9,4(r2)
  19b17c:	10c7883a 	add	r3,r2,r3
  19b180:	19400015 	stw	r5,0(r3)
  19b184:	0005883a 	mov	r2,zero
  19b188:	dfc00517 	ldw	ra,20(sp)
  19b18c:	dc400417 	ldw	r17,16(sp)
  19b190:	dc000317 	ldw	r16,12(sp)
  19b194:	dec00604 	addi	sp,sp,24
  19b198:	f800283a 	ret
  19b19c:	00800034 	movhi	r2,0
  19b1a0:	10800004 	addi	r2,r2,0
  19b1a4:	10002526 	beq	r2,zero,19b23c <__register_exitproc+0x10c>
  19b1a8:	01006404 	movi	r4,400
  19b1ac:	d9400015 	stw	r5,0(sp)
  19b1b0:	d9800115 	stw	r6,4(sp)
  19b1b4:	d9c00215 	stw	r7,8(sp)
  19b1b8:	00000000 	call	0 <__alt_mem_sram-0x180000>
  19b1bc:	d9400017 	ldw	r5,0(sp)
  19b1c0:	d9800117 	ldw	r6,4(sp)
  19b1c4:	d9c00217 	ldw	r7,8(sp)
  19b1c8:	10001c26 	beq	r2,zero,19b23c <__register_exitproc+0x10c>
  19b1cc:	80c05217 	ldw	r3,328(r16)
  19b1d0:	10000115 	stw	zero,4(r2)
  19b1d4:	02400044 	movi	r9,1
  19b1d8:	10c00015 	stw	r3,0(r2)
  19b1dc:	80805215 	stw	r2,328(r16)
  19b1e0:	10006215 	stw	zero,392(r2)
  19b1e4:	10006315 	stw	zero,396(r2)
  19b1e8:	0007883a 	mov	r3,zero
  19b1ec:	883fdf26 	beq	r17,zero,19b16c <__alt_data_end+0xfff9b16c>
  19b1f0:	18d1883a 	add	r8,r3,r3
  19b1f4:	4211883a 	add	r8,r8,r8
  19b1f8:	1211883a 	add	r8,r2,r8
  19b1fc:	41802215 	stw	r6,136(r8)
  19b200:	01000044 	movi	r4,1
  19b204:	11806217 	ldw	r6,392(r2)
  19b208:	20c8983a 	sll	r4,r4,r3
  19b20c:	310cb03a 	or	r6,r6,r4
  19b210:	11806215 	stw	r6,392(r2)
  19b214:	41c04215 	stw	r7,264(r8)
  19b218:	01800084 	movi	r6,2
  19b21c:	89bfd31e 	bne	r17,r6,19b16c <__alt_data_end+0xfff9b16c>
  19b220:	11806317 	ldw	r6,396(r2)
  19b224:	3108b03a 	or	r4,r6,r4
  19b228:	11006315 	stw	r4,396(r2)
  19b22c:	003fcf06 	br	19b16c <__alt_data_end+0xfff9b16c>
  19b230:	80805304 	addi	r2,r16,332
  19b234:	80805215 	stw	r2,328(r16)
  19b238:	003fc706 	br	19b158 <__alt_data_end+0xfff9b158>
  19b23c:	00bfffc4 	movi	r2,-1
  19b240:	003fd106 	br	19b188 <__alt_data_end+0xfff9b188>

0019b244 <__call_exitprocs>:
  19b244:	008006b4 	movhi	r2,26
  19b248:	10846604 	addi	r2,r2,4504
  19b24c:	10800017 	ldw	r2,0(r2)
  19b250:	defff404 	addi	sp,sp,-48
  19b254:	dd800815 	stw	r22,32(sp)
  19b258:	d8800015 	stw	r2,0(sp)
  19b25c:	10805204 	addi	r2,r2,328
  19b260:	dd000615 	stw	r20,24(sp)
  19b264:	dc800415 	stw	r18,16(sp)
  19b268:	dfc00b15 	stw	ra,44(sp)
  19b26c:	df000a15 	stw	fp,40(sp)
  19b270:	ddc00915 	stw	r23,36(sp)
  19b274:	dd400715 	stw	r21,28(sp)
  19b278:	dcc00515 	stw	r19,20(sp)
  19b27c:	dc400315 	stw	r17,12(sp)
  19b280:	dc000215 	stw	r16,8(sp)
  19b284:	2025883a 	mov	r18,r4
  19b288:	2829883a 	mov	r20,r5
  19b28c:	d8800115 	stw	r2,4(sp)
  19b290:	05bfffc4 	movi	r22,-1
  19b294:	d8800017 	ldw	r2,0(sp)
  19b298:	14c05217 	ldw	r19,328(r2)
  19b29c:	98001d26 	beq	r19,zero,19b314 <__call_exitprocs+0xd0>
  19b2a0:	dd400117 	ldw	r21,4(sp)
  19b2a4:	98800117 	ldw	r2,4(r19)
  19b2a8:	173fffc4 	addi	fp,r2,-1
  19b2ac:	e0000d16 	blt	fp,zero,19b2e4 <__call_exitprocs+0xa0>
  19b2b0:	14000044 	addi	r16,r2,1
  19b2b4:	8421883a 	add	r16,r16,r16
  19b2b8:	8421883a 	add	r16,r16,r16
  19b2bc:	84402004 	addi	r17,r16,128
  19b2c0:	9c63883a 	add	r17,r19,r17
  19b2c4:	9c21883a 	add	r16,r19,r16
  19b2c8:	a0001e26 	beq	r20,zero,19b344 <__call_exitprocs+0x100>
  19b2cc:	80804017 	ldw	r2,256(r16)
  19b2d0:	15001c26 	beq	r2,r20,19b344 <__call_exitprocs+0x100>
  19b2d4:	e73fffc4 	addi	fp,fp,-1
  19b2d8:	843fff04 	addi	r16,r16,-4
  19b2dc:	8c7fff04 	addi	r17,r17,-4
  19b2e0:	e5bff91e 	bne	fp,r22,19b2c8 <__alt_data_end+0xfff9b2c8>
  19b2e4:	00800034 	movhi	r2,0
  19b2e8:	10800004 	addi	r2,r2,0
  19b2ec:	10000926 	beq	r2,zero,19b314 <__call_exitprocs+0xd0>
  19b2f0:	98800117 	ldw	r2,4(r19)
  19b2f4:	1000311e 	bne	r2,zero,19b3bc <__call_exitprocs+0x178>
  19b2f8:	98800017 	ldw	r2,0(r19)
  19b2fc:	10003426 	beq	r2,zero,19b3d0 <__call_exitprocs+0x18c>
  19b300:	9809883a 	mov	r4,r19
  19b304:	a8800015 	stw	r2,0(r21)
  19b308:	00000000 	call	0 <__alt_mem_sram-0x180000>
  19b30c:	acc00017 	ldw	r19,0(r21)
  19b310:	983fe41e 	bne	r19,zero,19b2a4 <__alt_data_end+0xfff9b2a4>
  19b314:	dfc00b17 	ldw	ra,44(sp)
  19b318:	df000a17 	ldw	fp,40(sp)
  19b31c:	ddc00917 	ldw	r23,36(sp)
  19b320:	dd800817 	ldw	r22,32(sp)
  19b324:	dd400717 	ldw	r21,28(sp)
  19b328:	dd000617 	ldw	r20,24(sp)
  19b32c:	dcc00517 	ldw	r19,20(sp)
  19b330:	dc800417 	ldw	r18,16(sp)
  19b334:	dc400317 	ldw	r17,12(sp)
  19b338:	dc000217 	ldw	r16,8(sp)
  19b33c:	dec00c04 	addi	sp,sp,48
  19b340:	f800283a 	ret
  19b344:	98800117 	ldw	r2,4(r19)
  19b348:	80c00017 	ldw	r3,0(r16)
  19b34c:	10bfffc4 	addi	r2,r2,-1
  19b350:	17001526 	beq	r2,fp,19b3a8 <__call_exitprocs+0x164>
  19b354:	80000015 	stw	zero,0(r16)
  19b358:	183fde26 	beq	r3,zero,19b2d4 <__alt_data_end+0xfff9b2d4>
  19b35c:	00800044 	movi	r2,1
  19b360:	1708983a 	sll	r4,r2,fp
  19b364:	98806217 	ldw	r2,392(r19)
  19b368:	9dc00117 	ldw	r23,4(r19)
  19b36c:	2084703a 	and	r2,r4,r2
  19b370:	1000061e 	bne	r2,zero,19b38c <__call_exitprocs+0x148>
  19b374:	183ee83a 	callr	r3
  19b378:	98800117 	ldw	r2,4(r19)
  19b37c:	15ffc51e 	bne	r2,r23,19b294 <__alt_data_end+0xfff9b294>
  19b380:	a8800017 	ldw	r2,0(r21)
  19b384:	14ffd326 	beq	r2,r19,19b2d4 <__alt_data_end+0xfff9b2d4>
  19b388:	003fc206 	br	19b294 <__alt_data_end+0xfff9b294>
  19b38c:	98806317 	ldw	r2,396(r19)
  19b390:	2084703a 	and	r2,r4,r2
  19b394:	1000061e 	bne	r2,zero,19b3b0 <__call_exitprocs+0x16c>
  19b398:	89400017 	ldw	r5,0(r17)
  19b39c:	9009883a 	mov	r4,r18
  19b3a0:	183ee83a 	callr	r3
  19b3a4:	003ff406 	br	19b378 <__alt_data_end+0xfff9b378>
  19b3a8:	9f000115 	stw	fp,4(r19)
  19b3ac:	003fea06 	br	19b358 <__alt_data_end+0xfff9b358>
  19b3b0:	89000017 	ldw	r4,0(r17)
  19b3b4:	183ee83a 	callr	r3
  19b3b8:	003fef06 	br	19b378 <__alt_data_end+0xfff9b378>
  19b3bc:	98800017 	ldw	r2,0(r19)
  19b3c0:	982b883a 	mov	r21,r19
  19b3c4:	1027883a 	mov	r19,r2
  19b3c8:	983fb61e 	bne	r19,zero,19b2a4 <__alt_data_end+0xfff9b2a4>
  19b3cc:	003fd106 	br	19b314 <__alt_data_end+0xfff9b314>
  19b3d0:	0005883a 	mov	r2,zero
  19b3d4:	003ffa06 	br	19b3c0 <__alt_data_end+0xfff9b3c0>

0019b3d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  19b3d8:	defffc04 	addi	sp,sp,-16
  19b3dc:	dfc00315 	stw	ra,12(sp)
  19b3e0:	df000215 	stw	fp,8(sp)
  19b3e4:	df000204 	addi	fp,sp,8
  19b3e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  19b3ec:	019ad640 	call	19ad64 <port_halt>
  19b3f0:	e0bfff17 	ldw	r2,-4(fp)
  19b3f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  19b3f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  19b3fc:	10000226 	beq	r2,zero,19b408 <_exit+0x30>
    ALT_SIM_FAIL();
  19b400:	002af070 	cmpltui	zero,zero,43969
  19b404:	00000106 	br	19b40c <_exit+0x34>
  } else {
    ALT_SIM_PASS();
  19b408:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  19b40c:	003fff06 	br	19b40c <__alt_data_end+0xfff9b40c>
