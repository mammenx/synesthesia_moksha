
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module syn_moksha(

  //////////// CLOCK //////////
  CLOCK_125_p,
  CLOCK_50_B5B,
  CLOCK_50_B6A,
  CLOCK_50_B7A,
  CLOCK_50_B8A,

  //////////// LED //////////
  LEDG,
  LEDR,

  //////////// KEY //////////
  CPU_RESET_n,
  KEY,

  //////////// SW //////////
  SW,


  //////////// HDMI-TX //////////
  HDMI_TX_CLK,
  HDMI_TX_D,
  HDMI_TX_DE,
  HDMI_TX_HS,
  HDMI_TX_INT,
  HDMI_TX_VS,

  //////////// Audio //////////
  AUD_ADCDAT,
  AUD_ADCLRCK,
  AUD_BCLK,
  AUD_DACDAT,
  AUD_DACLRCK,
  AUD_XCK,

  //////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
  I2C_SCL,
  I2C_SDA,

  //////////// Uart to USB //////////
  UART_RX,
  UART_TX,

  //////////// SRAM //////////
  SRAM_A,
  SRAM_CE_n,
  SRAM_D,
  SRAM_LB_n,
  SRAM_OE_n,
  SRAM_UB_n,
  SRAM_WE_n,

  //////////// LPDDR2 //////////
  DDR2LP_CA,
  DDR2LP_CK_n,
  DDR2LP_CK_p,
  DDR2LP_CKE,
  DDR2LP_CS_n,
  DDR2LP_DM,
  DDR2LP_DQ,
  DDR2LP_DQS_n,
  DDR2LP_DQS_p,
  DDR2LP_OCT_RZQ

);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input             CLOCK_125_p;
input             CLOCK_50_B5B;
input             CLOCK_50_B6A;
input             CLOCK_50_B7A;
input             CLOCK_50_B8A;

//////////// LED //////////
output     [7:0]  LEDG;
output     [9:0]  LEDR;

//////////// KEY //////////
input             CPU_RESET_n;
input      [3:0]  KEY;

//////////// SW //////////
input      [9:0]  SW;


//////////// HDMI-TX //////////
output            HDMI_TX_CLK;
output    [23:0]  HDMI_TX_D;
output            HDMI_TX_DE;
output            HDMI_TX_HS;
input             HDMI_TX_INT;
output            HDMI_TX_VS;

//////////// Audio //////////
input             AUD_ADCDAT/*synthesis keep*/;
output            AUD_ADCLRCK/*synthesis keep*/;
output            AUD_BCLK/*synthesis keep*/;
output            AUD_DACDAT/*synthesis keep*/;
output            AUD_DACLRCK/*synthesis keep*/;
output            AUD_XCK/*synthesis keep*/;

//////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
output            I2C_SCL /*synthesis keep*/;
inout             I2C_SDA /*synthesis keep*/;

//////////// Uart to USB //////////
input             UART_RX;
output            UART_TX;

//////////// SRAM //////////
output    [17:0]  SRAM_A;
output            SRAM_CE_n;
inout     [15:0]  SRAM_D;
output            SRAM_LB_n;
output            SRAM_OE_n;
output            SRAM_UB_n;
output            SRAM_WE_n;

//////////// LPDDR2 //////////
output     [9:0]  DDR2LP_CA;
output            DDR2LP_CK_n;
output            DDR2LP_CK_p;
output     [1:0]  DDR2LP_CKE;
output     [1:0]  DDR2LP_CS_n;
output     [3:0]  DDR2LP_DM;
inout     [31:0]  DDR2LP_DQ;
inout      [3:0]  DDR2LP_DQS_n;
inout      [3:0]  DDR2LP_DQS_p;
input             DDR2LP_OCT_RZQ;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire              sys_clk_100/*synthesis keep*/;
wire              sys_clk_12;
wire              sys_clk_75;
wire              sys_rst_n;

wire              cortex_rst_n  /*synthesis keep*/;

wire              sram_addr_dummy;
wire  [1:0]       cortex_lb_addr_dummy;

wire              cortex_lb_wr_en/*synthesis keep*/;
wire              cortex_lb_rd_en/*synthesis keep*/;
wire  [15:0]      cortex_lb_addr/*synthesis keep*/;
wire  [31:0]      cortex_lb_wr_data/*synthesis keep*/;
wire              cortex_lb_wr_valid/*synthesis keep*/;
wire              cortex_lb_rd_valid/*synthesis keep*/;
wire  [31:0]      cortex_lb_rd_data/*synthesis keep*/;

wire              lpddr2_cntrlr_sw_rst_n;
wire              afi_half_clk/*synthesis keep*/;
wire              afi_reset_n;

wire              lpddr2_cntrlr_ready;
wire              lpddr2_cntrlr_wren;
wire              lpddr2_cntrlr_rden;
wire [26:0]       lpddr2_cntrlr_addr;
wire [31:0]       lpddr2_cntrlr_wdata;
wire              lpddr2_cntrlr_rd_valid;
wire [31:0]       lpddr2_cntrlr_rdata;
wire              lpddr2_cntrlr_begin_burst_xfr;
wire [3:0]        lpddr2_cntrlr_byte_en;
wire [2:0]        lpddr2_cntrlr_burst_cnt;

wire              lpddr2_local_init_done;
wire              lpddr2_local_cal_success;
wire              lpddr2_local_cal_fail;

//=======================================================
//  Structural coding
//=======================================================


  /*  Sys PLL */
  sys_pll sys_pll_inst  (
    /*  input  wire */  .refclk(CLOCK_50_B6A),
    /*  input  wire */  .rst(~KEY[0]),
    /*  output wire */  .outclk_0(sys_clk_100),
    /*  output wire */  .outclk_1(sys_clk_12),
    /*  output wire */  .outclk_2(sys_clk_75),
    /*  output wire */  .locked(sys_rst_n)
  );


  /*  Limbus  */
  limbus limbus_inst  (
    /*  input  wire         */  .clk_100_clk(sys_clk_100),                                                  //                          clk_100.clk
    /*  input  wire         */  .reset_100_reset_n(sys_rst_n),                                            //                        reset_100.reset_n

    /*  output wire [0:0]   */  .tristate_conduit_bridge_sram_out_sram_tcm_chipselect_n_out(SRAM_CE_n),
    /*  output wire [1:0]   */  .tristate_conduit_bridge_sram_out_sram_tcm_byteenable_n_out({SRAM_UB_n,SRAM_LB_n}),
    /*  output wire [18:0]  */  .tristate_conduit_bridge_sram_out_sram_tcm_address_out({SRAM_A,sram_addr_dummy}),
    /*  output wire [0:0]   */  .tristate_conduit_bridge_sram_out_sram_tcm_write_n_out(SRAM_WE_n),
    /*  inout  wire [15:0]  */  .tristate_conduit_bridge_sram_out_sram_tcm_data_out(SRAM_D),
    /*  output wire [0:0]   */  .tristate_conduit_bridge_sram_out_sram_tcm_outputenable_n_out(SRAM_OE_n),

    /*  output wire [17:0]  */  .cortex_s_address({cortex_lb_addr,cortex_lb_addr_dummy}),
    /*  output wire         */  .cortex_s_read(cortex_lb_rd_en),
    /*  input  wire [31:0]  */  .cortex_s_readdata(cortex_lb_rd_data),
    /*  output wire         */  .cortex_s_write(cortex_lb_wr_en),
    /*  output wire [31:0]  */  .cortex_s_writedata(cortex_lb_wr_data),
    /*  input  wire         */  .cortex_s_readdatavalid(cortex_lb_rd_valid),

    /*  output wire         */  .cortex_reset_reset_n(cortex_rst_n),

    /*  input  wire         */  .cortex_irq_irq(0),

    /*  input  wire         */  .uart_rxd(UART_RX),
    /*  output wire         */  .uart_txd(UART_TX)

  );

  /*  LPDDR2 Controller */
  lpddr2_cntrlr       lpddr2_cntrlr_inst
  (
    /*  input  wire         */  .pll_ref_clk                  (CLOCK_50_B5B),

    /*  input  wire         */  .global_reset_n               (KEY[0]),
    /*  input  wire         */  .soft_reset_n                 (lpddr2_cntrlr_sw_rst_n),

    /*  output wire         */  .afi_clk                      (),
    /*  output wire         */  .afi_half_clk                 (afi_half_clk),
    /*  output wire         */  .afi_reset_n                  (afi_reset_n),
    /*  output wire         */  .afi_reset_export_n           (),

    /*  output wire [9:0]   */  .mem_ca                       (DDR2LP_CA),
    /*  output wire [0:0]   */  .mem_ck                       (DDR2LP_CK_p),
    /*  output wire [0:0]   */  .mem_ck_n                     (DDR2LP_CK_n),
    /*  output wire [0:0]   */  .mem_cke                      (DDR2LP_CKE[0]),
    /*  output wire [0:0]   */  .mem_cs_n                     (DDR2LP_CS_n[0]),
    /*  output wire [3:0]   */  .mem_dm                       (DDR2LP_DM),
    /*  inout  wire [31:0]  */  .mem_dq                       (DDR2LP_DQ),
    /*  inout  wire [3:0]   */  .mem_dqs                      (DDR2LP_DQS_p),
    /*  inout  wire [3:0]   */  .mem_dqs_n                    (DDR2LP_DQS_n),

    /*  output wire         */  .avl_ready_0                  (lpddr2_cntrlr_ready),
    /*  input  wire         */  .avl_burstbegin_0             (lpddr2_cntrlr_begin_burst_xfr),
    /*  input  wire [26:0]  */  .avl_addr_0                   (lpddr2_cntrlr_addr),
    /*  output wire         */  .avl_rdata_valid_0            (lpddr2_cntrlr_rd_valid),
    /*  output wire [31:0]  */  .avl_rdata_0                  (lpddr2_cntrlr_rdata),
    /*  input  wire [31:0]  */  .avl_wdata_0                  (lpddr2_cntrlr_wdata),
    /*  input  wire [3:0]   */  .avl_be_0                     (lpddr2_cntrlr_byte_en),
    /*  input  wire         */  .avl_read_req_0               (lpddr2_cntrlr_rden),
    /*  input  wire         */  .avl_write_req_0              (lpddr2_cntrlr_wren),
    /*  input  wire [2:0]   */  .avl_size_0                   (lpddr2_cntrlr_burst_cnt),

    /*  input  wire         */  .mp_cmd_clk_0_clk             (afi_half_clk),
    /*  input  wire         */  .mp_cmd_reset_n_0_reset_n     (lpddr2_cntrlr_sw_rst_n),
    /*  input  wire         */  .mp_rfifo_clk_0_clk           (afi_half_clk),
    /*  input  wire         */  .mp_rfifo_reset_n_0_reset_n   (lpddr2_cntrlr_sw_rst_n),
    /*  input  wire         */  .mp_wfifo_clk_0_clk           (afi_half_clk),
    /*  input  wire         */  .mp_wfifo_reset_n_0_reset_n   (lpddr2_cntrlr_sw_rst_n),

    /*  output wire         */  .local_init_done              (lpddr2_local_init_done),
    /*  output wire         */  .local_cal_success            (lpddr2_local_cal_success),
    /*  output wire         */  .local_cal_fail               (lpddr2_local_cal_fail),

    /*  input  wire         */  .oct_rzqin                    (DDR2LP_OCT_RZQ),

    /*  output wire         */  .pll_mem_clk                  (),
    /*  output wire         */  .pll_write_clk                (),
    /*  output wire         */  .pll_locked                   (),
    /*  output wire         */  .pll_write_clk_pre_phy_clk    (),
    /*  output wire         */  .pll_addr_cmd_clk             (),
    /*  output wire         */  .pll_avl_clk                  (),
    /*  output wire         */  .pll_config_clk               (),
    /*  output wire         */  .pll_mem_phy_clk              (),
    /*  output wire         */  .afi_phy_clk                  (),
    /*  output wire         */  .pll_avl_phy_clk              ()
  );

  assign  lpddr2_cntrlr_begin_burst_xfr = lpddr2_cntrlr_wren  | lpddr2_cntrlr_rden;
  assign  lpddr2_cntrlr_byte_en         = 4'b1111;
  assign  lpddr2_cntrlr_burst_cnt       = 3'd1;


  /*  Cortex  */
  cortex #(
    //----------------- Parameters  -----------------------
    .LB_DATA_W         (32),
    .LB_ADDR_W         (16),
    .LB_ADDR_BLK_W     (4),
    .NUM_AUD_SAMPLES   (128),
    .SYS_MEM_DATA_W    (32),
    .SYS_MEM_ADDR_W    (27),
    .DEFAULT_DATA_VAL  ('hdeadbabe)

  ) cortex_inst (

    //--------------------- Ports -------------------------
      /*  input                         */  .clk(sys_clk_100),
      /*  input                         */  .rst_n(sys_rst_n),

      /*  input                         */  .clk_hdmi(HDMI_TX_CLK),
      /*  input                         */  .hdmi_rst_n(sys_rst_n),

      /*  input                         */  .cntrlr_clk(afi_half_clk),
      /*  input                         */  .cntrlr_rst_n(afi_reset_n),
      /*  output                        */  .cntrlr_sw_rst_n(lpddr2_cntrlr_sw_rst_n),


      /*  input                         */  .lb_wr_en(cortex_lb_wr_en),
      /*  input                         */  .lb_rd_en(cortex_lb_rd_en),
      /*  input   [LB_ADDR_W-1:0]       */  .lb_addr(cortex_lb_addr),
      /*  input   [LB_DATA_W-1:0]       */  .lb_wr_data(cortex_lb_wr_data),
      /*  output                        */  .lb_wr_valid(cortex_lb_wr_valid),
      /*  output                        */  .lb_rd_valid(cortex_lb_rd_valid),
      /*  output  [LB_DATA_W-1:0]       */  .lb_rd_data(cortex_lb_rd_data),

      /*  output                        */  .scl(I2C_SCL),
      /*  inout                         */  .sda(I2C_SDA),

      /*  input                         */  .sys_mem_cntrlr_wait(~lpddr2_cntrlr_ready),
      /*  output                        */  .sys_mem_cntrlr_wren(lpddr2_cntrlr_wren),
      /*  output                        */  .sys_mem_cntrlr_rden(lpddr2_cntrlr_rden),
      /*  output  [SYS_MEM_ADDR_W-1:0]  */  .sys_mem_cntrlr_addr(lpddr2_cntrlr_addr),
      /*  output  [SYS_MEM_DATA_W-1:0]  */  .sys_mem_cntrlr_wdata(lpddr2_cntrlr_wdata),
      /*  input                         */  .sys_mem_cntrlr_rd_valid(lpddr2_cntrlr_rd_valid),
      /*  input   [SYS_MEM_DATA_W-1:0]  */  .sys_mem_cntrlr_rdata(lpddr2_cntrlr_rdata),

      /*  input                         */  .AUD_ADCDAT(AUD_ADCDAT),
      /*  output                        */  .AUD_ADCLRCK(AUD_ADCLRCK),
      /*  output                        */  .AUD_BCLK(AUD_BCLK),
      /*  output                        */  .AUD_DACDAT(AUD_DACDAT),
      /*  output                        */  .AUD_DACLRCK(AUD_DACLRCK),

      /*  output  [23:0]                */  .HDMI_TX_D(HDMI_TX_D),
      /*  output                        */  .HDMI_TX_DE(HDMI_TX_DE),
      /*  output                        */  .HDMI_TX_HS(HDMI_TX_HS),
      /*  input                         */  .HDMI_TX_INT(HDMI_TX_INT),
      /*  output                        */  .HDMI_TX_VS(HDMI_TX_VS)

  );

  assign  AUD_XCK = sys_clk_12;

  assign  HDMI_TX_CLK = sys_clk_75;


  /*  LED Assignments */
  assign  LEDG[0]   = ~sys_rst_n;
  assign  LEDG[1]   = ~afi_reset_n;
  assign  LEDG[2]   = ~cortex_rst_n;
  assign  LEDG[3]   = ~lpddr2_cntrlr_sw_rst_n;
  assign  LEDG[4]   = lpddr2_local_init_done;
  assign  LEDG[5]   = lpddr2_local_cal_success;
  assign  LEDG[6]   = lpddr2_local_cal_fail;
  assign  LEDG[7:7] = 0;

  assign  LEDR[9:0] = 0;

endmodule
